{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "addNewProfile",
      "inputs": [
        {
          "name": "profile",
          "type": "tuple",
          "internalType": "struct IProfile.CandidateProfile",
          "components": [
            {
              "name": "id",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "consensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "admin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "treasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "__reservedGovernor",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "pubkey",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "pubkeyLastChange",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "oldPubkey",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "arePublicKeysRegistered",
      "inputs": [
        {
          "name": "listOfPublicKey",
          "type": "bytes[][2]",
          "internalType": "bytes[][2]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "changePubkey",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execApplyValidatorCandidate",
      "inputs": [
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "treasury",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getConsensus2Id",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getId2Profile",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IProfile.CandidateProfile",
          "components": [
            {
              "name": "id",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "consensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "admin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "treasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "__reservedGovernor",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "pubkey",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "pubkeyLastChange",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "oldPubkey",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyConsensus2Id",
      "inputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyId2Consensus",
      "inputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "validatorContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [
        {
          "name": "stakingContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "trustedOrgContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "cooldown",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "precompileVerifyBLSPublicKeyAddress",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "requestChangeAdminAddress",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newAdminAddr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestChangeConsensusAddr",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newConsensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestChangeTreasuryAddr",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "outputs": [],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setPubkeyChangeCooldown",
      "inputs": [
        {
          "name": "cooldown",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "tryGetConsensus2Id",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "found",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "ConsensusAddressOfNonGovernorChanged",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfileAdded",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfileAddressChanged",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "addressType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum RoleAccess"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfileMigrated",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "admin",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "treasury",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PubkeyChanged",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PubkeyVerified",
      "inputs": [
        {
          "name": "pubkey",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrCallPrecompiled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrDuplicatedInfo",
      "inputs": [
        {
          "name": "infoType",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrDuplicatedPubkey",
      "inputs": [
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrExistentProfile",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrIdAndConsensusDiffer",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidProofOfPossession",
      "inputs": [
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrLookUpIdFailed",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNonExistentProfile",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrPubkeyChangeCooldownNotEnded",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroAddress",
      "inputs": [
        {
          "name": "infoType",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroPubkey",
      "inputs": []
    }
  ],
  "address": "0x7Cf439eeE8e5b8Fb4Ea9ab04D6CEe2999aFFCfaD",
  "args": "0x",
  "ast": {
    "absolutePath": "contracts/ronin/profile/Profile.sol",
    "id": 28621,
    "exportedSymbols": {
      "Address": [
        151783
      ],
      "ContractType": [
        40311
      ],
      "EnumFlags": [
        11332
      ],
      "ErrUnauthorized": [
        40160
      ],
      "IBaseStaking": [
        9451
      ],
      "ICandidateManager": [
        10182
      ],
      "ICandidateManagerCallback": [
        10263
      ],
      "ICandidateStaking": [
        9649
      ],
      "ICoinbaseExecution": [
        10431
      ],
      "ICommonInfo": [
        10650
      ],
      "IDelegatorStaking": [
        9757
      ],
      "IEmergencyExit": [
        10524
      ],
      "IJailingInfo": [
        10742
      ],
      "IProfile": [
        7584
      ],
      "IQuorum": [
        7634
      ],
      "IRewardPool": [
        9922
      ],
      "IRoninTrustedOrganization": [
        8127
      ],
      "IRoninValidatorSet": [
        10545
      ],
      "ISlashingExecution": [
        10595
      ],
      "IStaking": [
        9964
      ],
      "IStakingCallback": [
        9979
      ],
      "ITimingInfo": [
        10801
      ],
      "IValidatorInfoV2": [
        10897
      ],
      "Initializable": [
        150318
      ],
      "PCUVerifyBLSPublicKey": [
        20648
      ],
      "PeriodWrapperConsumer": [
        8917
      ],
      "Profile": [
        28620
      ],
      "ProfileHandler": [
        28819
      ],
      "ProfileStorage": [
        29176
      ],
      "ProfileXComponents": [
        29316
      ],
      "RoleAccess": [
        40574
      ],
      "TConsensus": [
        40030
      ],
      "TConsensusEq": [
        40082
      ],
      "TPoolId": [
        40028
      ],
      "TPoolIdEq": [
        40060
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:9291:138",
    "nodes": [
      {
        "id": 27945,
        "nodeType": "PragmaDirective",
        "src": "32:23:138",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 27946,
        "nodeType": "ImportDirective",
        "src": "57:63:138",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28621,
        "sourceUnit": 150319,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27947,
        "nodeType": "ImportDirective",
        "src": "121:58:138",
        "nodes": [],
        "absolutePath": "contracts/interfaces/validator/ICandidateManager.sol",
        "file": "../../interfaces/validator/ICandidateManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28621,
        "sourceUnit": 10183,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27948,
        "nodeType": "ImportDirective",
        "src": "180:59:138",
        "nodes": [],
        "absolutePath": "contracts/interfaces/validator/IRoninValidatorSet.sol",
        "file": "../../interfaces/validator/IRoninValidatorSet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28621,
        "sourceUnit": 10546,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27949,
        "nodeType": "ImportDirective",
        "src": "240:56:138",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IRoninTrustedOrganization.sol",
        "file": "../../interfaces/IRoninTrustedOrganization.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28621,
        "sourceUnit": 8128,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27950,
        "nodeType": "ImportDirective",
        "src": "297:47:138",
        "nodes": [],
        "absolutePath": "contracts/interfaces/staking/IStaking.sol",
        "file": "../../interfaces/staking/IStaking.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28621,
        "sourceUnit": 9965,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27951,
        "nodeType": "ImportDirective",
        "src": "345:39:138",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IProfile.sol",
        "file": "../../interfaces/IProfile.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28621,
        "sourceUnit": 7585,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27952,
        "nodeType": "ImportDirective",
        "src": "385:34:138",
        "nodes": [],
        "absolutePath": "contracts/ronin/profile/ProfileXComponents.sol",
        "file": "./ProfileXComponents.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28621,
        "sourceUnit": 29317,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27955,
        "nodeType": "ImportDirective",
        "src": "420:75:138",
        "nodes": [],
        "absolutePath": "contracts/utils/CommonErrors.sol",
        "file": "../../utils/CommonErrors.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28621,
        "sourceUnit": 40293,
        "symbolAliases": [
          {
            "foreign": {
              "id": 27953,
              "name": "ErrUnauthorized",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 40160,
              "src": "429:15:138",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 27954,
              "name": "RoleAccess",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 40574,
              "src": "446:10:138",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 27957,
        "nodeType": "ImportDirective",
        "src": "496:60:138",
        "nodes": [],
        "absolutePath": "contracts/utils/ContractType.sol",
        "file": "../../utils/ContractType.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28621,
        "sourceUnit": 40312,
        "symbolAliases": [
          {
            "foreign": {
              "id": 27956,
              "name": "ContractType",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 40311,
              "src": "505:12:138",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 28620,
        "nodeType": "ContractDefinition",
        "src": "558:8764:138",
        "nodes": [
          {
            "id": 27970,
            "nodeType": "FunctionDefinition",
            "src": "626:47:138",
            "nodes": [],
            "body": {
              "id": 27969,
              "nodeType": "Block",
              "src": "640:33:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 27966,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 150317,
                      "src": "646:20:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 27967,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "646:22:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27968,
                  "nodeType": "ExpressionStatement",
                  "src": "646:22:138"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 27964,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "637:2:138"
            },
            "returnParameters": {
              "id": 27965,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "640:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 27984,
            "nodeType": "FunctionDefinition",
            "src": "677:134:138",
            "nodes": [],
            "body": {
              "id": 27983,
              "nodeType": "Block",
              "src": "745:66:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 27978,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40311,
                          "src": "764:12:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 27979,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "777:9:138",
                        "memberName": "VALIDATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 40303,
                        "src": "764:22:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 27980,
                        "name": "validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27972,
                        "src": "788:17:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 27977,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "751:12:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$40311_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 27981,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "751:55:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27982,
                  "nodeType": "ExpressionStatement",
                  "src": "751:55:138"
                }
              ]
            },
            "functionSelector": "c4d66de8",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 27975,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 27974,
                  "name": "initializer",
                  "nameLocations": [
                    "733:11:138"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150238,
                  "src": "733:11:138"
                },
                "nodeType": "ModifierInvocation",
                "src": "733:11:138"
              }
            ],
            "name": "initialize",
            "nameLocation": "686:10:138",
            "parameters": {
              "id": 27973,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27972,
                  "mutability": "mutable",
                  "name": "validatorContract",
                  "nameLocation": "705:17:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 27984,
                  "src": "697:25:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 27971,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "697:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "696:27:138"
            },
            "returnParameters": {
              "id": 27976,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "745:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28056,
            "nodeType": "FunctionDefinition",
            "src": "815:622:138",
            "nodes": [],
            "body": {
              "id": 28055,
              "nodeType": "Block",
              "src": "916:521:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 27995,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40311,
                          "src": "935:12:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 27996,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "948:7:138",
                        "memberName": "STAKING",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 40304,
                        "src": "935:20:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 27997,
                        "name": "stakingContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27986,
                        "src": "957:15:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 27994,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "922:12:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$40311_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 27998,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "922:51:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27999,
                  "nodeType": "ExpressionStatement",
                  "src": "922:51:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 28001,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40311,
                          "src": "992:12:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 28002,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1005:26:138",
                        "memberName": "RONIN_TRUSTED_ORGANIZATION",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 40305,
                        "src": "992:39:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 28003,
                        "name": "trustedOrgContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27988,
                        "src": "1033:18:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28000,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "979:12:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$40311_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 28004,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "979:73:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28005,
                  "nodeType": "ExpressionStatement",
                  "src": "979:73:138"
                },
                {
                  "assignments": [
                    28010
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28010,
                      "mutability": "mutable",
                      "name": "validatorCandidates",
                      "nameLocation": "1079:19:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28055,
                      "src": "1059:39:138",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr",
                        "typeString": "TConsensus[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 28008,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 28007,
                            "name": "TConsensus",
                            "nameLocations": [
                              "1059:10:138"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 40030,
                            "src": "1059:10:138"
                          },
                          "referencedDeclaration": 40030,
                          "src": "1059:10:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                            "typeString": "TConsensus"
                          }
                        },
                        "id": 28009,
                        "nodeType": "ArrayTypeName",
                        "src": "1059:12:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_storage_ptr",
                          "typeString": "TConsensus[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28019,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 28013,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 40311,
                                  "src": "1132:12:138",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 28014,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "1145:9:138",
                                "memberName": "VALIDATOR",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 40303,
                                "src": "1132:22:138",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$40311",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$40311",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 28012,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "1120:11:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$40311_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 28015,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1120:35:138",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 28011,
                          "name": "IRoninValidatorSet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10545,
                          "src": "1101:18:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$10545_$",
                            "typeString": "type(contract IRoninValidatorSet)"
                          }
                        },
                        "id": 28016,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1101:55:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 28017,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1164:22:138",
                      "memberName": "getValidatorCandidates",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10125,
                      "src": "1101:85:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr_$",
                        "typeString": "function () view external returns (TConsensus[] memory)"
                      }
                    },
                    "id": 28018,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1101:87:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr",
                      "typeString": "TConsensus[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1059:129:138"
                },
                {
                  "body": {
                    "id": 28050,
                    "nodeType": "Block",
                    "src": "1248:146:138",
                    "statements": [
                      {
                        "assignments": [
                          28032
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 28032,
                            "mutability": "mutable",
                            "name": "consensus",
                            "nameLocation": "1267:9:138",
                            "nodeType": "VariableDeclaration",
                            "scope": 28050,
                            "src": "1256:20:138",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                              "typeString": "TConsensus"
                            },
                            "typeName": {
                              "id": 28031,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 28030,
                                "name": "TConsensus",
                                "nameLocations": [
                                  "1256:10:138"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 40030,
                                "src": "1256:10:138"
                              },
                              "referencedDeclaration": 40030,
                              "src": "1256:10:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                "typeString": "TConsensus"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 28036,
                        "initialValue": {
                          "baseExpression": {
                            "id": 28033,
                            "name": "validatorCandidates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28010,
                            "src": "1279:19:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr",
                              "typeString": "TConsensus[] memory"
                            }
                          },
                          "id": 28035,
                          "indexExpression": {
                            "id": 28034,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28021,
                            "src": "1299:1:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1279:22:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                            "typeString": "TConsensus"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1256:45:138"
                      },
                      {
                        "assignments": [
                          28038
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 28038,
                            "mutability": "mutable",
                            "name": "id",
                            "nameLocation": "1317:2:138",
                            "nodeType": "VariableDeclaration",
                            "scope": 28050,
                            "src": "1309:10:138",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 28037,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1309:7:138",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 28043,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 28041,
                              "name": "consensus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 28032,
                              "src": "1340:9:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                "typeString": "TConsensus"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                "typeString": "TConsensus"
                              }
                            ],
                            "expression": {
                              "id": 28039,
                              "name": "TConsensus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40030,
                              "src": "1322:10:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_userDefinedValueType$_TConsensus_$40030_$",
                                "typeString": "type(TConsensus)"
                              }
                            },
                            "id": 28040,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "1333:6:138",
                            "memberName": "unwrap",
                            "nodeType": "MemberAccess",
                            "src": "1322:17:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_TConsensus_$40030_$returns$_t_address_$",
                              "typeString": "function (TConsensus) pure returns (address)"
                            }
                          },
                          "id": 28042,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1322:28:138",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1309:41:138"
                      },
                      {
                        "expression": {
                          "id": 28048,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 28044,
                              "name": "_consensus2Id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 28847,
                              "src": "1358:13:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_userDefinedValueType$_TConsensus_$40030_$_t_address_$",
                                "typeString": "mapping(TConsensus => address)"
                              }
                            },
                            "id": 28046,
                            "indexExpression": {
                              "id": 28045,
                              "name": "consensus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 28032,
                              "src": "1372:9:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                "typeString": "TConsensus"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1358:24:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 28047,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28038,
                            "src": "1385:2:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1358:29:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 28049,
                        "nodeType": "ExpressionStatement",
                        "src": "1358:29:138"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 28026,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 28023,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28021,
                      "src": "1211:1:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 28024,
                        "name": "validatorCandidates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28010,
                        "src": "1215:19:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr",
                          "typeString": "TConsensus[] memory"
                        }
                      },
                      "id": 28025,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1235:6:138",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1215:26:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1211:30:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 28051,
                  "initializationExpression": {
                    "assignments": [
                      28021
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 28021,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1208:1:138",
                        "nodeType": "VariableDeclaration",
                        "scope": 28051,
                        "src": "1200:9:138",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 28020,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1200:7:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 28022,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1200:9:138"
                  },
                  "isSimpleCounterLoop": true,
                  "loopExpression": {
                    "expression": {
                      "id": 28028,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "1243:3:138",
                      "subExpression": {
                        "id": 28027,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28021,
                        "src": "1245:1:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 28029,
                    "nodeType": "ExpressionStatement",
                    "src": "1243:3:138"
                  },
                  "nodeType": "ForStatement",
                  "src": "1195:199:138"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 28052,
                      "name": "__migrationRenouncedCandidates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28074,
                      "src": "1400:30:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 28053,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1400:32:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28054,
                  "nodeType": "ExpressionStatement",
                  "src": "1400:32:138"
                }
              ]
            },
            "functionSelector": "0840ba72",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 27991,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "913:1:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 27992,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 27990,
                  "name": "reinitializer",
                  "nameLocations": [
                    "899:13:138"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150271,
                  "src": "899:13:138"
                },
                "nodeType": "ModifierInvocation",
                "src": "899:16:138"
              }
            ],
            "name": "initializeV2",
            "nameLocation": "824:12:138",
            "parameters": {
              "id": 27989,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27986,
                  "mutability": "mutable",
                  "name": "stakingContract",
                  "nameLocation": "845:15:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28056,
                  "src": "837:23:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 27985,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "837:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27988,
                  "mutability": "mutable",
                  "name": "trustedOrgContract",
                  "nameLocation": "870:18:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28056,
                  "src": "862:26:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 27987,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "862:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "836:53:138"
            },
            "returnParameters": {
              "id": 27993,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "916:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28069,
            "nodeType": "FunctionDefinition",
            "src": "1441:111:138",
            "nodes": [],
            "body": {
              "id": 28068,
              "nodeType": "Block",
              "src": "1507:45:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28065,
                        "name": "cooldown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28058,
                        "src": "1538:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 28064,
                      "name": "_setPubkeyChangeCooldown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29175,
                      "src": "1513:24:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 28066,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1513:34:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28067,
                  "nodeType": "ExpressionStatement",
                  "src": "1513:34:138"
                }
              ]
            },
            "functionSelector": "3c3d8410",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "33",
                    "id": 28061,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1504:1:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3_by_1",
                      "typeString": "int_const 3"
                    },
                    "value": "3"
                  }
                ],
                "id": 28062,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 28060,
                  "name": "reinitializer",
                  "nameLocations": [
                    "1490:13:138"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150271,
                  "src": "1490:13:138"
                },
                "nodeType": "ModifierInvocation",
                "src": "1490:16:138"
              }
            ],
            "name": "initializeV3",
            "nameLocation": "1450:12:138",
            "parameters": {
              "id": 28059,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28058,
                  "mutability": "mutable",
                  "name": "cooldown",
                  "nameLocation": "1471:8:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28069,
                  "src": "1463:16:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28057,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1463:7:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1462:18:138"
            },
            "returnParameters": {
              "id": 28063,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1507:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28074,
            "nodeType": "FunctionDefinition",
            "src": "1666:61:138",
            "nodes": [],
            "body": {
              "id": 28073,
              "nodeType": "Block",
              "src": "1725:2:138",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 28070,
              "nodeType": "StructuredDocumentation",
              "src": "1556:107:138",
              "text": " @dev Add addresses of renounced candidates into registry. Only called during {initializeV2}."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__migrationRenouncedCandidates",
            "nameLocation": "1675:30:138",
            "parameters": {
              "id": 28071,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1705:2:138"
            },
            "returnParameters": {
              "id": 28072,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1725:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 28125,
            "nodeType": "FunctionDefinition",
            "src": "1969:361:138",
            "nodes": [],
            "body": {
              "id": 28124,
              "nodeType": "Block",
              "src": "2051:279:138",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    28086
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28086,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "2082:8:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28124,
                      "src": "2057:33:138",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 28085,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 28084,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "2057:16:138"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 7374,
                          "src": "2057:16:138"
                        },
                        "referencedDeclaration": 7374,
                        "src": "2057:16:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28090,
                  "initialValue": {
                    "baseExpression": {
                      "id": 28087,
                      "name": "_id2Profile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28836,
                      "src": "2093:11:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_CandidateProfile_$7374_storage_$",
                        "typeString": "mapping(address => struct IProfile.CandidateProfile storage ref)"
                      }
                    },
                    "id": 28089,
                    "indexExpression": {
                      "id": 28088,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28077,
                      "src": "2105:2:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2093:15:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage",
                      "typeString": "struct IProfile.CandidateProfile storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2057:51:138"
                },
                {
                  "expression": {
                    "id": 28095,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 28091,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28086,
                        "src": "2114:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      "id": 28093,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "2123:2:138",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7351,
                      "src": "2114:11:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 28094,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28077,
                      "src": "2128:2:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2114:16:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 28096,
                  "nodeType": "ExpressionStatement",
                  "src": "2114:16:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28098,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28086,
                        "src": "2151:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 28101,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28077,
                            "src": "2177:2:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 28099,
                            "name": "TConsensus",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40030,
                            "src": "2161:10:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_userDefinedValueType$_TConsensus_$40030_$",
                              "typeString": "type(TConsensus)"
                            }
                          },
                          "id": 28100,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "2172:4:138",
                          "memberName": "wrap",
                          "nodeType": "MemberAccess",
                          "src": "2161:15:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_wrap_pure$_t_address_$returns$_t_userDefinedValueType$_TConsensus_$40030_$",
                            "typeString": "function (address) pure returns (TConsensus)"
                          }
                        },
                        "id": 28102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2161:19:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      ],
                      "id": 28097,
                      "name": "_setConsensus",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28963,
                      "src": "2137:13:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$7374_storage_ptr_$_t_userDefinedValueType$_TConsensus_$40030_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,TConsensus)"
                      }
                    },
                    "id": 28103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2137:44:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28104,
                  "nodeType": "ExpressionStatement",
                  "src": "2137:44:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28106,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28086,
                        "src": "2197:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 28107,
                        "name": "candidateAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28079,
                        "src": "2207:14:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28105,
                      "name": "_setAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28998,
                      "src": "2187:9:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$7374_storage_ptr_$_t_address_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,address)"
                      }
                    },
                    "id": 28108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2187:35:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28109,
                  "nodeType": "ExpressionStatement",
                  "src": "2187:35:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28111,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28086,
                        "src": "2241:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 28114,
                            "name": "treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28081,
                            "src": "2259:8:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 28113,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2251:8:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 28112,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2251:8:138",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 28115,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2251:17:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 28110,
                      "name": "_setTreasury",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29036,
                      "src": "2228:12:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$7374_storage_ptr_$_t_address_payable_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,address payable)"
                      }
                    },
                    "id": 28116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2228:41:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28117,
                  "nodeType": "ExpressionStatement",
                  "src": "2228:41:138"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 28119,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28077,
                        "src": "2296:2:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 28120,
                        "name": "candidateAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28079,
                        "src": "2300:14:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 28121,
                        "name": "treasury",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28081,
                        "src": "2316:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28118,
                      "name": "ProfileMigrated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7388,
                      "src": "2280:15:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address,address)"
                      }
                    },
                    "id": 28122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2280:45:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28123,
                  "nodeType": "EmitStatement",
                  "src": "2275:50:138"
                }
              ]
            },
            "documentation": {
              "id": 28075,
              "nodeType": "StructuredDocumentation",
              "src": "1731:235:138",
              "text": " @dev This method is used in REP-4 migration, which creates profile for all community-validators and renounced validators.\n This method can be removed after REP-4 goes live.\n DO NOT use for any other purpose."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__migrate",
            "nameLocation": "1978:9:138",
            "parameters": {
              "id": 28082,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28077,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "1996:2:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28125,
                  "src": "1988:10:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28076,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1988:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28079,
                  "mutability": "mutable",
                  "name": "candidateAdmin",
                  "nameLocation": "2008:14:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28125,
                  "src": "2000:22:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28078,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2000:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28081,
                  "mutability": "mutable",
                  "name": "treasury",
                  "nameLocation": "2032:8:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28125,
                  "src": "2024:16:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28080,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2024:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1987:54:138"
            },
            "returnParameters": {
              "id": 28083,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2051:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 28139,
            "nodeType": "FunctionDefinition",
            "src": "2372:116:138",
            "nodes": [],
            "body": {
              "id": 28138,
              "nodeType": "Block",
              "src": "2455:33:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 28134,
                      "name": "_id2Profile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28836,
                      "src": "2468:11:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_CandidateProfile_$7374_storage_$",
                        "typeString": "mapping(address => struct IProfile.CandidateProfile storage ref)"
                      }
                    },
                    "id": 28136,
                    "indexExpression": {
                      "id": 28135,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28128,
                      "src": "2480:2:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2468:15:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage",
                      "typeString": "struct IProfile.CandidateProfile storage ref"
                    }
                  },
                  "functionReturnParameters": 28133,
                  "id": 28137,
                  "nodeType": "Return",
                  "src": "2461:22:138"
                }
              ]
            },
            "baseFunctions": [
              7468
            ],
            "documentation": {
              "id": 28126,
              "nodeType": "StructuredDocumentation",
              "src": "2334:35:138",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "f4660940",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getId2Profile",
            "nameLocation": "2381:13:138",
            "parameters": {
              "id": 28129,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28128,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "2403:2:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28139,
                  "src": "2395:10:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28127,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2395:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2394:12:138"
            },
            "returnParameters": {
              "id": 28133,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28132,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28139,
                  "src": "2430:23:138",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CandidateProfile_$7374_memory_ptr",
                    "typeString": "struct IProfile.CandidateProfile"
                  },
                  "typeName": {
                    "id": 28131,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28130,
                      "name": "CandidateProfile",
                      "nameLocations": [
                        "2430:16:138"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 7374,
                      "src": "2430:16:138"
                    },
                    "referencedDeclaration": 7374,
                    "src": "2430:16:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2429:25:138"
            },
            "scope": 28620,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28185,
            "nodeType": "FunctionDefinition",
            "src": "2530:308:138",
            "nodes": [],
            "body": {
              "id": 28184,
              "nodeType": "Block",
              "src": "2644:194:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 28158,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 28150,
                      "name": "consensusList",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28148,
                      "src": "2650:13:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr",
                        "typeString": "TConsensus[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 28155,
                            "name": "idList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28143,
                            "src": "2683:6:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "id": 28156,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2690:6:138",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "2683:13:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 28154,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2666:16:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (TConsensus[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 28152,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 28151,
                              "name": "TConsensus",
                              "nameLocations": [
                                "2670:10:138"
                              ],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 40030,
                              "src": "2670:10:138"
                            },
                            "referencedDeclaration": 40030,
                            "src": "2670:10:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                              "typeString": "TConsensus"
                            }
                          },
                          "id": 28153,
                          "nodeType": "ArrayTypeName",
                          "src": "2670:12:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_storage_ptr",
                            "typeString": "TConsensus[]"
                          }
                        }
                      },
                      "id": 28157,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2666:31:138",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr",
                        "typeString": "TConsensus[] memory"
                      }
                    },
                    "src": "2650:47:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr",
                      "typeString": "TConsensus[] memory"
                    }
                  },
                  "id": 28159,
                  "nodeType": "ExpressionStatement",
                  "src": "2650:47:138"
                },
                {
                  "id": 28183,
                  "nodeType": "UncheckedBlock",
                  "src": "2703:131:138",
                  "statements": [
                    {
                      "body": {
                        "id": 28181,
                        "nodeType": "Block",
                        "src": "2758:70:138",
                        "statements": [
                          {
                            "expression": {
                              "id": 28179,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 28170,
                                  "name": "consensusList",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 28148,
                                  "src": "2768:13:138",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr",
                                    "typeString": "TConsensus[] memory"
                                  }
                                },
                                "id": 28172,
                                "indexExpression": {
                                  "id": 28171,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 28161,
                                  "src": "2782:1:138",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "2768:16:138",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                  "typeString": "TConsensus"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 28173,
                                    "name": "_id2Profile",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 28836,
                                    "src": "2787:11:138",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_CandidateProfile_$7374_storage_$",
                                      "typeString": "mapping(address => struct IProfile.CandidateProfile storage ref)"
                                    }
                                  },
                                  "id": 28177,
                                  "indexExpression": {
                                    "baseExpression": {
                                      "id": 28174,
                                      "name": "idList",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 28143,
                                      "src": "2799:6:138",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                        "typeString": "address[] calldata"
                                      }
                                    },
                                    "id": 28176,
                                    "indexExpression": {
                                      "id": 28175,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 28161,
                                      "src": "2806:1:138",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2799:9:138",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2787:22:138",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage",
                                    "typeString": "struct IProfile.CandidateProfile storage ref"
                                  }
                                },
                                "id": 28178,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2810:9:138",
                                "memberName": "consensus",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 7355,
                                "src": "2787:32:138",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                  "typeString": "TConsensus"
                                }
                              },
                              "src": "2768:51:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                "typeString": "TConsensus"
                              }
                            },
                            "id": 28180,
                            "nodeType": "ExpressionStatement",
                            "src": "2768:51:138"
                          }
                        ]
                      },
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 28166,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 28163,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28161,
                          "src": "2734:1:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "expression": {
                            "id": 28164,
                            "name": "idList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28143,
                            "src": "2738:6:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "id": 28165,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2745:6:138",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "2738:13:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2734:17:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 28182,
                      "initializationExpression": {
                        "assignments": [
                          28161
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 28161,
                            "mutability": "mutable",
                            "name": "i",
                            "nameLocation": "2731:1:138",
                            "nodeType": "VariableDeclaration",
                            "scope": 28182,
                            "src": "2726:6:138",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 28160,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "2726:4:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 28162,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2726:6:138"
                      },
                      "isSimpleCounterLoop": true,
                      "loopExpression": {
                        "expression": {
                          "id": 28168,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": true,
                          "src": "2753:3:138",
                          "subExpression": {
                            "id": 28167,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28161,
                            "src": "2755:1:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 28169,
                        "nodeType": "ExpressionStatement",
                        "src": "2753:3:138"
                      },
                      "nodeType": "ForStatement",
                      "src": "2721:107:138"
                    }
                  ]
                }
              ]
            },
            "baseFunctions": [
              7479
            ],
            "documentation": {
              "id": 28140,
              "nodeType": "StructuredDocumentation",
              "src": "2492:35:138",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "b261596f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getManyId2Consensus",
            "nameLocation": "2539:19:138",
            "parameters": {
              "id": 28144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28143,
                  "mutability": "mutable",
                  "name": "idList",
                  "nameLocation": "2578:6:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28185,
                  "src": "2559:25:138",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28141,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2559:7:138",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 28142,
                    "nodeType": "ArrayTypeName",
                    "src": "2559:9:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2558:27:138"
            },
            "returnParameters": {
              "id": 28149,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28148,
                  "mutability": "mutable",
                  "name": "consensusList",
                  "nameLocation": "2629:13:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28185,
                  "src": "2609:33:138",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_memory_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28146,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 28145,
                        "name": "TConsensus",
                        "nameLocations": [
                          "2609:10:138"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 40030,
                        "src": "2609:10:138"
                      },
                      "referencedDeclaration": 40030,
                      "src": "2609:10:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 28147,
                    "nodeType": "ArrayTypeName",
                    "src": "2609:12:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2608:35:138"
            },
            "scope": 28620,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28199,
            "nodeType": "FunctionDefinition",
            "src": "2880:124:138",
            "nodes": [],
            "body": {
              "id": 28198,
              "nodeType": "Block",
              "src": "2959:45:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28195,
                        "name": "consensus",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28189,
                        "src": "2989:9:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      ],
                      "id": 28194,
                      "name": "_getConsensus2Id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28226,
                      "src": "2972:16:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$40030_$returns$_t_address_$",
                        "typeString": "function (TConsensus) view returns (address)"
                      }
                    },
                    "id": 28196,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2972:27:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 28193,
                  "id": 28197,
                  "nodeType": "Return",
                  "src": "2965:34:138"
                }
              ]
            },
            "baseFunctions": [
              7488
            ],
            "documentation": {
              "id": 28186,
              "nodeType": "StructuredDocumentation",
              "src": "2842:35:138",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "50a9fc29",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getConsensus2Id",
            "nameLocation": "2889:15:138",
            "parameters": {
              "id": 28190,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28189,
                  "mutability": "mutable",
                  "name": "consensus",
                  "nameLocation": "2916:9:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28199,
                  "src": "2905:20:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 28188,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28187,
                      "name": "TConsensus",
                      "nameLocations": [
                        "2905:10:138"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 40030,
                      "src": "2905:10:138"
                    },
                    "referencedDeclaration": 40030,
                    "src": "2905:10:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2904:22:138"
            },
            "returnParameters": {
              "id": 28193,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28192,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28199,
                  "src": "2950:7:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28191,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2950:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2949:9:138"
            },
            "scope": 28620,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28226,
            "nodeType": "FunctionDefinition",
            "src": "3084:216:138",
            "nodes": [],
            "body": {
              "id": 28225,
              "nodeType": "Block",
              "src": "3164:136:138",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    28209,
                    28211
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28209,
                      "mutability": "mutable",
                      "name": "found",
                      "nameLocation": "3176:5:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28225,
                      "src": "3171:10:138",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 28208,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3171:4:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 28211,
                      "mutability": "mutable",
                      "name": "id",
                      "nameLocation": "3191:2:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28225,
                      "src": "3183:10:138",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 28210,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3183:7:138",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28215,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 28213,
                        "name": "consensus",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28203,
                        "src": "3217:9:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      ],
                      "id": 28212,
                      "name": "_tryGetConsensus2Id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28269,
                      "src": "3197:19:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$40030_$returns$_t_bool_$_t_address_$",
                        "typeString": "function (TConsensus) view returns (bool,address)"
                      }
                    },
                    "id": 28214,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3197:30:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_address_$",
                      "typeString": "tuple(bool,address)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3170:57:138"
                },
                {
                  "condition": {
                    "id": 28217,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "3237:6:138",
                    "subExpression": {
                      "id": 28216,
                      "name": "found",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28209,
                      "src": "3238:5:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 28222,
                  "nodeType": "IfStatement",
                  "src": "3233:47:138",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "id": 28219,
                          "name": "consensus",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28203,
                          "src": "3270:9:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                            "typeString": "TConsensus"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                            "typeString": "TConsensus"
                          }
                        ],
                        "id": 28218,
                        "name": "ErrLookUpIdFailed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7459,
                        "src": "3252:17:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_userDefinedValueType$_TConsensus_$40030_$returns$__$",
                          "typeString": "function (TConsensus) pure"
                        }
                      },
                      "id": 28220,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3252:28:138",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 28221,
                    "nodeType": "RevertStatement",
                    "src": "3245:35:138"
                  }
                },
                {
                  "expression": {
                    "id": 28223,
                    "name": "id",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 28211,
                    "src": "3293:2:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 28207,
                  "id": 28224,
                  "nodeType": "Return",
                  "src": "3286:9:138"
                }
              ]
            },
            "documentation": {
              "id": 28200,
              "nodeType": "StructuredDocumentation",
              "src": "3008:73:138",
              "text": " @dev Look up the `id` by `consensus`, revert if not found."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getConsensus2Id",
            "nameLocation": "3093:16:138",
            "parameters": {
              "id": 28204,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28203,
                  "mutability": "mutable",
                  "name": "consensus",
                  "nameLocation": "3121:9:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28226,
                  "src": "3110:20:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 28202,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28201,
                      "name": "TConsensus",
                      "nameLocations": [
                        "3110:10:138"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 40030,
                      "src": "3110:10:138"
                    },
                    "referencedDeclaration": 40030,
                    "src": "3110:10:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3109:22:138"
            },
            "returnParameters": {
              "id": 28207,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28206,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28226,
                  "src": "3155:7:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28205,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3155:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3154:9:138"
            },
            "scope": 28620,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 28242,
            "nodeType": "FunctionDefinition",
            "src": "3342:145:138",
            "nodes": [],
            "body": {
              "id": 28241,
              "nodeType": "Block",
              "src": "3439:48:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28238,
                        "name": "consensus",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28230,
                        "src": "3472:9:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      ],
                      "id": 28237,
                      "name": "_tryGetConsensus2Id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28269,
                      "src": "3452:19:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$40030_$returns$_t_bool_$_t_address_$",
                        "typeString": "function (TConsensus) view returns (bool,address)"
                      }
                    },
                    "id": 28239,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3452:30:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_address_$",
                      "typeString": "tuple(bool,address)"
                    }
                  },
                  "functionReturnParameters": 28236,
                  "id": 28240,
                  "nodeType": "Return",
                  "src": "3445:37:138"
                }
              ]
            },
            "baseFunctions": [
              7499
            ],
            "documentation": {
              "id": 28227,
              "nodeType": "StructuredDocumentation",
              "src": "3304:35:138",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "88660f2a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tryGetConsensus2Id",
            "nameLocation": "3351:18:138",
            "parameters": {
              "id": 28231,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28230,
                  "mutability": "mutable",
                  "name": "consensus",
                  "nameLocation": "3381:9:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28242,
                  "src": "3370:20:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 28229,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28228,
                      "name": "TConsensus",
                      "nameLocations": [
                        "3370:10:138"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 40030,
                      "src": "3370:10:138"
                    },
                    "referencedDeclaration": 40030,
                    "src": "3370:10:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3369:22:138"
            },
            "returnParameters": {
              "id": 28236,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28233,
                  "mutability": "mutable",
                  "name": "found",
                  "nameLocation": "3420:5:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28242,
                  "src": "3415:10:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 28232,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3415:4:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28235,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "3435:2:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28242,
                  "src": "3427:10:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28234,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3427:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3414:24:138"
            },
            "scope": 28620,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28269,
            "nodeType": "FunctionDefinition",
            "src": "3605:168:138",
            "nodes": [],
            "body": {
              "id": 28268,
              "nodeType": "Block",
              "src": "3703:70:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 28257,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 28253,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28251,
                      "src": "3709:2:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 28254,
                        "name": "_consensus2Id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28847,
                        "src": "3714:13:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_userDefinedValueType$_TConsensus_$40030_$_t_address_$",
                          "typeString": "mapping(TConsensus => address)"
                        }
                      },
                      "id": 28256,
                      "indexExpression": {
                        "id": 28255,
                        "name": "consensus",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28246,
                        "src": "3728:9:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "3714:24:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3709:29:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 28258,
                  "nodeType": "ExpressionStatement",
                  "src": "3709:29:138"
                },
                {
                  "expression": {
                    "id": 28266,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 28259,
                      "name": "found",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28249,
                      "src": "3744:5:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 28265,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 28260,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28251,
                        "src": "3752:2:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 28263,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3766:1:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 28262,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3758:7:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 28261,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3758:7:138",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 28264,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3758:10:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "3752:16:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3744:24:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 28267,
                  "nodeType": "ExpressionStatement",
                  "src": "3744:24:138"
                }
              ]
            },
            "documentation": {
              "id": 28243,
              "nodeType": "StructuredDocumentation",
              "src": "3491:111:138",
              "text": " @dev Try look up the `id` by `consensus`, return a boolean indicating whether the query success."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_tryGetConsensus2Id",
            "nameLocation": "3614:19:138",
            "parameters": {
              "id": 28247,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28246,
                  "mutability": "mutable",
                  "name": "consensus",
                  "nameLocation": "3645:9:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28269,
                  "src": "3634:20:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 28245,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28244,
                      "name": "TConsensus",
                      "nameLocations": [
                        "3634:10:138"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 40030,
                      "src": "3634:10:138"
                    },
                    "referencedDeclaration": 40030,
                    "src": "3634:10:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3633:22:138"
            },
            "returnParameters": {
              "id": 28252,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28249,
                  "mutability": "mutable",
                  "name": "found",
                  "nameLocation": "3684:5:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28269,
                  "src": "3679:10:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 28248,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3679:4:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28251,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "3699:2:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28269,
                  "src": "3691:10:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28250,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3691:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3678:24:138"
            },
            "scope": 28620,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 28313,
            "nodeType": "FunctionDefinition",
            "src": "3815:307:138",
            "nodes": [],
            "body": {
              "id": 28312,
              "nodeType": "Block",
              "src": "3929:193:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 28287,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 28280,
                      "name": "idList",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28278,
                      "src": "3935:6:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 28284,
                            "name": "consensusList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28274,
                            "src": "3958:13:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_calldata_ptr",
                              "typeString": "TConsensus[] calldata"
                            }
                          },
                          "id": 28285,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3972:6:138",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3958:20:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 28283,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "3944:13:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (address[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 28281,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3948:7:138",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 28282,
                          "nodeType": "ArrayTypeName",
                          "src": "3948:9:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        }
                      },
                      "id": 28286,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3944:35:138",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[] memory"
                      }
                    },
                    "src": "3935:44:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "id": 28288,
                  "nodeType": "ExpressionStatement",
                  "src": "3935:44:138"
                },
                {
                  "id": 28311,
                  "nodeType": "UncheckedBlock",
                  "src": "3985:133:138",
                  "statements": [
                    {
                      "body": {
                        "id": 28309,
                        "nodeType": "Block",
                        "src": "4047:65:138",
                        "statements": [
                          {
                            "expression": {
                              "id": 28307,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 28299,
                                  "name": "idList",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 28278,
                                  "src": "4057:6:138",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                    "typeString": "address[] memory"
                                  }
                                },
                                "id": 28301,
                                "indexExpression": {
                                  "id": 28300,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 28290,
                                  "src": "4064:1:138",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "4057:9:138",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 28303,
                                      "name": "consensusList",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 28274,
                                      "src": "4086:13:138",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_calldata_ptr",
                                        "typeString": "TConsensus[] calldata"
                                      }
                                    },
                                    "id": 28305,
                                    "indexExpression": {
                                      "id": 28304,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 28290,
                                      "src": "4100:1:138",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4086:16:138",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                      "typeString": "TConsensus"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                      "typeString": "TConsensus"
                                    }
                                  ],
                                  "id": 28302,
                                  "name": "_getConsensus2Id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 28226,
                                  "src": "4069:16:138",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$40030_$returns$_t_address_$",
                                    "typeString": "function (TConsensus) view returns (address)"
                                  }
                                },
                                "id": 28306,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4069:34:138",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "4057:46:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 28308,
                            "nodeType": "ExpressionStatement",
                            "src": "4057:46:138"
                          }
                        ]
                      },
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 28295,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 28292,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28290,
                          "src": "4016:1:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "expression": {
                            "id": 28293,
                            "name": "consensusList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28274,
                            "src": "4020:13:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_calldata_ptr",
                              "typeString": "TConsensus[] calldata"
                            }
                          },
                          "id": 28294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4034:6:138",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "4020:20:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4016:24:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 28310,
                      "initializationExpression": {
                        "assignments": [
                          28290
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 28290,
                            "mutability": "mutable",
                            "name": "i",
                            "nameLocation": "4013:1:138",
                            "nodeType": "VariableDeclaration",
                            "scope": 28310,
                            "src": "4008:6:138",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 28289,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "4008:4:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 28291,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4008:6:138"
                      },
                      "isSimpleCounterLoop": true,
                      "loopExpression": {
                        "expression": {
                          "id": 28297,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": true,
                          "src": "4042:3:138",
                          "subExpression": {
                            "id": 28296,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28290,
                            "src": "4044:1:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 28298,
                        "nodeType": "ExpressionStatement",
                        "src": "4042:3:138"
                      },
                      "nodeType": "ForStatement",
                      "src": "4003:109:138"
                    }
                  ]
                }
              ]
            },
            "baseFunctions": [
              7510
            ],
            "documentation": {
              "id": 28270,
              "nodeType": "StructuredDocumentation",
              "src": "3777:35:138",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "f9226b1a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getManyConsensus2Id",
            "nameLocation": "3824:19:138",
            "parameters": {
              "id": 28275,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28274,
                  "mutability": "mutable",
                  "name": "consensusList",
                  "nameLocation": "3866:13:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28313,
                  "src": "3844:35:138",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_calldata_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28272,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 28271,
                        "name": "TConsensus",
                        "nameLocations": [
                          "3844:10:138"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 40030,
                        "src": "3844:10:138"
                      },
                      "referencedDeclaration": 40030,
                      "src": "3844:10:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 28273,
                    "nodeType": "ArrayTypeName",
                    "src": "3844:12:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$40030_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3843:37:138"
            },
            "returnParameters": {
              "id": 28279,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28278,
                  "mutability": "mutable",
                  "name": "idList",
                  "nameLocation": "3921:6:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28313,
                  "src": "3904:23:138",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28276,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3904:7:138",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 28277,
                    "nodeType": "ArrayTypeName",
                    "src": "3904:9:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3903:25:138"
            },
            "scope": 28620,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28347,
            "nodeType": "FunctionDefinition",
            "src": "4164:248:138",
            "nodes": [],
            "body": {
              "id": 28346,
              "nodeType": "Block",
              "src": "4239:173:138",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    28324
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28324,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "4270:8:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28346,
                      "src": "4245:33:138",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 28323,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 28322,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "4245:16:138"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 7374,
                          "src": "4245:16:138"
                        },
                        "referencedDeclaration": 7374,
                        "src": "4245:16:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28329,
                  "initialValue": {
                    "baseExpression": {
                      "id": 28325,
                      "name": "_id2Profile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28836,
                      "src": "4281:11:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_CandidateProfile_$7374_storage_$",
                        "typeString": "mapping(address => struct IProfile.CandidateProfile storage ref)"
                      }
                    },
                    "id": 28328,
                    "indexExpression": {
                      "expression": {
                        "id": 28326,
                        "name": "profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28317,
                        "src": "4293:7:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_memory_ptr",
                          "typeString": "struct IProfile.CandidateProfile memory"
                        }
                      },
                      "id": 28327,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4301:2:138",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7351,
                      "src": "4293:10:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4281:23:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage",
                      "typeString": "struct IProfile.CandidateProfile storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4245:59:138"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 28336,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 28330,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28324,
                        "src": "4314:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      "id": 28331,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4323:2:138",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7351,
                      "src": "4314:11:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 28334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4337:1:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 28333,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4329:7:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 28332,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4329:7:138",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 28335,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4329:10:138",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4314:25:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 28340,
                  "nodeType": "IfStatement",
                  "src": "4310:58:138",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 28337,
                        "name": "ErrExistentProfile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7420,
                        "src": "4348:18:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 28338,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4348:20:138",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 28339,
                    "nodeType": "RevertStatement",
                    "src": "4341:27:138"
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28342,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28324,
                        "src": "4389:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 28343,
                        "name": "profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28317,
                        "src": "4399:7:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_memory_ptr",
                          "typeString": "struct IProfile.CandidateProfile memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_memory_ptr",
                          "typeString": "struct IProfile.CandidateProfile memory"
                        }
                      ],
                      "id": 28341,
                      "name": "_addNewProfile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28908,
                      "src": "4374:14:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$7374_storage_ptr_$_t_struct$_CandidateProfile_$7374_memory_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,struct IProfile.CandidateProfile memory)"
                      }
                    },
                    "id": 28344,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4374:33:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28345,
                  "nodeType": "ExpressionStatement",
                  "src": "4374:33:138"
                }
              ]
            },
            "baseFunctions": [
              7517
            ],
            "documentation": {
              "id": 28314,
              "nodeType": "StructuredDocumentation",
              "src": "4126:35:138",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "d1cb8830",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 28320,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 28319,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "4229:9:138"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3558,
                  "src": "4229:9:138"
                },
                "nodeType": "ModifierInvocation",
                "src": "4229:9:138"
              }
            ],
            "name": "addNewProfile",
            "nameLocation": "4173:13:138",
            "parameters": {
              "id": 28318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28317,
                  "mutability": "mutable",
                  "name": "profile",
                  "nameLocation": "4211:7:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28347,
                  "src": "4187:31:138",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CandidateProfile_$7374_memory_ptr",
                    "typeString": "struct IProfile.CandidateProfile"
                  },
                  "typeName": {
                    "id": 28316,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28315,
                      "name": "CandidateProfile",
                      "nameLocations": [
                        "4187:16:138"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 7374,
                      "src": "4187:16:138"
                    },
                    "referencedDeclaration": 7374,
                    "src": "4187:16:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4186:33:138"
            },
            "returnParameters": {
              "id": 28321,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4239:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28432,
            "nodeType": "FunctionDefinition",
            "src": "4963:790:138",
            "nodes": [],
            "body": {
              "id": 28431,
              "nodeType": "Block",
              "src": "5041:712:138",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    28357
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28357,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "5072:8:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28431,
                      "src": "5047:33:138",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 28356,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 28355,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "5047:16:138"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 7374,
                          "src": "5047:16:138"
                        },
                        "referencedDeclaration": 7374,
                        "src": "5047:16:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28361,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 28359,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28350,
                        "src": "5104:2:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28358,
                      "name": "_getId2ProfileHelper",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29149,
                      "src": "5083:20:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_struct$_CandidateProfile_$7374_storage_ptr_$",
                        "typeString": "function (address) view returns (struct IProfile.CandidateProfile storage pointer)"
                      }
                    },
                    "id": 28360,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5083:24:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile storage pointer"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5047:60:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28363,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28357,
                        "src": "5136:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      ],
                      "id": 28362,
                      "name": "_requireCandidateAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28606,
                      "src": "5113:22:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_CandidateProfile_$7374_storage_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer) view"
                      }
                    },
                    "id": 28364,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5113:32:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28365,
                  "nodeType": "ExpressionStatement",
                  "src": "5113:32:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 28367,
                          "name": "RoleAccess",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40574,
                          "src": "5183:10:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_RoleAccess_$40574_$",
                            "typeString": "type(enum RoleAccess)"
                          }
                        },
                        "id": 28368,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "5194:15:138",
                        "memberName": "CANDIDATE_ADMIN",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 40567,
                        "src": "5183:26:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RoleAccess_$40574",
                          "typeString": "enum RoleAccess"
                        }
                      },
                      {
                        "id": 28369,
                        "name": "newAdminAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28352,
                        "src": "5211:12:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_RoleAccess_$40574",
                          "typeString": "enum RoleAccess"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28366,
                      "name": "_requireNonZeroAndNonDuplicated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28701,
                      "src": "5151:31:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_enum$_RoleAccess_$40574_$_t_address_$returns$__$",
                        "typeString": "function (enum RoleAccess,address) view"
                      }
                    },
                    "id": 28370,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5151:73:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28371,
                  "nodeType": "ExpressionStatement",
                  "src": "5151:73:138"
                },
                {
                  "assignments": [
                    28374
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28374,
                      "mutability": "mutable",
                      "name": "stakingContract",
                      "nameLocation": "5240:15:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28431,
                      "src": "5231:24:138",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStaking_$9964",
                        "typeString": "contract IStaking"
                      },
                      "typeName": {
                        "id": 28373,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 28372,
                          "name": "IStaking",
                          "nameLocations": [
                            "5231:8:138"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 9964,
                          "src": "5231:8:138"
                        },
                        "referencedDeclaration": 9964,
                        "src": "5231:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStaking_$9964",
                          "typeString": "contract IStaking"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28381,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 28377,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40311,
                              "src": "5279:12:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 28378,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "5292:7:138",
                            "memberName": "STAKING",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 40304,
                            "src": "5279:20:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$40311",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$40311",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 28376,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "5267:11:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$40311_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 28379,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5267:33:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28375,
                      "name": "IStaking",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9964,
                      "src": "5258:8:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IStaking_$9964_$",
                        "typeString": "type(contract IStaking)"
                      }
                    },
                    "id": 28380,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5258:43:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStaking_$9964",
                      "typeString": "contract IStaking"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5231:70:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28385,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28350,
                        "src": "5356:2:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 28386,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5375:3:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 28387,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5379:6:138",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5375:10:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 28388,
                        "name": "newAdminAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28352,
                        "src": "5401:12:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 28382,
                        "name": "stakingContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28374,
                        "src": "5307:15:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStaking_$9964",
                          "typeString": "contract IStaking"
                        }
                      },
                      "id": 28384,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5323:22:138",
                      "memberName": "execChangeAdminAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9978,
                      "src": "5307:38:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address,address) external"
                      }
                    },
                    "id": 28389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [
                      "5348:6:138",
                      "5360:13:138",
                      "5387:12:138"
                    ],
                    "names": [
                      "poolId",
                      "currAdminAddr",
                      "newAdminAddr"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "5307:109:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28390,
                  "nodeType": "ExpressionStatement",
                  "src": "5307:109:138"
                },
                {
                  "assignments": [
                    28393
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28393,
                      "mutability": "mutable",
                      "name": "validatorContract",
                      "nameLocation": "5442:17:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28431,
                      "src": "5423:36:138",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                        "typeString": "contract IRoninValidatorSet"
                      },
                      "typeName": {
                        "id": 28392,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 28391,
                          "name": "IRoninValidatorSet",
                          "nameLocations": [
                            "5423:18:138"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 10545,
                          "src": "5423:18:138"
                        },
                        "referencedDeclaration": 10545,
                        "src": "5423:18:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28400,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 28396,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40311,
                              "src": "5493:12:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 28397,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "5506:9:138",
                            "memberName": "VALIDATOR",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 40303,
                            "src": "5493:22:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$40311",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$40311",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 28395,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "5481:11:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$40311_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 28398,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5481:35:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28394,
                      "name": "IRoninValidatorSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10545,
                      "src": "5462:18:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$10545_$",
                        "typeString": "type(contract IRoninValidatorSet)"
                      }
                    },
                    "id": 28399,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5462:55:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                      "typeString": "contract IRoninValidatorSet"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5423:94:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28404,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28350,
                        "src": "5564:2:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 28405,
                        "name": "newAdminAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28352,
                        "src": "5568:12:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 28401,
                        "name": "validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28393,
                        "src": "5523:17:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 28403,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5541:22:138",
                      "memberName": "execChangeAdminAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10245,
                      "src": "5523:40:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address) external"
                      }
                    },
                    "id": 28406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5523:58:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28407,
                  "nodeType": "ExpressionStatement",
                  "src": "5523:58:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28411,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28350,
                        "src": "5631:2:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 28414,
                            "name": "newAdminAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28352,
                            "src": "5643:12:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 28413,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5635:8:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 28412,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5635:8:138",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 28415,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5635:21:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 28408,
                        "name": "validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28393,
                        "src": "5587:17:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 28410,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5605:25:138",
                      "memberName": "execChangeTreasuryAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10262,
                      "src": "5587:43:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_payable_$returns$__$",
                        "typeString": "function (address,address payable) external"
                      }
                    },
                    "id": 28416,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5587:70:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28417,
                  "nodeType": "ExpressionStatement",
                  "src": "5587:70:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28419,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28357,
                        "src": "5674:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 28420,
                        "name": "newAdminAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28352,
                        "src": "5684:12:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28418,
                      "name": "_setAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28998,
                      "src": "5664:9:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$7374_storage_ptr_$_t_address_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,address)"
                      }
                    },
                    "id": 28421,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5664:33:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28422,
                  "nodeType": "ExpressionStatement",
                  "src": "5664:33:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28424,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28357,
                        "src": "5716:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 28427,
                            "name": "newAdminAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28352,
                            "src": "5734:12:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 28426,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5726:8:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 28425,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5726:8:138",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 28428,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5726:21:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 28423,
                      "name": "_setTreasury",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29036,
                      "src": "5703:12:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$7374_storage_ptr_$_t_address_payable_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,address payable)"
                      }
                    },
                    "id": 28429,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5703:45:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28430,
                  "nodeType": "ExpressionStatement",
                  "src": "5703:45:138"
                }
              ]
            },
            "baseFunctions": [
              7539
            ],
            "documentation": {
              "id": 28348,
              "nodeType": "StructuredDocumentation",
              "src": "4416:544:138",
              "text": " @inheritdoc IProfile\n @dev Side-effects on other contracts:\n - Update Staking contract:\n    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.\n    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.\n    + [x] Move staking amount of previous admin to the the new admin.\n - Update Validator contract:\n    + [x] Update (id => ValidatorCandidate) mapping\n - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical."
            },
            "functionSelector": "84cb1010",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "requestChangeAdminAddress",
            "nameLocation": "4972:25:138",
            "parameters": {
              "id": 28353,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28350,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "5006:2:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28432,
                  "src": "4998:10:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28349,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4998:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28352,
                  "mutability": "mutable",
                  "name": "newAdminAddr",
                  "nameLocation": "5018:12:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28432,
                  "src": "5010:20:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28351,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5010:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4997:34:138"
            },
            "returnParameters": {
              "id": 28354,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5041:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28519,
            "nodeType": "FunctionDefinition",
            "src": "6751:948:138",
            "nodes": [],
            "body": {
              "id": 28518,
              "nodeType": "Block",
              "src": "6837:862:138",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    28443
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28443,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "6868:8:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28518,
                      "src": "6843:33:138",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 28442,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 28441,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "6843:16:138"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 7374,
                          "src": "6843:16:138"
                        },
                        "referencedDeclaration": 7374,
                        "src": "6843:16:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28447,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 28445,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28435,
                        "src": "6900:2:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28444,
                      "name": "_getId2ProfileHelper",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29149,
                      "src": "6879:20:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_struct$_CandidateProfile_$7374_storage_ptr_$",
                        "typeString": "function (address) view returns (struct IProfile.CandidateProfile storage pointer)"
                      }
                    },
                    "id": 28446,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6879:24:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile storage pointer"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6843:60:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28449,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28443,
                        "src": "6932:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      ],
                      "id": 28448,
                      "name": "_requireCandidateAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28606,
                      "src": "6909:22:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_CandidateProfile_$7374_storage_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer) view"
                      }
                    },
                    "id": 28450,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6909:32:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28451,
                  "nodeType": "ExpressionStatement",
                  "src": "6909:32:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 28453,
                          "name": "RoleAccess",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40574,
                          "src": "6979:10:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_RoleAccess_$40574_$",
                            "typeString": "type(enum RoleAccess)"
                          }
                        },
                        "id": 28454,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "6990:9:138",
                        "memberName": "CONSENSUS",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 40572,
                        "src": "6979:20:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RoleAccess_$40574",
                          "typeString": "enum RoleAccess"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 28457,
                            "name": "newConsensusAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28438,
                            "src": "7019:16:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                              "typeString": "TConsensus"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                              "typeString": "TConsensus"
                            }
                          ],
                          "expression": {
                            "id": 28455,
                            "name": "TConsensus",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40030,
                            "src": "7001:10:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_userDefinedValueType$_TConsensus_$40030_$",
                              "typeString": "type(TConsensus)"
                            }
                          },
                          "id": 28456,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "7012:6:138",
                          "memberName": "unwrap",
                          "nodeType": "MemberAccess",
                          "src": "7001:17:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_TConsensus_$40030_$returns$_t_address_$",
                            "typeString": "function (TConsensus) pure returns (address)"
                          }
                        },
                        "id": 28458,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7001:35:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_RoleAccess_$40574",
                          "typeString": "enum RoleAccess"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28452,
                      "name": "_requireNonZeroAndNonDuplicated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28701,
                      "src": "6947:31:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_enum$_RoleAccess_$40574_$_t_address_$returns$__$",
                        "typeString": "function (enum RoleAccess,address) view"
                      }
                    },
                    "id": 28459,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6947:90:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28460,
                  "nodeType": "ExpressionStatement",
                  "src": "6947:90:138"
                },
                {
                  "assignments": [
                    28463
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28463,
                      "mutability": "mutable",
                      "name": "oldConsensusAddr",
                      "nameLocation": "7055:16:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28518,
                      "src": "7044:27:138",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                        "typeString": "TConsensus"
                      },
                      "typeName": {
                        "id": 28462,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 28461,
                          "name": "TConsensus",
                          "nameLocations": [
                            "7044:10:138"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 40030,
                          "src": "7044:10:138"
                        },
                        "referencedDeclaration": 40030,
                        "src": "7044:10:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28466,
                  "initialValue": {
                    "expression": {
                      "id": 28464,
                      "name": "_profile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28443,
                      "src": "7074:8:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile storage pointer"
                      }
                    },
                    "id": 28465,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "7083:9:138",
                    "memberName": "consensus",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 7355,
                    "src": "7074:18:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                      "typeString": "TConsensus"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7044:48:138"
                },
                {
                  "assignments": [
                    28469
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28469,
                      "mutability": "mutable",
                      "name": "validatorContract",
                      "nameLocation": "7118:17:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28518,
                      "src": "7099:36:138",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                        "typeString": "contract IRoninValidatorSet"
                      },
                      "typeName": {
                        "id": 28468,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 28467,
                          "name": "IRoninValidatorSet",
                          "nameLocations": [
                            "7099:18:138"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 10545,
                          "src": "7099:18:138"
                        },
                        "referencedDeclaration": 10545,
                        "src": "7099:18:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28476,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 28472,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40311,
                              "src": "7169:12:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 28473,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "7182:9:138",
                            "memberName": "VALIDATOR",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 40303,
                            "src": "7169:22:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$40311",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$40311",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 28471,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "7157:11:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$40311_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 28474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7157:35:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28470,
                      "name": "IRoninValidatorSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10545,
                      "src": "7138:18:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$10545_$",
                        "typeString": "type(contract IRoninValidatorSet)"
                      }
                    },
                    "id": 28475,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7138:55:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                      "typeString": "contract IRoninValidatorSet"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7099:94:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28480,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28435,
                        "src": "7244:2:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 28481,
                        "name": "newConsensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28438,
                        "src": "7248:16:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      ],
                      "expression": {
                        "id": 28477,
                        "name": "validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28469,
                        "src": "7199:17:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 28479,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7217:26:138",
                      "memberName": "execChangeConsensusAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10254,
                      "src": "7199:44:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_userDefinedValueType$_TConsensus_$40030_$returns$__$",
                        "typeString": "function (address,TConsensus) external"
                      }
                    },
                    "id": 28482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7199:66:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28483,
                  "nodeType": "ExpressionStatement",
                  "src": "7199:66:138"
                },
                {
                  "assignments": [
                    28485
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28485,
                      "mutability": "mutable",
                      "name": "trustedOrgContractAddr",
                      "nameLocation": "7280:22:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28518,
                      "src": "7272:30:138",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 28484,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7272:7:138",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28490,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 28487,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40311,
                          "src": "7317:12:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 28488,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "7330:26:138",
                        "memberName": "RONIN_TRUSTED_ORGANIZATION",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 40305,
                        "src": "7317:39:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        }
                      ],
                      "id": 28486,
                      "name": "getContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3484,
                      "src": "7305:11:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$40311_$returns$_t_address_$",
                        "typeString": "function (enum ContractType) view returns (address)"
                      }
                    },
                    "id": 28489,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7305:52:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7272:85:138"
                },
                {
                  "assignments": [
                    28492,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28492,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "7369:7:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28518,
                      "src": "7364:12:138",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 28491,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7364:4:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 28504,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 28497,
                              "name": "IRoninTrustedOrganization",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8127,
                              "src": "7441:25:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IRoninTrustedOrganization_$8127_$",
                                "typeString": "type(contract IRoninTrustedOrganization)"
                              }
                            },
                            "id": 28498,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "7467:39:138",
                            "memberName": "execChangeConsensusAddressForTrustedOrg",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8012,
                            "src": "7441:65:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_userDefinedValueType$_TConsensus_$40030_$_t_userDefinedValueType$_TConsensus_$40030_$returns$__$",
                              "typeString": "function IRoninTrustedOrganization.execChangeConsensusAddressForTrustedOrg(TConsensus,TConsensus)"
                            }
                          },
                          {
                            "components": [
                              {
                                "id": 28499,
                                "name": "oldConsensusAddr",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 28463,
                                "src": "7517:16:138",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                  "typeString": "TConsensus"
                                }
                              },
                              {
                                "id": 28500,
                                "name": "newConsensusAddr",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 28438,
                                "src": "7535:16:138",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                                  "typeString": "TConsensus"
                                }
                              }
                            ],
                            "id": 28501,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "7516:36:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_userDefinedValueType$_TConsensus_$40030_$_t_userDefinedValueType$_TConsensus_$40030_$",
                              "typeString": "tuple(TConsensus,TConsensus)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_userDefinedValueType$_TConsensus_$40030_$_t_userDefinedValueType$_TConsensus_$40030_$returns$__$",
                              "typeString": "function IRoninTrustedOrganization.execChangeConsensusAddressForTrustedOrg(TConsensus,TConsensus)"
                            },
                            {
                              "typeIdentifier": "t_tuple$_t_userDefinedValueType$_TConsensus_$40030_$_t_userDefinedValueType$_TConsensus_$40030_$",
                              "typeString": "tuple(TConsensus,TConsensus)"
                            }
                          ],
                          "expression": {
                            "id": 28495,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "7417:3:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 28496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "7421:10:138",
                          "memberName": "encodeCall",
                          "nodeType": "MemberAccess",
                          "src": "7417:14:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 28502,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7417:143:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 28493,
                        "name": "trustedOrgContractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28485,
                        "src": "7382:22:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 28494,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7405:4:138",
                      "memberName": "call",
                      "nodeType": "MemberAccess",
                      "src": "7382:27:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 28503,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7382:184:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7363:203:138"
                },
                {
                  "condition": {
                    "id": 28506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "7577:8:138",
                    "subExpression": {
                      "id": 28505,
                      "name": "success",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28492,
                      "src": "7578:7:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 28512,
                  "nodeType": "IfStatement",
                  "src": "7573:74:138",
                  "trueBody": {
                    "id": 28511,
                    "nodeType": "Block",
                    "src": "7587:60:138",
                    "statements": [
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 28508,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 28435,
                              "src": "7637:2:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 28507,
                            "name": "ConsensusAddressOfNonGovernorChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7403,
                            "src": "7600:36:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 28509,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7600:40:138",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 28510,
                        "nodeType": "EmitStatement",
                        "src": "7595:45:138"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28514,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28443,
                        "src": "7667:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 28515,
                        "name": "newConsensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28438,
                        "src": "7677:16:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                          "typeString": "TConsensus"
                        }
                      ],
                      "id": 28513,
                      "name": "_setConsensus",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28963,
                      "src": "7653:13:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$7374_storage_ptr_$_t_userDefinedValueType$_TConsensus_$40030_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,TConsensus)"
                      }
                    },
                    "id": 28516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7653:41:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28517,
                  "nodeType": "ExpressionStatement",
                  "src": "7653:41:138"
                }
              ]
            },
            "baseFunctions": [
              7548
            ],
            "documentation": {
              "id": 28433,
              "nodeType": "StructuredDocumentation",
              "src": "5757:991:138",
              "text": " @inheritdoc IProfile\n @dev Side-effects on other contracts:\n - Update in Staking contract for Consensus address mapping:\n   + [x] Keep the same previous pool address.\n - Update in Validator contract for:\n   + [x] Consensus Address mapping\n   + [x] Bridge Address mapping\n   + [x] Jail mapping\n   + [x] Pending reward mapping\n   + [x] Schedule mapping\n - Update in Slashing contract for:\n   + [x] Handling slash indicator\n   + [x] Handling slash fast finality\n   + [x] Handling slash double sign\n - Update in Proposal contract for:\n   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit\n - Update Trusted Org contracts:\n   + If the current consensus is governor:\n      - [x] Remove and delete weight of the old consensus\n      - [x] Replace and add weight for the new consensus\n   + If the current consensus is not governor:\n      - [x] Do nothing"
            },
            "functionSelector": "1f97bdb1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "requestChangeConsensusAddr",
            "nameLocation": "6760:26:138",
            "parameters": {
              "id": 28439,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28435,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "6795:2:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28519,
                  "src": "6787:10:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28434,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6787:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28438,
                  "mutability": "mutable",
                  "name": "newConsensusAddr",
                  "nameLocation": "6810:16:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28519,
                  "src": "6799:27:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 28437,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28436,
                      "name": "TConsensus",
                      "nameLocations": [
                        "6799:10:138"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 40030,
                      "src": "6799:10:138"
                    },
                    "referencedDeclaration": 40030,
                    "src": "6799:10:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$40030",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6786:41:138"
            },
            "returnParameters": {
              "id": 28440,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6837:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28532,
            "nodeType": "FunctionDefinition",
            "src": "8301:135:138",
            "nodes": [],
            "body": {
              "id": 28531,
              "nodeType": "Block",
              "src": "8402:34:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "4e6f7420737570706f72746564",
                        "id": 28528,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8415:15:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e5b7c22b986abeee436d3f29779441c97ce367faa95f4de1bae94ece3817df25",
                          "typeString": "literal_string \"Not supported\""
                        },
                        "value": "Not supported"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_e5b7c22b986abeee436d3f29779441c97ce367faa95f4de1bae94ece3817df25",
                          "typeString": "literal_string \"Not supported\""
                        }
                      ],
                      "id": 28527,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -19,
                        -19
                      ],
                      "referencedDeclaration": -19,
                      "src": "8408:6:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 28529,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8408:23:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28530,
                  "nodeType": "ExpressionStatement",
                  "src": "8408:23:138"
                }
              ]
            },
            "baseFunctions": [
              7556
            ],
            "documentation": {
              "id": 28520,
              "nodeType": "StructuredDocumentation",
              "src": "7703:595:138",
              "text": " @inheritdoc IProfile\n @notice This method is not supported. Change treasury also requires changing the admin address.\n Using the {requestChangeAdminAddress} method instead\n @dev Side-effects on other contracts:\n - Update Validator contract:\n    + [x] Update (id => ValidatorCandidate) mapping\n - Update governance admin:\n    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.\n          Cannot impl since we cannot cancel the previous the ballot and\n          create a new ballot on behalf of the validator contract."
            },
            "functionSelector": "183584c1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "requestChangeTreasuryAddr",
            "nameLocation": "8310:25:138",
            "parameters": {
              "id": 28525,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28522,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28532,
                  "src": "8336:7:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28521,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8336:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28524,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28532,
                  "src": "8353:15:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 28523,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8353:15:138",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8335:52:138"
            },
            "returnParameters": {
              "id": 28526,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8402:0:138"
            },
            "scope": 28620,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28572,
            "nodeType": "FunctionDefinition",
            "src": "8478:372:138",
            "nodes": [],
            "body": {
              "id": 28571,
              "nodeType": "Block",
              "src": "8578:272:138",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    28544
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 28544,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "8609:8:138",
                      "nodeType": "VariableDeclaration",
                      "scope": 28571,
                      "src": "8584:33:138",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 28543,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 28542,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "8584:16:138"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 7374,
                          "src": "8584:16:138"
                        },
                        "referencedDeclaration": 7374,
                        "src": "8584:16:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 28548,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 28546,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28535,
                        "src": "8641:2:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28545,
                      "name": "_getId2ProfileHelper",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29149,
                      "src": "8620:20:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_struct$_CandidateProfile_$7374_storage_ptr_$",
                        "typeString": "function (address) view returns (struct IProfile.CandidateProfile storage pointer)"
                      }
                    },
                    "id": 28547,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8620:24:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile storage pointer"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8584:60:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28550,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28544,
                        "src": "8673:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      ],
                      "id": 28549,
                      "name": "_requireCandidateAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28606,
                      "src": "8650:22:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_CandidateProfile_$7374_storage_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer) view"
                      }
                    },
                    "id": 28551,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8650:32:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28552,
                  "nodeType": "ExpressionStatement",
                  "src": "8650:32:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28554,
                        "name": "pubkey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28537,
                        "src": "8716:6:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 28553,
                      "name": "_requireNonDuplicatedPubkey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28759,
                      "src": "8688:27:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (bytes memory) view"
                      }
                    },
                    "id": 28555,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8688:35:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28556,
                  "nodeType": "ExpressionStatement",
                  "src": "8688:35:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28558,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28544,
                        "src": "8756:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      ],
                      "id": 28557,
                      "name": "_checkPubkeyChangeCooldown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28818,
                      "src": "8729:26:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_CandidateProfile_$7374_storage_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer) view"
                      }
                    },
                    "id": 28559,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8729:36:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28560,
                  "nodeType": "ExpressionStatement",
                  "src": "8729:36:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28562,
                        "name": "pubkey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28537,
                        "src": "8785:6:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 28563,
                        "name": "proofOfPossession",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28539,
                        "src": "8793:17:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 28561,
                      "name": "_verifyPubkey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28799,
                      "src": "8771:13:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes_calldata_ptr_$_t_bytes_calldata_ptr_$returns$__$",
                        "typeString": "function (bytes calldata,bytes calldata)"
                      }
                    },
                    "id": 28564,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8771:40:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28565,
                  "nodeType": "ExpressionStatement",
                  "src": "8771:40:138"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28567,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28544,
                        "src": "8828:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 28568,
                        "name": "pubkey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28537,
                        "src": "8838:6:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 28566,
                      "name": "_setPubkey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29122,
                      "src": "8817:10:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$7374_storage_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,bytes memory)"
                      }
                    },
                    "id": 28569,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8817:28:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28570,
                  "nodeType": "ExpressionStatement",
                  "src": "8817:28:138"
                }
              ]
            },
            "baseFunctions": [
              7566
            ],
            "documentation": {
              "id": 28533,
              "nodeType": "StructuredDocumentation",
              "src": "8440:35:138",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "9a1a05e0",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changePubkey",
            "nameLocation": "8487:12:138",
            "parameters": {
              "id": 28540,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28535,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "8508:2:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28572,
                  "src": "8500:10:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28534,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8500:7:138",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28537,
                  "mutability": "mutable",
                  "name": "pubkey",
                  "nameLocation": "8527:6:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28572,
                  "src": "8512:21:138",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 28536,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "8512:5:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28539,
                  "mutability": "mutable",
                  "name": "proofOfPossession",
                  "nameLocation": "8550:17:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28572,
                  "src": "8535:32:138",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 28538,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "8535:5:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8499:69:138"
            },
            "returnParameters": {
              "id": 28541,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8578:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28606,
            "nodeType": "FunctionDefinition",
            "src": "8854:309:138",
            "nodes": [],
            "body": {
              "id": 28605,
              "nodeType": "Block",
              "src": "8935:228:138",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 28596,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 28582,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 28578,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "8952:3:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 28579,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8956:6:138",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "8952:10:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "expression": {
                          "id": 28580,
                          "name": "sProfile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28575,
                          "src": "8966:8:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                            "typeString": "struct IProfile.CandidateProfile storage pointer"
                          }
                        },
                        "id": 28581,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "8975:5:138",
                        "memberName": "admin",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 7358,
                        "src": "8966:14:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "8952:28:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "id": 28595,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "!",
                      "prefix": true,
                      "src": "8990:102:138",
                      "subExpression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 28590,
                              "name": "sProfile",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 28575,
                              "src": "9068:8:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                                "typeString": "struct IProfile.CandidateProfile storage pointer"
                              }
                            },
                            "id": 28591,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "9077:2:138",
                            "memberName": "id",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 7351,
                            "src": "9068:11:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "expression": {
                              "id": 28592,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "9081:3:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 28593,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "9085:6:138",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "9081:10:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 28585,
                                      "name": "ContractType",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 40311,
                                      "src": "9022:12:138",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                                        "typeString": "type(enum ContractType)"
                                      }
                                    },
                                    "id": 28586,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberLocation": "9035:9:138",
                                    "memberName": "VALIDATOR",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 40303,
                                    "src": "9022:22:138",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_ContractType_$40311",
                                      "typeString": "enum ContractType"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_enum$_ContractType_$40311",
                                      "typeString": "enum ContractType"
                                    }
                                  ],
                                  "id": 28584,
                                  "name": "getContract",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3484,
                                  "src": "9010:11:138",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$40311_$returns$_t_address_$",
                                    "typeString": "function (enum ContractType) view returns (address)"
                                  }
                                },
                                "id": 28587,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9010:35:138",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 28583,
                              "name": "IRoninValidatorSet",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10545,
                              "src": "8991:18:138",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$10545_$",
                                "typeString": "type(contract IRoninValidatorSet)"
                              }
                            },
                            "id": 28588,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8991:55:138",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                              "typeString": "contract IRoninValidatorSet"
                            }
                          },
                          "id": 28589,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9047:20:138",
                          "memberName": "isCandidateAdminById",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 10171,
                          "src": "8991:76:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address,address) view external returns (bool)"
                          }
                        },
                        "id": 28594,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8991:101:138",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "8952:140:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 28604,
                  "nodeType": "IfStatement",
                  "src": "8941:217:138",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 28598,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "9122:3:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 28599,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "9126:3:138",
                          "memberName": "sig",
                          "nodeType": "MemberAccess",
                          "src": "9122:7:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        {
                          "expression": {
                            "id": 28600,
                            "name": "RoleAccess",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40574,
                            "src": "9131:10:138",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RoleAccess_$40574_$",
                              "typeString": "type(enum RoleAccess)"
                            }
                          },
                          "id": 28601,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "9142:15:138",
                          "memberName": "CANDIDATE_ADMIN",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 40567,
                          "src": "9131:26:138",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RoleAccess_$40574",
                            "typeString": "enum RoleAccess"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          {
                            "typeIdentifier": "t_enum$_RoleAccess_$40574",
                            "typeString": "enum RoleAccess"
                          }
                        ],
                        "id": 28597,
                        "name": "ErrUnauthorized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40160,
                        "src": "9106:15:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_bytes4_$_t_enum$_RoleAccess_$40574_$returns$__$",
                          "typeString": "function (bytes4,enum RoleAccess) pure"
                        }
                      },
                      "id": 28602,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9106:52:138",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 28603,
                    "nodeType": "RevertStatement",
                    "src": "9099:59:138"
                  }
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_requireCandidateAdmin",
            "nameLocation": "8863:22:138",
            "parameters": {
              "id": 28576,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28575,
                  "mutability": "mutable",
                  "name": "sProfile",
                  "nameLocation": "8911:8:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28606,
                  "src": "8886:33:138",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                    "typeString": "struct IProfile.CandidateProfile"
                  },
                  "typeName": {
                    "id": 28574,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28573,
                      "name": "CandidateProfile",
                      "nameLocations": [
                        "8886:16:138"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 7374,
                      "src": "8886:16:138"
                    },
                    "referencedDeclaration": 7374,
                    "src": "8886:16:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$7374_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8885:35:138"
            },
            "returnParameters": {
              "id": 28577,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8935:0:138"
            },
            "scope": 28620,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 28619,
            "nodeType": "FunctionDefinition",
            "src": "9205:115:138",
            "nodes": [],
            "body": {
              "id": 28618,
              "nodeType": "Block",
              "src": "9275:45:138",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 28615,
                        "name": "cooldown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28609,
                        "src": "9306:8:138",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 28614,
                      "name": "_setPubkeyChangeCooldown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29175,
                      "src": "9281:24:138",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 28616,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9281:34:138",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 28617,
                  "nodeType": "ExpressionStatement",
                  "src": "9281:34:138"
                }
              ]
            },
            "baseFunctions": [
              7583
            ],
            "documentation": {
              "id": 28607,
              "nodeType": "StructuredDocumentation",
              "src": "9167:35:138",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "98a02c2c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 28612,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 28611,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "9265:9:138"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3558,
                  "src": "9265:9:138"
                },
                "nodeType": "ModifierInvocation",
                "src": "9265:9:138"
              }
            ],
            "name": "setPubkeyChangeCooldown",
            "nameLocation": "9214:23:138",
            "parameters": {
              "id": 28610,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28609,
                  "mutability": "mutable",
                  "name": "cooldown",
                  "nameLocation": "9246:8:138",
                  "nodeType": "VariableDeclaration",
                  "scope": 28619,
                  "src": "9238:16:138",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28608,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9238:7:138",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9237:18:138"
            },
            "returnParameters": {
              "id": 28613,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9275:0:138"
            },
            "scope": 28620,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 27958,
              "name": "IProfile",
              "nameLocations": [
                "578:8:138"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7584,
              "src": "578:8:138"
            },
            "id": 27959,
            "nodeType": "InheritanceSpecifier",
            "src": "578:8:138"
          },
          {
            "baseName": {
              "id": 27960,
              "name": "ProfileXComponents",
              "nameLocations": [
                "588:18:138"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29316,
              "src": "588:18:138"
            },
            "id": 27961,
            "nodeType": "InheritanceSpecifier",
            "src": "588:18:138"
          },
          {
            "baseName": {
              "id": 27962,
              "name": "Initializable",
              "nameLocations": [
                "608:13:138"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 150318,
              "src": "608:13:138"
            },
            "id": 27963,
            "nodeType": "InheritanceSpecifier",
            "src": "608:13:138"
          }
        ],
        "canonicalName": "Profile",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          28620,
          150318,
          29316,
          28819,
          29176,
          3544,
          40560,
          8893,
          3589,
          7584,
          20648,
          20655
        ],
        "name": "Profile",
        "nameLocation": "567:7:138",
        "scope": 28621,
        "usedErrors": [
          7420,
          7423,
          7426,
          7429,
          7437,
          7441,
          7446,
          7448,
          7454,
          7459,
          8866,
          20654,
          40132,
          40160,
          40175
        ],
        "usedEvents": [
          7379,
          7388,
          7398,
          7403,
          7410,
          7417,
          8874,
          150182
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 24874524,
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b603354610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60335460ff9081161015620000e2576033805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61273f80620000f46000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806398a02c2c116100cd578063c4d66de811610081578063de981f1b11610066578063de981f1b146102d5578063f4660940146102e8578063f9226b1a1461030857600080fd5b8063c4d66de8146102af578063d1cb8830146102c257600080fd5b8063b0abaea6116100b2578063b0abaea614610275578063b261596f1461027c578063b5017aef1461029c57600080fd5b806398a02c2c1461024f5780639a1a05e01461026257600080fd5b806350a9fc291161012457806384cb10101161010957806384cb1010146101f7578063865e6fd31461020a57806388660f2a1461021d57600080fd5b806350a9fc29146101a45780637e18b566146101d457600080fd5b80630840ba7214610156578063183584c11461016b5780631f97bdb11461017e5780633c3d841014610191575b600080fd5b610169610164366004611bed565b61031b565b005b610169610179366004611bed565b6104e8565b61016961018c366004611bed565b610530565b61016961019f366004611c26565b610714565b6101b76101b2366004611c3f565b6107fc565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e76101e2366004611c5c565b61080d565b60405190151581526020016101cb565b610169610205366004611bed565b6108f1565b610169610218366004611ca6565b610ac7565b61023061022b366004611c3f565b610ae6565b6040805192151583526001600160a01b039091166020830152016101cb565b61016961025d366004611c26565b610b17565b610169610270366004611d0b565b610b2b565b606a6101b7565b61028f61028a366004611dd3565b610bdd565b6040516101cb9190611e15565b6101696102aa366004611e62565b610cb6565b6101696102bd366004611c3f565b610dd3565b6101696102d0366004611feb565b610ee0565b6101b76102e33660046120dc565b610f30565b6102fb6102f6366004611c3f565b610fc4565b6040516101cb9190612147565b61028f610316366004611dd3565b6111a0565b603354600290610100900460ff1615801561033d575060335460ff8083169116105b6103a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6033805461ffff191660ff8316176101001790556103c4600984611253565b6103cf600a83611253565b60006103db6008610f30565b6001600160a01b031663ba77b06c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610418573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104409190810190612203565b905060005b81518110156104a0576000828281518110610462576104626122b5565b6020908102919091018101516001600160a01b031660008181526002909252604090912080546001600160a01b031916909117905550600101610445565b50506033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015260640161039c565b600061053b836112f9565b90506105468161134d565b610551600983611429565b60018101546001600160a01b0316600061056b6008610f30565b6040517fd93fa3060000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063d93fa30690604401600060405180830381600087803b1580156105d357600080fd5b505af11580156105e7573d6000803e3d6000fd5b5050505060006105f7600a610f30565b6040516001600160a01b038581166024830152878116604483015291925060009183169060640160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa0c302a7000000000000000000000000000000000000000000000000000000001790525161068191906122cb565b6000604051808303816000865af19150503d80600081146106be576040519150601f19603f3d011682016040523d82523d6000602084013e6106c3565b606091505b5050905080610701576040516001600160a01b038816907f940589fcab729233e520a0b808ffeabac5a6e90603d892a31cd4609b32547dd990600090a25b61070b8587611475565b50505050505050565b603354600390610100900460ff16158015610736575060335460ff8083169116105b6107995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161039c565b6033805461ffff191660ff8316176101001790556107b682600355565b6033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60006108078261151c565b92915050565b6000805b60028110156108e85760005b83826002811061082f5761082f6122b5565b60200281019061083f91906122e7565b90508110156108df576108c984836002811061085d5761085d6122b5565b60200281019061086d91906122e7565b8381811061087d5761087d6122b5565b905060200281019061088f9190612331565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061159392505050565b6108d7575060009392505050565b60010161081d565b50600101610811565b50600192915050565b60006108fc836112f9565b90506109078161134d565b610912600483611429565b600061091e6009610f30565b6040517f9ee3c3f80000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152336024830152858116604483015291925090821690639ee3c3f890606401600060405180830381600087803b15801561098c57600080fd5b505af11580156109a0573d6000803e3d6000fd5b5050505060006109b06008610f30565b6040517fea80d67d0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063ea80d67d90604401600060405180830381600087803b158015610a1857600080fd5b505af1158015610a2c573d6000803e3d6000fd5b50506040517fecd850cc0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301528416925063ecd850cc9150604401600060405180830381600087803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b50505050610ab683856115c2565b610ac08385611605565b5050505050565b610acf611648565b610ad8816116a2565b610ae28282611253565b5050565b600080610b0e836001600160a01b039081166000908152600260205260409020541680151591565b91509150915091565b610b1f611648565b610b2881600355565b50565b6000610b36866112f9565b9050610b418161134d565b610b8085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116f192505050565b610b8981611733565b610b958585858561177d565b610bd58186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061180a92505050565b505050505050565b60608167ffffffffffffffff811115610bf857610bf8611f0a565b604051908082528060200260200182016040528015610c21578160200160208202803683370190505b50905060005b82811015610caf57600080858584818110610c4457610c446122b5565b9050602002016020810190610c599190611c3f565b6001600160a01b0390811682526020820192909252604001600020600101548351911690839083908110610c8f57610c8f6122b5565b6001600160a01b0390921660209283029190910190910152600101610c27565b5092915050565b6009610cc1816118c7565b6001600160a01b038088166000908152602081905260409020805490911615610cfd5760405163249b38f960e01b815260040160405180910390fd5b60006040518061010001604052808a6001600160a01b031681526020018a6001600160a01b031681526020018b6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018290526040805191820181529181529101529050610db18161192c565b610dbd8787878761177d565b610dc78282611975565b50505050505050505050565b603354610100900460ff1615808015610df35750603354600160ff909116105b80610e0d5750303b158015610e0d575060335460ff166001145b610e705760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161039c565b6033805460ff191660011790558015610e93576033805461ff0019166101001790555b610e9e600883611253565b8015610ae2576033805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016107f0565b610ee8611648565b80516001600160a01b039081166000908152602081905260409020805490911615610f265760405163249b38f960e01b815260040160405180910390fd5b610ae28183611975565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610f6757610f67612378565b60ff1681526020810191909152604001600020546001600160a01b0316905080610fbf57816040517f812281be00000000000000000000000000000000000000000000000000000000815260040161039c91906123a2565b919050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082019290925260e08101919091526001600160a01b0380831660009081526020818152604091829020825161010081018452815485168152600182015485169281019290925260028101548416928201929092526003820154831660608201526004820154909216608083015260058101805460a08401919061107b906123b0565b80601f01602080910402602001604051908101604052809291908181526020018280546110a7906123b0565b80156110f45780601f106110c9576101008083540402835291602001916110f4565b820191906000526020600020905b8154815290600101906020018083116110d757829003601f168201915b5050505050815260200160068201548152602001600782018054611117906123b0565b80601f0160208091040260200160405190810160405280929190818152602001828054611143906123b0565b80156111905780601f1061116557610100808354040283529160200191611190565b820191906000526020600020905b81548152906001019060200180831161117357829003601f168201915b5050505050815250509050919050565b60608167ffffffffffffffff8111156111bb576111bb611f0a565b6040519080825280602002602001820160405280156111e4578160200160208202803683370190505b50905060005b82811015610caf57611221848483818110611207576112076122b5565b905060200201602081019061121c9190611c3f565b61151c565b828281518110611233576112336122b5565b6001600160a01b03909216602092830291909101909101526001016111ea565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561128957611289612378565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156112ca576112ca612378565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b565b6001600160a01b0380821660009081526020819052604090208054909116610fbf576040517f682a559600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101546001600160a01b0316331415806113fb575061136e6008610f30565b81546040517f46ebb2320000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529116906346ebb23290604401602060405180830381865afa1580156113d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f991906123ea565b155b15610b28576000356001600160e01b0319166004604051620f948f60ea1b815260040161039c92919061241c565b6001600160a01b03811661146b57816040517f57ed62e400000000000000000000000000000000000000000000000000000000815260040161039c919061243a565b610ae28282611a14565b600180830180546001600160a01b03908116600090815260026020908152604080832080546001600160a01b03199081169091558854888616808652838620805484169290971691909117909555855416841790945584905291909120805460ff191690921790915560095b83546040516001600160a01b03909116907fe9654874a1d2cdb1459fe91e0442173d77f8e1baa4897e3f5c10e769a1515d0690600090a45050565b6000806000611546846001600160a01b039081166000908152600260205260409020541680151591565b915091508161158c576040517f1e3d646f0000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161039c565b9392505050565b6000600160006115a884805160209091012090565b815260208101919091526040016000205460ff1692915050565b6002820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff1916909117905560046114e1565b6003820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff19169091179055600a6114e1565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146112f7576000356001600160e01b0319166001604051620f948f60ea1b815260040161039c92919061241c565b806001600160a01b03163b600003610b28576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161039c565b6116fa81611593565b15610b2857806040517f7995d6c800000000000000000000000000000000000000000000000000000000815260040161039c9190612448565b6003548160060154611745919061245b565b4211610b28576040517f07420f4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61178984848484611a74565b6117c757838383836040517f97cf1c8d00000000000000000000000000000000000000000000000000000000815260040161039c94939291906124a5565b7fb737fd977072c109cccc97108f9f8a9017af4bbf4d20938a747f17d8921c50a6848484846040516117fc94939291906124a5565b60405180910390a150505050565b816005018054611819906123b0565b15905061183357600782016118316005840182612524565b505b600582016118418282612601565b50426006830155600180600061185c84805160209091012090565b815260208101919091526040908101600020805460ff191692151592909217909155825490516001600160a01b03909116907fe13225a225fbfeebd9d707546f3d7adee5d72738ac686cc5b97266c49745a56b906118bb908490612448565b60405180910390a25050565b6118d081610f30565b6001600160a01b0316336001600160a01b031614610b28576000356001600160e01b03191681336040517f8383e63400000000000000000000000000000000000000000000000000000000815260040161039c939291906126b9565b61193b60098260200151611429565b61194a60048260400151611429565b611959600a8260600151611429565b611968600a8260800151611a14565b610b288160a001516116f1565b805182546001600160a01b0319166001600160a01b0390911617825560208101516119a1908390611475565b6119af8282604001516115c2565b6119bd828260600151611605565b6119cb828260800151611b62565b6119d9828260a0015161180a565b80516040516001600160a01b03909116907fc9da0ae38bd4761b72da1045c9b2618f0cd991dcac01e1f9bbf68474025f074390600090a25050565b6001600160a01b03811660009081526001602052604090205460ff1615610ae25781816001600160a01b03166040517fe4166aaa00000000000000000000000000000000000000000000000000000000815260040161039c9291906126ee565b604051600090606a906001908390611a969089908990899089906024016124a5565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7eae32c2000000000000000000000000000000000000000000000000000000001790528051909150611afb611baf565b602083016020828483895afa611b1057600094505b503d611b1b57600093505b83611b52576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159998505050505050505050565b6004820180546001600160a01b0319166001600160a01b03831690811790915515610ae2576001600160a01b03166000908152600160208190526040909120805460ff1916909117905550565b60405180602001604052806001906020820280368337509192915050565b6001600160a01b0381168114610b2857600080fd5b8035610fbf81611bcd565b60008060408385031215611c0057600080fd5b8235611c0b81611bcd565b91506020830135611c1b81611bcd565b809150509250929050565b600060208284031215611c3857600080fd5b5035919050565b600060208284031215611c5157600080fd5b813561158c81611bcd565b600060208284031215611c6e57600080fd5b813567ffffffffffffffff811115611c8557600080fd5b82016040810184101561158c57600080fd5b803560108110610fbf57600080fd5b60008060408385031215611cb957600080fd5b611c0b83611c97565b60008083601f840112611cd457600080fd5b50813567ffffffffffffffff811115611cec57600080fd5b602083019150836020828501011115611d0457600080fd5b9250929050565b600080600080600060608688031215611d2357600080fd5b8535611d2e81611bcd565b9450602086013567ffffffffffffffff80821115611d4b57600080fd5b611d5789838a01611cc2565b90965094506040880135915080821115611d7057600080fd5b50611d7d88828901611cc2565b969995985093965092949392505050565b60008083601f840112611da057600080fd5b50813567ffffffffffffffff811115611db857600080fd5b6020830191508360208260051b8501011115611d0457600080fd5b60008060208385031215611de657600080fd5b823567ffffffffffffffff811115611dfd57600080fd5b611e0985828601611d8e565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611e565783516001600160a01b031683529284019291840191600101611e31565b50909695505050505050565b600080600080600080600060a0888a031215611e7d57600080fd5b8735611e8881611bcd565b96506020880135611e9881611bcd565b95506040880135611ea881611bcd565b9450606088013567ffffffffffffffff80821115611ec557600080fd5b611ed18b838c01611cc2565b909650945060808a0135915080821115611eea57600080fd5b50611ef78a828b01611cc2565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611f4457611f44611f0a565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f7357611f73611f0a565b604052919050565b600082601f830112611f8c57600080fd5b813567ffffffffffffffff811115611fa657611fa6611f0a565b611fb9601f8201601f1916602001611f4a565b818152846020838601011115611fce57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ffd57600080fd5b813567ffffffffffffffff8082111561201557600080fd5b90830190610100828603121561202a57600080fd5b612032611f20565b61203b83611be2565b815261204960208401611be2565b602082015261205a60408401611be2565b604082015261206b60608401611be2565b606082015261207c60808401611be2565b608082015260a08301358281111561209357600080fd5b61209f87828601611f7b565b60a08301525060c083013560c082015260e0830135828111156120c157600080fd5b6120cd87828601611f7b565b60e08301525095945050505050565b6000602082840312156120ee57600080fd5b61158c82611c97565b60005b838110156121125781810151838201526020016120fa565b50506000910152565b600081518084526121338160208601602086016120f7565b601f01601f19169290920160200192915050565b602081526001600160a01b0382511660208201526000602083015161217760408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516101008060c08501526121d361012085018361211b565b915060c085015160e085015260e0850151601f1985840301828601526121f9838261211b565b9695505050505050565b6000602080838503121561221657600080fd5b825167ffffffffffffffff8082111561222e57600080fd5b818501915085601f83011261224257600080fd5b81518181111561225457612254611f0a565b8060051b9150612265848301611f4a565b818152918301840191848101908884111561227f57600080fd5b938501935b838510156122a9578451925061229983611bcd565b8282529385019390850190612284565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600082516122dd8184602087016120f7565b9190910192915050565b6000808335601e198436030181126122fe57600080fd5b83018035915067ffffffffffffffff82111561231957600080fd5b6020019150600581901b3603821315611d0457600080fd5b6000808335601e1984360301811261234857600080fd5b83018035915067ffffffffffffffff82111561236357600080fd5b602001915036819003821315611d0457600080fd5b634e487b7160e01b600052602160045260246000fd5b6010811061239e5761239e612378565b9052565b60208101610807828461238e565b600181811c908216806123c457607f821691505b6020821081036123e457634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156123fc57600080fd5b8151801515811461158c57600080fd5b600b811061239e5761239e612378565b6001600160e01b0319831681526040810161158c602083018461240c565b60208101610807828461240c565b60208152600061158c602083018461211b565b8082018082111561080757634e487b7160e01b600052601160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006124b960408301868861247c565b82810360208401526124cc81858761247c565b979650505050505050565b601f82111561251f576000816000526020600020601f850160051c810160208610156125005750805b601f850160051c820191505b81811015610bd55782815560010161250c565b505050565b81810361252f575050565b61253982546123b0565b67ffffffffffffffff81111561255157612551611f0a565b6125658161255f84546123b0565b846124d7565b6000601f82116001811461259957600083156125815750848201545b600019600385901b1c1916600184901b178455610ac0565b600085815260209020601f19841690600086815260209020845b838110156125d357828601548255600195860195909101906020016125b3565b50858310156125f15781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b815167ffffffffffffffff81111561261b5761261b611f0a565b6126298161255f84546123b0565b602080601f83116001811461265e57600084156126465750858301515b600019600386901b1c1916600185901b178555610bd5565b600085815260208120601f198616915b8281101561268d5788860151825594840194600190910190840161266e565b50858210156125f157939096015160001960f8600387901b161c19169092555050600190811b01905550565b6001600160e01b031984168152606081016126d7602083018561238e565b6001600160a01b0383166040830152949350505050565b604081016126fc828561240c565b826020830152939250505056fea264697066735822122059f6d383dc64e2a0baad834d987bef8f73f593a4d2941f58bb3473f31025910c64736f6c63430008160033",
  "chainId": 2021,
  "contractAbsolutePath": "Profile.sol",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c806398a02c2c116100cd578063c4d66de811610081578063de981f1b11610066578063de981f1b146102d5578063f4660940146102e8578063f9226b1a1461030857600080fd5b8063c4d66de8146102af578063d1cb8830146102c257600080fd5b8063b0abaea6116100b2578063b0abaea614610275578063b261596f1461027c578063b5017aef1461029c57600080fd5b806398a02c2c1461024f5780639a1a05e01461026257600080fd5b806350a9fc291161012457806384cb10101161010957806384cb1010146101f7578063865e6fd31461020a57806388660f2a1461021d57600080fd5b806350a9fc29146101a45780637e18b566146101d457600080fd5b80630840ba7214610156578063183584c11461016b5780631f97bdb11461017e5780633c3d841014610191575b600080fd5b610169610164366004611bed565b61031b565b005b610169610179366004611bed565b6104e8565b61016961018c366004611bed565b610530565b61016961019f366004611c26565b610714565b6101b76101b2366004611c3f565b6107fc565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e76101e2366004611c5c565b61080d565b60405190151581526020016101cb565b610169610205366004611bed565b6108f1565b610169610218366004611ca6565b610ac7565b61023061022b366004611c3f565b610ae6565b6040805192151583526001600160a01b039091166020830152016101cb565b61016961025d366004611c26565b610b17565b610169610270366004611d0b565b610b2b565b606a6101b7565b61028f61028a366004611dd3565b610bdd565b6040516101cb9190611e15565b6101696102aa366004611e62565b610cb6565b6101696102bd366004611c3f565b610dd3565b6101696102d0366004611feb565b610ee0565b6101b76102e33660046120dc565b610f30565b6102fb6102f6366004611c3f565b610fc4565b6040516101cb9190612147565b61028f610316366004611dd3565b6111a0565b603354600290610100900460ff1615801561033d575060335460ff8083169116105b6103a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6033805461ffff191660ff8316176101001790556103c4600984611253565b6103cf600a83611253565b60006103db6008610f30565b6001600160a01b031663ba77b06c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610418573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104409190810190612203565b905060005b81518110156104a0576000828281518110610462576104626122b5565b6020908102919091018101516001600160a01b031660008181526002909252604090912080546001600160a01b031916909117905550600101610445565b50506033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015260640161039c565b600061053b836112f9565b90506105468161134d565b610551600983611429565b60018101546001600160a01b0316600061056b6008610f30565b6040517fd93fa3060000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063d93fa30690604401600060405180830381600087803b1580156105d357600080fd5b505af11580156105e7573d6000803e3d6000fd5b5050505060006105f7600a610f30565b6040516001600160a01b038581166024830152878116604483015291925060009183169060640160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa0c302a7000000000000000000000000000000000000000000000000000000001790525161068191906122cb565b6000604051808303816000865af19150503d80600081146106be576040519150601f19603f3d011682016040523d82523d6000602084013e6106c3565b606091505b5050905080610701576040516001600160a01b038816907f940589fcab729233e520a0b808ffeabac5a6e90603d892a31cd4609b32547dd990600090a25b61070b8587611475565b50505050505050565b603354600390610100900460ff16158015610736575060335460ff8083169116105b6107995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161039c565b6033805461ffff191660ff8316176101001790556107b682600355565b6033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60006108078261151c565b92915050565b6000805b60028110156108e85760005b83826002811061082f5761082f6122b5565b60200281019061083f91906122e7565b90508110156108df576108c984836002811061085d5761085d6122b5565b60200281019061086d91906122e7565b8381811061087d5761087d6122b5565b905060200281019061088f9190612331565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061159392505050565b6108d7575060009392505050565b60010161081d565b50600101610811565b50600192915050565b60006108fc836112f9565b90506109078161134d565b610912600483611429565b600061091e6009610f30565b6040517f9ee3c3f80000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152336024830152858116604483015291925090821690639ee3c3f890606401600060405180830381600087803b15801561098c57600080fd5b505af11580156109a0573d6000803e3d6000fd5b5050505060006109b06008610f30565b6040517fea80d67d0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063ea80d67d90604401600060405180830381600087803b158015610a1857600080fd5b505af1158015610a2c573d6000803e3d6000fd5b50506040517fecd850cc0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301528416925063ecd850cc9150604401600060405180830381600087803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b50505050610ab683856115c2565b610ac08385611605565b5050505050565b610acf611648565b610ad8816116a2565b610ae28282611253565b5050565b600080610b0e836001600160a01b039081166000908152600260205260409020541680151591565b91509150915091565b610b1f611648565b610b2881600355565b50565b6000610b36866112f9565b9050610b418161134d565b610b8085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116f192505050565b610b8981611733565b610b958585858561177d565b610bd58186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061180a92505050565b505050505050565b60608167ffffffffffffffff811115610bf857610bf8611f0a565b604051908082528060200260200182016040528015610c21578160200160208202803683370190505b50905060005b82811015610caf57600080858584818110610c4457610c446122b5565b9050602002016020810190610c599190611c3f565b6001600160a01b0390811682526020820192909252604001600020600101548351911690839083908110610c8f57610c8f6122b5565b6001600160a01b0390921660209283029190910190910152600101610c27565b5092915050565b6009610cc1816118c7565b6001600160a01b038088166000908152602081905260409020805490911615610cfd5760405163249b38f960e01b815260040160405180910390fd5b60006040518061010001604052808a6001600160a01b031681526020018a6001600160a01b031681526020018b6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018290526040805191820181529181529101529050610db18161192c565b610dbd8787878761177d565b610dc78282611975565b50505050505050505050565b603354610100900460ff1615808015610df35750603354600160ff909116105b80610e0d5750303b158015610e0d575060335460ff166001145b610e705760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161039c565b6033805460ff191660011790558015610e93576033805461ff0019166101001790555b610e9e600883611253565b8015610ae2576033805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016107f0565b610ee8611648565b80516001600160a01b039081166000908152602081905260409020805490911615610f265760405163249b38f960e01b815260040160405180910390fd5b610ae28183611975565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610f6757610f67612378565b60ff1681526020810191909152604001600020546001600160a01b0316905080610fbf57816040517f812281be00000000000000000000000000000000000000000000000000000000815260040161039c91906123a2565b919050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082019290925260e08101919091526001600160a01b0380831660009081526020818152604091829020825161010081018452815485168152600182015485169281019290925260028101548416928201929092526003820154831660608201526004820154909216608083015260058101805460a08401919061107b906123b0565b80601f01602080910402602001604051908101604052809291908181526020018280546110a7906123b0565b80156110f45780601f106110c9576101008083540402835291602001916110f4565b820191906000526020600020905b8154815290600101906020018083116110d757829003601f168201915b5050505050815260200160068201548152602001600782018054611117906123b0565b80601f0160208091040260200160405190810160405280929190818152602001828054611143906123b0565b80156111905780601f1061116557610100808354040283529160200191611190565b820191906000526020600020905b81548152906001019060200180831161117357829003601f168201915b5050505050815250509050919050565b60608167ffffffffffffffff8111156111bb576111bb611f0a565b6040519080825280602002602001820160405280156111e4578160200160208202803683370190505b50905060005b82811015610caf57611221848483818110611207576112076122b5565b905060200201602081019061121c9190611c3f565b61151c565b828281518110611233576112336122b5565b6001600160a01b03909216602092830291909101909101526001016111ea565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561128957611289612378565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156112ca576112ca612378565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b565b6001600160a01b0380821660009081526020819052604090208054909116610fbf576040517f682a559600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101546001600160a01b0316331415806113fb575061136e6008610f30565b81546040517f46ebb2320000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529116906346ebb23290604401602060405180830381865afa1580156113d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f991906123ea565b155b15610b28576000356001600160e01b0319166004604051620f948f60ea1b815260040161039c92919061241c565b6001600160a01b03811661146b57816040517f57ed62e400000000000000000000000000000000000000000000000000000000815260040161039c919061243a565b610ae28282611a14565b600180830180546001600160a01b03908116600090815260026020908152604080832080546001600160a01b03199081169091558854888616808652838620805484169290971691909117909555855416841790945584905291909120805460ff191690921790915560095b83546040516001600160a01b03909116907fe9654874a1d2cdb1459fe91e0442173d77f8e1baa4897e3f5c10e769a1515d0690600090a45050565b6000806000611546846001600160a01b039081166000908152600260205260409020541680151591565b915091508161158c576040517f1e3d646f0000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161039c565b9392505050565b6000600160006115a884805160209091012090565b815260208101919091526040016000205460ff1692915050565b6002820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff1916909117905560046114e1565b6003820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff19169091179055600a6114e1565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146112f7576000356001600160e01b0319166001604051620f948f60ea1b815260040161039c92919061241c565b806001600160a01b03163b600003610b28576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161039c565b6116fa81611593565b15610b2857806040517f7995d6c800000000000000000000000000000000000000000000000000000000815260040161039c9190612448565b6003548160060154611745919061245b565b4211610b28576040517f07420f4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61178984848484611a74565b6117c757838383836040517f97cf1c8d00000000000000000000000000000000000000000000000000000000815260040161039c94939291906124a5565b7fb737fd977072c109cccc97108f9f8a9017af4bbf4d20938a747f17d8921c50a6848484846040516117fc94939291906124a5565b60405180910390a150505050565b816005018054611819906123b0565b15905061183357600782016118316005840182612524565b505b600582016118418282612601565b50426006830155600180600061185c84805160209091012090565b815260208101919091526040908101600020805460ff191692151592909217909155825490516001600160a01b03909116907fe13225a225fbfeebd9d707546f3d7adee5d72738ac686cc5b97266c49745a56b906118bb908490612448565b60405180910390a25050565b6118d081610f30565b6001600160a01b0316336001600160a01b031614610b28576000356001600160e01b03191681336040517f8383e63400000000000000000000000000000000000000000000000000000000815260040161039c939291906126b9565b61193b60098260200151611429565b61194a60048260400151611429565b611959600a8260600151611429565b611968600a8260800151611a14565b610b288160a001516116f1565b805182546001600160a01b0319166001600160a01b0390911617825560208101516119a1908390611475565b6119af8282604001516115c2565b6119bd828260600151611605565b6119cb828260800151611b62565b6119d9828260a0015161180a565b80516040516001600160a01b03909116907fc9da0ae38bd4761b72da1045c9b2618f0cd991dcac01e1f9bbf68474025f074390600090a25050565b6001600160a01b03811660009081526001602052604090205460ff1615610ae25781816001600160a01b03166040517fe4166aaa00000000000000000000000000000000000000000000000000000000815260040161039c9291906126ee565b604051600090606a906001908390611a969089908990899089906024016124a5565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7eae32c2000000000000000000000000000000000000000000000000000000001790528051909150611afb611baf565b602083016020828483895afa611b1057600094505b503d611b1b57600093505b83611b52576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159998505050505050505050565b6004820180546001600160a01b0319166001600160a01b03831690811790915515610ae2576001600160a01b03166000908152600160208190526040909120805460ff1916909117905550565b60405180602001604052806001906020820280368337509192915050565b6001600160a01b0381168114610b2857600080fd5b8035610fbf81611bcd565b60008060408385031215611c0057600080fd5b8235611c0b81611bcd565b91506020830135611c1b81611bcd565b809150509250929050565b600060208284031215611c3857600080fd5b5035919050565b600060208284031215611c5157600080fd5b813561158c81611bcd565b600060208284031215611c6e57600080fd5b813567ffffffffffffffff811115611c8557600080fd5b82016040810184101561158c57600080fd5b803560108110610fbf57600080fd5b60008060408385031215611cb957600080fd5b611c0b83611c97565b60008083601f840112611cd457600080fd5b50813567ffffffffffffffff811115611cec57600080fd5b602083019150836020828501011115611d0457600080fd5b9250929050565b600080600080600060608688031215611d2357600080fd5b8535611d2e81611bcd565b9450602086013567ffffffffffffffff80821115611d4b57600080fd5b611d5789838a01611cc2565b90965094506040880135915080821115611d7057600080fd5b50611d7d88828901611cc2565b969995985093965092949392505050565b60008083601f840112611da057600080fd5b50813567ffffffffffffffff811115611db857600080fd5b6020830191508360208260051b8501011115611d0457600080fd5b60008060208385031215611de657600080fd5b823567ffffffffffffffff811115611dfd57600080fd5b611e0985828601611d8e565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611e565783516001600160a01b031683529284019291840191600101611e31565b50909695505050505050565b600080600080600080600060a0888a031215611e7d57600080fd5b8735611e8881611bcd565b96506020880135611e9881611bcd565b95506040880135611ea881611bcd565b9450606088013567ffffffffffffffff80821115611ec557600080fd5b611ed18b838c01611cc2565b909650945060808a0135915080821115611eea57600080fd5b50611ef78a828b01611cc2565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611f4457611f44611f0a565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f7357611f73611f0a565b604052919050565b600082601f830112611f8c57600080fd5b813567ffffffffffffffff811115611fa657611fa6611f0a565b611fb9601f8201601f1916602001611f4a565b818152846020838601011115611fce57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ffd57600080fd5b813567ffffffffffffffff8082111561201557600080fd5b90830190610100828603121561202a57600080fd5b612032611f20565b61203b83611be2565b815261204960208401611be2565b602082015261205a60408401611be2565b604082015261206b60608401611be2565b606082015261207c60808401611be2565b608082015260a08301358281111561209357600080fd5b61209f87828601611f7b565b60a08301525060c083013560c082015260e0830135828111156120c157600080fd5b6120cd87828601611f7b565b60e08301525095945050505050565b6000602082840312156120ee57600080fd5b61158c82611c97565b60005b838110156121125781810151838201526020016120fa565b50506000910152565b600081518084526121338160208601602086016120f7565b601f01601f19169290920160200192915050565b602081526001600160a01b0382511660208201526000602083015161217760408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516101008060c08501526121d361012085018361211b565b915060c085015160e085015260e0850151601f1985840301828601526121f9838261211b565b9695505050505050565b6000602080838503121561221657600080fd5b825167ffffffffffffffff8082111561222e57600080fd5b818501915085601f83011261224257600080fd5b81518181111561225457612254611f0a565b8060051b9150612265848301611f4a565b818152918301840191848101908884111561227f57600080fd5b938501935b838510156122a9578451925061229983611bcd565b8282529385019390850190612284565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600082516122dd8184602087016120f7565b9190910192915050565b6000808335601e198436030181126122fe57600080fd5b83018035915067ffffffffffffffff82111561231957600080fd5b6020019150600581901b3603821315611d0457600080fd5b6000808335601e1984360301811261234857600080fd5b83018035915067ffffffffffffffff82111561236357600080fd5b602001915036819003821315611d0457600080fd5b634e487b7160e01b600052602160045260246000fd5b6010811061239e5761239e612378565b9052565b60208101610807828461238e565b600181811c908216806123c457607f821691505b6020821081036123e457634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156123fc57600080fd5b8151801515811461158c57600080fd5b600b811061239e5761239e612378565b6001600160e01b0319831681526040810161158c602083018461240c565b60208101610807828461240c565b60208152600061158c602083018461211b565b8082018082111561080757634e487b7160e01b600052601160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006124b960408301868861247c565b82810360208401526124cc81858761247c565b979650505050505050565b601f82111561251f576000816000526020600020601f850160051c810160208610156125005750805b601f850160051c820191505b81811015610bd55782815560010161250c565b505050565b81810361252f575050565b61253982546123b0565b67ffffffffffffffff81111561255157612551611f0a565b6125658161255f84546123b0565b846124d7565b6000601f82116001811461259957600083156125815750848201545b600019600385901b1c1916600184901b178455610ac0565b600085815260209020601f19841690600086815260209020845b838110156125d357828601548255600195860195909101906020016125b3565b50858310156125f15781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b815167ffffffffffffffff81111561261b5761261b611f0a565b6126298161255f84546123b0565b602080601f83116001811461265e57600084156126465750858301515b600019600386901b1c1916600185901b178555610bd5565b600085815260208120601f198616915b8281101561268d5788860151825594840194600190910190840161266e565b50858210156125f157939096015160001960f8600387901b161c19169092555050600190811b01905550565b6001600160e01b031984168152606081016126d7602083018561238e565b6001600160a01b0383166040830152949350505050565b604081016126fc828561240c565b826020830152939250505056fea264697066735822122059f6d383dc64e2a0baad834d987bef8f73f593a4d2941f58bb3473f31025910c64736f6c63430008160033",
  "deployer": "0x31762cdd4Aa65CD6f5F09D7a05a56211720A1168",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "addNewProfile((address,address,address,address,address,bytes,uint256,bytes))": {
        "details": "Requirements: - The profile must not be existent before. - Only contract admin can call this method."
      },
      "arePublicKeysRegistered(bytes[][2])": {
        "details": "Cross-contract function to for slash indicator to check the list of public keys in finality slash proof Returns whether all public keys are registered."
      },
      "changePubkey(address,bytes,bytes)": {
        "details": "Requirements: - The profile must be existed. - Only user with candidate admin role can call this method. - New public key must not be duplicated. - The proof of public key possession must be verified successfully. - The public key change cooldown must be ended."
      },
      "execApplyValidatorCandidate(address,address,address,bytes,bytes)": {
        "details": "Cross-contract function to add/update new profile of a validator candidate when they applying for candidate role. Requirements: - Only `stakingContract` can call this method."
      },
      "getConsensus2Id(address)": {
        "details": "Getter to backward query from `consensus` address to `id` address, revert if not found."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getId2Profile(address)": {
        "details": "Getter to query full `profile` from `id` address."
      },
      "getManyConsensus2Id(address[])": {
        "details": "Getter to backward batch query from `consensus` address to `id` address."
      },
      "getManyId2Consensus(address[])": {
        "details": "Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist."
      },
      "precompileVerifyBLSPublicKeyAddress()": {
        "details": "Gets the address of the precompile of validating double sign evidence"
      },
      "requestChangeAdminAddress(address,address)": {
        "details": "Side-effects on other contracts: - Update Staking contract:    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.    + [x] Move staking amount of previous admin to the the new admin. - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical."
      },
      "requestChangeConsensusAddr(address,address)": {
        "details": "Side-effects on other contracts: - Update in Staking contract for Consensus address mapping:   + [x] Keep the same previous pool address. - Update in Validator contract for:   + [x] Consensus Address mapping   + [x] Bridge Address mapping   + [x] Jail mapping   + [x] Pending reward mapping   + [x] Schedule mapping - Update in Slashing contract for:   + [x] Handling slash indicator   + [x] Handling slash fast finality   + [x] Handling slash double sign - Update in Proposal contract for:   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit - Update Trusted Org contracts:   + If the current consensus is governor:      - [x] Remove and delete weight of the old consensus      - [x] Replace and add weight for the new consensus   + If the current consensus is not governor:      - [x] Do nothing"
      },
      "requestChangeTreasuryAddr(address,address)": {
        "details": "Side-effects on other contracts: - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - Update governance admin:    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.          Cannot impl since we cannot cancel the previous the ballot and          create a new ballot on behalf of the validator contract."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setPubkeyChangeCooldown(uint256)": {
        "details": "Change the cooldown between 2 public key change Requirement:  - Only admin can call this method"
      },
      "tryGetConsensus2Id(address)": {
        "details": "Getter to backward query from `consensus` address to `id` address."
      }
    },
    "events": {
      "ConsensusAddressOfNonGovernorChanged(address)": {
        "details": "Event emitted when the consensus of a non-governor profile is changed."
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ProfileAdded(address)": {
        "details": "Event emitted when a profile with `id` is added."
      },
      "ProfileAddressChanged(address,uint8,address)": {
        "details": "Event emitted when a address in a profile is changed."
      },
      "ProfileMigrated(address,address,address)": {
        "details": "Event emitted when the profile is migrated (mostly when REP-4 update)."
      },
      "PubkeyChanged(address,bytes)": {
        "details": "Event emitted when the pubkey of the `id` is changed."
      },
      "PubkeyVerified(bytes,bytes)": {
        "details": "Event emitted when the pubkey is verified successfully."
      }
    },
    "errors": {
      "ErrCallPrecompiled()": [
        {
          "details": "Error of call to precompile fails."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrDuplicatedInfo(uint8,uint256)": [
        {
          "details": "Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key, and with value type of `infoType`."
        }
      ],
      "ErrExistentProfile()": [
        {
          "details": "Error of already existed profile."
        }
      ],
      "ErrIdAndConsensusDiffer()": [
        {
          "details": "Error when create a new profile whose id and consensus are not identical."
        }
      ],
      "ErrNonExistentProfile()": [
        {
          "details": "Error of non existed profile."
        }
      ],
      "ErrPubkeyChangeCooldownNotEnded()": [
        {
          "details": "Error when failed to change public key because cooldown is not ended."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrCallPrecompiled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum RoleAccess\",\"name\":\"infoType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ErrDuplicatedInfo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"ErrDuplicatedPubkey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExistentProfile\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrIdAndConsensusDiffer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"ErrInvalidProofOfPossession\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"ErrLookUpIdFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNonExistentProfile\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrPubkeyChangeCooldownNotEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum RoleAccess\",\"name\":\"infoType\",\"type\":\"uint8\"}],\"name\":\"ErrZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroPubkey\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"ConsensusAddressOfNonGovernorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"ProfileAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RoleAccess\",\"name\":\"addressType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ProfileAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"ProfileMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"PubkeyVerified\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__reservedGovernor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"pubkeyLastChange\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oldPubkey\",\"type\":\"bytes\"}],\"internalType\":\"struct IProfile.CandidateProfile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"name\":\"addNewProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[][2]\",\"name\":\"listOfPublicKey\",\"type\":\"bytes[][2]\"}],\"name\":\"arePublicKeysRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"changePubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"execApplyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getConsensus2Id\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"getId2Profile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__reservedGovernor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"pubkeyLastChange\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oldPubkey\",\"type\":\"bytes\"}],\"internalType\":\"struct IProfile.CandidateProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"name\":\"getManyConsensus2Id\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"}],\"name\":\"getManyId2Consensus\",\"outputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedOrgContract\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileVerifyBLSPublicKeyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdminAddr\",\"type\":\"address\"}],\"name\":\"requestChangeAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"newConsensusAddr\",\"type\":\"address\"}],\"name\":\"requestChangeConsensusAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestChangeTreasuryAddr\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"setPubkeyChangeCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"tryGetConsensus2Id\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrCallPrecompiled()\":[{\"details\":\"Error of call to precompile fails.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrDuplicatedInfo(uint8,uint256)\":[{\"details\":\"Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key, and with value type of `infoType`.\"}],\"ErrExistentProfile()\":[{\"details\":\"Error of already existed profile.\"}],\"ErrIdAndConsensusDiffer()\":[{\"details\":\"Error when create a new profile whose id and consensus are not identical.\"}],\"ErrNonExistentProfile()\":[{\"details\":\"Error of non existed profile.\"}],\"ErrPubkeyChangeCooldownNotEnded()\":[{\"details\":\"Error when failed to change public key because cooldown is not ended.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"ConsensusAddressOfNonGovernorChanged(address)\":{\"details\":\"Event emitted when the consensus of a non-governor profile is changed.\"},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ProfileAdded(address)\":{\"details\":\"Event emitted when a profile with `id` is added.\"},\"ProfileAddressChanged(address,uint8,address)\":{\"details\":\"Event emitted when a address in a profile is changed.\"},\"ProfileMigrated(address,address,address)\":{\"details\":\"Event emitted when the profile is migrated (mostly when REP-4 update).\"},\"PubkeyChanged(address,bytes)\":{\"details\":\"Event emitted when the pubkey of the `id` is changed.\"},\"PubkeyVerified(bytes,bytes)\":{\"details\":\"Event emitted when the pubkey is verified successfully.\"}},\"kind\":\"dev\",\"methods\":{\"addNewProfile((address,address,address,address,address,bytes,uint256,bytes))\":{\"details\":\"Requirements: - The profile must not be existent before. - Only contract admin can call this method.\"},\"arePublicKeysRegistered(bytes[][2])\":{\"details\":\"Cross-contract function to for slash indicator to check the list of public keys in finality slash proof Returns whether all public keys are registered.\"},\"changePubkey(address,bytes,bytes)\":{\"details\":\"Requirements: - The profile must be existed. - Only user with candidate admin role can call this method. - New public key must not be duplicated. - The proof of public key possession must be verified successfully. - The public key change cooldown must be ended.\"},\"execApplyValidatorCandidate(address,address,address,bytes,bytes)\":{\"details\":\"Cross-contract function to add/update new profile of a validator candidate when they applying for candidate role. Requirements: - Only `stakingContract` can call this method.\"},\"getConsensus2Id(address)\":{\"details\":\"Getter to backward query from `consensus` address to `id` address, revert if not found.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getId2Profile(address)\":{\"details\":\"Getter to query full `profile` from `id` address.\"},\"getManyConsensus2Id(address[])\":{\"details\":\"Getter to backward batch query from `consensus` address to `id` address.\"},\"getManyId2Consensus(address[])\":{\"details\":\"Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\"},\"precompileVerifyBLSPublicKeyAddress()\":{\"details\":\"Gets the address of the precompile of validating double sign evidence\"},\"requestChangeAdminAddress(address,address)\":{\"details\":\"Side-effects on other contracts: - Update Staking contract:    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.    + [x] Move staking amount of previous admin to the the new admin. - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical.\"},\"requestChangeConsensusAddr(address,address)\":{\"details\":\"Side-effects on other contracts: - Update in Staking contract for Consensus address mapping:   + [x] Keep the same previous pool address. - Update in Validator contract for:   + [x] Consensus Address mapping   + [x] Bridge Address mapping   + [x] Jail mapping   + [x] Pending reward mapping   + [x] Schedule mapping - Update in Slashing contract for:   + [x] Handling slash indicator   + [x] Handling slash fast finality   + [x] Handling slash double sign - Update in Proposal contract for:   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit - Update Trusted Org contracts:   + If the current consensus is governor:      - [x] Remove and delete weight of the old consensus      - [x] Replace and add weight for the new consensus   + If the current consensus is not governor:      - [x] Do nothing\"},\"requestChangeTreasuryAddr(address,address)\":{\"details\":\"Side-effects on other contracts: - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - Update governance admin:    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.          Cannot impl since we cannot cancel the previous the ballot and          create a new ballot on behalf of the validator contract.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setPubkeyChangeCooldown(uint256)\":{\"details\":\"Change the cooldown between 2 public key change Requirement:  - Only admin can call this method\"},\"tryGetConsensus2Id(address)\":{\"details\":\"Getter to backward query from `consensus` address to `id` address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewProfile((address,address,address,address,address,bytes,uint256,bytes))\":{\"notice\":\"Add a new profile.\"},\"changePubkey(address,bytes,bytes)\":{\"notice\":\"The candidate admin changes the public key.\"},\"requestChangeTreasuryAddr(address,address)\":{\"notice\":\"This method is not supported. Change treasury also requires changing the admin address. Using the {requestChangeAdminAddress} method instead\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/profile/Profile.sol\":\"Profile\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Pool admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Last public key change timestamp.\\n    uint256 pubkeyLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the consensus of a non-governor profile is changed.\\n  event ConsensusAddressOfNonGovernorChanged(address indexed id);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change public key because cooldown is not ended.\\n  error ErrPubkeyChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n  error ErrLookUpIdFailed(TConsensus consensus);\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address, revert if not found.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function tryGetConsensus2Id(TConsensus consensus) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Add a new profile.\\n   *\\n   * @dev Requirements:\\n   * - The profile must not be existent before.\\n   * - Only contract admin can call this method.\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external;\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setPubkeyChangeCooldown(uint256 cooldown) external;\\n}\\n\",\"keccak256\":\"0x58b7ec4bd5c891807906d5b6d9a23ffb98fed02a795f1d5507f6f1a39d253cb3\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x0b2a44131128f965e20cbea424987817cb504502e5d83d6523ae45ffeb5e53fe\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    /**\\n     * @dev Address of the pool.\\n     * @custom non-volatile-storage Permanently set to the first consensus address of the candidate.\\n     */\\n    address pid;\\n\\n    /**\\n     * @dev The address of the pool admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with the admin in `Profile-CandidateProfile`.\\n     */\\n    address __shadowedPoolAdmin;\\n\\n    /// @dev Self-staking amount\\n    uint256 stakingAmount;\\n\\n    /// @dev Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n\\n    /// @dev Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n\\n    /// @dev Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n\\n    /// @dev Mapping that indicate an admin was either current or previous admin of this pool\\n    mapping(address => bool) wasAdmin;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(TConsensus consensusAddr, address poolId);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `admin` is currently active.\\n   */\\n  function isAdminOfActivePool(address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address admin) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool details.\\n   */\\n  function getPoolDetail(\\n    TConsensus consensusAddr\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  function getPoolDetailById(\\n    address poolId\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external;\\n}\\n\",\"keccak256\":\"0x074b913dc7edd77f6826aeaf0b57c51637b778865205b2d0f497ca0c272853bc\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the commission rate range is updated.\\n  event CommissionRateRangeUpdated(uint256 minRate, uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the holder of the staking amount in the `poolId` is changed.\\n  event StakeholderChanged(address indexed poolId, address oldAdmin , address newAdmin, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed poolId, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] poolIds);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed poolId,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed poolId,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of cannot transfer RON to specified target.\\n  error ErrCannotInitTransferRON(address addr, string extraInfo);\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the commission rate range that the candidate can set.\\n   */\\n  function getCommissionRateRange() external view returns (uint256 minRange, uint256 maxRange);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the commission rate range that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `CommissionRateRangeUpdated` event.\\n   *\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata pools, uint256 period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `consensusAddr` for `amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x676f728608e5ef14ebf4fea88ca5ef225e4c0cc19871136fe71ab64479bf7a76\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed poolId, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(TConsensus consensusAddrSrc, TConsensus consensusAddrDst, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(\\n    address user,\\n    TConsensus[] calldata consensusAddrList\\n  ) external view returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(TConsensus[] calldata consensusAddrList) external returns (uint256 amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(\\n    TConsensus[] calldata consensusAddrList,\\n    TConsensus consensusAddrDst\\n  ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xe8a650a7348d45b2614ece66083f140801e8375bb8b733addf02209073991ef3\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolId, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolId, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolId, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolIds, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolIds, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolIds);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(\\n    TConsensus[] calldata consensusAddrs,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  function getManyStakingAmountsById(\\n    address[] calldata poolIds,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools corresponding to `consensusAddrs`.\\n   */\\n  function getManyStakingTotals(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `poolIds`.\\n   */\\n  function getManyStakingTotalsById(\\n    address[] calldata poolIds\\n  ) external view returns (uint256[] memory stakingAmounts_);\\n}\\n\",\"keccak256\":\"0xa1b17b962f24571a7125c33420ead1fba5be4c03caabb47916d4ca597fa91482\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./IStakingCallback.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking, IStakingCallback {\\n  /// @dev Event emitted when the `wasAdmin` is finished to migrate.\\n  event MigrateWasAdminFinished();\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(address[] calldata poolIds, uint256[] calldata rewards, uint256 period) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address poolId, uint256 amount) external returns (uint256 actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xcb47179ecec12817f44b3f43e0477260d3453b6608cddf330554f13b63a6d8db\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddress(address poolId, address currAdminAddr, address newAdminAddr) external;\\n}\\n\",\"keccak256\":\"0x555b90214ae8cb66c72a40f343a4933ea87b1e82bb0933c81ae92401b20c5f43\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdminById(address id, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xf68c390a0b117a99ddc8650cf21695d778faa9a479d5edfa42957a4048027031\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeAdminAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddress(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddress(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeTreasuryAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddress(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xfbe83dc9a4df46f4eb34b6d68c73041de663f188671264c7fe5315b8a0813511\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed cid,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] cids,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xabf7541c6acfef6db495585f74bc9be88a65c20b09850197bc06ab452f07d172\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0xaa2df8b56a83730a3a1b3876708570d70843802737ff7c776a5725c71d7ea8f7\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0xf4f96a624e7c77bbce044c67e3f4b406e65871debc19e7bfab663c1fcfcbc7b0\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x27afa712094804b997f55e8f8d320760e07d7260ab33aeb8fb61c39849f09bf3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the consensus address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the id is block producer or not.\\n   */\\n  function isBlockProducerById(address id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xdf65d1580d3d3c7624c293e38b270fdd69285b58fe4e67b03ed71ac50bb1ef08\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PCUVerifyBLSPublicKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUVerifyBLSPublicKey is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of validating double sign evidence\\n  function precompileVerifyBLSPublicKeyAddress() public view virtual returns (address) {\\n    return address(0x6a);\\n  }\\n\\n  /**\\n   * @dev Validates the proof of possession of BLS public key\\n   *\\n   * Note: The verify process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcVerifyBLSPublicKey(\\n    bytes calldata publicKey,\\n    bytes calldata proofOfPossession\\n  ) internal view virtual returns (bool validPublicKey) {\\n    address smc = precompileVerifyBLSPublicKeyAddress();\\n    bool success = true;\\n\\n    bytes memory payload = abi.encodeWithSignature(\\n      \\\"validateProofOfPossession(bytes,bytes)\\\",\\n      publicKey,\\n      proofOfPossession\\n    );\\n    uint payloadLength = payload.length;\\n    uint[1] memory output;\\n\\n    assembly {\\n      let payloadStart := add(payload, 0x20)\\n      if iszero(staticcall(gas(), smc, payloadStart, payloadLength, output, 0x20)) {\\n        success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        success := 0\\n      }\\n    }\\n\\n    if (!success) revert ErrCallPrecompiled();\\n    return (output[0] != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x531462d5448ad4cc818da59626c383a3cadd52331a8228bf4ce3fa62c0cbffd2\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompiledUsage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PrecompiledUsage {\\n  /// @dev Error of call to precompile fails.\\n  error ErrCallPrecompiled();\\n}\\n\",\"keccak256\":\"0x76facc3f3a8dd573c826bbbfedaa5cd8ef30963fbabd8c163c0c72b6efea5551\",\"license\":\"MIT\"},\"contracts/ronin/profile/Profile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/validator/ICandidateManager.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"./ProfileXComponents.sol\\\";\\nimport { ErrUnauthorized, RoleAccess } from \\\"../../utils/CommonErrors.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ncontract Profile is IProfile, ProfileXComponents, Initializable {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address validatorContract) external initializer {\\n    _setContract(ContractType.VALIDATOR, validatorContract);\\n  }\\n\\n  function initializeV2(address stakingContract, address trustedOrgContract) external reinitializer(2) {\\n    _setContract(ContractType.STAKING, stakingContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, trustedOrgContract);\\n\\n    TConsensus[] memory validatorCandidates = IRoninValidatorSet(getContract(ContractType.VALIDATOR))\\n      .getValidatorCandidates();\\n\\n    for (uint256 i; i < validatorCandidates.length; ++i) {\\n      TConsensus consensus = validatorCandidates[i];\\n      address id = TConsensus.unwrap(consensus);\\n      _consensus2Id[consensus] = id;\\n    }\\n\\n    __migrationRenouncedCandidates();\\n  }\\n\\n  function initializeV3(uint256 cooldown) external reinitializer(3) {\\n    _setPubkeyChangeCooldown(cooldown);\\n  }\\n\\n  /**\\n   * @dev Add addresses of renounced candidates into registry. Only called during {initializeV2}.\\n   */\\n  function __migrationRenouncedCandidates() internal virtual {}\\n\\n  /**\\n   * @dev This method is used in REP-4 migration, which creates profile for all community-validators and renounced validators.\\n   * This method can be removed after REP-4 goes live.\\n   *\\n   * DO NOT use for any other purpose.\\n   */\\n  function __migrate(address id, address candidateAdmin, address treasury) internal {\\n    CandidateProfile storage _profile = _id2Profile[id];\\n    _profile.id = id;\\n\\n    _setConsensus(_profile, TConsensus.wrap(id));\\n    _setAdmin(_profile, candidateAdmin);\\n    _setTreasury(_profile, payable(treasury));\\n    emit ProfileMigrated(id, candidateAdmin, treasury);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getId2Profile(address id) external view returns (CandidateProfile memory) {\\n    return _id2Profile[id];\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList) {\\n    consensusList = new TConsensus[](idList.length);\\n    unchecked {\\n      for (uint i; i < idList.length; ++i) {\\n        consensusList[i] = _id2Profile[idList[i]].consensus;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getConsensus2Id(TConsensus consensus) external view returns (address) {\\n    return _getConsensus2Id(consensus);\\n  }\\n\\n  /**\\n   * @dev Look up the `id` by `consensus`, revert if not found.\\n   */\\n  function _getConsensus2Id(TConsensus consensus) internal view returns (address) {\\n    (bool found, address id) = _tryGetConsensus2Id(consensus);\\n    if (!found) revert ErrLookUpIdFailed(consensus);\\n    return id;\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function tryGetConsensus2Id(TConsensus consensus) external view returns (bool found, address id) {\\n    return _tryGetConsensus2Id(consensus);\\n  }\\n\\n  /**\\n   * @dev Try look up the `id` by `consensus`, return a boolean indicating whether the query success.\\n   */\\n  function _tryGetConsensus2Id(TConsensus consensus) internal view returns (bool found, address id) {\\n    id = _consensus2Id[consensus];\\n    found = id != address(0);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getManyConsensus2Id(TConsensus[] calldata consensusList) external view returns (address[] memory idList) {\\n    idList = new address[](consensusList.length);\\n    unchecked {\\n      for (uint i; i < consensusList.length; ++i) {\\n        idList[i] = _getConsensus2Id(consensusList[i]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external onlyAdmin {\\n    CandidateProfile storage _profile = _id2Profile[profile.id];\\n    if (_profile.id != address(0)) revert ErrExistentProfile();\\n    _addNewProfile(_profile, profile);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   *\\n   * @dev Side-effects on other contracts:\\n   * - Update Staking contract:\\n   *    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.\\n   *    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.\\n   *    + [x] Move staking amount of previous admin to the the new admin.\\n   * - Update Validator contract:\\n   *    + [x] Update (id => ValidatorCandidate) mapping\\n   *\\n   * - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external {\\n    CandidateProfile storage _profile = _getId2ProfileHelper(id);\\n    _requireCandidateAdmin(_profile);\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CANDIDATE_ADMIN, newAdminAddr);\\n\\n    IStaking stakingContract = IStaking(getContract(ContractType.STAKING));\\n    stakingContract.execChangeAdminAddress({ poolId: id, currAdminAddr: msg.sender, newAdminAddr: newAdminAddr });\\n\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    validatorContract.execChangeAdminAddress(id, newAdminAddr);\\n    validatorContract.execChangeTreasuryAddress(id, payable(newAdminAddr));\\n\\n    _setAdmin(_profile, newAdminAddr);\\n    _setTreasury(_profile, payable(newAdminAddr));\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   *\\n   * @dev Side-effects on other contracts:\\n   * - Update in Staking contract for Consensus address mapping:\\n   *   + [x] Keep the same previous pool address.\\n   * - Update in Validator contract for:\\n   *   + [x] Consensus Address mapping\\n   *   + [x] Bridge Address mapping\\n   *   + [x] Jail mapping\\n   *   + [x] Pending reward mapping\\n   *   + [x] Schedule mapping\\n   * - Update in Slashing contract for:\\n   *   + [x] Handling slash indicator\\n   *   + [x] Handling slash fast finality\\n   *   + [x] Handling slash double sign\\n   * - Update in Proposal contract for:\\n   *   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit\\n   * - Update Trusted Org contracts:\\n   *   + If the current consensus is governor:\\n   *      - [x] Remove and delete weight of the old consensus\\n   *      - [x] Replace and add weight for the new consensus\\n   *   + If the current consensus is not governor:\\n   *      - [x] Do nothing\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external {\\n    CandidateProfile storage _profile = _getId2ProfileHelper(id);\\n    _requireCandidateAdmin(_profile);\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CONSENSUS, TConsensus.unwrap(newConsensusAddr));\\n\\n    TConsensus oldConsensusAddr = _profile.consensus;\\n\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    validatorContract.execChangeConsensusAddress(id, newConsensusAddr);\\n\\n    address trustedOrgContractAddr = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION);\\n    (bool success, ) = trustedOrgContractAddr.call(\\n      abi.encodeCall(\\n        IRoninTrustedOrganization.execChangeConsensusAddressForTrustedOrg,\\n        (oldConsensusAddr, newConsensusAddr)\\n      )\\n    );\\n\\n    if (!success) {\\n      emit ConsensusAddressOfNonGovernorChanged(id);\\n    }\\n\\n    _setConsensus(_profile, newConsensusAddr);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   *\\n   * @notice This method is not supported. Change treasury also requires changing the admin address.\\n   * Using the {requestChangeAdminAddress} method instead\\n   *\\n   * @dev Side-effects on other contracts:\\n   * - Update Validator contract:\\n   *    + [x] Update (id => ValidatorCandidate) mapping\\n   * - Update governance admin:\\n   *    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.\\n   *          Cannot impl since we cannot cancel the previous the ballot and\\n   *          create a new ballot on behalf of the validator contract.\\n   */\\n  function requestChangeTreasuryAddr(address /*id */, address payable /* newTreasury */) external pure {\\n    revert(\\\"Not supported\\\");\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function changePubkey(address id, bytes calldata pubkey, bytes calldata proofOfPossession) external {\\n    CandidateProfile storage _profile = _getId2ProfileHelper(id);\\n    _requireCandidateAdmin(_profile);\\n    _requireNonDuplicatedPubkey(pubkey);\\n    _checkPubkeyChangeCooldown(_profile);\\n    _verifyPubkey(pubkey, proofOfPossession);\\n    _setPubkey(_profile, pubkey);\\n  }\\n\\n  function _requireCandidateAdmin(CandidateProfile storage sProfile) internal view {\\n    if (\\n      msg.sender != sProfile.admin ||\\n      !IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isCandidateAdminById(sProfile.id, msg.sender)\\n    ) revert ErrUnauthorized(msg.sig, RoleAccess.CANDIDATE_ADMIN);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function setPubkeyChangeCooldown(uint256 cooldown) external onlyAdmin {\\n    _setPubkeyChangeCooldown(cooldown);\\n  }\\n}\\n\",\"keccak256\":\"0xd6baa54be4a611ef0da28673385850828151b0e4f213045896d9bc441c9f245b\",\"license\":\"MIT\"},\"contracts/ronin/profile/ProfileHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../udvts/Types.sol\\\";\\nimport \\\"../../utils/RoleAccess.sol\\\";\\nimport { ProfileStorage } from \\\"./ProfileStorage.sol\\\";\\nimport { PCUVerifyBLSPublicKey } from \\\"../../precompile-usages/PCUVerifyBLSPublicKey.sol\\\";\\n\\nabstract contract ProfileHandler is PCUVerifyBLSPublicKey, ProfileStorage {\\n  /**\\n   * @dev Checks each element in the new profile and reverts if there is duplication with any existing profile.\\n   */\\n  function _requireNonDuplicatedInRegistry(CandidateProfile memory profile) internal view {\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CONSENSUS, TConsensus.unwrap(profile.consensus));\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CANDIDATE_ADMIN, profile.admin);\\n    _requireNonZeroAndNonDuplicated(RoleAccess.TREASURY, profile.treasury);\\n    _requireNonDuplicated(RoleAccess.TREASURY, profile.__reservedGovernor);\\n    _requireNonDuplicatedPubkey(profile.pubkey);\\n  }\\n\\n  function _requireNonZeroAndNonDuplicated(RoleAccess addressType, address addr) internal view {\\n    if (addr == address(0)) revert ErrZeroAddress(addressType);\\n    _requireNonDuplicated(addressType, addr);\\n  }\\n\\n  function _requireNonDuplicated(RoleAccess addressType, address addr) internal view {\\n    if (_isRegisteredAddr(addr)) {\\n      revert ErrDuplicatedInfo(addressType, uint256(uint160(addr)));\\n    }\\n  }\\n\\n  function _isRegisteredAddr(address addr) internal view returns (bool) {\\n    return _registry[uint256(uint160(addr))];\\n  }\\n\\n  function _requireNonDuplicatedPubkey(bytes memory pubkey) internal view {\\n    if (_isRegisteredPubkey(pubkey)) {\\n      revert ErrDuplicatedPubkey(pubkey);\\n    }\\n  }\\n\\n  function _isRegisteredPubkey(bytes memory pubkey) internal view returns (bool) {\\n    return _registry[_hashPubkey(pubkey)];\\n  }\\n\\n  function _verifyPubkey(bytes calldata publicKey, bytes calldata proofOfPossession) internal {\\n    if (!_pcVerifyBLSPublicKey(publicKey, proofOfPossession)) {\\n      revert ErrInvalidProofOfPossession(publicKey, proofOfPossession);\\n    } else {\\n      emit PubkeyVerified(publicKey, proofOfPossession);\\n    }\\n  }\\n\\n  function _checkPubkeyChangeCooldown(CandidateProfile storage profile) internal view {\\n    if (block.timestamp <= profile.pubkeyLastChange + pubkeyChangeCooldown) {\\n      revert ErrPubkeyChangeCooldownNotEnded();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x34cda031dbcd6a0852f78273eff2e92b067cb611e6761ed62af5f17a159bec77\",\"license\":\"MIT\"},\"contracts/ronin/profile/ProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../udvts/Types.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../utils/RoleAccess.sol\\\";\\nimport { IProfile } from \\\"../../interfaces/IProfile.sol\\\";\\n\\nabstract contract ProfileStorage is IProfile, HasContracts {\\n  /// @dev Mapping from id address => candidate profile.\\n  mapping(address => CandidateProfile) internal _id2Profile;\\n\\n  /**\\n   * @dev Mapping from any address or keccak256(pubkey) => whether it is already registered.\\n   * This registry can only be toggled to `true` and NOT vice versa. All registered values\\n   * cannot be reused.\\n   */\\n  mapping(uint256 => bool) internal _registry;\\n\\n  /// @dev Mapping from consensus address => id address.\\n  mapping(TConsensus => address) internal _consensus2Id;\\n\\n  /// @dev The cooldown time the change public key.\\n  uint256 pubkeyChangeCooldown;\\n\\n  /// @dev Upgradeable gap.\\n  bytes32[47] __gap;\\n\\n  /**\\n   * @dev Add a profile from memory to storage.\\n   */\\n  function _addNewProfile(CandidateProfile storage _profile, CandidateProfile memory newProfile) internal {\\n    _profile.id = newProfile.id;\\n\\n    _setConsensus(_profile, newProfile.consensus);\\n    _setAdmin(_profile, newProfile.admin);\\n    _setTreasury(_profile, newProfile.treasury);\\n    _setGovernor(_profile, newProfile.__reservedGovernor);\\n    _setPubkey(_profile, newProfile.pubkey);\\n\\n    emit ProfileAdded(newProfile.id);\\n  }\\n\\n  function _setConsensus(CandidateProfile storage _profile, TConsensus consensus) internal {\\n    delete _consensus2Id[_profile.consensus];\\n    _consensus2Id[consensus] = _profile.id;\\n\\n    _profile.consensus = consensus;\\n    _registry[uint256(uint160(TConsensus.unwrap(consensus)))] = true;\\n\\n    emit ProfileAddressChanged(_profile.id, RoleAccess.CONSENSUS, TConsensus.unwrap(consensus));\\n  }\\n\\n  function _setAdmin(CandidateProfile storage _profile, address admin) internal {\\n    _profile.admin = admin;\\n    _registry[uint256(uint160(admin))] = true;\\n\\n    emit ProfileAddressChanged(_profile.id, RoleAccess.CANDIDATE_ADMIN, admin);\\n  }\\n\\n  function _setTreasury(CandidateProfile storage _profile, address payable treasury) internal {\\n    _profile.treasury = treasury;\\n    _registry[uint256(uint160(address(treasury)))] = true;\\n\\n    emit ProfileAddressChanged(_profile.id, RoleAccess.TREASURY, treasury);\\n  }\\n\\n  /**\\n   * @dev Allow to registry a profile without governor address since not all validators are governing validators.\\n   */\\n  function _setGovernor(CandidateProfile storage _profile, address governor) internal {\\n    _profile.__reservedGovernor = governor;\\n    if (governor != address(0)) {\\n      _registry[uint256(uint160(governor))] = true;\\n    }\\n  }\\n\\n  function _setPubkey(CandidateProfile storage _profile, bytes memory pubkey) internal {\\n    if (_profile.pubkey.length != 0) {\\n      _profile.oldPubkey = _profile.pubkey;\\n    }\\n\\n    _profile.pubkey = pubkey;\\n    _profile.pubkeyLastChange = block.timestamp;\\n    _registry[_hashPubkey(pubkey)] = true;\\n\\n    emit PubkeyChanged(_profile.id, pubkey);\\n  }\\n\\n  /**\\n   * @dev Get an existed profile struct from `id`. Revert if the profile does not exists.\\n   */\\n  function _getId2ProfileHelper(address id) internal view returns (CandidateProfile storage _profile) {\\n    _profile = _id2Profile[id];\\n    if (_profile.id == address(0)) revert ErrNonExistentProfile();\\n  }\\n\\n  /**\\n   * @dev Returns hash of a public key.\\n   */\\n  function _hashPubkey(bytes memory pubkey) internal pure returns (uint256) {\\n    return uint256(keccak256(pubkey));\\n  }\\n\\n  function _setPubkeyChangeCooldown(uint256 cooldown) internal {\\n    pubkeyChangeCooldown = cooldown;\\n  }\\n}\\n\",\"keccak256\":\"0x9a36cece7f1495f70095d390078b28e400e7af8adf8cf9b96da18aa36e72108a\",\"license\":\"MIT\"},\"contracts/ronin/profile/ProfileXComponents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\nimport \\\"./ProfileHandler.sol\\\";\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract ProfileXComponents is IProfile, ProfileHandler {\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external override onlyContract(ContractType.STAKING) {\\n    // Check existent profile\\n    CandidateProfile storage _profile = _id2Profile[id];\\n    if (_profile.id != address(0)) revert ErrExistentProfile();\\n\\n    // Validate the info and add the profile\\n    CandidateProfile memory profile = CandidateProfile({\\n      id: id,\\n      consensus: TConsensus.wrap(id),\\n      admin: admin,\\n      treasury: payable(treasury),\\n      __reservedGovernor: address(0),\\n      pubkey: pubkey,\\n      pubkeyLastChange: 0,\\n      oldPubkey: \\\"\\\"\\n    });\\n    _requireNonDuplicatedInRegistry(profile);\\n    _verifyPubkey(pubkey, proofOfPossession);\\n    _addNewProfile(_profile, profile);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool) {\\n    for (uint256 i; i < listOfPublicKey.length; ) {\\n      for (uint256 j; j < listOfPublicKey[i].length; ) {\\n        if (!_isRegisteredPubkey(listOfPublicKey[i][j])) {\\n          return false;\\n        }\\n\\n        unchecked {\\n          j++;\\n        }\\n      }\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x57fd7432144a0057f52e2d08864cb7d22ce0c32c5cd02ceb246a5135ee9c067d\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 20,
  "numDeployments": 14,
  "storageLayout": {
    "storage": [
      {
        "astId": 28836,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_id2Profile",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(CandidateProfile)7374_storage)"
      },
      {
        "astId": 28841,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_registry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 28847,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_consensus2Id",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_userDefinedValueType(TConsensus)40030,t_address)"
      },
      {
        "astId": 28850,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "pubkeyChangeCooldown",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 28855,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)47_storage"
      },
      {
        "astId": 150174,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_initialized",
        "offset": 0,
        "slot": "51",
        "type": "t_uint8"
      },
      {
        "astId": 150177,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_initializing",
        "offset": 1,
        "slot": "51",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)47_storage": {
        "encoding": "inplace",
        "label": "bytes32[47]",
        "numberOfBytes": "1504",
        "base": "t_bytes32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(CandidateProfile)7374_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IProfile.CandidateProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(CandidateProfile)7374_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_userDefinedValueType(TConsensus)40030,t_address)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TConsensus)40030",
        "label": "mapping(TConsensus => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(CandidateProfile)7374_storage": {
        "encoding": "inplace",
        "label": "struct IProfile.CandidateProfile",
        "numberOfBytes": "256",
        "members": [
          {
            "astId": 7351,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7355,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "consensus",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(TConsensus)40030"
          },
          {
            "astId": 7358,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "admin",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7361,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "treasury",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 7364,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "__reservedGovernor",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7367,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "pubkey",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          },
          {
            "astId": 7370,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "pubkeyLastChange",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7373,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "oldPubkey",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes_storage"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(TConsensus)40030": {
        "encoding": "inplace",
        "label": "TConsensus",
        "numberOfBytes": "20"
      }
    }
  },
  "timestamp": 1708326505,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "addNewProfile((address,address,address,address,address,bytes,uint256,bytes))": {
        "notice": "Add a new profile."
      },
      "changePubkey(address,bytes,bytes)": {
        "notice": "The candidate admin changes the public key."
      },
      "requestChangeTreasuryAddr(address,address)": {
        "notice": "This method is not supported. Change treasury also requires changing the admin address. Using the {requestChangeAdminAddress} method instead"
      }
    }
  }
}