{
  "abi": [
    {
      "type": "function",
      "name": "arePublicKeysRegistered",
      "inputs": [
        {
          "name": "listOfPublicKey",
          "type": "bytes[][2]",
          "internalType": "bytes[][2]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "changePubkey",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execApplyValidatorCandidate",
      "inputs": [
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "treasury",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getConsensus2Id",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCooldownConfig",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getId2Profile",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IProfile.CandidateProfile",
          "components": [
            {
              "name": "id",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "consensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "admin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "treasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "__reservedGovernor",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "pubkey",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "profileLastChange",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "oldPubkey",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyConsensus2Id",
      "inputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyId2Consensus",
      "inputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "validatorContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [
        {
          "name": "stakingContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "trustedOrgContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "cooldown",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "manualMigrate",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "candidateAdmin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "treasury",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "migrateRenouncedCandidate",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "precompileVerifyBLSPublicKeyAddress",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "requestChangeAdminAddress",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newAdminAddr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestChangeConsensusAddr",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newConsensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestChangeTreasuryAddr",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "outputs": [],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCooldownConfig",
      "inputs": [
        {
          "name": "cooldown",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "tryGetConsensus2Id",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "found",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "ConsensusAddressOfNonGovernorChanged",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfileAdded",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfileAddressChanged",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "addressType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum RoleAccess"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfileMigrated",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "admin",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "treasury",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PubkeyChanged",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PubkeyVerified",
      "inputs": [
        {
          "name": "pubkey",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrCallPrecompiled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrDuplicatedInfo",
      "inputs": [
        {
          "name": "infoType",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrDuplicatedPubkey",
      "inputs": [
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrExistentProfile",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrIdAndConsensusDiffer",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidProofOfPossession",
      "inputs": [
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrLookUpIdFailed",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNonExistentProfile",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrProfileChangeCooldownNotEnded",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroAddress",
      "inputs": [
        {
          "name": "infoType",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroPubkey",
      "inputs": []
    }
  ],
  "address": "0x99DA0Fb31C830eBb0bDe0EfCEf428A02D72994Be",
  "args": "0x",
  "ast": {
    "absolutePath": "contracts/ronin/profile/Profile_Testnet.sol",
    "id": 26969,
    "exportedSymbols": {
      "Address": [
        150099
      ],
      "ContractType": [
        37472
      ],
      "EnumFlags": [
        11008
      ],
      "ErrUnauthorized": [
        37321
      ],
      "IBaseStaking": [
        9225
      ],
      "ICandidateManager": [
        9955
      ],
      "ICandidateManagerCallback": [
        10036
      ],
      "ICandidateStaking": [
        9416
      ],
      "ICoinbaseExecution": [
        10204
      ],
      "ICommonInfo": [
        10423
      ],
      "IDelegatorStaking": [
        9524
      ],
      "IEmergencyExit": [
        10297
      ],
      "IJailingInfo": [
        10515
      ],
      "IProfile": [
        7366
      ],
      "IQuorum": [
        7416
      ],
      "IRewardPool": [
        9689
      ],
      "IRoninTrustedOrganization": [
        7909
      ],
      "IRoninValidatorSet": [
        10318
      ],
      "ISlashingExecution": [
        10368
      ],
      "IStaking": [
        9737
      ],
      "IStakingCallback": [
        9752
      ],
      "ITimingInfo": [
        10574
      ],
      "IValidatorInfoV2": [
        10670
      ],
      "Initializable": [
        149462
      ],
      "PCUVerifyBLSPublicKey": [
        18134
      ],
      "PeriodWrapperConsumer": [
        8699
      ],
      "Profile": [
        25783
      ],
      "ProfileHandler": [
        25990
      ],
      "ProfileStorage": [
        26354
      ],
      "ProfileXComponents": [
        26494
      ],
      "Profile_Testnet": [
        26968
      ],
      "RoleAccess": [
        37735
      ],
      "TConsensus": [
        37191
      ],
      "TConsensusEq": [
        37243
      ],
      "TPoolId": [
        37189
      ],
      "TPoolIdEq": [
        37221
      ]
    },
    "nodeType": "SourceUnit",
    "src": "33:12604:113",
    "nodes": [
      {
        "id": 26608,
        "nodeType": "ImportDirective",
        "src": "33:23:113",
        "nodes": [],
        "absolutePath": "contracts/ronin/profile/Profile.sol",
        "file": "./Profile.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 26969,
        "sourceUnit": 25784,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 26609,
        "nodeType": "PragmaDirective",
        "src": "58:23:113",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 26968,
        "nodeType": "ContractDefinition",
        "src": "83:12553:113",
        "nodes": [
          {
            "id": 26620,
            "nodeType": "FunctionDefinition",
            "src": "123:85:113",
            "nodes": [],
            "body": {
              "id": 26619,
              "nodeType": "Block",
              "src": "179:29:113",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 26616,
                      "name": "__defaultMigrate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26709,
                      "src": "185:16:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 26617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "185:18:113",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26618,
                  "nodeType": "ExpressionStatement",
                  "src": "185:18:113"
                }
              ]
            },
            "functionSelector": "c6351632",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 26614,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 26613,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "169:9:113"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3558,
                  "src": "169:9:113"
                },
                "nodeType": "ModifierInvocation",
                "src": "169:9:113"
              }
            ],
            "name": "migrateRenouncedCandidate",
            "nameLocation": "132:25:113",
            "parameters": {
              "id": 26612,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "157:2:113"
            },
            "returnParameters": {
              "id": 26615,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "179:0:113"
            },
            "scope": 26968,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 26638,
            "nodeType": "FunctionDefinition",
            "src": "212:146:113",
            "nodes": [],
            "body": {
              "id": 26637,
              "nodeType": "Block",
              "src": "308:50:113",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26632,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26622,
                        "src": "324:2:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26633,
                        "name": "candidateAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26624,
                        "src": "328:14:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26634,
                        "name": "treasury",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26626,
                        "src": "344:8:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 26631,
                      "name": "__migrate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25305,
                      "src": "314:9:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address,address)"
                      }
                    },
                    "id": 26635,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "314:39:113",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26636,
                  "nodeType": "ExpressionStatement",
                  "src": "314:39:113"
                }
              ]
            },
            "functionSelector": "9debe22e",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 26629,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 26628,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "298:9:113"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3558,
                  "src": "298:9:113"
                },
                "nodeType": "ModifierInvocation",
                "src": "298:9:113"
              }
            ],
            "name": "manualMigrate",
            "nameLocation": "221:13:113",
            "parameters": {
              "id": 26627,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26622,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "243:2:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 26638,
                  "src": "235:10:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26621,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "235:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26624,
                  "mutability": "mutable",
                  "name": "candidateAdmin",
                  "nameLocation": "255:14:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 26638,
                  "src": "247:22:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26623,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "247:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26626,
                  "mutability": "mutable",
                  "name": "treasury",
                  "nameLocation": "279:8:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 26638,
                  "src": "271:16:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26625,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "271:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "234:54:113"
            },
            "returnParameters": {
              "id": 26630,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "308:0:113"
            },
            "scope": 26968,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 26648,
            "nodeType": "FunctionDefinition",
            "src": "362:106:113",
            "nodes": [],
            "body": {
              "id": 26647,
              "nodeType": "Block",
              "src": "439:29:113",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 26644,
                      "name": "__defaultMigrate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26709,
                      "src": "445:16:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 26645,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "445:18:113",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26646,
                  "nodeType": "ExpressionStatement",
                  "src": "445:18:113"
                }
              ]
            },
            "baseFunctions": [
              25254
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 26642,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 26641,
                  "name": "onlyInitializing",
                  "nameLocations": [
                    "422:16:113"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 149425,
                  "src": "422:16:113"
                },
                "nodeType": "ModifierInvocation",
                "src": "422:16:113"
              }
            ],
            "name": "__migrationRenouncedCandidates",
            "nameLocation": "371:30:113",
            "overrides": {
              "id": 26640,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "413:8:113"
            },
            "parameters": {
              "id": 26639,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "401:2:113"
            },
            "returnParameters": {
              "id": 26643,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "439:0:113"
            },
            "scope": 26968,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 26709,
            "nodeType": "FunctionDefinition",
            "src": "472:340:113",
            "nodes": [],
            "body": {
              "id": 26708,
              "nodeType": "Block",
              "src": "508:304:113",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 26654,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 26651,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "518:5:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 26652,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "524:7:113",
                      "memberName": "chainid",
                      "nodeType": "MemberAccess",
                      "src": "518:13:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "32303231",
                      "id": 26653,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "535:4:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2021_by_1",
                        "typeString": "int_const 2021"
                      },
                      "value": "2021"
                    },
                    "src": "518:21:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 26656,
                  "nodeType": "IfStatement",
                  "src": "514:34:113",
                  "trueBody": {
                    "functionReturnParameters": 26650,
                    "id": 26655,
                    "nodeType": "Return",
                    "src": "541:7:113"
                  }
                },
                {
                  "assignments": [
                    26662
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26662,
                      "mutability": "mutable",
                      "name": "lConsensus",
                      "nameLocation": "573:10:113",
                      "nodeType": "VariableDeclaration",
                      "scope": 26708,
                      "src": "554:29:113",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                        "typeString": "address[76]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 26660,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "554:7:113",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 26661,
                        "length": {
                          "hexValue": "3736",
                          "id": 26659,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "562:2:113",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_76_by_1",
                            "typeString": "int_const 76"
                          },
                          "value": "76"
                        },
                        "nodeType": "ArrayTypeName",
                        "src": "554:11:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$76_storage_ptr",
                          "typeString": "address[76]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26665,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 26663,
                      "name": "__consensuses",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26881,
                      "src": "586:13:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$_t_array$_t_address_$76_memory_ptr_$",
                        "typeString": "function () pure returns (address[76] memory)"
                      }
                    },
                    "id": 26664,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "586:15:113",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                      "typeString": "address[76] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "554:47:113"
                },
                {
                  "assignments": [
                    26671
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26671,
                      "mutability": "mutable",
                      "name": "lAdmin",
                      "nameLocation": "626:6:113",
                      "nodeType": "VariableDeclaration",
                      "scope": 26708,
                      "src": "607:25:113",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                        "typeString": "address[76]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 26669,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "607:7:113",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 26670,
                        "length": {
                          "hexValue": "3736",
                          "id": 26668,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "615:2:113",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_76_by_1",
                            "typeString": "int_const 76"
                          },
                          "value": "76"
                        },
                        "nodeType": "ArrayTypeName",
                        "src": "607:11:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$76_storage_ptr",
                          "typeString": "address[76]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26674,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 26672,
                      "name": "__admins",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26795,
                      "src": "635:8:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$_t_array$_t_address_$76_memory_ptr_$",
                        "typeString": "function () pure returns (address[76] memory)"
                      }
                    },
                    "id": 26673,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "635:10:113",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                      "typeString": "address[76] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "607:38:113"
                },
                {
                  "assignments": [
                    26680
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26680,
                      "mutability": "mutable",
                      "name": "lTreasury",
                      "nameLocation": "670:9:113",
                      "nodeType": "VariableDeclaration",
                      "scope": 26708,
                      "src": "651:28:113",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                        "typeString": "address[76]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 26678,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "651:7:113",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 26679,
                        "length": {
                          "hexValue": "3736",
                          "id": 26677,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "659:2:113",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_76_by_1",
                            "typeString": "int_const 76"
                          },
                          "value": "76"
                        },
                        "nodeType": "ArrayTypeName",
                        "src": "651:11:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$76_storage_ptr",
                          "typeString": "address[76]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26683,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 26681,
                      "name": "__treasuries",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26967,
                      "src": "682:12:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$_t_array$_t_address_$76_memory_ptr_$",
                        "typeString": "function () pure returns (address[76] memory)"
                      }
                    },
                    "id": 26682,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "682:14:113",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                      "typeString": "address[76] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "651:45:113"
                },
                {
                  "body": {
                    "id": 26706,
                    "nodeType": "Block",
                    "src": "744:64:113",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 26695,
                                "name": "lConsensus",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26662,
                                "src": "762:10:113",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                                  "typeString": "address[76] memory"
                                }
                              },
                              "id": 26697,
                              "indexExpression": {
                                "id": 26696,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26685,
                                "src": "773:1:113",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "762:13:113",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 26698,
                                "name": "lAdmin",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26671,
                                "src": "777:6:113",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                                  "typeString": "address[76] memory"
                                }
                              },
                              "id": 26700,
                              "indexExpression": {
                                "id": 26699,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26685,
                                "src": "784:1:113",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "777:9:113",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 26701,
                                "name": "lTreasury",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26680,
                                "src": "788:9:113",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                                  "typeString": "address[76] memory"
                                }
                              },
                              "id": 26703,
                              "indexExpression": {
                                "id": 26702,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26685,
                                "src": "798:1:113",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "788:12:113",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 26694,
                            "name": "__migrate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25305,
                            "src": "752:9:113",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address,address)"
                            }
                          },
                          "id": 26704,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "752:49:113",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 26705,
                        "nodeType": "ExpressionStatement",
                        "src": "752:49:113"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 26690,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 26687,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26685,
                      "src": "716:1:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 26688,
                        "name": "lConsensus",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26662,
                        "src": "720:10:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                          "typeString": "address[76] memory"
                        }
                      },
                      "id": 26689,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "731:6:113",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "720:17:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "716:21:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 26707,
                  "initializationExpression": {
                    "assignments": [
                      26685
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 26685,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "713:1:113",
                        "nodeType": "VariableDeclaration",
                        "scope": 26707,
                        "src": "708:6:113",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 26684,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "708:4:113",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 26686,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "708:6:113"
                  },
                  "isSimpleCounterLoop": true,
                  "loopExpression": {
                    "expression": {
                      "id": 26692,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "739:3:113",
                      "subExpression": {
                        "id": 26691,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26685,
                        "src": "741:1:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 26693,
                    "nodeType": "ExpressionStatement",
                    "src": "739:3:113"
                  },
                  "nodeType": "ForStatement",
                  "src": "703:105:113"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__defaultMigrate",
            "nameLocation": "481:16:113",
            "parameters": {
              "id": 26649,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "497:2:113"
            },
            "returnParameters": {
              "id": 26650,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "508:0:113"
            },
            "scope": 26968,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "id": 26795,
            "nodeType": "FunctionDefinition",
            "src": "816:3935:113",
            "nodes": [],
            "body": {
              "id": 26794,
              "nodeType": "Block",
              "src": "883:3868:113",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "307863463045323341454431364435643937313931306537343841436434383834394534623732333943",
                        "id": 26716,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "904:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xcF0E23AED16D5d971910e748ACd48849E4b7239C"
                      },
                      {
                        "hexValue": "307833326636364430463946313964623742304546314539463133313630383834446136353436374536",
                        "id": 26717,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "976:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x32f66D0F9F19db7B0EF1E9F13160884Da65467E6"
                      },
                      {
                        "hexValue": "307844363832444336443634373130443631393135313231333364453935376531343665394141353866",
                        "id": 26718,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1048:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xD682DC6D64710D6191512133dE957e146e9AA58f"
                      },
                      {
                        "hexValue": "307845466561466631643966314534454442303063363038346145343031363134334232394564393234",
                        "id": 26719,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1098:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xEFeaFf1d9f1E4EDB00c6084aE4016143B29Ed924"
                      },
                      {
                        "hexValue": "307843326361453733313146433066653430304138333864326444653036413839453164336539446137",
                        "id": 26720,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1148:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xC2caE7311FC0fe400A838d2dDe06A89E1d3e9Da7"
                      },
                      {
                        "hexValue": "307866393061393132466462374664333735373263443833333235333932643732396536304566363832",
                        "id": 26721,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1198:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xf90a912Fdb7Fd37572cD83325392d729e60Ef682"
                      },
                      {
                        "hexValue": "307841664239353534323939343931613334643330336632433541393162656242313632663642324366",
                        "id": 26722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1248:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf"
                      },
                      {
                        "hexValue": "307838644139643838463930313431613033323932643565353534363931423146366537633632313263",
                        "id": 26723,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1298:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8dA9d88F90141a03292d5e554691B1F6e7c6212c"
                      },
                      {
                        "hexValue": "307841383746394132463043373038324641326631453364653130393044333630343743376344303137",
                        "id": 26724,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1348:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xA87F9A2F0C7082FA2f1E3de1090D36047C7cD017"
                      },
                      {
                        "hexValue": "307836363933646332353842444141633530353261623637384241356465323434304341316364416265",
                        "id": 26725,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1398:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x6693dc258BDAAc5052ab678BA5de2440CA1cdAbe"
                      },
                      {
                        "hexValue": "307830423637644635383437614637343736423245423436646133323836333845306642324336423239",
                        "id": 26726,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1448:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0B67dF5847aF7476B2EB46da328638E0fB2C6B29"
                      },
                      {
                        "hexValue": "307865393164314443643032333242446133303133373964453237626430656445343744623346373530",
                        "id": 26727,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1498:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xe91d1DCd0232BDa301379dE27bd0edE47Db3F750"
                      },
                      {
                        "hexValue": "307844633364653731364334343330643539384143353034633436383564363944304463453134313246",
                        "id": 26728,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1548:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xDc3de716C4430d598AC504c4685d69D0DcE1412F"
                      },
                      {
                        "hexValue": "307837393543463238453562373166314135306343394530313037373839314331384436353837653533",
                        "id": 26729,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1598:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x795CF28E5b71f1A50cC9E01077891C18D6587e53"
                      },
                      {
                        "hexValue": "307861334233633731333731333331664431393031653331364236376466326431366246353533356130",
                        "id": 26730,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1648:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xa3B3c71371331fD1901e316B67df2d16bF5535a0"
                      },
                      {
                        "hexValue": "307833324265323038644538413135393563433063636638453938344341423837353945613165356232",
                        "id": 26731,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1698:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x32Be208dE8A1595cC0ccf8E984CAB8759Ea1e5b2"
                      },
                      {
                        "hexValue": "307838313336633734653934623038333030643731466136433232303837623832314637333536386335",
                        "id": 26732,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1748:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8136c74e94b08300d71Fa6C22087b821F73568c5"
                      },
                      {
                        "hexValue": "307864613663373334324539304237376335433737413846373239323736353336303039396533304564",
                        "id": 26733,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1798:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xda6c7342E90B77c5C77A8F7292765360099e30Ed"
                      },
                      {
                        "hexValue": "307839356643383138434437373039666236614438393230643064313439323530313035303438373646",
                        "id": 26734,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1848:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x95fC818CD7709fb6aD8920d0d14925010504876F"
                      },
                      {
                        "hexValue": "307865384536366232343134313461343061334462353339654337643836346344363139333866383137",
                        "id": 26735,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1898:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xe8E66b241414a40a3Db539eC7d864cD61938f817"
                      },
                      {
                        "hexValue": "307866443537353737304136384435416639383362324133373439383166363034446441443944363834",
                        "id": 26736,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1948:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xfD575770A68D5Af983b2A374981f604DdAD9D684"
                      },
                      {
                        "hexValue": "307839413534454443623144396134346539663432333565613035633735423435623236363739363830",
                        "id": 26737,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1998:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x9A54EDCb1D9a44e9f4235ea05c75B45b26679680"
                      },
                      {
                        "hexValue": "307836313038353730413239663530304436393530664562666643393945434236366132363441303438",
                        "id": 26738,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2048:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x6108570A29f500D6950fEbffC99ECB66a264A048"
                      },
                      {
                        "hexValue": "307864413037314637313062306638323434333836363631364538613936303639303132413733636366",
                        "id": 26739,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2098:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xdA071F710b0f82443866616E8a96069012A73ccf"
                      },
                      {
                        "hexValue": "307838413461633634373634323338433731446466383246383730424536353236653239374463344364",
                        "id": 26740,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2148:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8A4ac64764238C71Ddf82F870BE6526e297Dc4Cd"
                      },
                      {
                        "hexValue": "307833336631373237436141353441453234434164423239343938383143333732356542363161313030",
                        "id": 26741,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2198:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x33f1727CaA54AE24CAdB2949881C3725eB61a100"
                      },
                      {
                        "hexValue": "307833344442353332463039456531323835444645663236654436393663346541323564634663653732",
                        "id": 26742,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2248:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x34DB532F09Ee1285DFEf26eD696c4eA25dcFce72"
                      },
                      {
                        "hexValue": "307833303264353131383946443839443765373262636232366136354431363934316430343346303839",
                        "id": 26743,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2298:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x302d51189FD89D7e72bcb26a65D16941d043F089"
                      },
                      {
                        "hexValue": "307846656232343746373645364636433145633334353564303465364533423639346135373744353743",
                        "id": 26744,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2348:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xFeb247F76E6F6C1Ec3455d04e6E3B694a577D57C"
                      },
                      {
                        "hexValue": "307830353935356439653939663537453535373441316139623733333631444431346145633844363431",
                        "id": 26745,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2398:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x05955d9e99f57E5574A1a9b73361DD14aEc8D641"
                      },
                      {
                        "hexValue": "307863663946343464444231386135353338456665326132413238654632303330303333336635613731",
                        "id": 26746,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2448:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xcf9F44dDB18a5538Efe2a2A28eF20300333f5a71"
                      },
                      {
                        "hexValue": "307837373964434531646463323839343145633835626632614530644143394630663132383336323831",
                        "id": 26747,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2498:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x779dCE1ddc28941Ec85bf2aE0dAC9F0f12836281"
                      },
                      {
                        "hexValue": "307830426232373065353236386139453961303734324464423032374661623734303541663536466137",
                        "id": 26748,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2548:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0Bb270e5268a9E9a0742DdB027Fab7405Af56Fa7"
                      },
                      {
                        "hexValue": "307835623932456132363535393761376366323043386441353645366265623834383563314241393933",
                        "id": 26749,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2598:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x5b92Ea265597a7cf20C8dA56E6beb8485c1BA993"
                      },
                      {
                        "hexValue": "307830453333343141653445643964413635466333306137466136333537653842354163343062304133",
                        "id": 26750,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2648:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0E3341Ae4Ed9dA65Fc30a7Fa6357e8B5Ac40b0A3"
                      },
                      {
                        "hexValue": "307866366664354663413442643736394241343935423239423938646261354632654346344345454433",
                        "id": 26751,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2698:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xf6fd5FcA4Bd769BA495B29B98dba5F2eCF4CEED3"
                      },
                      {
                        "hexValue": "307838643061363339424444336238316446323634633464423436343736363538383538323331353130",
                        "id": 26752,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2748:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8d0a639BDD3b81dF264c4dB46476658858231510"
                      },
                      {
                        "hexValue": "307842423034363933326645464344443342653433363834343461313031344632354466454538336632",
                        "id": 26753,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2798:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xBB046932fEFCDD3Be4368444a1014F25DfEE83f2"
                      },
                      {
                        "hexValue": "307835346530396246303438313066333837333437644136443936383744366133374543326161644337",
                        "id": 26754,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2848:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x54e09bF04810f387347dA6D9687D6a37EC2aadC7"
                      },
                      {
                        "hexValue": "307844453565313535346532624635643045353442616643373443393332623846326144346532373346",
                        "id": 26755,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2898:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xDE5e1554e2bF5d0E54BafC74C932b8F2aD4e273F"
                      },
                      {
                        "hexValue": "307863363864303235356531623943353439433433633731383142443239363834444334373765646663",
                        "id": 26756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2948:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xc68d0255e1b9C549C43c7181BD29684DC477edfc"
                      },
                      {
                        "hexValue": "307833373932303733334442394135623435664339434435653343383038323562456646433161303134",
                        "id": 26757,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2998:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x37920733DB9A5b45fC9CD5e3C80825bEfFC1a014"
                      },
                      {
                        "hexValue": "307837653931303734383042663932646435366339373131384532304364423363314165396444383636",
                        "id": 26758,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3048:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x7e9107480Bf92dd56c97118E20CdB3c1Ae9dD866"
                      },
                      {
                        "hexValue": "307843344638334137623336393037304533324345643442643646643634374431394145663832384143",
                        "id": 26759,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3098:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xC4F83A7b369070E32CEd4Bd6Fd647D19AEf828AC"
                      },
                      {
                        "hexValue": "307834313244346436393132323833394663434164303138306539333538643135374333383736663343",
                        "id": 26760,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3148:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x412D4d69122839FcCAd0180e9358d157C3876f3C"
                      },
                      {
                        "hexValue": "307833353535303342384536343230354644453964424241443236393131303939316366373336613530",
                        "id": 26761,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3198:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x355503B8E64205FDE9dBBAD269110991cf736a50"
                      },
                      {
                        "hexValue": "307833303666323363333266646643303738353042663234324538466635394335453739424666383132",
                        "id": 26762,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3248:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x306f23c32fdfC07850Bf242E8Ff59C5E79BFf812"
                      },
                      {
                        "hexValue": "307834363763353432353034324339443966303235323635623732433933443733453046323937384335",
                        "id": 26763,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3298:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x467c5425042C9D9f025265b72C93D73E0F2978C5"
                      },
                      {
                        "hexValue": "307845453939324230463545393734366664623865353834456661303141463739663642314330393430",
                        "id": 26764,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3348:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xEE992B0F5E9746fdb8e584Efa01AF79f6B1C0940"
                      },
                      {
                        "hexValue": "307842443633343263303030396635353133316237613531663632374345384363383738373944443636",
                        "id": 26765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3398:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xBD6342c0009f55131b7a51f627CE8Cc87879DD66"
                      },
                      {
                        "hexValue": "307835373031386539323945623666653530333535624631424639443164333963413436366237466130",
                        "id": 26766,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3448:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x57018e929Eb6fe50355bF1BF9D1d39cA466b7Fa0"
                      },
                      {
                        "hexValue": "307841643465334432463835623443303935373432423530303735314345453563344238663635413562",
                        "id": 26767,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3498:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAd4e3D2F85b4C095742B500751CEE5c4B8f65A5b"
                      },
                      {
                        "hexValue": "307838394136413037346442384263443346643630363236313037654132614535373636393346376335",
                        "id": 26768,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3548:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x89A6A074dB8BcD3Fd60626107eA2aE576693F7c5"
                      },
                      {
                        "hexValue": "307843423734323138366641303536343434373636664137636335326130343739453846364445444541",
                        "id": 26769,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3598:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xCB742186fA056444766fA7cc52a0479E8F6DEDEA"
                      },
                      {
                        "hexValue": "307836304338313137393031416233353733386663466437313537443339333230376546436538303535",
                        "id": 26770,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3648:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x60C8117901Ab35738fcFd7157D393207eFCe8055"
                      },
                      {
                        "hexValue": "307841443730414431353245323745303932334334663131433633343930464346443930344134433336",
                        "id": 26771,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3698:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAD70AD152E27E0923C4f11C63490FCFD904A4C36"
                      },
                      {
                        "hexValue": "307864386234376238313634386439653831653530623863413231454138314632453142363932394242",
                        "id": 26772,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3748:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xd8b47b81648d9e81e50b8cA21EA81F2E1B6929BB"
                      },
                      {
                        "hexValue": "307865434231333734313732393730613631334131393730333730423364646541443846383434373333",
                        "id": 26773,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3798:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xeCB1374172970a613A1970370B3ddeAD8F844733"
                      },
                      {
                        "hexValue": "307830343732644361303233313842353332466362304230353636363145453766443241646338613230",
                        "id": 26774,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3848:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0472dCa02318B532Fcb0B056661EE7fD2Adc8a20"
                      },
                      {
                        "hexValue": "307864643030414363303746334637414661393042356132326346643536633038303862363434346464",
                        "id": 26775,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3898:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xdd00ACc07F3F7AFa90B5a22cFd56c0808b6444dd"
                      },
                      {
                        "hexValue": "307834643333303263363966616334383945324637333733624342326631303164334233373863344365",
                        "id": 26776,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3948:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x4d3302c69fac489E2F7373bCB2f101d3B378c4Ce"
                      },
                      {
                        "hexValue": "307865373638354534333746333444653244333665413265394142313345354162383731373131413243",
                        "id": 26777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3998:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xe7685E437F34De2D36eA2e9AB13E5Ab871711A2C"
                      },
                      {
                        "hexValue": "307841664239353534323939343931613334643330336632433541393162656242313632663642324366",
                        "id": 26778,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4048:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf"
                      },
                      {
                        "hexValue": "307833463944663037313730393942416141393541313442334341413238354441644441466230363039",
                        "id": 26779,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4098:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x3F9Df0717099BAaA95A14B3CAA285DAdDAFb0609"
                      },
                      {
                        "hexValue": "307832334466666334613933633337344139314662633163333330373561663031326236383636334637",
                        "id": 26780,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4148:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x23Dffc4a93c374A91Fbc1c33075af012b68663F7"
                      },
                      {
                        "hexValue": "307837396543346438334434306331426431343139443866353631424538353146446131454133326136",
                        "id": 26781,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4198:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x79eC4d83D40c1Bd1419D8f561BE851FDa1EA32a6"
                      },
                      {
                        "hexValue": "307832443366323837383062466237456436464235353437633330394531613638333765356244313242",
                        "id": 26782,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4248:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x2D3f28780bFb7Ed6FB5547c309E1a6837e5bD12B"
                      },
                      {
                        "hexValue": "307861313634653842354639306365343242304635333145333838326364453346363938653131323166",
                        "id": 26783,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4298:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xa164e8B5F90ce42B0F531E3882cdE3F698e1121f"
                      },
                      {
                        "hexValue": "307834613462633637344139373733373337366346453939306145326645306432423645373338333933",
                        "id": 26784,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4348:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x4a4bc674A97737376cFE990aE2fE0d2B6E738393"
                      },
                      {
                        "hexValue": "307846363138303642363532373866464462463862303466383332433539623635303736373938466236",
                        "id": 26785,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4398:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xF61806B65278fFDbF8b04f832C59b65076798Fb6"
                      },
                      {
                        "hexValue": "307838333665654564643933313537354343453432383563373443313544426441394564633344633446",
                        "id": 26786,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4448:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x836eeEdd931575CCE4285c74C15DBdA9Edc3Dc4F"
                      },
                      {
                        "hexValue": "307862643935423035383135383545343135313739336231383365653735643530396644453532384236",
                        "id": 26787,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4498:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xbd95B0581585E4151793b183ee75d509fDE528B6"
                      },
                      {
                        "hexValue": "307841373542314365326638433434376361423663313346333133646664383036323837614134376532",
                        "id": 26788,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4548:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xA75B1Ce2f8C447caB6c13F313dfd806287aA47e2"
                      },
                      {
                        "hexValue": "307834443534363437353332316234634132613931423130316632363735303039324330353335306346",
                        "id": 26789,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4598:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x4D546475321b4cA2a91B101f26750092C05350cF"
                      },
                      {
                        "hexValue": "307846433264323944613731304634353136384445313165354330353143614135353830383844353261",
                        "id": 26790,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4648:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xFC2d29Da710F45168DE11e5C051CaA558088D52a"
                      },
                      {
                        "hexValue": "307831433730423831363045393244353645353530636166303265316632653545433046646235353141",
                        "id": 26791,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4698:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x1C70B8160E92D56E550caf02e1f2e5EC0Fdb551A"
                      }
                    ],
                    "id": 26792,
                    "isConstant": false,
                    "isInlineArray": true,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "896:3850:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                      "typeString": "address[76] memory"
                    }
                  },
                  "functionReturnParameters": 26715,
                  "id": 26793,
                  "nodeType": "Return",
                  "src": "889:3857:113"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__admins",
            "nameLocation": "825:8:113",
            "parameters": {
              "id": 26710,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "833:2:113"
            },
            "returnParameters": {
              "id": 26715,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26714,
                  "mutability": "mutable",
                  "name": "list",
                  "nameLocation": "877:4:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 26795,
                  "src": "858:23:113",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                    "typeString": "address[76]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 26711,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "858:7:113",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 26713,
                    "length": {
                      "hexValue": "3736",
                      "id": 26712,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "866:2:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_76_by_1",
                        "typeString": "int_const 76"
                      },
                      "value": "76"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "858:11:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$76_storage_ptr",
                      "typeString": "address[76]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "857:25:113"
            },
            "scope": 26968,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "private"
          },
          {
            "id": 26881,
            "nodeType": "FunctionDefinition",
            "src": "4755:3938:113",
            "nodes": [],
            "body": {
              "id": 26880,
              "nodeType": "Block",
              "src": "4827:3866:113",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "307839363837653843343166613336396144303846443237386134333131344334323037383536613631",
                        "id": 26802,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4848:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x9687e8C41fa369aD08FD278a43114C4207856a61"
                      },
                      {
                        "hexValue": "307833324636366430463946313944623762304546314539663133313630383834444136353436376537",
                        "id": 26803,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4919:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x32F66d0F9F19Db7b0EF1E9f13160884DA65467e7"
                      },
                      {
                        "hexValue": "307844363832646336443634373130443631393135313231333344653935376531343665394161353865",
                        "id": 26804,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4990:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xD682dc6D64710D6191512133De957e146e9Aa58e"
                      },
                      {
                        "hexValue": "307845466561466631643966316534654442303043363038346165343031363134334232396544393235",
                        "id": 26805,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5040:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xEFeaFf1d9f1e4eDB00C6084ae4016143B29eD925"
                      },
                      {
                        "hexValue": "307835376235373241396465363842643239303734653143353163373930466334354335393262613339",
                        "id": 26806,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5090:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x57b572A9de68Bd29074e1C51c790Fc45C592ba39"
                      },
                      {
                        "hexValue": "307843304332413536463936303662413130396433374130643138414638453562414131653143306144",
                        "id": 26807,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5140:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xC0C2A56F9606bA109d37A0d18AF8E5bAA1e1C0aD"
                      },
                      {
                        "hexValue": "307861464239353534323939343931613334643330334632433541393162656262313632663662324331",
                        "id": 26808,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5190:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xaFB9554299491a34d303F2C5A91bebb162f6b2C1"
                      },
                      {
                        "hexValue": "307835333366363142333630653831663538393139666142354336353337323446373166616631326162",
                        "id": 26809,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5240:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x533f61B360e81f58919faB5C653724F71faf12ab"
                      },
                      {
                        "hexValue": "307861383746394132463043373038324641326631453344653130393064333630343763376344303138",
                        "id": 26810,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5290:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xa87F9A2F0C7082FA2f1E3De1090d36047c7cD018"
                      },
                      {
                        "hexValue": "307836363933446332353862444161433530353261423637384261356465323434306361316344416232",
                        "id": 26811,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5340:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x6693Dc258bDAaC5052aB678Ba5de2440ca1cDAb2"
                      },
                      {
                        "hexValue": "307839366637383332333438316663396162646238436334443861613530433135303041433933623932",
                        "id": 26812,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5390:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x96f78323481fc9abdb8Cc4D8aa50C1500AC93b92"
                      },
                      {
                        "hexValue": "307865393144314463443032333242446133303133373964653237424430656445343744623366373531",
                        "id": 26813,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5440:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xe91D1DcD0232BDa301379de27BD0edE47Db3f751"
                      },
                      {
                        "hexValue": "307839383136373665354535313634353234653730663739414334356235323039394562444138373831",
                        "id": 26814,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5490:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x981676e5E5164524e70f79AC45b52099EbDA8781"
                      },
                      {
                        "hexValue": "307837393563663238653542373166314135306363394530313037373839314331384436353837453534",
                        "id": 26815,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5540:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x795cf28e5B71f1A50cc9E01077891C18D6587E54"
                      },
                      {
                        "hexValue": "307861336233433731333731333331664431393031653331364236374446326431364266353533354131",
                        "id": 26816,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5590:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xa3b3C71371331fD1901e316B67DF2d16Bf5535A1"
                      },
                      {
                        "hexValue": "307833326265323038646538413135393563433043634638453938344361623837353945613165356239",
                        "id": 26817,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5640:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x32be208de8A1595cC0CcF8E984Cab8759Ea1e5b9"
                      },
                      {
                        "hexValue": "307832646331346435343242353437386632303642323936416362434266424343454536453844323438",
                        "id": 26818,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5690:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x2dc14d542B5478f206B296AcbCBfBCCEE6E8D248"
                      },
                      {
                        "hexValue": "307844413643373334324539304237376335633737613846373239323736353336303039394533304545",
                        "id": 26819,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5740:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xDA6C7342E90B77c5c77a8F7292765360099E30EE"
                      },
                      {
                        "hexValue": "307839443745413232323365383941353561346566363943613939336561653646444536453633333731",
                        "id": 26820,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5790:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x9D7EA2223e89A55a4ef69Ca993eae6FDE6E63371"
                      },
                      {
                        "hexValue": "307865386536366232343134313461343061336462353339454337643836346344363139333866383138",
                        "id": 26821,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5840:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xe8e66b241414a40a3db539EC7d864cD61938f818"
                      },
                      {
                        "hexValue": "307838664646343564346136413237463832353664463139443044614446373738374366624535364141",
                        "id": 26822,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5890:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8fFF45d4a6A27F8256dF19D0DaDF7787CfbE56AA"
                      },
                      {
                        "hexValue": "307839613534456443623144396134346539463432333545413035433735423435423236363739363831",
                        "id": 26823,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5940:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x9a54EdCb1D9a44e9F4235EA05C75B45B26679681"
                      },
                      {
                        "hexValue": "307836313038353730413239463530304436393530464562464663393965434236366132363461303439",
                        "id": 26824,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5990:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x6108570A29F500D6950FEbFFc99eCB66a264a049"
                      },
                      {
                        "hexValue": "307844413037316637313042306638323434333836363631364538613936303639303132413733634345",
                        "id": 26825,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6040:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xDA071f710B0f82443866616E8a96069012A73cCE"
                      },
                      {
                        "hexValue": "307835663766324145333136656335433039326432303137343466653833333733353341444232424233",
                        "id": 26826,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6090:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x5f7f2AE316ec5C092d201744fe8337353ADB2BB3"
                      },
                      {
                        "hexValue": "307837373144456330336462363661353636613144664533666436333542336638443430346239323931",
                        "id": 26827,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6140:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x771DEc03db66a566a1DfE3fd635B3f8D404b9291"
                      },
                      {
                        "hexValue": "307837316639313534414463306265663339426265386442314430363045364632333944324531304145",
                        "id": 26828,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6190:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x71f9154ADc0bef39Bbe8dB1D060E6F239D2E10AE"
                      },
                      {
                        "hexValue": "307839353930386430336241353563326134343638383333306235394537343646646232663137453345",
                        "id": 26829,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6240:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x95908d03bA55c2a44688330b59E746Fdb2f17E3E"
                      },
                      {
                        "hexValue": "307833444233616263363546323033373838383336433844353046363932334335366633663046463763",
                        "id": 26830,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6290:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x3DB3abc65F203788836C8D50F6923C56f3f0FF7c"
                      },
                      {
                        "hexValue": "307830353935354439653939663537453535373461314139423733333631446431346145433844363432",
                        "id": 26831,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6340:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x05955D9e99f57E5574a1A9B73361Dd14aEC8D642"
                      },
                      {
                        "hexValue": "307832383362344261613164303431353630334338316564633143363846616444334337393038333743",
                        "id": 26832,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6390:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x283b4Baa1d0415603C81edc1C68FadD3C790837C"
                      },
                      {
                        "hexValue": "307832413545423366394344344436456634396463326133303034316534343231616633333033393239",
                        "id": 26833,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6440:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x2A5EB3f9CD4D6Ef49dc2a30041e4421af3303929"
                      },
                      {
                        "hexValue": "307833423946323538376435354539363237364230396232353861633930394438303939363146364332",
                        "id": 26834,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6490:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x3B9F2587d55E96276B09b258ac909D809961F6C2"
                      },
                      {
                        "hexValue": "307832353736653642433932413439334634444136333335433545363942433063323732333831433341",
                        "id": 26835,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6540:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x2576e6BC92A493F4DA6335C5E69BC0c272381C3A"
                      },
                      {
                        "hexValue": "307830453333343141653445643964413635466333306137466136333537653842354163343062304133",
                        "id": 26836,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6590:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0E3341Ae4Ed9dA65Fc30a7Fa6357e8B5Ac40b0A3"
                      },
                      {
                        "hexValue": "307866366664354663413442643736394241343935423239423938646261354632654346344345454433",
                        "id": 26837,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6640:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xf6fd5FcA4Bd769BA495B29B98dba5F2eCF4CEED3"
                      },
                      {
                        "hexValue": "307864393239394641333231343037613564313063373364373143353743613638374132413338416636",
                        "id": 26838,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6690:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xd9299FA321407a5d10c73d71C57Ca687A2A38Af6"
                      },
                      {
                        "hexValue": "307838373765464566464537413233453432433339653243393962393737653441413442454337353137",
                        "id": 26839,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6740:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x877eFEfFE7A23E42C39e2C99b977e4AA4BEC7517"
                      },
                      {
                        "hexValue": "307830373162353130433431356433663834433646344336323931433439383837634335366361633431",
                        "id": 26840,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6790:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x071b510C415d3f84C6F4C6291C49887cC56cac41"
                      },
                      {
                        "hexValue": "307844453565313535346532624635643065353462414643373463393332623866324164344532373330",
                        "id": 26841,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6840:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xDE5e1554e2bF5d0e54bAFC74c932b8f2Ad4E2730"
                      },
                      {
                        "hexValue": "307863363864303235354531623943353439433433433731383162643239363834444334373765446630",
                        "id": 26842,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6890:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xc68d0255E1b9C549C43C7181bd29684DC477eDf0"
                      },
                      {
                        "hexValue": "307843336642376239356238373462666342443145373232413230363166336164663231373132316433",
                        "id": 26843,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6940:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xC3fB7b95b874bfcBD1E722A2061f3adf217121d3"
                      },
                      {
                        "hexValue": "307833364664306434413037353530376134453734323633316141333744414434366131463463306461",
                        "id": 26844,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6990:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x36Fd0d4A075507a4E742631aA37DAD46a1F4c0da"
                      },
                      {
                        "hexValue": "307836363135343964373731374332306666613632414433353942373636374262663563383230353342",
                        "id": 26845,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7040:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x661549d7717C20ffa62AD359B7667Bbf5c82053B"
                      },
                      {
                        "hexValue": "307834313264346436393132323833396663434164303138306539333538443135374333383736463344",
                        "id": 26846,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7090:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x412d4d69122839fcCAd0180e9358D157C3876F3D"
                      },
                      {
                        "hexValue": "307833353535303342384536343230354644453964426241643236393131303939314346373336613531",
                        "id": 26847,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7140:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x355503B8E64205FDE9dBbAd269110991CF736a51"
                      },
                      {
                        "hexValue": "307831324366343434626638334564354236313064303038393932374563443362614243383146663838",
                        "id": 26848,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7190:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x12Cf444bf83Ed5B610d0089927EcD3baBC81Ff88"
                      },
                      {
                        "hexValue": "307834363743353432353034326339643966303235323635623732633933443733653066323937384336",
                        "id": 26849,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7240:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x467C5425042c9d9f025265b72c93D73e0f2978C6"
                      },
                      {
                        "hexValue": "307842366263356263303431303737334133463836423135333763653734393543353265333866383842",
                        "id": 26850,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7290:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xB6bc5bc0410773A3F86B1537ce7495C52e38f88B"
                      },
                      {
                        "hexValue": "307842643633343243303030396635353133316237413531463632376365384363383738373964443637",
                        "id": 26851,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7340:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xBd6342C0009f55131b7A51F627ce8Cc87879dD67"
                      },
                      {
                        "hexValue": "307833354337384465664264303345393662344533654536613733653943443443343964326238383561",
                        "id": 26852,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7390:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x35C78DefBd03E96b4E3eE6a73e9CD4C49d2b885a"
                      },
                      {
                        "hexValue": "307841443465336432663835623443303935373432423530303735314365453543346238463635413543",
                        "id": 26853,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7440:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAD4e3d2f85b4C095742B500751CeE5C4b8F65A5C"
                      },
                      {
                        "hexValue": "307834326335333564654363633037314439303339623137374362334162463330343131353331623035",
                        "id": 26854,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7490:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x42c535deCcc071D9039b177Cb3AbF30411531b05"
                      },
                      {
                        "hexValue": "307862323132463234443835306130456439304632383839646565333138373045374646336645443663",
                        "id": 26855,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7540:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xb212F24D850a0Ed90F2889dee31870E7FF3fED6c"
                      },
                      {
                        "hexValue": "307836304338313137393031414233353733384663664437313537443339333230374566636538303536",
                        "id": 26856,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7590:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x60C8117901AB35738FcfD7157D393207Efce8056"
                      },
                      {
                        "hexValue": "307833306230323135613434324561334433303838416364383363443546653261413262636437373541",
                        "id": 26857,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7640:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x30b0215a442Ea3D3088Acd83cD5Fe2aA2bcd775A"
                      },
                      {
                        "hexValue": "307844323142654365324438323036413366466442416544623832376634443462443046463739653364",
                        "id": 26858,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7690:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xD21BeCe2D8206A3fFdBAeDb827f4D4bD0FF79e3d"
                      },
                      {
                        "hexValue": "307834456641354335426265376132353737343333333546323030453836634434346545613464634439",
                        "id": 26859,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7740:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x4EfA5C5Bbe7a257743335F200E86cD44eEa4dcD9"
                      },
                      {
                        "hexValue": "307830343732646341303233313842353332666342304230353636363165653746643261446338413231",
                        "id": 26860,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7790:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0472dcA02318B532fcB0B056661ee7Fd2aDc8A21"
                      },
                      {
                        "hexValue": "307844443030414363303766336637416661393042354132324346643536633038303862363434344466",
                        "id": 26861,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7840:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xDD00ACc07f3f7Afa90B5A22CFd56c0808b6444Df"
                      },
                      {
                        "hexValue": "307834643333303263363966416334383945326637333733624342326631303164336233373843346346",
                        "id": 26862,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7890:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x4d3302c69fAc489E2f7373bCB2f101d3b378C4cF"
                      },
                      {
                        "hexValue": "307838633239363034653163614534616636383363346642644144393531463346383535383930454130",
                        "id": 26863,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7940:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8c29604e1caE4af683c4fBdAD951F3F855890EA0"
                      },
                      {
                        "hexValue": "307841664239353534323939343931613334643330336632433541393162656242313632663642324366",
                        "id": 26864,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7990:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf"
                      },
                      {
                        "hexValue": "307846343843303663353644373846353130366238633546613233346643654231643163353030393642",
                        "id": 26865,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8040:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xF48C06c56D78F5106b8c5Fa234fCeB1d1c50096B"
                      },
                      {
                        "hexValue": "307836323645436532616436324635393730304432373334413532334643363137373030356143386230",
                        "id": 26866,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8090:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x626ECe2ad62F59700D2734A523FC6177005aC8b0"
                      },
                      {
                        "hexValue": "307863364331353438303835356164643465654245333635633839613962623666323738453138323534",
                        "id": 26867,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8140:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xc6C15480855add4eeBE365c89a9bb6f278E18254"
                      },
                      {
                        "hexValue": "307846363037314637393035443465344236654264323762383139614146383932336435343246444446",
                        "id": 26868,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8190:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xF6071F7905D4e4B6eBd27b819aAF8923d542FDDF"
                      },
                      {
                        "hexValue": "307838383732666536333335323637614442344334306239663836363730393536363742353564434439",
                        "id": 26869,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8240:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8872fe6335267aDB4C40b9f8667095667B55dCD9"
                      },
                      {
                        "hexValue": "307834613462633637344139373733373337366346453939306145326645306432423645373338333933",
                        "id": 26870,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8290:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x4a4bc674A97737376cFE990aE2fE0d2B6E738393"
                      },
                      {
                        "hexValue": "307832373535306634423337663033303943353665613637353738456239323442346331396545454237",
                        "id": 26871,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8340:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x27550f4B37f0309C56ea67578Eb924B4c19eEEB7"
                      },
                      {
                        "hexValue": "307831383141303533666439363144433133373742383442453445353531636532373730353365344330",
                        "id": 26872,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8390:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x181A053fd961DC1377B84BE4E551ce277053e4C0"
                      },
                      {
                        "hexValue": "307866343443353030613835313561354143633930304339323162433838386235623632444136353536",
                        "id": 26873,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8440:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xf44C500a8515a5ACc900C921bC888b5b62DA6556"
                      },
                      {
                        "hexValue": "307846323032393364353639663045653745436364454632363644383645453338324638393332383636",
                        "id": 26874,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8490:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xF20293d569f0Ee7ECcdEF266D86EE382F8932866"
                      },
                      {
                        "hexValue": "307862314434373832393632413430373334334161333736356135393936333739333264323431333035",
                        "id": 26875,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8540:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xb1D4782962A407343Aa3765a599637932d241305"
                      },
                      {
                        "hexValue": "307837463533643730333833366162436146316361334435363037643830646437643936653530643032",
                        "id": 26876,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8590:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x7F53d703836abCaF1ca3D5607d80dd7d96e50d02"
                      },
                      {
                        "hexValue": "307837386644333866616133306561363637303263633339333833443245383466396134413536664136",
                        "id": 26877,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8640:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x78fD38faa30ea66702cc39383D2E84f9a4A56fA6"
                      }
                    ],
                    "id": 26878,
                    "isConstant": false,
                    "isInlineArray": true,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "4840:3848:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                      "typeString": "address[76] memory"
                    }
                  },
                  "functionReturnParameters": 26801,
                  "id": 26879,
                  "nodeType": "Return",
                  "src": "4833:3855:113"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__consensuses",
            "nameLocation": "4764:13:113",
            "parameters": {
              "id": 26796,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4777:2:113"
            },
            "returnParameters": {
              "id": 26801,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26800,
                  "mutability": "mutable",
                  "name": "list",
                  "nameLocation": "4821:4:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 26881,
                  "src": "4802:23:113",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                    "typeString": "address[76]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 26797,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "4802:7:113",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 26799,
                    "length": {
                      "hexValue": "3736",
                      "id": 26798,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4810:2:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_76_by_1",
                        "typeString": "int_const 76"
                      },
                      "value": "76"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "4802:11:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$76_storage_ptr",
                      "typeString": "address[76]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4801:25:113"
            },
            "scope": 26968,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "private"
          },
          {
            "id": 26967,
            "nodeType": "FunctionDefinition",
            "src": "8697:3937:113",
            "nodes": [],
            "body": {
              "id": 26966,
              "nodeType": "Block",
              "src": "8768:3866:113",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "307863463045323341454431364435643937313931306537343841436434383834394534623732333943",
                        "id": 26888,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8789:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xcF0E23AED16D5d971910e748ACd48849E4b7239C"
                      },
                      {
                        "hexValue": "307833326636364430463946313964623742304546314539463133313630383834446136353436374536",
                        "id": 26889,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8860:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x32f66D0F9F19db7B0EF1E9F13160884Da65467E6"
                      },
                      {
                        "hexValue": "307844363832444336443634373130443631393135313231333364453935376531343665394141353866",
                        "id": 26890,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8931:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xD682DC6D64710D6191512133dE957e146e9AA58f"
                      },
                      {
                        "hexValue": "307845466561466631643966314534454442303063363038346145343031363134334232394564393234",
                        "id": 26891,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8981:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xEFeaFf1d9f1E4EDB00c6084aE4016143B29Ed924"
                      },
                      {
                        "hexValue": "307843326361453733313146433066653430304138333864326444653036413839453164336539446137",
                        "id": 26892,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9031:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xC2caE7311FC0fe400A838d2dDe06A89E1d3e9Da7"
                      },
                      {
                        "hexValue": "307866393061393132466462374664333735373263443833333235333932643732396536304566363832",
                        "id": 26893,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9081:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xf90a912Fdb7Fd37572cD83325392d729e60Ef682"
                      },
                      {
                        "hexValue": "307841664239353534323939343931613334643330336632433541393162656242313632663642324366",
                        "id": 26894,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9131:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf"
                      },
                      {
                        "hexValue": "307838644139643838463930313431613033323932643565353534363931423146366537633632313263",
                        "id": 26895,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9181:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8dA9d88F90141a03292d5e554691B1F6e7c6212c"
                      },
                      {
                        "hexValue": "307841383746394132463043373038324641326631453364653130393044333630343743376344303137",
                        "id": 26896,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9231:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xA87F9A2F0C7082FA2f1E3de1090D36047C7cD017"
                      },
                      {
                        "hexValue": "307836363933646332353842444141633530353261623637384241356465323434304341316364416265",
                        "id": 26897,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9281:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x6693dc258BDAAc5052ab678BA5de2440CA1cdAbe"
                      },
                      {
                        "hexValue": "307830423637644635383437614637343736423245423436646133323836333845306642324336423239",
                        "id": 26898,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9331:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0B67dF5847aF7476B2EB46da328638E0fB2C6B29"
                      },
                      {
                        "hexValue": "307865393164314443643032333242446133303133373964453237626430656445343744623346373530",
                        "id": 26899,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9381:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xe91d1DCd0232BDa301379dE27bd0edE47Db3F750"
                      },
                      {
                        "hexValue": "307844633364653731364334343330643539384143353034633436383564363944304463453134313246",
                        "id": 26900,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9431:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xDc3de716C4430d598AC504c4685d69D0DcE1412F"
                      },
                      {
                        "hexValue": "307837393543463238453562373166314135306343394530313037373839314331384436353837653533",
                        "id": 26901,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9481:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x795CF28E5b71f1A50cC9E01077891C18D6587e53"
                      },
                      {
                        "hexValue": "307861334233633731333731333331664431393031653331364236376466326431366246353533356130",
                        "id": 26902,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9531:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xa3B3c71371331fD1901e316B67df2d16bF5535a0"
                      },
                      {
                        "hexValue": "307833324265323038644538413135393563433063636638453938344341423837353945613165356232",
                        "id": 26903,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9581:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x32Be208dE8A1595cC0ccf8E984CAB8759Ea1e5b2"
                      },
                      {
                        "hexValue": "307838313336633734653934623038333030643731466136433232303837623832314637333536386335",
                        "id": 26904,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9631:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8136c74e94b08300d71Fa6C22087b821F73568c5"
                      },
                      {
                        "hexValue": "307864613663373334324539304237376335433737413846373239323736353336303039396533304564",
                        "id": 26905,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9681:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xda6c7342E90B77c5C77A8F7292765360099e30Ed"
                      },
                      {
                        "hexValue": "307839356643383138434437373039666236614438393230643064313439323530313035303438373646",
                        "id": 26906,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9731:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x95fC818CD7709fb6aD8920d0d14925010504876F"
                      },
                      {
                        "hexValue": "307865384536366232343134313461343061334462353339654337643836346344363139333866383137",
                        "id": 26907,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9781:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xe8E66b241414a40a3Db539eC7d864cD61938f817"
                      },
                      {
                        "hexValue": "307866443537353737304136384435416639383362324133373439383166363034446441443944363834",
                        "id": 26908,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9831:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xfD575770A68D5Af983b2A374981f604DdAD9D684"
                      },
                      {
                        "hexValue": "307839413534454443623144396134346539663432333565613035633735423435623236363739363830",
                        "id": 26909,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9881:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x9A54EDCb1D9a44e9f4235ea05c75B45b26679680"
                      },
                      {
                        "hexValue": "307836313038353730413239663530304436393530664562666643393945434236366132363441303438",
                        "id": 26910,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9931:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x6108570A29f500D6950fEbffC99ECB66a264A048"
                      },
                      {
                        "hexValue": "307864413037314637313062306638323434333836363631364538613936303639303132413733636366",
                        "id": 26911,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9981:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xdA071F710b0f82443866616E8a96069012A73ccf"
                      },
                      {
                        "hexValue": "307838413461633634373634323338433731446466383246383730424536353236653239374463344364",
                        "id": 26912,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10031:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8A4ac64764238C71Ddf82F870BE6526e297Dc4Cd"
                      },
                      {
                        "hexValue": "307833336631373237436141353441453234434164423239343938383143333732356542363161313030",
                        "id": 26913,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10081:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x33f1727CaA54AE24CAdB2949881C3725eB61a100"
                      },
                      {
                        "hexValue": "307833344442353332463039456531323835444645663236654436393663346541323564634663653732",
                        "id": 26914,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10131:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x34DB532F09Ee1285DFEf26eD696c4eA25dcFce72"
                      },
                      {
                        "hexValue": "307833303264353131383946443839443765373262636232366136354431363934316430343346303839",
                        "id": 26915,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10181:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x302d51189FD89D7e72bcb26a65D16941d043F089"
                      },
                      {
                        "hexValue": "307846656232343746373645364636433145633334353564303465364533423639346135373744353743",
                        "id": 26916,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10231:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xFeb247F76E6F6C1Ec3455d04e6E3B694a577D57C"
                      },
                      {
                        "hexValue": "307830353935356439653939663537453535373441316139623733333631444431346145633844363431",
                        "id": 26917,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10281:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x05955d9e99f57E5574A1a9b73361DD14aEc8D641"
                      },
                      {
                        "hexValue": "307863663946343464444231386135353338456665326132413238654632303330303333336635613731",
                        "id": 26918,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10331:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xcf9F44dDB18a5538Efe2a2A28eF20300333f5a71"
                      },
                      {
                        "hexValue": "307837373964434531646463323839343145633835626632614530644143394630663132383336323831",
                        "id": 26919,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10381:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x779dCE1ddc28941Ec85bf2aE0dAC9F0f12836281"
                      },
                      {
                        "hexValue": "307830426232373065353236386139453961303734324464423032374661623734303541663536466137",
                        "id": 26920,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10431:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0Bb270e5268a9E9a0742DdB027Fab7405Af56Fa7"
                      },
                      {
                        "hexValue": "307835623932456132363535393761376366323043386441353645366265623834383563314241393933",
                        "id": 26921,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10481:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x5b92Ea265597a7cf20C8dA56E6beb8485c1BA993"
                      },
                      {
                        "hexValue": "307830453333343141653445643964413635466333306137466136333537653842354163343062304133",
                        "id": 26922,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10531:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0E3341Ae4Ed9dA65Fc30a7Fa6357e8B5Ac40b0A3"
                      },
                      {
                        "hexValue": "307866366664354663413442643736394241343935423239423938646261354632654346344345454433",
                        "id": 26923,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10581:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xf6fd5FcA4Bd769BA495B29B98dba5F2eCF4CEED3"
                      },
                      {
                        "hexValue": "307838643061363339424444336238316446323634633464423436343736363538383538323331353130",
                        "id": 26924,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10631:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x8d0a639BDD3b81dF264c4dB46476658858231510"
                      },
                      {
                        "hexValue": "307842423034363933326645464344443342653433363834343461313031344632354466454538336632",
                        "id": 26925,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10681:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xBB046932fEFCDD3Be4368444a1014F25DfEE83f2"
                      },
                      {
                        "hexValue": "307835346530396246303438313066333837333437644136443936383744366133374543326161644337",
                        "id": 26926,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10731:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x54e09bF04810f387347dA6D9687D6a37EC2aadC7"
                      },
                      {
                        "hexValue": "307844453565313535346532624635643045353442616643373443393332623846326144346532373346",
                        "id": 26927,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10781:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xDE5e1554e2bF5d0E54BafC74C932b8F2aD4e273F"
                      },
                      {
                        "hexValue": "307863363864303235356531623943353439433433633731383142443239363834444334373765646663",
                        "id": 26928,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10831:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xc68d0255e1b9C549C43c7181BD29684DC477edfc"
                      },
                      {
                        "hexValue": "307833373932303733334442394135623435664339434435653343383038323562456646433161303134",
                        "id": 26929,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10881:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x37920733DB9A5b45fC9CD5e3C80825bEfFC1a014"
                      },
                      {
                        "hexValue": "307837653931303734383042663932646435366339373131384532304364423363314165396444383636",
                        "id": 26930,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10931:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x7e9107480Bf92dd56c97118E20CdB3c1Ae9dD866"
                      },
                      {
                        "hexValue": "307843344638334137623336393037304533324345643442643646643634374431394145663832384143",
                        "id": 26931,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10981:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xC4F83A7b369070E32CEd4Bd6Fd647D19AEf828AC"
                      },
                      {
                        "hexValue": "307834313244346436393132323833394663434164303138306539333538643135374333383736663343",
                        "id": 26932,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11031:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x412D4d69122839FcCAd0180e9358d157C3876f3C"
                      },
                      {
                        "hexValue": "307833353535303342384536343230354644453964424241443236393131303939316366373336613530",
                        "id": 26933,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11081:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x355503B8E64205FDE9dBBAD269110991cf736a50"
                      },
                      {
                        "hexValue": "307833303666323363333266646643303738353042663234324538466635394335453739424666383132",
                        "id": 26934,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11131:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x306f23c32fdfC07850Bf242E8Ff59C5E79BFf812"
                      },
                      {
                        "hexValue": "307834363763353432353034324339443966303235323635623732433933443733453046323937384335",
                        "id": 26935,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11181:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x467c5425042C9D9f025265b72C93D73E0F2978C5"
                      },
                      {
                        "hexValue": "307845453939324230463545393734366664623865353834456661303141463739663642314330393430",
                        "id": 26936,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11231:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xEE992B0F5E9746fdb8e584Efa01AF79f6B1C0940"
                      },
                      {
                        "hexValue": "307842443633343263303030396635353133316237613531663632374345384363383738373944443636",
                        "id": 26937,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11281:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xBD6342c0009f55131b7a51f627CE8Cc87879DD66"
                      },
                      {
                        "hexValue": "307835373031386539323945623666653530333535624631424639443164333963413436366237466130",
                        "id": 26938,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11331:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x57018e929Eb6fe50355bF1BF9D1d39cA466b7Fa0"
                      },
                      {
                        "hexValue": "307841643465334432463835623443303935373432423530303735314345453563344238663635413562",
                        "id": 26939,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11381:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAd4e3D2F85b4C095742B500751CEE5c4B8f65A5b"
                      },
                      {
                        "hexValue": "307838394136413037346442384263443346643630363236313037654132614535373636393346376335",
                        "id": 26940,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11431:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x89A6A074dB8BcD3Fd60626107eA2aE576693F7c5"
                      },
                      {
                        "hexValue": "307843423734323138366641303536343434373636664137636335326130343739453846364445444541",
                        "id": 26941,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11481:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xCB742186fA056444766fA7cc52a0479E8F6DEDEA"
                      },
                      {
                        "hexValue": "307836304338313137393031416233353733386663466437313537443339333230376546436538303535",
                        "id": 26942,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11531:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x60C8117901Ab35738fcFd7157D393207eFCe8055"
                      },
                      {
                        "hexValue": "307841443730414431353245323745303932334334663131433633343930464346443930344134433336",
                        "id": 26943,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11581:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAD70AD152E27E0923C4f11C63490FCFD904A4C36"
                      },
                      {
                        "hexValue": "307864386234376238313634386439653831653530623863413231454138314632453142363932394242",
                        "id": 26944,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11631:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xd8b47b81648d9e81e50b8cA21EA81F2E1B6929BB"
                      },
                      {
                        "hexValue": "307865434231333734313732393730613631334131393730333730423364646541443846383434373333",
                        "id": 26945,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11681:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xeCB1374172970a613A1970370B3ddeAD8F844733"
                      },
                      {
                        "hexValue": "307830343732644361303233313842353332466362304230353636363145453766443241646338613230",
                        "id": 26946,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11731:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x0472dCa02318B532Fcb0B056661EE7fD2Adc8a20"
                      },
                      {
                        "hexValue": "307864643030414363303746334637414661393042356132326346643536633038303862363434346464",
                        "id": 26947,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11781:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xdd00ACc07F3F7AFa90B5a22cFd56c0808b6444dd"
                      },
                      {
                        "hexValue": "307834643333303263363966616334383945324637333733624342326631303164334233373863344365",
                        "id": 26948,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11831:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x4d3302c69fac489E2F7373bCB2f101d3B378c4Ce"
                      },
                      {
                        "hexValue": "307865373638354534333746333444653244333665413265394142313345354162383731373131413243",
                        "id": 26949,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11881:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xe7685E437F34De2D36eA2e9AB13E5Ab871711A2C"
                      },
                      {
                        "hexValue": "307841664239353534323939343931613334643330336632433541393162656242313632663642324366",
                        "id": 26950,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11931:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf"
                      },
                      {
                        "hexValue": "307833463944663037313730393942416141393541313442334341413238354441644441466230363039",
                        "id": 26951,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11981:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x3F9Df0717099BAaA95A14B3CAA285DAdDAFb0609"
                      },
                      {
                        "hexValue": "307832334466666334613933633337344139314662633163333330373561663031326236383636334637",
                        "id": 26952,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12031:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x23Dffc4a93c374A91Fbc1c33075af012b68663F7"
                      },
                      {
                        "hexValue": "307837396543346438334434306331426431343139443866353631424538353146446131454133326136",
                        "id": 26953,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12081:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x79eC4d83D40c1Bd1419D8f561BE851FDa1EA32a6"
                      },
                      {
                        "hexValue": "307832443366323837383062466237456436464235353437633330394531613638333765356244313242",
                        "id": 26954,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12131:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x2D3f28780bFb7Ed6FB5547c309E1a6837e5bD12B"
                      },
                      {
                        "hexValue": "307861313634653842354639306365343242304635333145333838326364453346363938653131323166",
                        "id": 26955,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12181:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xa164e8B5F90ce42B0F531E3882cdE3F698e1121f"
                      },
                      {
                        "hexValue": "307834613462633637344139373733373337366346453939306145326645306432423645373338333933",
                        "id": 26956,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12231:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x4a4bc674A97737376cFE990aE2fE0d2B6E738393"
                      },
                      {
                        "hexValue": "307846363138303642363532373866464462463862303466383332433539623635303736373938466236",
                        "id": 26957,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12281:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xF61806B65278fFDbF8b04f832C59b65076798Fb6"
                      },
                      {
                        "hexValue": "307838333665654564643933313537354343453432383563373443313544426441394564633344633446",
                        "id": 26958,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12331:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x836eeEdd931575CCE4285c74C15DBdA9Edc3Dc4F"
                      },
                      {
                        "hexValue": "307862643935423035383135383545343135313739336231383365653735643530396644453532384236",
                        "id": 26959,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12381:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xbd95B0581585E4151793b183ee75d509fDE528B6"
                      },
                      {
                        "hexValue": "307841373542314365326638433434376361423663313346333133646664383036323837614134376532",
                        "id": 26960,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12431:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xA75B1Ce2f8C447caB6c13F313dfd806287aA47e2"
                      },
                      {
                        "hexValue": "307834443534363437353332316234634132613931423130316632363735303039324330353335306346",
                        "id": 26961,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12481:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x4D546475321b4cA2a91B101f26750092C05350cF"
                      },
                      {
                        "hexValue": "307846433264323944613731304634353136384445313165354330353143614135353830383844353261",
                        "id": 26962,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12531:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0xFC2d29Da710F45168DE11e5C051CaA558088D52a"
                      },
                      {
                        "hexValue": "307831433730423831363045393244353645353530636166303265316632653545433046646235353141",
                        "id": 26963,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12581:42:113",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x1C70B8160E92D56E550caf02e1f2e5EC0Fdb551A"
                      }
                    ],
                    "id": 26964,
                    "isConstant": false,
                    "isInlineArray": true,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "8781:3848:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                      "typeString": "address[76] memory"
                    }
                  },
                  "functionReturnParameters": 26887,
                  "id": 26965,
                  "nodeType": "Return",
                  "src": "8774:3855:113"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__treasuries",
            "nameLocation": "8706:12:113",
            "parameters": {
              "id": 26882,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8718:2:113"
            },
            "returnParameters": {
              "id": 26887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26886,
                  "mutability": "mutable",
                  "name": "list",
                  "nameLocation": "8762:4:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 26967,
                  "src": "8743:23:113",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$76_memory_ptr",
                    "typeString": "address[76]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 26883,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8743:7:113",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 26885,
                    "length": {
                      "hexValue": "3736",
                      "id": 26884,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8751:2:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_76_by_1",
                        "typeString": "int_const 76"
                      },
                      "value": "76"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "8743:11:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$76_storage_ptr",
                      "typeString": "address[76]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8742:25:113"
            },
            "scope": 26968,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 26610,
              "name": "Profile",
              "nameLocations": [
                "111:7:113"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 25783,
              "src": "111:7:113"
            },
            "id": 26611,
            "nodeType": "InheritanceSpecifier",
            "src": "111:7:113"
          }
        ],
        "canonicalName": "Profile_Testnet",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          26968,
          25783,
          149462,
          26494,
          25990,
          26354,
          3544,
          37721,
          8675,
          3589,
          7366,
          18134,
          18141
        ],
        "name": "Profile_Testnet",
        "nameLocation": "92:15:113",
        "scope": 26969,
        "usedErrors": [
          7203,
          7206,
          7209,
          7212,
          7220,
          7224,
          7229,
          7231,
          7237,
          7242,
          8648,
          18140,
          37293,
          37321,
          37336
        ],
        "usedEvents": [
          7162,
          7171,
          7181,
          7186,
          7193,
          7200,
          8656,
          149326
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 24985426,
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b603354610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60335460ff9081161015620000e2576033805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6137f980620000f46000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80639a1a05e0116100d8578063b5017aef1161008c578063de981f1b11610066578063de981f1b14610314578063f466094014610327578063f9226b1a1461034757600080fd5b8063b5017aef146102e6578063c4d66de8146102f9578063c63516321461030c57600080fd5b8063ad5abf2d116100bd578063ad5abf2d146102ac578063b0abaea6146102bf578063b261596f146102c657600080fd5b80639a1a05e0146102865780639debe22e1461029957600080fd5b806350a9fc291161012f57806384cb10101161011457806384cb10101461022e578063865e6fd31461024157806388660f2a1461025457600080fd5b806350a9fc29146101e05780637e18b5661461020b57600080fd5b80631f97bdb1116101605780631f97bdb1146101a457806333284687146101b75780633c3d8410146101cd57600080fd5b80630840ba721461017c578063183584c114610191575b600080fd5b61018f61018a366004612dff565b61035a565b005b61018f61019f366004612dff565b61052f565b61018f6101b2366004612dff565b610577565b6003546040519081526020015b60405180910390f35b61018f6101db366004612e38565b610764565b6101f36101ee366004612e51565b61084c565b6040516001600160a01b0390911681526020016101c4565b61021e610219366004612e6e565b61085d565b60405190151581526020016101c4565b61018f61023c366004612dff565b610941565b61018f61024f366004612eb8565b610b20565b610267610262366004612e51565b610b3f565b6040805192151583526001600160a01b039091166020830152016101c4565b61018f610294366004612f1d565b610b70565b61018f6102a7366004612fa0565b610c22565b61018f6102ba366004612e38565b610c3a565b606a6101f3565b6102d96102d4366004613030565b610c4e565b6040516101c49190613072565b61018f6102f43660046130bf565b610d27565b61018f610307366004612e51565b610e5d565b61018f610f6a565b6101f3610322366004613167565b610f7c565b61033a610335366004612e51565b611010565b6040516101c491906131d2565b6102d9610355366004613030565b6111ec565b603354600290610100900460ff1615801561037c575060335460ff8083169116105b6103e45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6033805461ffff191660ff83161761010017905561040360098461129f565b61040e600a8361129f565b600061041a6008610f7c565b6001600160a01b031663ba77b06c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610457573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261047f91908101906132af565b905060005b81518110156104df5760008282815181106104a1576104a1613374565b6020908102919091018101516001600160a01b031660008181526002909252604090912080546001600160a01b031916909117905550600101610484565b506104e8611343565b506033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f727465640000000000000000000000000000000000000060448201526064016103db565b6000610582836113c0565b905061058d81611414565b6105986009836114f0565b6105a18161153c565b60018101546001600160a01b031660006105bb6008610f7c565b6040517fd93fa3060000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063d93fa30690604401600060405180830381600087803b15801561062357600080fd5b505af1158015610637573d6000803e3d6000fd5b505050506000610647600a610f7c565b6040516001600160a01b038581166024830152878116604483015291925060009183169060640160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa0c302a700000000000000000000000000000000000000000000000000000000179052516106d1919061338a565b6000604051808303816000865af19150503d806000811461070e576040519150601f19603f3d011682016040523d82523d6000602084013e610713565b606091505b5050905080610751576040516001600160a01b038816907f940589fcab729233e520a0b808ffeabac5a6e90603d892a31cd4609b32547dd990600090a25b61075b858761154e565b50505050505050565b603354600390610100900460ff16158015610786575060335460ff8083169116105b6107e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103db565b6033805461ffff191660ff83161761010017905561080682600355565b6033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6000610857826115f5565b92915050565b6000805b60028110156109385760005b83826002811061087f5761087f613374565b60200281019061088f91906133a6565b905081101561092f576109198483600281106108ad576108ad613374565b6020028101906108bd91906133a6565b838181106108cd576108cd613374565b90506020028101906108df91906133f0565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061166c92505050565b610927575060009392505050565b60010161086d565b50600101610861565b50600192915050565b600061094c836113c0565b905061095781611414565b6109626004836114f0565b61096b8161153c565b60006109776009610f7c565b6040517f9ee3c3f80000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152336024830152858116604483015291925090821690639ee3c3f890606401600060405180830381600087803b1580156109e557600080fd5b505af11580156109f9573d6000803e3d6000fd5b505050506000610a096008610f7c565b6040517fea80d67d0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063ea80d67d90604401600060405180830381600087803b158015610a7157600080fd5b505af1158015610a85573d6000803e3d6000fd5b50506040517fecd850cc0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301528416925063ecd850cc9150604401600060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b50505050610b0f838561169b565b610b1983856116de565b5050505050565b610b28611721565b610b318161177b565b610b3b828261129f565b5050565b600080610b67836001600160a01b039081166000908152600260205260409020541680151591565b91509150915091565b6000610b7b866113c0565b9050610b8681611414565b610bc585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506117ca92505050565b610bd18585858561180c565b610bda8161153c565b610c1a8186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061189a92505050565b505050505050565b610c2a611721565b610c35838383611951565b505050565b610c42611721565b610c4b81600355565b50565b60608167ffffffffffffffff811115610c6957610c6961328e565b604051908082528060200260200182016040528015610c92578160200160208202803683370190505b50905060005b82811015610d2057600080858584818110610cb557610cb5613374565b9050602002016020810190610cca9190612e51565b6001600160a01b0390811682526020820192909252604001600020600101548351911690839083908110610d0057610d00613374565b6001600160a01b0390921660209283029190910190910152600101610c98565b5092915050565b6009610d32816119e8565b6001600160a01b038088166000908152602081905260409020805490911615610d87576040517f249b38f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518061010001604052808a6001600160a01b031681526020018a6001600160a01b031681526020018b6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018290526040805191820181529181529101529050610e3b81611a4d565b610e478787878761180c565b610e518282611a87565b50505050505050505050565b603354610100900460ff1615808015610e7d5750603354600160ff909116105b80610e975750303b158015610e97575060335460ff166001145b610efa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103db565b6033805460ff191660011790558015610f1d576033805461ff0019166101001790555b610f2860088361129f565b8015610b3b576033805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610840565b610f72611721565b610f7a611b26565b565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610fb357610fb3613437565b60ff1681526020810191909152604001600020546001600160a01b031690508061100b57816040517f812281be0000000000000000000000000000000000000000000000000000000081526004016103db9190613461565b919050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082019290925260e08101919091526001600160a01b0380831660009081526020818152604091829020825161010081018452815485168152600182015485169281019290925260028101548416928201929092526003820154831660608201526004820154909216608083015260058101805460a0840191906110c79061346f565b80601f01602080910402602001604051908101604052809291908181526020018280546110f39061346f565b80156111405780601f1061111557610100808354040283529160200191611140565b820191906000526020600020905b81548152906001019060200180831161112357829003601f168201915b50505050508152602001600682015481526020016007820180546111639061346f565b80601f016020809104026020016040519081016040528092919081815260200182805461118f9061346f565b80156111dc5780601f106111b1576101008083540402835291602001916111dc565b820191906000526020600020905b8154815290600101906020018083116111bf57829003601f168201915b5050505050815250509050919050565b60608167ffffffffffffffff8111156112075761120761328e565b604051908082528060200260200182016040528015611230578160200160208202803683370190505b50905060005b82811015610d205761126d84848381811061125357611253613374565b90506020020160208101906112689190612e51565b6115f5565b82828151811061127f5761127f613374565b6001600160a01b0390921660209283029190910190910152600101611236565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f8111156112d5576112d5613437565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f81111561131657611316613437565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b603354610100900460ff16610f725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103db565b6001600160a01b038082166000908152602081905260409020805490911661100b576040517f682a559600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101546001600160a01b0316331415806114c257506114356008610f7c565b81546040517f46ebb2320000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529116906346ebb23290604401602060405180830381865afa15801561149c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c091906134a9565b155b15610c4b576000356001600160e01b0319166004604051620f948f60ea1b81526004016103db9291906134db565b6001600160a01b03811661153257816040517f57ed62e40000000000000000000000000000000000000000000000000000000081526004016103db91906134f9565b610b3b8282611bb6565b61154581611c16565b42600682015550565b600180830180546001600160a01b03908116600090815260026020908152604080832080546001600160a01b03199081169091558854888616808652838620805484169290971691909117909555855416841790945584905291909120805460ff191690921790915560095b83546040516001600160a01b03909116907fe9654874a1d2cdb1459fe91e0442173d77f8e1baa4897e3f5c10e769a1515d0690600090a45050565b600080600061161f846001600160a01b039081166000908152600260205260409020541680151591565b9150915081611665576040517f1e3d646f0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016103db565b9392505050565b60006001600061168184805160209091012090565b815260208101919091526040016000205460ff1692915050565b6002820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff1916909117905560046115ba565b6003820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff19169091179055600a6115ba565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610f7a576000356001600160e01b0319166001604051620f948f60ea1b81526004016103db9291906134db565b806001600160a01b03163b600003610c4b576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016103db565b6117d38161166c565b15610c4b57806040517f7995d6c80000000000000000000000000000000000000000000000000000000081526004016103db9190613507565b61181884848484611c61565b61185657838383836040517f97cf1c8d0000000000000000000000000000000000000000000000000000000081526004016103db9493929190613543565b7fb737fd977072c109cccc97108f9f8a9017af4bbf4d20938a747f17d8921c50a68484848460405161188b9493929190613543565b60405180910390a15b50505050565b8160050180546118a99061346f565b1590506118c357600782016118c160058401826135bd565b505b600582016118d1828261369a565b5060018060006118e684805160209091012090565b815260208101919091526040908101600020805460ff191692151592909217909155825490516001600160a01b03909116907fe13225a225fbfeebd9d707546f3d7adee5d72738ac686cc5b97266c49745a56b90611945908490613507565b60405180910390a25050565b6001600160a01b038316600081815260208190526040902080546001600160a01b0319169091178155611984818561154e565b61198e818461169b565b61199881836116de565b816001600160a01b0316836001600160a01b0316856001600160a01b03167ff865c8ac025e544977905cfe6b3a26ce0c8aa1f9d7049d555d3c04bff7eed68660405160405180910390a450505050565b6119f181610f7c565b6001600160a01b0316336001600160a01b031614610c4b576000356001600160e01b03191681336040517f8383e6340000000000000000000000000000000000000000000000000000000081526004016103db93929190613752565b611a5c600982602001516114f0565b611a6b600482604001516114f0565b611a7a600a82606001516114f0565b610c4b8160a001516117ca565b805182546001600160a01b0319166001600160a01b039091161782556020810151611ab390839061154e565b611ac182826040015161169b565b611acf8282606001516116de565b611add828260800151611d4f565b611aeb828260a0015161189a565b80516040516001600160a01b03909116907fc9da0ae38bd4761b72da1045c9b2618f0cd991dcac01e1f9bbf68474025f074390600090a25050565b466107e514611b3157565b6000611b3b611d9c565b90506000611b476125ae565b90506000611b536125ae565b905060005b604c81101561189457611bae8482604c8110611b7657611b76613374565b60200201518483604c8110611b8d57611b8d613374565b60200201518484604c8110611ba457611ba4613374565b6020020151611951565b600101611b58565b6001600160a01b03811660009081526001602052604090205460ff1615610b3b5781816001600160a01b03166040517fe4166aaa0000000000000000000000000000000000000000000000000000000081526004016103db929190613787565b6003548160060154611c2891906137a2565b421015610c4b576040517f640b308400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051600090606a906001908390611c83908990899089908990602401613543565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7eae32c2000000000000000000000000000000000000000000000000000000001790528051909150611ce8612dad565b602083016020828483895afa611cfd57600094505b503d611d0857600093505b83611d3f576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159998505050505050505050565b6004820180546001600160a01b0319166001600160a01b03831690811790915515610b3b576001600160a01b03166000908152600160208190526040909120805460ff1916909117905550565b611da4612dcb565b506040805161098081018252739687e8c41fa369ad08fd278a43114c4207856a6181527332f66d0f9f19db7b0ef1e9f13160884da65467e7602082015273d682dc6d64710d6191512133de957e146e9aa58e9181019190915273efeaff1d9f1e4edb00c6084ae4016143b29ed92560608201527357b572a9de68bd29074e1c51c790fc45c592ba39608082015273c0c2a56f9606ba109d37a0d18af8e5baa1e1c0ad60a082015273afb9554299491a34d303f2c5a91bebb162f6b2c160c082015273533f61b360e81f58919fab5c653724f71faf12ab60e082015273a87f9a2f0c7082fa2f1e3de1090d36047c7cd018610100820152736693dc258bdaac5052ab678ba5de2440ca1cdab26101208201527396f78323481fc9abdb8cc4d8aa50c1500ac93b9261014082015273e91d1dcd0232bda301379de27bd0ede47db3f75161016082015273981676e5e5164524e70f79ac45b52099ebda878161018082015273795cf28e5b71f1a50cc9e01077891c18d6587e546101a082015273a3b3c71371331fd1901e316b67df2d16bf5535a16101c08201527332be208de8a1595cc0ccf8e984cab8759ea1e5b96101e0820152732dc14d542b5478f206b296acbcbfbccee6e8d24861020082015273da6c7342e90b77c5c77a8f7292765360099e30ee610220820152739d7ea2223e89a55a4ef69ca993eae6fde6e6337161024082015273e8e66b241414a40a3db539ec7d864cd61938f818610260820152738fff45d4a6a27f8256df19d0dadf7787cfbe56aa610280820152739a54edcb1d9a44e9f4235ea05c75b45b266796816102a0820152736108570a29f500d6950febffc99ecb66a264a0496102c082015273da071f710b0f82443866616e8a96069012a73cce6102e0820152735f7f2ae316ec5c092d201744fe8337353adb2bb361030082015273771dec03db66a566a1dfe3fd635b3f8d404b92916103208201527371f9154adc0bef39bbe8db1d060e6f239d2e10ae6103408201527395908d03ba55c2a44688330b59e746fdb2f17e3e610360820152733db3abc65f203788836c8d50f6923c56f3f0ff7c6103808201527305955d9e99f57e5574a1a9b73361dd14aec8d6426103a082015273283b4baa1d0415603c81edc1c68fadd3c790837c6103c0820152732a5eb3f9cd4d6ef49dc2a30041e4421af33039296103e0820152733b9f2587d55e96276b09b258ac909d809961f6c2610400820152732576e6bc92a493f4da6335c5e69bc0c272381c3a610420820152730e3341ae4ed9da65fc30a7fa6357e8b5ac40b0a361044082015273f6fd5fca4bd769ba495b29b98dba5f2ecf4ceed361046082015273d9299fa321407a5d10c73d71c57ca687a2a38af661048082015273877efeffe7a23e42c39e2c99b977e4aa4bec75176104a082015273071b510c415d3f84c6f4c6291c49887cc56cac416104c082015273de5e1554e2bf5d0e54bafc74c932b8f2ad4e27306104e082015273c68d0255e1b9c549c43c7181bd29684dc477edf061050082015273c3fb7b95b874bfcbd1e722a2061f3adf217121d36105208201527336fd0d4a075507a4e742631aa37dad46a1f4c0da61054082015273661549d7717c20ffa62ad359b7667bbf5c82053b61056082015273412d4d69122839fccad0180e9358d157c3876f3d61058082015273355503b8e64205fde9dbbad269110991cf736a516105a08201527312cf444bf83ed5b610d0089927ecd3babc81ff886105c082015273467c5425042c9d9f025265b72c93d73e0f2978c66105e082015273b6bc5bc0410773a3f86b1537ce7495c52e38f88b61060082015273bd6342c0009f55131b7a51f627ce8cc87879dd676106208201527335c78defbd03e96b4e3ee6a73e9cd4c49d2b885a61064082015273ad4e3d2f85b4c095742b500751cee5c4b8f65a5c6106608201527342c535deccc071d9039b177cb3abf30411531b0561068082015273b212f24d850a0ed90f2889dee31870e7ff3fed6c6106a08201527360c8117901ab35738fcfd7157d393207efce80566106c08201527330b0215a442ea3d3088acd83cd5fe2aa2bcd775a6106e082015273d21bece2d8206a3ffdbaedb827f4d4bd0ff79e3d610700820152734efa5c5bbe7a257743335f200e86cd44eea4dcd9610720820152730472dca02318b532fcb0b056661ee7fd2adc8a2161074082015273dd00acc07f3f7afa90b5a22cfd56c0808b6444df610760820152734d3302c69fac489e2f7373bcb2f101d3b378c4cf610780820152738c29604e1cae4af683c4fbdad951f3f855890ea06107a082015273afb9554299491a34d303f2c5a91bebb162f6b2cf6107c082015273f48c06c56d78f5106b8c5fa234fceb1d1c50096b6107e082015273626ece2ad62f59700d2734a523fc6177005ac8b061080082015273c6c15480855add4eebe365c89a9bb6f278e1825461082082015273f6071f7905d4e4b6ebd27b819aaf8923d542fddf610840820152738872fe6335267adb4c40b9f8667095667b55dcd9610860820152734a4bc674a97737376cfe990ae2fe0d2b6e7383936108808201527327550f4b37f0309c56ea67578eb924b4c19eeeb76108a082015273181a053fd961dc1377b84be4e551ce277053e4c06108c082015273f44c500a8515a5acc900c921bc888b5b62da65566108e082015273f20293d569f0ee7eccdef266d86ee382f893286661090082015273b1d4782962a407343aa3765a599637932d241305610920820152737f53d703836abcaf1ca3d5607d80dd7d96e50d026109408201527378fd38faa30ea66702cc39383d2e84f9a4a56fa661096082015290565b6125b6612dcb565b50604080516109808101825273cf0e23aed16d5d971910e748acd48849e4b7239c81527332f66d0f9f19db7b0ef1e9f13160884da65467e6602082015273d682dc6d64710d6191512133de957e146e9aa58f9181019190915273efeaff1d9f1e4edb00c6084ae4016143b29ed924606082015273c2cae7311fc0fe400a838d2dde06a89e1d3e9da7608082015273f90a912fdb7fd37572cd83325392d729e60ef68260a082015273afb9554299491a34d303f2c5a91bebb162f6b2cf60c08201819052738da9d88f90141a03292d5e554691b1f6e7c6212c60e083015273a87f9a2f0c7082fa2f1e3de1090d36047c7cd017610100830152736693dc258bdaac5052ab678ba5de2440ca1cdabe610120830152730b67df5847af7476b2eb46da328638e0fb2c6b2961014083015273e91d1dcd0232bda301379de27bd0ede47db3f75061016083015273dc3de716c4430d598ac504c4685d69d0dce1412f61018083015273795cf28e5b71f1a50cc9e01077891c18d6587e536101a083015273a3b3c71371331fd1901e316b67df2d16bf5535a06101c08301527332be208de8a1595cc0ccf8e984cab8759ea1e5b26101e0830152738136c74e94b08300d71fa6c22087b821f73568c561020083015273da6c7342e90b77c5c77a8f7292765360099e30ed6102208301527395fc818cd7709fb6ad8920d0d14925010504876f61024083015273e8e66b241414a40a3db539ec7d864cd61938f81761026083015273fd575770a68d5af983b2a374981f604ddad9d684610280830152739a54edcb1d9a44e9f4235ea05c75b45b266796806102a0830152736108570a29f500d6950febffc99ecb66a264a0486102c083015273da071f710b0f82443866616e8a96069012a73ccf6102e0830152738a4ac64764238c71ddf82f870be6526e297dc4cd6103008301527333f1727caa54ae24cadb2949881c3725eb61a1006103208301527334db532f09ee1285dfef26ed696c4ea25dcfce7261034083015273302d51189fd89d7e72bcb26a65d16941d043f08961036083015273feb247f76e6f6c1ec3455d04e6e3b694a577d57c6103808301527305955d9e99f57e5574a1a9b73361dd14aec8d6416103a083015273cf9f44ddb18a5538efe2a2a28ef20300333f5a716103c083015273779dce1ddc28941ec85bf2ae0dac9f0f128362816103e0830152730bb270e5268a9e9a0742ddb027fab7405af56fa7610400830152735b92ea265597a7cf20c8da56e6beb8485c1ba993610420830152730e3341ae4ed9da65fc30a7fa6357e8b5ac40b0a361044083015273f6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3610460830152738d0a639bdd3b81df264c4db4647665885823151061048083015273bb046932fefcdd3be4368444a1014f25dfee83f26104a08301527354e09bf04810f387347da6d9687d6a37ec2aadc76104c083015273de5e1554e2bf5d0e54bafc74c932b8f2ad4e273f6104e083015273c68d0255e1b9c549c43c7181bd29684dc477edfc6105008301527337920733db9a5b45fc9cd5e3c80825beffc1a014610520830152737e9107480bf92dd56c97118e20cdb3c1ae9dd86661054083015273c4f83a7b369070e32ced4bd6fd647d19aef828ac61056083015273412d4d69122839fccad0180e9358d157c3876f3c61058083015273355503b8e64205fde9dbbad269110991cf736a506105a083015273306f23c32fdfc07850bf242e8ff59c5e79bff8126105c083015273467c5425042c9d9f025265b72c93d73e0f2978c56105e083015273ee992b0f5e9746fdb8e584efa01af79f6b1c094061060083015273bd6342c0009f55131b7a51f627ce8cc87879dd666106208301527357018e929eb6fe50355bf1bf9d1d39ca466b7fa061064083015273ad4e3d2f85b4c095742b500751cee5c4b8f65a5b6106608301527389a6a074db8bcd3fd60626107ea2ae576693f7c561068083015273cb742186fa056444766fa7cc52a0479e8f6dedea6106a08301527360c8117901ab35738fcfd7157d393207efce80556106c083015273ad70ad152e27e0923c4f11c63490fcfd904a4c366106e083015273d8b47b81648d9e81e50b8ca21ea81f2e1b6929bb61070083015273ecb1374172970a613a1970370b3ddead8f844733610720830152730472dca02318b532fcb0b056661ee7fd2adc8a2061074083015273dd00acc07f3f7afa90b5a22cfd56c0808b6444dd610760830152734d3302c69fac489e2f7373bcb2f101d3b378c4ce61078083015273e7685e437f34de2d36ea2e9ab13e5ab871711a2c6107a08301526107c0820152733f9df0717099baaa95a14b3caa285daddafb06096107e08201527323dffc4a93c374a91fbc1c33075af012b68663f76108008201527379ec4d83d40c1bd1419d8f561be851fda1ea32a6610820820152732d3f28780bfb7ed6fb5547c309e1a6837e5bd12b61084082015273a164e8b5f90ce42b0f531e3882cde3f698e1121f610860820152734a4bc674a97737376cfe990ae2fe0d2b6e73839361088082015273f61806b65278ffdbf8b04f832c59b65076798fb66108a082015273836eeedd931575cce4285c74c15dbda9edc3dc4f6108c082015273bd95b0581585e4151793b183ee75d509fde528b66108e082015273a75b1ce2f8c447cab6c13f313dfd806287aa47e2610900820152734d546475321b4ca2a91b101f26750092c05350cf61092082015273fc2d29da710f45168de11e5c051caa558088d52a610940820152731c70b8160e92d56e550caf02e1f2e5ec0fdb551a61096082015290565b60405180602001604052806001906020820280368337509192915050565b604051806109800160405280604c906020820280368337509192915050565b6001600160a01b0381168114610c4b57600080fd5b60008060408385031215612e1257600080fd5b8235612e1d81612dea565b91506020830135612e2d81612dea565b809150509250929050565b600060208284031215612e4a57600080fd5b5035919050565b600060208284031215612e6357600080fd5b813561166581612dea565b600060208284031215612e8057600080fd5b813567ffffffffffffffff811115612e9757600080fd5b82016040810184101561166557600080fd5b80356010811061100b57600080fd5b60008060408385031215612ecb57600080fd5b612e1d83612ea9565b60008083601f840112612ee657600080fd5b50813567ffffffffffffffff811115612efe57600080fd5b602083019150836020828501011115612f1657600080fd5b9250929050565b600080600080600060608688031215612f3557600080fd5b8535612f4081612dea565b9450602086013567ffffffffffffffff80821115612f5d57600080fd5b612f6989838a01612ed4565b90965094506040880135915080821115612f8257600080fd5b50612f8f88828901612ed4565b969995985093965092949392505050565b600080600060608486031215612fb557600080fd5b8335612fc081612dea565b92506020840135612fd081612dea565b91506040840135612fe081612dea565b809150509250925092565b60008083601f840112612ffd57600080fd5b50813567ffffffffffffffff81111561301557600080fd5b6020830191508360208260051b8501011115612f1657600080fd5b6000806020838503121561304357600080fd5b823567ffffffffffffffff81111561305a57600080fd5b61306685828601612feb565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156130b35783516001600160a01b03168352928401929184019160010161308e565b50909695505050505050565b600080600080600080600060a0888a0312156130da57600080fd5b87356130e581612dea565b965060208801356130f581612dea565b9550604088013561310581612dea565b9450606088013567ffffffffffffffff8082111561312257600080fd5b61312e8b838c01612ed4565b909650945060808a013591508082111561314757600080fd5b506131548a828b01612ed4565b989b979a50959850939692959293505050565b60006020828403121561317957600080fd5b61166582612ea9565b60005b8381101561319d578181015183820152602001613185565b50506000910152565b600081518084526131be816020860160208601613182565b601f01601f19169290920160200192915050565b602081526001600160a01b0382511660208201526000602083015161320260408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516101008060c085015261325e6101208501836131a6565b915060c085015160e085015260e0850151601f19858403018286015261328483826131a6565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b805161100b81612dea565b600060208083850312156132c257600080fd5b825167ffffffffffffffff808211156132da57600080fd5b818501915085601f8301126132ee57600080fd5b8151818111156133005761330061328e565b8060051b604051601f19603f830116810181811085821117156133255761332561328e565b60405291825284820192508381018501918883111561334357600080fd5b938501935b8285101561336857613359856132a4565b84529385019392850192613348565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000825161339c818460208701613182565b9190910192915050565b6000808335601e198436030181126133bd57600080fd5b83018035915067ffffffffffffffff8211156133d857600080fd5b6020019150600581901b3603821315612f1657600080fd5b6000808335601e1984360301811261340757600080fd5b83018035915067ffffffffffffffff82111561342257600080fd5b602001915036819003821315612f1657600080fd5b634e487b7160e01b600052602160045260246000fd5b6010811061345d5761345d613437565b9052565b60208101610857828461344d565b600181811c9082168061348357607f821691505b6020821081036134a357634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156134bb57600080fd5b8151801515811461166557600080fd5b600b811061345d5761345d613437565b6001600160e01b0319831681526040810161166560208301846134cb565b6020810161085782846134cb565b60208152600061166560208301846131a6565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061355760408301868861351a565b828103602084015261356a81858761351a565b979650505050505050565b601f821115610c35576000816000526020600020601f850160051c8101602086101561359e5750805b601f850160051c820191505b81811015610c1a578281556001016135aa565b8181036135c8575050565b6135d2825461346f565b67ffffffffffffffff8111156135ea576135ea61328e565b6135fe816135f8845461346f565b84613575565b6000601f821160018114613632576000831561361a5750848201545b600019600385901b1c1916600184901b178455610b19565b600085815260209020601f19841690600086815260209020845b8381101561366c578286015482556001958601959091019060200161364c565b508583101561368a5781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b815167ffffffffffffffff8111156136b4576136b461328e565b6136c2816135f8845461346f565b602080601f8311600181146136f757600084156136df5750858301515b600019600386901b1c1916600185901b178555610c1a565b600085815260208120601f198616915b8281101561372657888601518255948401946001909101908401613707565b508582101561368a57939096015160001960f8600387901b161c19169092555050600190811b01905550565b6001600160e01b03198416815260608101613770602083018561344d565b6001600160a01b0383166040830152949350505050565b6040810161379582856134cb565b8260208301529392505050565b8082018082111561085757634e487b7160e01b600052601160045260246000fdfea2646970667358221220f8add6499381888e721da7bb22c411261bd71a58513179d70bc1a047e940b81364736f6c63430008160033",
  "chainId": 2021,
  "contractAbsolutePath": "Profile_Testnet.sol",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80639a1a05e0116100d8578063b5017aef1161008c578063de981f1b11610066578063de981f1b14610314578063f466094014610327578063f9226b1a1461034757600080fd5b8063b5017aef146102e6578063c4d66de8146102f9578063c63516321461030c57600080fd5b8063ad5abf2d116100bd578063ad5abf2d146102ac578063b0abaea6146102bf578063b261596f146102c657600080fd5b80639a1a05e0146102865780639debe22e1461029957600080fd5b806350a9fc291161012f57806384cb10101161011457806384cb10101461022e578063865e6fd31461024157806388660f2a1461025457600080fd5b806350a9fc29146101e05780637e18b5661461020b57600080fd5b80631f97bdb1116101605780631f97bdb1146101a457806333284687146101b75780633c3d8410146101cd57600080fd5b80630840ba721461017c578063183584c114610191575b600080fd5b61018f61018a366004612dff565b61035a565b005b61018f61019f366004612dff565b61052f565b61018f6101b2366004612dff565b610577565b6003546040519081526020015b60405180910390f35b61018f6101db366004612e38565b610764565b6101f36101ee366004612e51565b61084c565b6040516001600160a01b0390911681526020016101c4565b61021e610219366004612e6e565b61085d565b60405190151581526020016101c4565b61018f61023c366004612dff565b610941565b61018f61024f366004612eb8565b610b20565b610267610262366004612e51565b610b3f565b6040805192151583526001600160a01b039091166020830152016101c4565b61018f610294366004612f1d565b610b70565b61018f6102a7366004612fa0565b610c22565b61018f6102ba366004612e38565b610c3a565b606a6101f3565b6102d96102d4366004613030565b610c4e565b6040516101c49190613072565b61018f6102f43660046130bf565b610d27565b61018f610307366004612e51565b610e5d565b61018f610f6a565b6101f3610322366004613167565b610f7c565b61033a610335366004612e51565b611010565b6040516101c491906131d2565b6102d9610355366004613030565b6111ec565b603354600290610100900460ff1615801561037c575060335460ff8083169116105b6103e45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6033805461ffff191660ff83161761010017905561040360098461129f565b61040e600a8361129f565b600061041a6008610f7c565b6001600160a01b031663ba77b06c6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610457573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261047f91908101906132af565b905060005b81518110156104df5760008282815181106104a1576104a1613374565b6020908102919091018101516001600160a01b031660008181526002909252604090912080546001600160a01b031916909117905550600101610484565b506104e8611343565b506033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f727465640000000000000000000000000000000000000060448201526064016103db565b6000610582836113c0565b905061058d81611414565b6105986009836114f0565b6105a18161153c565b60018101546001600160a01b031660006105bb6008610f7c565b6040517fd93fa3060000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063d93fa30690604401600060405180830381600087803b15801561062357600080fd5b505af1158015610637573d6000803e3d6000fd5b505050506000610647600a610f7c565b6040516001600160a01b038581166024830152878116604483015291925060009183169060640160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa0c302a700000000000000000000000000000000000000000000000000000000179052516106d1919061338a565b6000604051808303816000865af19150503d806000811461070e576040519150601f19603f3d011682016040523d82523d6000602084013e610713565b606091505b5050905080610751576040516001600160a01b038816907f940589fcab729233e520a0b808ffeabac5a6e90603d892a31cd4609b32547dd990600090a25b61075b858761154e565b50505050505050565b603354600390610100900460ff16158015610786575060335460ff8083169116105b6107e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103db565b6033805461ffff191660ff83161761010017905561080682600355565b6033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6000610857826115f5565b92915050565b6000805b60028110156109385760005b83826002811061087f5761087f613374565b60200281019061088f91906133a6565b905081101561092f576109198483600281106108ad576108ad613374565b6020028101906108bd91906133a6565b838181106108cd576108cd613374565b90506020028101906108df91906133f0565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061166c92505050565b610927575060009392505050565b60010161086d565b50600101610861565b50600192915050565b600061094c836113c0565b905061095781611414565b6109626004836114f0565b61096b8161153c565b60006109776009610f7c565b6040517f9ee3c3f80000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152336024830152858116604483015291925090821690639ee3c3f890606401600060405180830381600087803b1580156109e557600080fd5b505af11580156109f9573d6000803e3d6000fd5b505050506000610a096008610f7c565b6040517fea80d67d0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063ea80d67d90604401600060405180830381600087803b158015610a7157600080fd5b505af1158015610a85573d6000803e3d6000fd5b50506040517fecd850cc0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301528416925063ecd850cc9150604401600060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b50505050610b0f838561169b565b610b1983856116de565b5050505050565b610b28611721565b610b318161177b565b610b3b828261129f565b5050565b600080610b67836001600160a01b039081166000908152600260205260409020541680151591565b91509150915091565b6000610b7b866113c0565b9050610b8681611414565b610bc585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506117ca92505050565b610bd18585858561180c565b610bda8161153c565b610c1a8186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061189a92505050565b505050505050565b610c2a611721565b610c35838383611951565b505050565b610c42611721565b610c4b81600355565b50565b60608167ffffffffffffffff811115610c6957610c6961328e565b604051908082528060200260200182016040528015610c92578160200160208202803683370190505b50905060005b82811015610d2057600080858584818110610cb557610cb5613374565b9050602002016020810190610cca9190612e51565b6001600160a01b0390811682526020820192909252604001600020600101548351911690839083908110610d0057610d00613374565b6001600160a01b0390921660209283029190910190910152600101610c98565b5092915050565b6009610d32816119e8565b6001600160a01b038088166000908152602081905260409020805490911615610d87576040517f249b38f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518061010001604052808a6001600160a01b031681526020018a6001600160a01b031681526020018b6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018290526040805191820181529181529101529050610e3b81611a4d565b610e478787878761180c565b610e518282611a87565b50505050505050505050565b603354610100900460ff1615808015610e7d5750603354600160ff909116105b80610e975750303b158015610e97575060335460ff166001145b610efa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103db565b6033805460ff191660011790558015610f1d576033805461ff0019166101001790555b610f2860088361129f565b8015610b3b576033805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610840565b610f72611721565b610f7a611b26565b565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610fb357610fb3613437565b60ff1681526020810191909152604001600020546001600160a01b031690508061100b57816040517f812281be0000000000000000000000000000000000000000000000000000000081526004016103db9190613461565b919050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082019290925260e08101919091526001600160a01b0380831660009081526020818152604091829020825161010081018452815485168152600182015485169281019290925260028101548416928201929092526003820154831660608201526004820154909216608083015260058101805460a0840191906110c79061346f565b80601f01602080910402602001604051908101604052809291908181526020018280546110f39061346f565b80156111405780601f1061111557610100808354040283529160200191611140565b820191906000526020600020905b81548152906001019060200180831161112357829003601f168201915b50505050508152602001600682015481526020016007820180546111639061346f565b80601f016020809104026020016040519081016040528092919081815260200182805461118f9061346f565b80156111dc5780601f106111b1576101008083540402835291602001916111dc565b820191906000526020600020905b8154815290600101906020018083116111bf57829003601f168201915b5050505050815250509050919050565b60608167ffffffffffffffff8111156112075761120761328e565b604051908082528060200260200182016040528015611230578160200160208202803683370190505b50905060005b82811015610d205761126d84848381811061125357611253613374565b90506020020160208101906112689190612e51565b6115f5565b82828151811061127f5761127f613374565b6001600160a01b0390921660209283029190910190910152600101611236565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f8111156112d5576112d5613437565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f81111561131657611316613437565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b603354610100900460ff16610f725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103db565b6001600160a01b038082166000908152602081905260409020805490911661100b576040517f682a559600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101546001600160a01b0316331415806114c257506114356008610f7c565b81546040517f46ebb2320000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529116906346ebb23290604401602060405180830381865afa15801561149c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c091906134a9565b155b15610c4b576000356001600160e01b0319166004604051620f948f60ea1b81526004016103db9291906134db565b6001600160a01b03811661153257816040517f57ed62e40000000000000000000000000000000000000000000000000000000081526004016103db91906134f9565b610b3b8282611bb6565b61154581611c16565b42600682015550565b600180830180546001600160a01b03908116600090815260026020908152604080832080546001600160a01b03199081169091558854888616808652838620805484169290971691909117909555855416841790945584905291909120805460ff191690921790915560095b83546040516001600160a01b03909116907fe9654874a1d2cdb1459fe91e0442173d77f8e1baa4897e3f5c10e769a1515d0690600090a45050565b600080600061161f846001600160a01b039081166000908152600260205260409020541680151591565b9150915081611665576040517f1e3d646f0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016103db565b9392505050565b60006001600061168184805160209091012090565b815260208101919091526040016000205460ff1692915050565b6002820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff1916909117905560046115ba565b6003820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff19169091179055600a6115ba565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610f7a576000356001600160e01b0319166001604051620f948f60ea1b81526004016103db9291906134db565b806001600160a01b03163b600003610c4b576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016103db565b6117d38161166c565b15610c4b57806040517f7995d6c80000000000000000000000000000000000000000000000000000000081526004016103db9190613507565b61181884848484611c61565b61185657838383836040517f97cf1c8d0000000000000000000000000000000000000000000000000000000081526004016103db9493929190613543565b7fb737fd977072c109cccc97108f9f8a9017af4bbf4d20938a747f17d8921c50a68484848460405161188b9493929190613543565b60405180910390a15b50505050565b8160050180546118a99061346f565b1590506118c357600782016118c160058401826135bd565b505b600582016118d1828261369a565b5060018060006118e684805160209091012090565b815260208101919091526040908101600020805460ff191692151592909217909155825490516001600160a01b03909116907fe13225a225fbfeebd9d707546f3d7adee5d72738ac686cc5b97266c49745a56b90611945908490613507565b60405180910390a25050565b6001600160a01b038316600081815260208190526040902080546001600160a01b0319169091178155611984818561154e565b61198e818461169b565b61199881836116de565b816001600160a01b0316836001600160a01b0316856001600160a01b03167ff865c8ac025e544977905cfe6b3a26ce0c8aa1f9d7049d555d3c04bff7eed68660405160405180910390a450505050565b6119f181610f7c565b6001600160a01b0316336001600160a01b031614610c4b576000356001600160e01b03191681336040517f8383e6340000000000000000000000000000000000000000000000000000000081526004016103db93929190613752565b611a5c600982602001516114f0565b611a6b600482604001516114f0565b611a7a600a82606001516114f0565b610c4b8160a001516117ca565b805182546001600160a01b0319166001600160a01b039091161782556020810151611ab390839061154e565b611ac182826040015161169b565b611acf8282606001516116de565b611add828260800151611d4f565b611aeb828260a0015161189a565b80516040516001600160a01b03909116907fc9da0ae38bd4761b72da1045c9b2618f0cd991dcac01e1f9bbf68474025f074390600090a25050565b466107e514611b3157565b6000611b3b611d9c565b90506000611b476125ae565b90506000611b536125ae565b905060005b604c81101561189457611bae8482604c8110611b7657611b76613374565b60200201518483604c8110611b8d57611b8d613374565b60200201518484604c8110611ba457611ba4613374565b6020020151611951565b600101611b58565b6001600160a01b03811660009081526001602052604090205460ff1615610b3b5781816001600160a01b03166040517fe4166aaa0000000000000000000000000000000000000000000000000000000081526004016103db929190613787565b6003548160060154611c2891906137a2565b421015610c4b576040517f640b308400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051600090606a906001908390611c83908990899089908990602401613543565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7eae32c2000000000000000000000000000000000000000000000000000000001790528051909150611ce8612dad565b602083016020828483895afa611cfd57600094505b503d611d0857600093505b83611d3f576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159998505050505050505050565b6004820180546001600160a01b0319166001600160a01b03831690811790915515610b3b576001600160a01b03166000908152600160208190526040909120805460ff1916909117905550565b611da4612dcb565b506040805161098081018252739687e8c41fa369ad08fd278a43114c4207856a6181527332f66d0f9f19db7b0ef1e9f13160884da65467e7602082015273d682dc6d64710d6191512133de957e146e9aa58e9181019190915273efeaff1d9f1e4edb00c6084ae4016143b29ed92560608201527357b572a9de68bd29074e1c51c790fc45c592ba39608082015273c0c2a56f9606ba109d37a0d18af8e5baa1e1c0ad60a082015273afb9554299491a34d303f2c5a91bebb162f6b2c160c082015273533f61b360e81f58919fab5c653724f71faf12ab60e082015273a87f9a2f0c7082fa2f1e3de1090d36047c7cd018610100820152736693dc258bdaac5052ab678ba5de2440ca1cdab26101208201527396f78323481fc9abdb8cc4d8aa50c1500ac93b9261014082015273e91d1dcd0232bda301379de27bd0ede47db3f75161016082015273981676e5e5164524e70f79ac45b52099ebda878161018082015273795cf28e5b71f1a50cc9e01077891c18d6587e546101a082015273a3b3c71371331fd1901e316b67df2d16bf5535a16101c08201527332be208de8a1595cc0ccf8e984cab8759ea1e5b96101e0820152732dc14d542b5478f206b296acbcbfbccee6e8d24861020082015273da6c7342e90b77c5c77a8f7292765360099e30ee610220820152739d7ea2223e89a55a4ef69ca993eae6fde6e6337161024082015273e8e66b241414a40a3db539ec7d864cd61938f818610260820152738fff45d4a6a27f8256df19d0dadf7787cfbe56aa610280820152739a54edcb1d9a44e9f4235ea05c75b45b266796816102a0820152736108570a29f500d6950febffc99ecb66a264a0496102c082015273da071f710b0f82443866616e8a96069012a73cce6102e0820152735f7f2ae316ec5c092d201744fe8337353adb2bb361030082015273771dec03db66a566a1dfe3fd635b3f8d404b92916103208201527371f9154adc0bef39bbe8db1d060e6f239d2e10ae6103408201527395908d03ba55c2a44688330b59e746fdb2f17e3e610360820152733db3abc65f203788836c8d50f6923c56f3f0ff7c6103808201527305955d9e99f57e5574a1a9b73361dd14aec8d6426103a082015273283b4baa1d0415603c81edc1c68fadd3c790837c6103c0820152732a5eb3f9cd4d6ef49dc2a30041e4421af33039296103e0820152733b9f2587d55e96276b09b258ac909d809961f6c2610400820152732576e6bc92a493f4da6335c5e69bc0c272381c3a610420820152730e3341ae4ed9da65fc30a7fa6357e8b5ac40b0a361044082015273f6fd5fca4bd769ba495b29b98dba5f2ecf4ceed361046082015273d9299fa321407a5d10c73d71c57ca687a2a38af661048082015273877efeffe7a23e42c39e2c99b977e4aa4bec75176104a082015273071b510c415d3f84c6f4c6291c49887cc56cac416104c082015273de5e1554e2bf5d0e54bafc74c932b8f2ad4e27306104e082015273c68d0255e1b9c549c43c7181bd29684dc477edf061050082015273c3fb7b95b874bfcbd1e722a2061f3adf217121d36105208201527336fd0d4a075507a4e742631aa37dad46a1f4c0da61054082015273661549d7717c20ffa62ad359b7667bbf5c82053b61056082015273412d4d69122839fccad0180e9358d157c3876f3d61058082015273355503b8e64205fde9dbbad269110991cf736a516105a08201527312cf444bf83ed5b610d0089927ecd3babc81ff886105c082015273467c5425042c9d9f025265b72c93d73e0f2978c66105e082015273b6bc5bc0410773a3f86b1537ce7495c52e38f88b61060082015273bd6342c0009f55131b7a51f627ce8cc87879dd676106208201527335c78defbd03e96b4e3ee6a73e9cd4c49d2b885a61064082015273ad4e3d2f85b4c095742b500751cee5c4b8f65a5c6106608201527342c535deccc071d9039b177cb3abf30411531b0561068082015273b212f24d850a0ed90f2889dee31870e7ff3fed6c6106a08201527360c8117901ab35738fcfd7157d393207efce80566106c08201527330b0215a442ea3d3088acd83cd5fe2aa2bcd775a6106e082015273d21bece2d8206a3ffdbaedb827f4d4bd0ff79e3d610700820152734efa5c5bbe7a257743335f200e86cd44eea4dcd9610720820152730472dca02318b532fcb0b056661ee7fd2adc8a2161074082015273dd00acc07f3f7afa90b5a22cfd56c0808b6444df610760820152734d3302c69fac489e2f7373bcb2f101d3b378c4cf610780820152738c29604e1cae4af683c4fbdad951f3f855890ea06107a082015273afb9554299491a34d303f2c5a91bebb162f6b2cf6107c082015273f48c06c56d78f5106b8c5fa234fceb1d1c50096b6107e082015273626ece2ad62f59700d2734a523fc6177005ac8b061080082015273c6c15480855add4eebe365c89a9bb6f278e1825461082082015273f6071f7905d4e4b6ebd27b819aaf8923d542fddf610840820152738872fe6335267adb4c40b9f8667095667b55dcd9610860820152734a4bc674a97737376cfe990ae2fe0d2b6e7383936108808201527327550f4b37f0309c56ea67578eb924b4c19eeeb76108a082015273181a053fd961dc1377b84be4e551ce277053e4c06108c082015273f44c500a8515a5acc900c921bc888b5b62da65566108e082015273f20293d569f0ee7eccdef266d86ee382f893286661090082015273b1d4782962a407343aa3765a599637932d241305610920820152737f53d703836abcaf1ca3d5607d80dd7d96e50d026109408201527378fd38faa30ea66702cc39383d2e84f9a4a56fa661096082015290565b6125b6612dcb565b50604080516109808101825273cf0e23aed16d5d971910e748acd48849e4b7239c81527332f66d0f9f19db7b0ef1e9f13160884da65467e6602082015273d682dc6d64710d6191512133de957e146e9aa58f9181019190915273efeaff1d9f1e4edb00c6084ae4016143b29ed924606082015273c2cae7311fc0fe400a838d2dde06a89e1d3e9da7608082015273f90a912fdb7fd37572cd83325392d729e60ef68260a082015273afb9554299491a34d303f2c5a91bebb162f6b2cf60c08201819052738da9d88f90141a03292d5e554691b1f6e7c6212c60e083015273a87f9a2f0c7082fa2f1e3de1090d36047c7cd017610100830152736693dc258bdaac5052ab678ba5de2440ca1cdabe610120830152730b67df5847af7476b2eb46da328638e0fb2c6b2961014083015273e91d1dcd0232bda301379de27bd0ede47db3f75061016083015273dc3de716c4430d598ac504c4685d69d0dce1412f61018083015273795cf28e5b71f1a50cc9e01077891c18d6587e536101a083015273a3b3c71371331fd1901e316b67df2d16bf5535a06101c08301527332be208de8a1595cc0ccf8e984cab8759ea1e5b26101e0830152738136c74e94b08300d71fa6c22087b821f73568c561020083015273da6c7342e90b77c5c77a8f7292765360099e30ed6102208301527395fc818cd7709fb6ad8920d0d14925010504876f61024083015273e8e66b241414a40a3db539ec7d864cd61938f81761026083015273fd575770a68d5af983b2a374981f604ddad9d684610280830152739a54edcb1d9a44e9f4235ea05c75b45b266796806102a0830152736108570a29f500d6950febffc99ecb66a264a0486102c083015273da071f710b0f82443866616e8a96069012a73ccf6102e0830152738a4ac64764238c71ddf82f870be6526e297dc4cd6103008301527333f1727caa54ae24cadb2949881c3725eb61a1006103208301527334db532f09ee1285dfef26ed696c4ea25dcfce7261034083015273302d51189fd89d7e72bcb26a65d16941d043f08961036083015273feb247f76e6f6c1ec3455d04e6e3b694a577d57c6103808301527305955d9e99f57e5574a1a9b73361dd14aec8d6416103a083015273cf9f44ddb18a5538efe2a2a28ef20300333f5a716103c083015273779dce1ddc28941ec85bf2ae0dac9f0f128362816103e0830152730bb270e5268a9e9a0742ddb027fab7405af56fa7610400830152735b92ea265597a7cf20c8da56e6beb8485c1ba993610420830152730e3341ae4ed9da65fc30a7fa6357e8b5ac40b0a361044083015273f6fd5fca4bd769ba495b29b98dba5f2ecf4ceed3610460830152738d0a639bdd3b81df264c4db4647665885823151061048083015273bb046932fefcdd3be4368444a1014f25dfee83f26104a08301527354e09bf04810f387347da6d9687d6a37ec2aadc76104c083015273de5e1554e2bf5d0e54bafc74c932b8f2ad4e273f6104e083015273c68d0255e1b9c549c43c7181bd29684dc477edfc6105008301527337920733db9a5b45fc9cd5e3c80825beffc1a014610520830152737e9107480bf92dd56c97118e20cdb3c1ae9dd86661054083015273c4f83a7b369070e32ced4bd6fd647d19aef828ac61056083015273412d4d69122839fccad0180e9358d157c3876f3c61058083015273355503b8e64205fde9dbbad269110991cf736a506105a083015273306f23c32fdfc07850bf242e8ff59c5e79bff8126105c083015273467c5425042c9d9f025265b72c93d73e0f2978c56105e083015273ee992b0f5e9746fdb8e584efa01af79f6b1c094061060083015273bd6342c0009f55131b7a51f627ce8cc87879dd666106208301527357018e929eb6fe50355bf1bf9d1d39ca466b7fa061064083015273ad4e3d2f85b4c095742b500751cee5c4b8f65a5b6106608301527389a6a074db8bcd3fd60626107ea2ae576693f7c561068083015273cb742186fa056444766fa7cc52a0479e8f6dedea6106a08301527360c8117901ab35738fcfd7157d393207efce80556106c083015273ad70ad152e27e0923c4f11c63490fcfd904a4c366106e083015273d8b47b81648d9e81e50b8ca21ea81f2e1b6929bb61070083015273ecb1374172970a613a1970370b3ddead8f844733610720830152730472dca02318b532fcb0b056661ee7fd2adc8a2061074083015273dd00acc07f3f7afa90b5a22cfd56c0808b6444dd610760830152734d3302c69fac489e2f7373bcb2f101d3b378c4ce61078083015273e7685e437f34de2d36ea2e9ab13e5ab871711a2c6107a08301526107c0820152733f9df0717099baaa95a14b3caa285daddafb06096107e08201527323dffc4a93c374a91fbc1c33075af012b68663f76108008201527379ec4d83d40c1bd1419d8f561be851fda1ea32a6610820820152732d3f28780bfb7ed6fb5547c309e1a6837e5bd12b61084082015273a164e8b5f90ce42b0f531e3882cde3f698e1121f610860820152734a4bc674a97737376cfe990ae2fe0d2b6e73839361088082015273f61806b65278ffdbf8b04f832c59b65076798fb66108a082015273836eeedd931575cce4285c74c15dbda9edc3dc4f6108c082015273bd95b0581585e4151793b183ee75d509fde528b66108e082015273a75b1ce2f8c447cab6c13f313dfd806287aa47e2610900820152734d546475321b4ca2a91b101f26750092c05350cf61092082015273fc2d29da710f45168de11e5c051caa558088d52a610940820152731c70b8160e92d56e550caf02e1f2e5ec0fdb551a61096082015290565b60405180602001604052806001906020820280368337509192915050565b604051806109800160405280604c906020820280368337509192915050565b6001600160a01b0381168114610c4b57600080fd5b60008060408385031215612e1257600080fd5b8235612e1d81612dea565b91506020830135612e2d81612dea565b809150509250929050565b600060208284031215612e4a57600080fd5b5035919050565b600060208284031215612e6357600080fd5b813561166581612dea565b600060208284031215612e8057600080fd5b813567ffffffffffffffff811115612e9757600080fd5b82016040810184101561166557600080fd5b80356010811061100b57600080fd5b60008060408385031215612ecb57600080fd5b612e1d83612ea9565b60008083601f840112612ee657600080fd5b50813567ffffffffffffffff811115612efe57600080fd5b602083019150836020828501011115612f1657600080fd5b9250929050565b600080600080600060608688031215612f3557600080fd5b8535612f4081612dea565b9450602086013567ffffffffffffffff80821115612f5d57600080fd5b612f6989838a01612ed4565b90965094506040880135915080821115612f8257600080fd5b50612f8f88828901612ed4565b969995985093965092949392505050565b600080600060608486031215612fb557600080fd5b8335612fc081612dea565b92506020840135612fd081612dea565b91506040840135612fe081612dea565b809150509250925092565b60008083601f840112612ffd57600080fd5b50813567ffffffffffffffff81111561301557600080fd5b6020830191508360208260051b8501011115612f1657600080fd5b6000806020838503121561304357600080fd5b823567ffffffffffffffff81111561305a57600080fd5b61306685828601612feb565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156130b35783516001600160a01b03168352928401929184019160010161308e565b50909695505050505050565b600080600080600080600060a0888a0312156130da57600080fd5b87356130e581612dea565b965060208801356130f581612dea565b9550604088013561310581612dea565b9450606088013567ffffffffffffffff8082111561312257600080fd5b61312e8b838c01612ed4565b909650945060808a013591508082111561314757600080fd5b506131548a828b01612ed4565b989b979a50959850939692959293505050565b60006020828403121561317957600080fd5b61166582612ea9565b60005b8381101561319d578181015183820152602001613185565b50506000910152565b600081518084526131be816020860160208601613182565b601f01601f19169290920160200192915050565b602081526001600160a01b0382511660208201526000602083015161320260408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516101008060c085015261325e6101208501836131a6565b915060c085015160e085015260e0850151601f19858403018286015261328483826131a6565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b805161100b81612dea565b600060208083850312156132c257600080fd5b825167ffffffffffffffff808211156132da57600080fd5b818501915085601f8301126132ee57600080fd5b8151818111156133005761330061328e565b8060051b604051601f19603f830116810181811085821117156133255761332561328e565b60405291825284820192508381018501918883111561334357600080fd5b938501935b8285101561336857613359856132a4565b84529385019392850192613348565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000825161339c818460208701613182565b9190910192915050565b6000808335601e198436030181126133bd57600080fd5b83018035915067ffffffffffffffff8211156133d857600080fd5b6020019150600581901b3603821315612f1657600080fd5b6000808335601e1984360301811261340757600080fd5b83018035915067ffffffffffffffff82111561342257600080fd5b602001915036819003821315612f1657600080fd5b634e487b7160e01b600052602160045260246000fd5b6010811061345d5761345d613437565b9052565b60208101610857828461344d565b600181811c9082168061348357607f821691505b6020821081036134a357634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156134bb57600080fd5b8151801515811461166557600080fd5b600b811061345d5761345d613437565b6001600160e01b0319831681526040810161166560208301846134cb565b6020810161085782846134cb565b60208152600061166560208301846131a6565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061355760408301868861351a565b828103602084015261356a81858761351a565b979650505050505050565b601f821115610c35576000816000526020600020601f850160051c8101602086101561359e5750805b601f850160051c820191505b81811015610c1a578281556001016135aa565b8181036135c8575050565b6135d2825461346f565b67ffffffffffffffff8111156135ea576135ea61328e565b6135fe816135f8845461346f565b84613575565b6000601f821160018114613632576000831561361a5750848201545b600019600385901b1c1916600184901b178455610b19565b600085815260209020601f19841690600086815260209020845b8381101561366c578286015482556001958601959091019060200161364c565b508583101561368a5781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b815167ffffffffffffffff8111156136b4576136b461328e565b6136c2816135f8845461346f565b602080601f8311600181146136f757600084156136df5750858301515b600019600386901b1c1916600185901b178555610c1a565b600085815260208120601f198616915b8281101561372657888601518255948401946001909101908401613707565b508582101561368a57939096015160001960f8600387901b161c19169092555050600190811b01905550565b6001600160e01b03198416815260608101613770602083018561344d565b6001600160a01b0383166040830152949350505050565b6040810161379582856134cb565b8260208301529392505050565b8082018082111561085757634e487b7160e01b600052601160045260246000fdfea2646970667358221220f8add6499381888e721da7bb22c411261bd71a58513179d70bc1a047e940b81364736f6c63430008160033",
  "deployer": "0x31762cdd4Aa65CD6f5F09D7a05a56211720A1168",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "arePublicKeysRegistered(bytes[][2])": {
        "details": "Cross-contract function to for slash indicator to check the list of public keys in finality slash proof Returns whether all public keys are registered."
      },
      "changePubkey(address,bytes,bytes)": {
        "details": "Requirements: - The profile must be existed. - Only user with candidate admin role can call this method. - New public key must not be duplicated. - The proof of public key possession must be verified successfully. - The public key change cooldown must be ended."
      },
      "execApplyValidatorCandidate(address,address,address,bytes,bytes)": {
        "details": "Cross-contract function to add/update new profile of a validator candidate when they applying for candidate role. Requirements: - Only `stakingContract` can call this method."
      },
      "getConsensus2Id(address)": {
        "details": "Getter to backward query from `consensus` address to `id` address, revert if not found."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getCooldownConfig()": {
        "details": "Returns the config of cool down on change profile info."
      },
      "getId2Profile(address)": {
        "details": "Getter to query full `profile` from `id` address."
      },
      "getManyConsensus2Id(address[])": {
        "details": "Getter to backward batch query from `consensus` address to `id` address."
      },
      "getManyId2Consensus(address[])": {
        "details": "Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist."
      },
      "precompileVerifyBLSPublicKeyAddress()": {
        "details": "Gets the address of the precompile of validating double sign evidence"
      },
      "requestChangeAdminAddress(address,address)": {
        "details": "Side-effects on other contracts: - Update Staking contract:    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.    + [x] Move staking amount of previous admin to the the new admin. - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical."
      },
      "requestChangeConsensusAddr(address,address)": {
        "details": "Side-effects on other contracts: - Update in Staking contract for Consensus address mapping:   + [x] Keep the same previous pool address. - Update in Validator contract for:   + [x] Consensus Address mapping   + [x] Bridge Address mapping   + [x] Jail mapping   + [x] Pending reward mapping   + [x] Schedule mapping - Update in Slashing contract for:   + [x] Handling slash indicator   + [x] Handling slash fast finality   + [x] Handling slash double sign - Update in Proposal contract for:   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit - Update Trusted Org contracts:   + If the current consensus is governor:      - [x] Remove and delete weight of the old consensus      - [x] Replace and add weight for the new consensus   + If the current consensus is not governor:      - [x] Do nothing"
      },
      "requestChangeTreasuryAddr(address,address)": {
        "details": "Side-effects on other contracts: - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - Update governance admin:    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.          Cannot impl since we cannot cancel the previous the ballot and          create a new ballot on behalf of the validator contract."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setCooldownConfig(uint256)": {
        "details": "Change the cooldown between 2 public key change Requirement:  - Only admin can call this method"
      },
      "tryGetConsensus2Id(address)": {
        "details": "Getter to backward query from `consensus` address to `id` address."
      }
    },
    "events": {
      "ConsensusAddressOfNonGovernorChanged(address)": {
        "details": "Event emitted when the consensus of a non-governor profile is changed."
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ProfileAdded(address)": {
        "details": "Event emitted when a profile with `id` is added."
      },
      "ProfileAddressChanged(address,uint8,address)": {
        "details": "Event emitted when a address in a profile is changed."
      },
      "ProfileMigrated(address,address,address)": {
        "details": "Event emitted when the profile is migrated (mostly when REP-4 update)."
      },
      "PubkeyChanged(address,bytes)": {
        "details": "Event emitted when the pubkey of the `id` is changed."
      },
      "PubkeyVerified(bytes,bytes)": {
        "details": "Event emitted when the pubkey is verified successfully."
      }
    },
    "errors": {
      "ErrCallPrecompiled()": [
        {
          "details": "Error of call to precompile fails."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrDuplicatedInfo(uint8,uint256)": [
        {
          "details": "Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key, and with value type of `infoType`."
        }
      ],
      "ErrExistentProfile()": [
        {
          "details": "Error of already existed profile."
        }
      ],
      "ErrIdAndConsensusDiffer()": [
        {
          "details": "Error when create a new profile whose id and consensus are not identical."
        }
      ],
      "ErrNonExistentProfile()": [
        {
          "details": "Error of non existed profile."
        }
      ],
      "ErrProfileChangeCooldownNotEnded()": [
        {
          "details": "Error when failed to change any address or pubkey in the profile because cooldown is not ended."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrCallPrecompiled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum RoleAccess\",\"name\":\"infoType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ErrDuplicatedInfo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"ErrDuplicatedPubkey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExistentProfile\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrIdAndConsensusDiffer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"ErrInvalidProofOfPossession\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"ErrLookUpIdFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNonExistentProfile\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrProfileChangeCooldownNotEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum RoleAccess\",\"name\":\"infoType\",\"type\":\"uint8\"}],\"name\":\"ErrZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroPubkey\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"ConsensusAddressOfNonGovernorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"ProfileAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RoleAccess\",\"name\":\"addressType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ProfileAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"ProfileMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"PubkeyVerified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[][2]\",\"name\":\"listOfPublicKey\",\"type\":\"bytes[][2]\"}],\"name\":\"arePublicKeysRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"changePubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"execApplyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getConsensus2Id\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCooldownConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"getId2Profile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__reservedGovernor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"profileLastChange\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oldPubkey\",\"type\":\"bytes\"}],\"internalType\":\"struct IProfile.CandidateProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"name\":\"getManyConsensus2Id\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"}],\"name\":\"getManyId2Consensus\",\"outputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedOrgContract\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"manualMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateRenouncedCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileVerifyBLSPublicKeyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdminAddr\",\"type\":\"address\"}],\"name\":\"requestChangeAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"newConsensusAddr\",\"type\":\"address\"}],\"name\":\"requestChangeConsensusAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestChangeTreasuryAddr\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"setCooldownConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"tryGetConsensus2Id\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrCallPrecompiled()\":[{\"details\":\"Error of call to precompile fails.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrDuplicatedInfo(uint8,uint256)\":[{\"details\":\"Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key, and with value type of `infoType`.\"}],\"ErrExistentProfile()\":[{\"details\":\"Error of already existed profile.\"}],\"ErrIdAndConsensusDiffer()\":[{\"details\":\"Error when create a new profile whose id and consensus are not identical.\"}],\"ErrNonExistentProfile()\":[{\"details\":\"Error of non existed profile.\"}],\"ErrProfileChangeCooldownNotEnded()\":[{\"details\":\"Error when failed to change any address or pubkey in the profile because cooldown is not ended.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"ConsensusAddressOfNonGovernorChanged(address)\":{\"details\":\"Event emitted when the consensus of a non-governor profile is changed.\"},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ProfileAdded(address)\":{\"details\":\"Event emitted when a profile with `id` is added.\"},\"ProfileAddressChanged(address,uint8,address)\":{\"details\":\"Event emitted when a address in a profile is changed.\"},\"ProfileMigrated(address,address,address)\":{\"details\":\"Event emitted when the profile is migrated (mostly when REP-4 update).\"},\"PubkeyChanged(address,bytes)\":{\"details\":\"Event emitted when the pubkey of the `id` is changed.\"},\"PubkeyVerified(bytes,bytes)\":{\"details\":\"Event emitted when the pubkey is verified successfully.\"}},\"kind\":\"dev\",\"methods\":{\"arePublicKeysRegistered(bytes[][2])\":{\"details\":\"Cross-contract function to for slash indicator to check the list of public keys in finality slash proof Returns whether all public keys are registered.\"},\"changePubkey(address,bytes,bytes)\":{\"details\":\"Requirements: - The profile must be existed. - Only user with candidate admin role can call this method. - New public key must not be duplicated. - The proof of public key possession must be verified successfully. - The public key change cooldown must be ended.\"},\"execApplyValidatorCandidate(address,address,address,bytes,bytes)\":{\"details\":\"Cross-contract function to add/update new profile of a validator candidate when they applying for candidate role. Requirements: - Only `stakingContract` can call this method.\"},\"getConsensus2Id(address)\":{\"details\":\"Getter to backward query from `consensus` address to `id` address, revert if not found.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getCooldownConfig()\":{\"details\":\"Returns the config of cool down on change profile info.\"},\"getId2Profile(address)\":{\"details\":\"Getter to query full `profile` from `id` address.\"},\"getManyConsensus2Id(address[])\":{\"details\":\"Getter to backward batch query from `consensus` address to `id` address.\"},\"getManyId2Consensus(address[])\":{\"details\":\"Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\"},\"precompileVerifyBLSPublicKeyAddress()\":{\"details\":\"Gets the address of the precompile of validating double sign evidence\"},\"requestChangeAdminAddress(address,address)\":{\"details\":\"Side-effects on other contracts: - Update Staking contract:    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.    + [x] Move staking amount of previous admin to the the new admin. - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical.\"},\"requestChangeConsensusAddr(address,address)\":{\"details\":\"Side-effects on other contracts: - Update in Staking contract for Consensus address mapping:   + [x] Keep the same previous pool address. - Update in Validator contract for:   + [x] Consensus Address mapping   + [x] Bridge Address mapping   + [x] Jail mapping   + [x] Pending reward mapping   + [x] Schedule mapping - Update in Slashing contract for:   + [x] Handling slash indicator   + [x] Handling slash fast finality   + [x] Handling slash double sign - Update in Proposal contract for:   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit - Update Trusted Org contracts:   + If the current consensus is governor:      - [x] Remove and delete weight of the old consensus      - [x] Replace and add weight for the new consensus   + If the current consensus is not governor:      - [x] Do nothing\"},\"requestChangeTreasuryAddr(address,address)\":{\"details\":\"Side-effects on other contracts: - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - Update governance admin:    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.          Cannot impl since we cannot cancel the previous the ballot and          create a new ballot on behalf of the validator contract.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setCooldownConfig(uint256)\":{\"details\":\"Change the cooldown between 2 public key change Requirement:  - Only admin can call this method\"},\"tryGetConsensus2Id(address)\":{\"details\":\"Getter to backward query from `consensus` address to `id` address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changePubkey(address,bytes,bytes)\":{\"notice\":\"The candidate admin changes the public key.\"},\"requestChangeTreasuryAddr(address,address)\":{\"notice\":\"This method is not supported. Change treasury also requires changing the admin address. Using the {requestChangeAdminAddress} method instead\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/profile/Profile_Testnet.sol\":\"Profile_Testnet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Pool admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Timestamp of last change of any profile info.\\n    uint256 profileLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the consensus of a non-governor profile is changed.\\n  event ConsensusAddressOfNonGovernorChanged(address indexed id);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change any address or pubkey in the profile because cooldown is not ended.\\n  error ErrProfileChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n  error ErrLookUpIdFailed(TConsensus consensus);\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address, revert if not found.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function tryGetConsensus2Id(TConsensus consensus) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setCooldownConfig(uint256 cooldown) external;\\n\\n  /**\\n   * @dev Returns the config of cool down on change profile info.\\n   */\\n  function getCooldownConfig() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4a96ee80d6d4b0882e183653b9054929d970b1ba43e84d3eb2219c7a9e1ab24\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x0b2a44131128f965e20cbea424987817cb504502e5d83d6523ae45ffeb5e53fe\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    /**\\n     * @dev Address of the pool.\\n     * @custom non-volatile-storage Permanently set to the first consensus address of the candidate.\\n     */\\n    address pid;\\n\\n    /**\\n     * @dev The address of the pool admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with the admin in `Profile-CandidateProfile`.\\n     */\\n    address __shadowedPoolAdmin;\\n\\n    /// @dev Self-staking amount\\n    uint256 stakingAmount;\\n\\n    /// @dev Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n\\n    /// @dev Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n\\n    /// @dev Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n\\n    /// @dev Mapping that indicate an admin was either current or previous admin of this pool\\n    mapping(address => bool) wasAdmin;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(TConsensus consensusAddr, address poolId);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `admin` is currently active.\\n   */\\n  function isAdminOfActivePool(address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address admin) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool details.\\n   */\\n  function getPoolDetail(\\n    TConsensus consensusAddr\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  function getPoolDetailById(\\n    address poolId\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external;\\n}\\n\",\"keccak256\":\"0x074b913dc7edd77f6826aeaf0b57c51637b778865205b2d0f497ca0c272853bc\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the commission rate range is updated.\\n  event CommissionRateRangeUpdated(uint256 minRate, uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the holder of the staking amount in the `poolId` is changed.\\n  event StakeholderChanged(address indexed poolId, address oldAdmin , address newAdmin, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed poolId, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] poolIds);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed poolId,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed poolId,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the commission rate range that the candidate can set.\\n   */\\n  function getCommissionRateRange() external view returns (uint256 minRange, uint256 maxRange);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the commission rate range that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `CommissionRateRangeUpdated` event.\\n   *\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata pools, uint256 period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `consensusAddr` for `amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0xd59297750742f0940712a6bd4640b87fa0a641231ca7ae6acd946c26c8ec9ee1\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed poolId, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(TConsensus consensusAddrSrc, TConsensus consensusAddrDst, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(\\n    address user,\\n    TConsensus[] calldata consensusAddrList\\n  ) external view returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(TConsensus[] calldata consensusAddrList) external returns (uint256 amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(\\n    TConsensus[] calldata consensusAddrList,\\n    TConsensus consensusAddrDst\\n  ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xe8a650a7348d45b2614ece66083f140801e8375bb8b733addf02209073991ef3\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolId, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolId, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolId, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolIds, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolIds, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolIds);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(\\n    TConsensus[] calldata consensusAddrs,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  function getManyStakingAmountsById(\\n    address[] calldata poolIds,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools corresponding to `consensusAddrs`.\\n   */\\n  function getManyStakingTotals(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `poolIds`.\\n   */\\n  function getManyStakingTotalsById(\\n    address[] calldata poolIds\\n  ) external view returns (uint256[] memory stakingAmounts_);\\n}\\n\",\"keccak256\":\"0xa1b17b962f24571a7125c33420ead1fba5be4c03caabb47916d4ca597fa91482\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./IStakingCallback.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking, IStakingCallback {\\n  /// @dev Event emitted when the `wasAdmin` is finished to migrate.\\n  event MigrateWasAdminFinished();\\n  /// @dev Event emitted when the `migrateWasAdmin` method is disabled.\\n  event MigrateWasAdminDisabled();\\n\\n  /// @dev Error indicating that the REP-4 migration is already done.\\n  error ErrMigrateWasAdminAlreadyDone();\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(address[] calldata poolIds, uint256[] calldata rewards, uint256 period) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address poolId, uint256 amount) external returns (uint256 actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0x8b90ba90f5c913545a6f5007d2b20b2baa4b6e6c11f09bd3a25ec8e6c597fb36\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddress(address poolId, address currAdminAddr, address newAdminAddr) external;\\n}\\n\",\"keccak256\":\"0x555b90214ae8cb66c72a40f343a4933ea87b1e82bb0933c81ae92401b20c5f43\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdminById(address id, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xf68c390a0b117a99ddc8650cf21695d778faa9a479d5edfa42957a4048027031\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeAdminAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddress(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddress(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeTreasuryAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddress(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xfbe83dc9a4df46f4eb34b6d68c73041de663f188671264c7fe5315b8a0813511\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed cid,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] cids,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xabf7541c6acfef6db495585f74bc9be88a65c20b09850197bc06ab452f07d172\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0xaa2df8b56a83730a3a1b3876708570d70843802737ff7c776a5725c71d7ea8f7\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0xf4f96a624e7c77bbce044c67e3f4b406e65871debc19e7bfab663c1fcfcbc7b0\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x27afa712094804b997f55e8f8d320760e07d7260ab33aeb8fb61c39849f09bf3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the consensus address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the id is block producer or not.\\n   */\\n  function isBlockProducerById(address id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xdf65d1580d3d3c7624c293e38b270fdd69285b58fe4e67b03ed71ac50bb1ef08\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PCUVerifyBLSPublicKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUVerifyBLSPublicKey is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of validating double sign evidence\\n  function precompileVerifyBLSPublicKeyAddress() public view virtual returns (address) {\\n    return address(0x6a);\\n  }\\n\\n  /**\\n   * @dev Validates the proof of possession of BLS public key\\n   *\\n   * Note: The verify process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcVerifyBLSPublicKey(\\n    bytes calldata publicKey,\\n    bytes calldata proofOfPossession\\n  ) internal view virtual returns (bool validPublicKey) {\\n    address smc = precompileVerifyBLSPublicKeyAddress();\\n    bool success = true;\\n\\n    bytes memory payload = abi.encodeWithSignature(\\n      \\\"validateProofOfPossession(bytes,bytes)\\\",\\n      publicKey,\\n      proofOfPossession\\n    );\\n    uint payloadLength = payload.length;\\n    uint[1] memory output;\\n\\n    assembly {\\n      let payloadStart := add(payload, 0x20)\\n      if iszero(staticcall(gas(), smc, payloadStart, payloadLength, output, 0x20)) {\\n        success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        success := 0\\n      }\\n    }\\n\\n    if (!success) revert ErrCallPrecompiled();\\n    return (output[0] != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x531462d5448ad4cc818da59626c383a3cadd52331a8228bf4ce3fa62c0cbffd2\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompiledUsage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PrecompiledUsage {\\n  /// @dev Error of call to precompile fails.\\n  error ErrCallPrecompiled();\\n}\\n\",\"keccak256\":\"0x76facc3f3a8dd573c826bbbfedaa5cd8ef30963fbabd8c163c0c72b6efea5551\",\"license\":\"MIT\"},\"contracts/ronin/profile/Profile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/validator/ICandidateManager.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"./ProfileXComponents.sol\\\";\\nimport { ErrUnauthorized, RoleAccess } from \\\"../../utils/CommonErrors.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ncontract Profile is IProfile, ProfileXComponents, Initializable {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address validatorContract) external initializer {\\n    _setContract(ContractType.VALIDATOR, validatorContract);\\n  }\\n\\n  function initializeV2(address stakingContract, address trustedOrgContract) external reinitializer(2) {\\n    _setContract(ContractType.STAKING, stakingContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, trustedOrgContract);\\n\\n    TConsensus[] memory validatorCandidates = IRoninValidatorSet(getContract(ContractType.VALIDATOR))\\n      .getValidatorCandidates();\\n\\n    for (uint256 i; i < validatorCandidates.length; ++i) {\\n      TConsensus consensus = validatorCandidates[i];\\n      address id = TConsensus.unwrap(consensus);\\n      _consensus2Id[consensus] = id;\\n    }\\n\\n    __migrationRenouncedCandidates();\\n  }\\n\\n  function initializeV3(uint256 cooldown) external reinitializer(3) {\\n    _setCooldownConfig(cooldown);\\n  }\\n\\n  /**\\n   * @dev Add addresses of renounced candidates into registry. Only called during {initializeV2}.\\n   */\\n  function __migrationRenouncedCandidates() internal virtual {}\\n\\n  /**\\n   * @dev This method is used in REP-4 migration, which creates profile for all community-validators and renounced validators.\\n   * This method can be removed after REP-4 goes live.\\n   *\\n   * DO NOT use for any other purpose.\\n   */\\n  function __migrate(address id, address candidateAdmin, address treasury) internal {\\n    CandidateProfile storage _profile = _id2Profile[id];\\n    _profile.id = id;\\n\\n    _setConsensus(_profile, TConsensus.wrap(id));\\n    _setAdmin(_profile, candidateAdmin);\\n    _setTreasury(_profile, payable(treasury));\\n    emit ProfileMigrated(id, candidateAdmin, treasury);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getId2Profile(address id) external view returns (CandidateProfile memory) {\\n    return _id2Profile[id];\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList) {\\n    consensusList = new TConsensus[](idList.length);\\n    unchecked {\\n      for (uint i; i < idList.length; ++i) {\\n        consensusList[i] = _id2Profile[idList[i]].consensus;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getConsensus2Id(TConsensus consensus) external view returns (address) {\\n    return _getConsensus2Id(consensus);\\n  }\\n\\n  /**\\n   * @dev Look up the `id` by `consensus`, revert if not found.\\n   */\\n  function _getConsensus2Id(TConsensus consensus) internal view returns (address) {\\n    (bool found, address id) = _tryGetConsensus2Id(consensus);\\n    if (!found) revert ErrLookUpIdFailed(consensus);\\n    return id;\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function tryGetConsensus2Id(TConsensus consensus) external view returns (bool found, address id) {\\n    return _tryGetConsensus2Id(consensus);\\n  }\\n\\n  /**\\n   * @dev Try look up the `id` by `consensus`, return a boolean indicating whether the query success.\\n   */\\n  function _tryGetConsensus2Id(TConsensus consensus) internal view returns (bool found, address id) {\\n    id = _consensus2Id[consensus];\\n    found = id != address(0);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getManyConsensus2Id(TConsensus[] calldata consensusList) external view returns (address[] memory idList) {\\n    idList = new address[](consensusList.length);\\n    unchecked {\\n      for (uint i; i < consensusList.length; ++i) {\\n        idList[i] = _getConsensus2Id(consensusList[i]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   *\\n   * @dev Side-effects on other contracts:\\n   * - Update Staking contract:\\n   *    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.\\n   *    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.\\n   *    + [x] Move staking amount of previous admin to the the new admin.\\n   * - Update Validator contract:\\n   *    + [x] Update (id => ValidatorCandidate) mapping\\n   *\\n   * - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external {\\n    CandidateProfile storage _profile = _getId2ProfileHelper(id);\\n    _requireCandidateAdmin(_profile);\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CANDIDATE_ADMIN, newAdminAddr);\\n    _requireCooldownPassedAndStartCooldown(_profile);\\n\\n    IStaking stakingContract = IStaking(getContract(ContractType.STAKING));\\n    stakingContract.execChangeAdminAddress({ poolId: id, currAdminAddr: msg.sender, newAdminAddr: newAdminAddr });\\n\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    validatorContract.execChangeAdminAddress(id, newAdminAddr);\\n    validatorContract.execChangeTreasuryAddress(id, payable(newAdminAddr));\\n\\n    _setAdmin(_profile, newAdminAddr);\\n    _setTreasury(_profile, payable(newAdminAddr));\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   *\\n   * @dev Side-effects on other contracts:\\n   * - Update in Staking contract for Consensus address mapping:\\n   *   + [x] Keep the same previous pool address.\\n   * - Update in Validator contract for:\\n   *   + [x] Consensus Address mapping\\n   *   + [x] Bridge Address mapping\\n   *   + [x] Jail mapping\\n   *   + [x] Pending reward mapping\\n   *   + [x] Schedule mapping\\n   * - Update in Slashing contract for:\\n   *   + [x] Handling slash indicator\\n   *   + [x] Handling slash fast finality\\n   *   + [x] Handling slash double sign\\n   * - Update in Proposal contract for:\\n   *   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit\\n   * - Update Trusted Org contracts:\\n   *   + If the current consensus is governor:\\n   *      - [x] Remove and delete weight of the old consensus\\n   *      - [x] Replace and add weight for the new consensus\\n   *   + If the current consensus is not governor:\\n   *      - [x] Do nothing\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external {\\n    CandidateProfile storage _profile = _getId2ProfileHelper(id);\\n    _requireCandidateAdmin(_profile);\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CONSENSUS, TConsensus.unwrap(newConsensusAddr));\\n    _requireCooldownPassedAndStartCooldown(_profile);\\n\\n    TConsensus oldConsensusAddr = _profile.consensus;\\n\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    validatorContract.execChangeConsensusAddress(id, newConsensusAddr);\\n\\n    address trustedOrgContractAddr = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION);\\n    (bool success, ) = trustedOrgContractAddr.call(\\n      abi.encodeCall(\\n        IRoninTrustedOrganization.execChangeConsensusAddressForTrustedOrg,\\n        (oldConsensusAddr, newConsensusAddr)\\n      )\\n    );\\n\\n    if (!success) {\\n      emit ConsensusAddressOfNonGovernorChanged(id);\\n    }\\n\\n    _setConsensus(_profile, newConsensusAddr);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   *\\n   * @notice This method is not supported. Change treasury also requires changing the admin address.\\n   * Using the {requestChangeAdminAddress} method instead\\n   *\\n   * @dev Side-effects on other contracts:\\n   * - Update Validator contract:\\n   *    + [x] Update (id => ValidatorCandidate) mapping\\n   * - Update governance admin:\\n   *    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.\\n   *          Cannot impl since we cannot cancel the previous the ballot and\\n   *          create a new ballot on behalf of the validator contract.\\n   */\\n  function requestChangeTreasuryAddr(address /*id */, address payable /* newTreasury */) external pure {\\n    revert(\\\"Not supported\\\");\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function changePubkey(address id, bytes calldata pubkey, bytes calldata proofOfPossession) external {\\n    CandidateProfile storage _profile = _getId2ProfileHelper(id);\\n    _requireCandidateAdmin(_profile);\\n    _requireNonDuplicatedPubkey(pubkey);\\n    _verifyPubkey(pubkey, proofOfPossession);\\n    _requireCooldownPassedAndStartCooldown(_profile);\\n    _setPubkey(_profile, pubkey);\\n  }\\n\\n  function _requireCandidateAdmin(CandidateProfile storage sProfile) internal view {\\n    if (\\n      msg.sender != sProfile.admin ||\\n      !IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isCandidateAdminById(sProfile.id, msg.sender)\\n    ) revert ErrUnauthorized(msg.sig, RoleAccess.CANDIDATE_ADMIN);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getCooldownConfig() external view returns (uint256) {\\n    return _profileChangeCooldown;\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function setCooldownConfig(uint256 cooldown) external onlyAdmin {\\n    _setCooldownConfig(cooldown);\\n  }\\n}\\n\",\"keccak256\":\"0x40d9c84ea9afe89451c05c4a752c58b2bdf9dc15a934d36e6673e5d4110d4436\",\"license\":\"MIT\"},\"contracts/ronin/profile/ProfileHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../udvts/Types.sol\\\";\\nimport \\\"../../utils/RoleAccess.sol\\\";\\nimport { ProfileStorage } from \\\"./ProfileStorage.sol\\\";\\nimport { PCUVerifyBLSPublicKey } from \\\"../../precompile-usages/PCUVerifyBLSPublicKey.sol\\\";\\n\\nabstract contract ProfileHandler is PCUVerifyBLSPublicKey, ProfileStorage {\\n  /**\\n   * @dev Checks each element in the new profile and reverts if there is duplication with any existing profile.\\n   */\\n  function _requireNonDuplicatedInRegistry(CandidateProfile memory profile) internal view {\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CONSENSUS, TConsensus.unwrap(profile.consensus));\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CANDIDATE_ADMIN, profile.admin);\\n    _requireNonZeroAndNonDuplicated(RoleAccess.TREASURY, profile.treasury);\\n\\n    // Currently skip check of governor because the address is address(0x00).\\n    // _requireNonDuplicated(RoleAccess.GOVERNOR, profile.__reservedGovernor);\\n\\n    _requireNonDuplicatedPubkey(profile.pubkey);\\n  }\\n\\n  function _requireNonZeroAndNonDuplicated(RoleAccess addressType, address addr) internal view {\\n    if (addr == address(0)) revert ErrZeroAddress(addressType);\\n    _requireNonDuplicated(addressType, addr);\\n  }\\n\\n  function _requireNonDuplicated(RoleAccess addressType, address addr) internal view {\\n    if (_isRegisteredAddr(addr)) {\\n      revert ErrDuplicatedInfo(addressType, uint256(uint160(addr)));\\n    }\\n  }\\n\\n  function _isRegisteredAddr(address addr) internal view returns (bool) {\\n    return _registry[uint256(uint160(addr))];\\n  }\\n\\n  function _requireNonDuplicatedPubkey(bytes memory pubkey) internal view {\\n    if (_isRegisteredPubkey(pubkey)) {\\n      revert ErrDuplicatedPubkey(pubkey);\\n    }\\n  }\\n\\n  function _isRegisteredPubkey(bytes memory pubkey) internal view returns (bool) {\\n    return _registry[_hashPubkey(pubkey)];\\n  }\\n\\n  function _verifyPubkey(bytes calldata publicKey, bytes calldata proofOfPossession) internal {\\n    if (!_pcVerifyBLSPublicKey(publicKey, proofOfPossession)) {\\n      revert ErrInvalidProofOfPossession(publicKey, proofOfPossession);\\n    } else {\\n      emit PubkeyVerified(publicKey, proofOfPossession);\\n    }\\n  }\\n\\n  function _requireCooldownPassed(CandidateProfile storage _profile) internal view {\\n    if (block.timestamp < _profile.profileLastChange + _profileChangeCooldown) {\\n      revert ErrProfileChangeCooldownNotEnded();\\n    }\\n  }\\n\\n  function _requireCooldownPassedAndStartCooldown(CandidateProfile storage _profile) internal {\\n    _requireCooldownPassed(_profile);\\n    _startCooldown(_profile);\\n  }\\n}\\n\",\"keccak256\":\"0x51366f17ffc305ab982cdb7639562489926f6b0d4927fa08b44427ef5c733e12\",\"license\":\"MIT\"},\"contracts/ronin/profile/ProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../udvts/Types.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../utils/RoleAccess.sol\\\";\\nimport { IProfile } from \\\"../../interfaces/IProfile.sol\\\";\\n\\nabstract contract ProfileStorage is IProfile, HasContracts {\\n  /// @dev Mapping from id address => candidate profile.\\n  mapping(address => CandidateProfile) internal _id2Profile;\\n\\n  /**\\n   * @dev Mapping from any address or keccak256(pubkey) => whether it is already registered.\\n   * This registry can only be toggled to `true` and NOT vice versa. All registered values\\n   * cannot be reused.\\n   */\\n  mapping(uint256 => bool) internal _registry;\\n\\n  /// @dev Mapping from consensus address => id address.\\n  mapping(TConsensus => address) internal _consensus2Id;\\n\\n  /// @dev The cooldown time to change any info in the profile.\\n  uint256 internal _profileChangeCooldown;\\n\\n  /// @dev Upgradeable gap.\\n  bytes32[47] __gap;\\n\\n  /**\\n   * @dev Add a profile from memory to storage.\\n   */\\n  function _addNewProfile(CandidateProfile storage _profile, CandidateProfile memory newProfile) internal {\\n    _profile.id = newProfile.id;\\n\\n    _setConsensus(_profile, newProfile.consensus);\\n    _setAdmin(_profile, newProfile.admin);\\n    _setTreasury(_profile, newProfile.treasury);\\n    _setGovernor(_profile, newProfile.__reservedGovernor);\\n    _setPubkey(_profile, newProfile.pubkey);\\n\\n    emit ProfileAdded(newProfile.id);\\n  }\\n\\n  function _setConsensus(CandidateProfile storage _profile, TConsensus consensus) internal {\\n    delete _consensus2Id[_profile.consensus];\\n    _consensus2Id[consensus] = _profile.id;\\n\\n    _profile.consensus = consensus;\\n    _registry[uint256(uint160(TConsensus.unwrap(consensus)))] = true;\\n\\n    emit ProfileAddressChanged(_profile.id, RoleAccess.CONSENSUS, TConsensus.unwrap(consensus));\\n  }\\n\\n  function _setAdmin(CandidateProfile storage _profile, address admin) internal {\\n    _profile.admin = admin;\\n    _registry[uint256(uint160(admin))] = true;\\n\\n    emit ProfileAddressChanged(_profile.id, RoleAccess.CANDIDATE_ADMIN, admin);\\n  }\\n\\n  function _setTreasury(CandidateProfile storage _profile, address payable treasury) internal {\\n    _profile.treasury = treasury;\\n    _registry[uint256(uint160(address(treasury)))] = true;\\n\\n    emit ProfileAddressChanged(_profile.id, RoleAccess.TREASURY, treasury);\\n  }\\n\\n  /**\\n   * @dev Allow to registry a profile without governor address since not all validators are governing validators.\\n   */\\n  function _setGovernor(CandidateProfile storage _profile, address governor) internal {\\n    _profile.__reservedGovernor = governor;\\n    if (governor != address(0)) {\\n      _registry[uint256(uint160(governor))] = true;\\n    }\\n  }\\n\\n  function _setPubkey(CandidateProfile storage _profile, bytes memory pubkey) internal {\\n    if (_profile.pubkey.length != 0) {\\n      _profile.oldPubkey = _profile.pubkey;\\n    }\\n\\n    _profile.pubkey = pubkey;\\n    _registry[_hashPubkey(pubkey)] = true;\\n\\n    emit PubkeyChanged(_profile.id, pubkey);\\n  }\\n\\n  function _startCooldown(CandidateProfile storage _profile) internal {\\n    _profile.profileLastChange = block.timestamp;\\n  }\\n\\n  /**\\n   * @dev Get an existed profile struct from `id`. Revert if the profile does not exists.\\n   */\\n  function _getId2ProfileHelper(address id) internal view returns (CandidateProfile storage _profile) {\\n    _profile = _id2Profile[id];\\n    if (_profile.id == address(0)) revert ErrNonExistentProfile();\\n  }\\n\\n  /**\\n   * @dev Returns hash of a public key.\\n   */\\n  function _hashPubkey(bytes memory pubkey) internal pure returns (uint256) {\\n    return uint256(keccak256(pubkey));\\n  }\\n\\n  function _setCooldownConfig(uint256 cooldown) internal {\\n    _profileChangeCooldown = cooldown;\\n  }\\n}\\n\",\"keccak256\":\"0x3c49ab8ce8e1284ec441b42ac350447bb63bd9f03e70e407888ea6677ce0f5ed\",\"license\":\"MIT\"},\"contracts/ronin/profile/ProfileXComponents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\nimport \\\"./ProfileHandler.sol\\\";\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract ProfileXComponents is IProfile, ProfileHandler {\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external override onlyContract(ContractType.STAKING) {\\n    // Check existent profile\\n    CandidateProfile storage _profile = _id2Profile[id];\\n    if (_profile.id != address(0)) revert ErrExistentProfile();\\n\\n    // Validate the info and add the profile\\n    CandidateProfile memory profile = CandidateProfile({\\n      id: id,\\n      consensus: TConsensus.wrap(id),\\n      admin: admin,\\n      treasury: payable(treasury),\\n      __reservedGovernor: address(0),\\n      pubkey: pubkey,\\n      profileLastChange: 0,\\n      oldPubkey: \\\"\\\"\\n    });\\n    _requireNonDuplicatedInRegistry(profile);\\n    _verifyPubkey(pubkey, proofOfPossession);\\n    _addNewProfile(_profile, profile);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool) {\\n    for (uint i; i < listOfPublicKey.length; ) {\\n      for (uint j; j < listOfPublicKey[i].length; ) {\\n        if (!_isRegisteredPubkey(listOfPublicKey[i][j])) {\\n          return false;\\n        }\\n\\n        unchecked {\\n          j++;\\n        }\\n      }\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xe42c817f32176eb7ebe8e71d8c65efd2f75d05291b43a60016af233998dfbe4d\",\"license\":\"MIT\"},\"contracts/ronin/profile/Profile_Testnet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Profile.sol\\\";\\n\\npragma solidity ^0.8.9;\\n\\ncontract Profile_Testnet is Profile {\\n  function migrateRenouncedCandidate() external onlyAdmin {\\n    __defaultMigrate();\\n  }\\n\\n  function manualMigrate(address id, address candidateAdmin, address treasury) external onlyAdmin {\\n    __migrate(id, candidateAdmin, treasury);\\n  }\\n\\n  function __migrationRenouncedCandidates() internal override onlyInitializing {\\n    __defaultMigrate();\\n  }\\n\\n  function __defaultMigrate() private {\\n    if (block.chainid != 2021) return;\\n\\n    address[76] memory lConsensus = __consensuses();\\n    address[76] memory lAdmin = __admins();\\n    address[76] memory lTreasury = __treasuries();\\n\\n    for (uint i; i < lConsensus.length; ++i) {\\n      __migrate(lConsensus[i], lAdmin[i], lTreasury[i]);\\n    }\\n  }\\n\\n  function __admins() private pure returns (address[76] memory list) {\\n    return [\\n      0xcF0E23AED16D5d971910e748ACd48849E4b7239C, // outside validator,\\n      0x32f66D0F9F19db7B0EF1E9F13160884Da65467E6, // outside validator,\\n      0xD682DC6D64710D6191512133dE957e146e9AA58f,\\n      0xEFeaFf1d9f1E4EDB00c6084aE4016143B29Ed924,\\n      0xC2caE7311FC0fe400A838d2dDe06A89E1d3e9Da7,\\n      0xf90a912Fdb7Fd37572cD83325392d729e60Ef682,\\n      0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf,\\n      0x8dA9d88F90141a03292d5e554691B1F6e7c6212c,\\n      0xA87F9A2F0C7082FA2f1E3de1090D36047C7cD017,\\n      0x6693dc258BDAAc5052ab678BA5de2440CA1cdAbe,\\n      0x0B67dF5847aF7476B2EB46da328638E0fB2C6B29,\\n      0xe91d1DCd0232BDa301379dE27bd0edE47Db3F750,\\n      0xDc3de716C4430d598AC504c4685d69D0DcE1412F,\\n      0x795CF28E5b71f1A50cC9E01077891C18D6587e53,\\n      0xa3B3c71371331fD1901e316B67df2d16bF5535a0,\\n      0x32Be208dE8A1595cC0ccf8E984CAB8759Ea1e5b2,\\n      0x8136c74e94b08300d71Fa6C22087b821F73568c5,\\n      0xda6c7342E90B77c5C77A8F7292765360099e30Ed,\\n      0x95fC818CD7709fb6aD8920d0d14925010504876F,\\n      0xe8E66b241414a40a3Db539eC7d864cD61938f817,\\n      0xfD575770A68D5Af983b2A374981f604DdAD9D684,\\n      0x9A54EDCb1D9a44e9f4235ea05c75B45b26679680,\\n      0x6108570A29f500D6950fEbffC99ECB66a264A048,\\n      0xdA071F710b0f82443866616E8a96069012A73ccf,\\n      0x8A4ac64764238C71Ddf82F870BE6526e297Dc4Cd,\\n      0x33f1727CaA54AE24CAdB2949881C3725eB61a100,\\n      0x34DB532F09Ee1285DFEf26eD696c4eA25dcFce72,\\n      0x302d51189FD89D7e72bcb26a65D16941d043F089,\\n      0xFeb247F76E6F6C1Ec3455d04e6E3B694a577D57C,\\n      0x05955d9e99f57E5574A1a9b73361DD14aEc8D641,\\n      0xcf9F44dDB18a5538Efe2a2A28eF20300333f5a71,\\n      0x779dCE1ddc28941Ec85bf2aE0dAC9F0f12836281,\\n      0x0Bb270e5268a9E9a0742DdB027Fab7405Af56Fa7,\\n      0x5b92Ea265597a7cf20C8dA56E6beb8485c1BA993,\\n      0x0E3341Ae4Ed9dA65Fc30a7Fa6357e8B5Ac40b0A3,\\n      0xf6fd5FcA4Bd769BA495B29B98dba5F2eCF4CEED3,\\n      0x8d0a639BDD3b81dF264c4dB46476658858231510,\\n      0xBB046932fEFCDD3Be4368444a1014F25DfEE83f2,\\n      0x54e09bF04810f387347dA6D9687D6a37EC2aadC7,\\n      0xDE5e1554e2bF5d0E54BafC74C932b8F2aD4e273F,\\n      0xc68d0255e1b9C549C43c7181BD29684DC477edfc,\\n      0x37920733DB9A5b45fC9CD5e3C80825bEfFC1a014,\\n      0x7e9107480Bf92dd56c97118E20CdB3c1Ae9dD866,\\n      0xC4F83A7b369070E32CEd4Bd6Fd647D19AEf828AC,\\n      0x412D4d69122839FcCAd0180e9358d157C3876f3C,\\n      0x355503B8E64205FDE9dBBAD269110991cf736a50,\\n      0x306f23c32fdfC07850Bf242E8Ff59C5E79BFf812,\\n      0x467c5425042C9D9f025265b72C93D73E0F2978C5,\\n      0xEE992B0F5E9746fdb8e584Efa01AF79f6B1C0940,\\n      0xBD6342c0009f55131b7a51f627CE8Cc87879DD66,\\n      0x57018e929Eb6fe50355bF1BF9D1d39cA466b7Fa0,\\n      0xAd4e3D2F85b4C095742B500751CEE5c4B8f65A5b,\\n      0x89A6A074dB8BcD3Fd60626107eA2aE576693F7c5,\\n      0xCB742186fA056444766fA7cc52a0479E8F6DEDEA,\\n      0x60C8117901Ab35738fcFd7157D393207eFCe8055,\\n      0xAD70AD152E27E0923C4f11C63490FCFD904A4C36,\\n      0xd8b47b81648d9e81e50b8cA21EA81F2E1B6929BB,\\n      0xeCB1374172970a613A1970370B3ddeAD8F844733,\\n      0x0472dCa02318B532Fcb0B056661EE7fD2Adc8a20,\\n      0xdd00ACc07F3F7AFa90B5a22cFd56c0808b6444dd,\\n      0x4d3302c69fac489E2F7373bCB2f101d3B378c4Ce,\\n      0xe7685E437F34De2D36eA2e9AB13E5Ab871711A2C,\\n      0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf,\\n      0x3F9Df0717099BAaA95A14B3CAA285DAdDAFb0609,\\n      0x23Dffc4a93c374A91Fbc1c33075af012b68663F7,\\n      0x79eC4d83D40c1Bd1419D8f561BE851FDa1EA32a6,\\n      0x2D3f28780bFb7Ed6FB5547c309E1a6837e5bD12B,\\n      0xa164e8B5F90ce42B0F531E3882cdE3F698e1121f,\\n      0x4a4bc674A97737376cFE990aE2fE0d2B6E738393,\\n      0xF61806B65278fFDbF8b04f832C59b65076798Fb6,\\n      0x836eeEdd931575CCE4285c74C15DBdA9Edc3Dc4F,\\n      0xbd95B0581585E4151793b183ee75d509fDE528B6,\\n      0xA75B1Ce2f8C447caB6c13F313dfd806287aA47e2,\\n      0x4D546475321b4cA2a91B101f26750092C05350cF,\\n      0xFC2d29Da710F45168DE11e5C051CaA558088D52a,\\n      0x1C70B8160E92D56E550caf02e1f2e5EC0Fdb551A\\n    ];\\n  }\\n\\n  function __consensuses() private pure returns (address[76] memory list) {\\n    return [\\n      0x9687e8C41fa369aD08FD278a43114C4207856a61, // outside validator\\n      0x32F66d0F9F19Db7b0EF1E9f13160884DA65467e7, // outside validator\\n      0xD682dc6D64710D6191512133De957e146e9Aa58e,\\n      0xEFeaFf1d9f1e4eDB00C6084ae4016143B29eD925,\\n      0x57b572A9de68Bd29074e1C51c790Fc45C592ba39,\\n      0xC0C2A56F9606bA109d37A0d18AF8E5bAA1e1C0aD,\\n      0xaFB9554299491a34d303F2C5A91bebb162f6b2C1,\\n      0x533f61B360e81f58919faB5C653724F71faf12ab,\\n      0xa87F9A2F0C7082FA2f1E3De1090d36047c7cD018,\\n      0x6693Dc258bDAaC5052aB678Ba5de2440ca1cDAb2,\\n      0x96f78323481fc9abdb8Cc4D8aa50C1500AC93b92,\\n      0xe91D1DcD0232BDa301379de27BD0edE47Db3f751,\\n      0x981676e5E5164524e70f79AC45b52099EbDA8781,\\n      0x795cf28e5B71f1A50cc9E01077891C18D6587E54,\\n      0xa3b3C71371331fD1901e316B67DF2d16Bf5535A1,\\n      0x32be208de8A1595cC0CcF8E984Cab8759Ea1e5b9,\\n      0x2dc14d542B5478f206B296AcbCBfBCCEE6E8D248,\\n      0xDA6C7342E90B77c5c77a8F7292765360099E30EE,\\n      0x9D7EA2223e89A55a4ef69Ca993eae6FDE6E63371,\\n      0xe8e66b241414a40a3db539EC7d864cD61938f818,\\n      0x8fFF45d4a6A27F8256dF19D0DaDF7787CfbE56AA,\\n      0x9a54EdCb1D9a44e9F4235EA05C75B45B26679681,\\n      0x6108570A29F500D6950FEbFFc99eCB66a264a049,\\n      0xDA071f710B0f82443866616E8a96069012A73cCE,\\n      0x5f7f2AE316ec5C092d201744fe8337353ADB2BB3,\\n      0x771DEc03db66a566a1DfE3fd635B3f8D404b9291,\\n      0x71f9154ADc0bef39Bbe8dB1D060E6F239D2E10AE,\\n      0x95908d03bA55c2a44688330b59E746Fdb2f17E3E,\\n      0x3DB3abc65F203788836C8D50F6923C56f3f0FF7c,\\n      0x05955D9e99f57E5574a1A9B73361Dd14aEC8D642,\\n      0x283b4Baa1d0415603C81edc1C68FadD3C790837C,\\n      0x2A5EB3f9CD4D6Ef49dc2a30041e4421af3303929,\\n      0x3B9F2587d55E96276B09b258ac909D809961F6C2,\\n      0x2576e6BC92A493F4DA6335C5E69BC0c272381C3A,\\n      0x0E3341Ae4Ed9dA65Fc30a7Fa6357e8B5Ac40b0A3,\\n      0xf6fd5FcA4Bd769BA495B29B98dba5F2eCF4CEED3,\\n      0xd9299FA321407a5d10c73d71C57Ca687A2A38Af6,\\n      0x877eFEfFE7A23E42C39e2C99b977e4AA4BEC7517,\\n      0x071b510C415d3f84C6F4C6291C49887cC56cac41,\\n      0xDE5e1554e2bF5d0e54bAFC74c932b8f2Ad4E2730,\\n      0xc68d0255E1b9C549C43C7181bd29684DC477eDf0,\\n      0xC3fB7b95b874bfcBD1E722A2061f3adf217121d3,\\n      0x36Fd0d4A075507a4E742631aA37DAD46a1F4c0da,\\n      0x661549d7717C20ffa62AD359B7667Bbf5c82053B,\\n      0x412d4d69122839fcCAd0180e9358D157C3876F3D,\\n      0x355503B8E64205FDE9dBbAd269110991CF736a51,\\n      0x12Cf444bf83Ed5B610d0089927EcD3baBC81Ff88,\\n      0x467C5425042c9d9f025265b72c93D73e0f2978C6,\\n      0xB6bc5bc0410773A3F86B1537ce7495C52e38f88B,\\n      0xBd6342C0009f55131b7A51F627ce8Cc87879dD67,\\n      0x35C78DefBd03E96b4E3eE6a73e9CD4C49d2b885a,\\n      0xAD4e3d2f85b4C095742B500751CeE5C4b8F65A5C,\\n      0x42c535deCcc071D9039b177Cb3AbF30411531b05,\\n      0xb212F24D850a0Ed90F2889dee31870E7FF3fED6c,\\n      0x60C8117901AB35738FcfD7157D393207Efce8056,\\n      0x30b0215a442Ea3D3088Acd83cD5Fe2aA2bcd775A,\\n      0xD21BeCe2D8206A3fFdBAeDb827f4D4bD0FF79e3d,\\n      0x4EfA5C5Bbe7a257743335F200E86cD44eEa4dcD9,\\n      0x0472dcA02318B532fcB0B056661ee7Fd2aDc8A21,\\n      0xDD00ACc07f3f7Afa90B5A22CFd56c0808b6444Df,\\n      0x4d3302c69fAc489E2f7373bCB2f101d3b378C4cF,\\n      0x8c29604e1caE4af683c4fBdAD951F3F855890EA0,\\n      0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf,\\n      0xF48C06c56D78F5106b8c5Fa234fCeB1d1c50096B,\\n      0x626ECe2ad62F59700D2734A523FC6177005aC8b0,\\n      0xc6C15480855add4eeBE365c89a9bb6f278E18254,\\n      0xF6071F7905D4e4B6eBd27b819aAF8923d542FDDF,\\n      0x8872fe6335267aDB4C40b9f8667095667B55dCD9,\\n      0x4a4bc674A97737376cFE990aE2fE0d2B6E738393,\\n      0x27550f4B37f0309C56ea67578Eb924B4c19eEEB7,\\n      0x181A053fd961DC1377B84BE4E551ce277053e4C0,\\n      0xf44C500a8515a5ACc900C921bC888b5b62DA6556,\\n      0xF20293d569f0Ee7ECcdEF266D86EE382F8932866,\\n      0xb1D4782962A407343Aa3765a599637932d241305,\\n      0x7F53d703836abCaF1ca3D5607d80dd7d96e50d02,\\n      0x78fD38faa30ea66702cc39383D2E84f9a4A56fA6\\n    ];\\n  }\\n\\n  function __treasuries() private pure returns (address[76] memory list) {\\n    return [\\n      0xcF0E23AED16D5d971910e748ACd48849E4b7239C, // outside validator\\n      0x32f66D0F9F19db7B0EF1E9F13160884Da65467E6, // outside validator\\n      0xD682DC6D64710D6191512133dE957e146e9AA58f,\\n      0xEFeaFf1d9f1E4EDB00c6084aE4016143B29Ed924,\\n      0xC2caE7311FC0fe400A838d2dDe06A89E1d3e9Da7,\\n      0xf90a912Fdb7Fd37572cD83325392d729e60Ef682,\\n      0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf,\\n      0x8dA9d88F90141a03292d5e554691B1F6e7c6212c,\\n      0xA87F9A2F0C7082FA2f1E3de1090D36047C7cD017,\\n      0x6693dc258BDAAc5052ab678BA5de2440CA1cdAbe,\\n      0x0B67dF5847aF7476B2EB46da328638E0fB2C6B29,\\n      0xe91d1DCd0232BDa301379dE27bd0edE47Db3F750,\\n      0xDc3de716C4430d598AC504c4685d69D0DcE1412F,\\n      0x795CF28E5b71f1A50cC9E01077891C18D6587e53,\\n      0xa3B3c71371331fD1901e316B67df2d16bF5535a0,\\n      0x32Be208dE8A1595cC0ccf8E984CAB8759Ea1e5b2,\\n      0x8136c74e94b08300d71Fa6C22087b821F73568c5,\\n      0xda6c7342E90B77c5C77A8F7292765360099e30Ed,\\n      0x95fC818CD7709fb6aD8920d0d14925010504876F,\\n      0xe8E66b241414a40a3Db539eC7d864cD61938f817,\\n      0xfD575770A68D5Af983b2A374981f604DdAD9D684,\\n      0x9A54EDCb1D9a44e9f4235ea05c75B45b26679680,\\n      0x6108570A29f500D6950fEbffC99ECB66a264A048,\\n      0xdA071F710b0f82443866616E8a96069012A73ccf,\\n      0x8A4ac64764238C71Ddf82F870BE6526e297Dc4Cd,\\n      0x33f1727CaA54AE24CAdB2949881C3725eB61a100,\\n      0x34DB532F09Ee1285DFEf26eD696c4eA25dcFce72,\\n      0x302d51189FD89D7e72bcb26a65D16941d043F089,\\n      0xFeb247F76E6F6C1Ec3455d04e6E3B694a577D57C,\\n      0x05955d9e99f57E5574A1a9b73361DD14aEc8D641,\\n      0xcf9F44dDB18a5538Efe2a2A28eF20300333f5a71,\\n      0x779dCE1ddc28941Ec85bf2aE0dAC9F0f12836281,\\n      0x0Bb270e5268a9E9a0742DdB027Fab7405Af56Fa7,\\n      0x5b92Ea265597a7cf20C8dA56E6beb8485c1BA993,\\n      0x0E3341Ae4Ed9dA65Fc30a7Fa6357e8B5Ac40b0A3,\\n      0xf6fd5FcA4Bd769BA495B29B98dba5F2eCF4CEED3,\\n      0x8d0a639BDD3b81dF264c4dB46476658858231510,\\n      0xBB046932fEFCDD3Be4368444a1014F25DfEE83f2,\\n      0x54e09bF04810f387347dA6D9687D6a37EC2aadC7,\\n      0xDE5e1554e2bF5d0E54BafC74C932b8F2aD4e273F,\\n      0xc68d0255e1b9C549C43c7181BD29684DC477edfc,\\n      0x37920733DB9A5b45fC9CD5e3C80825bEfFC1a014,\\n      0x7e9107480Bf92dd56c97118E20CdB3c1Ae9dD866,\\n      0xC4F83A7b369070E32CEd4Bd6Fd647D19AEf828AC,\\n      0x412D4d69122839FcCAd0180e9358d157C3876f3C,\\n      0x355503B8E64205FDE9dBBAD269110991cf736a50,\\n      0x306f23c32fdfC07850Bf242E8Ff59C5E79BFf812,\\n      0x467c5425042C9D9f025265b72C93D73E0F2978C5,\\n      0xEE992B0F5E9746fdb8e584Efa01AF79f6B1C0940,\\n      0xBD6342c0009f55131b7a51f627CE8Cc87879DD66,\\n      0x57018e929Eb6fe50355bF1BF9D1d39cA466b7Fa0,\\n      0xAd4e3D2F85b4C095742B500751CEE5c4B8f65A5b,\\n      0x89A6A074dB8BcD3Fd60626107eA2aE576693F7c5,\\n      0xCB742186fA056444766fA7cc52a0479E8F6DEDEA,\\n      0x60C8117901Ab35738fcFd7157D393207eFCe8055,\\n      0xAD70AD152E27E0923C4f11C63490FCFD904A4C36,\\n      0xd8b47b81648d9e81e50b8cA21EA81F2E1B6929BB,\\n      0xeCB1374172970a613A1970370B3ddeAD8F844733,\\n      0x0472dCa02318B532Fcb0B056661EE7fD2Adc8a20,\\n      0xdd00ACc07F3F7AFa90B5a22cFd56c0808b6444dd,\\n      0x4d3302c69fac489E2F7373bCB2f101d3B378c4Ce,\\n      0xe7685E437F34De2D36eA2e9AB13E5Ab871711A2C,\\n      0xAfB9554299491a34d303f2C5A91bebB162f6B2Cf,\\n      0x3F9Df0717099BAaA95A14B3CAA285DAdDAFb0609,\\n      0x23Dffc4a93c374A91Fbc1c33075af012b68663F7,\\n      0x79eC4d83D40c1Bd1419D8f561BE851FDa1EA32a6,\\n      0x2D3f28780bFb7Ed6FB5547c309E1a6837e5bD12B,\\n      0xa164e8B5F90ce42B0F531E3882cdE3F698e1121f,\\n      0x4a4bc674A97737376cFE990aE2fE0d2B6E738393,\\n      0xF61806B65278fFDbF8b04f832C59b65076798Fb6,\\n      0x836eeEdd931575CCE4285c74C15DBdA9Edc3Dc4F,\\n      0xbd95B0581585E4151793b183ee75d509fDE528B6,\\n      0xA75B1Ce2f8C447caB6c13F313dfd806287aA47e2,\\n      0x4D546475321b4cA2a91B101f26750092C05350cF,\\n      0xFC2d29Da710F45168DE11e5C051CaA558088D52a,\\n      0x1C70B8160E92D56E550caf02e1f2e5EC0Fdb551A\\n    ];\\n  }\\n}\\n\",\"keccak256\":\"0xbd0e9963224615c88a49dd59c94ec7544dcdf6551a7131bd81bb331b1aa7e010\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 32,
  "numDeployments": 17,
  "storageLayout": {
    "storage": [
      {
        "astId": 26007,
        "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
        "label": "_id2Profile",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(CandidateProfile)7157_storage)"
      },
      {
        "astId": 26012,
        "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
        "label": "_registry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 26018,
        "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
        "label": "_consensus2Id",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_userDefinedValueType(TConsensus)37191,t_address)"
      },
      {
        "astId": 26021,
        "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
        "label": "_profileChangeCooldown",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 26026,
        "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)47_storage"
      },
      {
        "astId": 149318,
        "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
        "label": "_initialized",
        "offset": 0,
        "slot": "51",
        "type": "t_uint8"
      },
      {
        "astId": 149321,
        "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
        "label": "_initializing",
        "offset": 1,
        "slot": "51",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)47_storage": {
        "encoding": "inplace",
        "label": "bytes32[47]",
        "numberOfBytes": "1504",
        "base": "t_bytes32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(CandidateProfile)7157_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IProfile.CandidateProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(CandidateProfile)7157_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_userDefinedValueType(TConsensus)37191,t_address)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TConsensus)37191",
        "label": "mapping(TConsensus => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(CandidateProfile)7157_storage": {
        "encoding": "inplace",
        "label": "struct IProfile.CandidateProfile",
        "numberOfBytes": "256",
        "members": [
          {
            "astId": 7134,
            "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7138,
            "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
            "label": "consensus",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(TConsensus)37191"
          },
          {
            "astId": 7141,
            "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
            "label": "admin",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7144,
            "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
            "label": "treasury",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 7147,
            "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
            "label": "__reservedGovernor",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7150,
            "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
            "label": "pubkey",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          },
          {
            "astId": 7153,
            "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
            "label": "profileLastChange",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7156,
            "contract": "contracts/ronin/profile/Profile_Testnet.sol:Profile_Testnet",
            "label": "oldPubkey",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes_storage"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(TConsensus)37191": {
        "encoding": "inplace",
        "label": "TConsensus",
        "numberOfBytes": "20"
      }
    }
  },
  "timestamp": 1708659212,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "changePubkey(address,bytes,bytes)": {
        "notice": "The candidate admin changes the public key."
      },
      "requestChangeTreasuryAddr(address,address)": {
        "notice": "This method is not supported. Change treasury also requires changing the admin address. Using the {requestChangeAdminAddress} method instead"
      }
    }
  }
}