{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "addNewProfile",
      "inputs": [
        {
          "name": "profile",
          "type": "tuple",
          "internalType": "struct IProfile.CandidateProfile",
          "components": [
            {
              "name": "id",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "consensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "admin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "treasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "__reservedGovernor",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "pubkey",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "pubkeyLastChange",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "oldPubkey",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "arePublicKeysRegistered",
      "inputs": [
        {
          "name": "listOfPublicKey",
          "type": "bytes[][2]",
          "internalType": "bytes[][2]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "changePubkey",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execApplyValidatorCandidate",
      "inputs": [
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "treasury",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getConsensus2Id",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getId2Profile",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IProfile.CandidateProfile",
          "components": [
            {
              "name": "id",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "consensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "admin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "treasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "__reservedGovernor",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "pubkey",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "pubkeyLastChange",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "oldPubkey",
              "type": "bytes",
              "internalType": "bytes"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyConsensus2Id",
      "inputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyId2Consensus",
      "inputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "validatorContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [
        {
          "name": "stakingContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "trustedOrgContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "cooldown",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "precompileVerifyBLSPublicKeyAddress",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "requestChangeAdminAddress",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newAdminAddr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestChangeConsensusAddr",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newConsensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestChangeTreasuryAddr",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "outputs": [],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setPubkeyChangeCooldown",
      "inputs": [
        {
          "name": "cooldown",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfileAdded",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfileAddressChanged",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "addressType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum RoleAccess"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfileMigrated",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "admin",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "treasury",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PubkeyChanged",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PubkeyVerified",
      "inputs": [
        {
          "name": "pubkey",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "indexed": false,
          "internalType": "bytes"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrCallPrecompiled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrDuplicatedInfo",
      "inputs": [
        {
          "name": "infoType",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        },
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrDuplicatedPubkey",
      "inputs": [
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrExistentProfile",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrIdAndConsensusDiffer",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidProofOfPossession",
      "inputs": [
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNonExistentProfile",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrPubkeyChangeCooldownNotEnded",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroAddress",
      "inputs": [
        {
          "name": "infoType",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroPubkey",
      "inputs": []
    }
  ],
  "address": "0xCA1567920d00AEA6175E920451909efd54696185",
  "args": "0x",
  "ast": {
    "absolutePath": "contracts/ronin/profile/Profile.sol",
    "id": 24073,
    "exportedSymbols": {
      "Address": [
        148102
      ],
      "ContractType": [
        35500
      ],
      "EnumFlags": [
        10492
      ],
      "ErrUnauthorized": [
        35349
      ],
      "IBaseStaking": [
        8726
      ],
      "ICandidateManager": [
        9447
      ],
      "ICandidateManagerCallback": [
        9528
      ],
      "ICandidateStaking": [
        8924
      ],
      "ICoinbaseExecution": [
        9696
      ],
      "ICommonInfo": [
        9915
      ],
      "IDelegatorStaking": [
        9032
      ],
      "IEmergencyExit": [
        9789
      ],
      "IJailingInfo": [
        10007
      ],
      "IProfile": [
        6867
      ],
      "IQuorum": [
        6917
      ],
      "IRewardPool": [
        9197
      ],
      "IRoninTrustedOrganization": [
        7410
      ],
      "IRoninValidatorSet": [
        9810
      ],
      "ISlashingExecution": [
        9860
      ],
      "IStaking": [
        9239
      ],
      "IStakingCallback": [
        9254
      ],
      "ITimingInfo": [
        10066
      ],
      "IValidatorInfoV2": [
        10154
      ],
      "Initializable": [
        147465
      ],
      "PCUVerifyBLSPublicKey": [
        16486
      ],
      "PeriodWrapperConsumer": [
        8200
      ],
      "Profile": [
        24072
      ],
      "ProfileHandler": [
        24271
      ],
      "ProfileStorage": [
        24628
      ],
      "ProfileXComponents": [
        24768
      ],
      "RoleAccess": [
        35763
      ],
      "TConsensus": [
        35219
      ],
      "TConsensusEq": [
        35271
      ],
      "TPoolId": [
        35217
      ],
      "TPoolIdEq": [
        35249
      ]
    },
    "nodeType": "SourceUnit",
    "src": "33:8309:100",
    "nodes": [
      {
        "id": 23477,
        "nodeType": "ImportDirective",
        "src": "33:63:100",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24073,
        "sourceUnit": 147466,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 23478,
        "nodeType": "ImportDirective",
        "src": "97:58:100",
        "nodes": [],
        "absolutePath": "contracts/interfaces/validator/ICandidateManager.sol",
        "file": "../../interfaces/validator/ICandidateManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24073,
        "sourceUnit": 9448,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 23479,
        "nodeType": "ImportDirective",
        "src": "156:59:100",
        "nodes": [],
        "absolutePath": "contracts/interfaces/validator/IRoninValidatorSet.sol",
        "file": "../../interfaces/validator/IRoninValidatorSet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24073,
        "sourceUnit": 9811,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 23480,
        "nodeType": "ImportDirective",
        "src": "216:56:100",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IRoninTrustedOrganization.sol",
        "file": "../../interfaces/IRoninTrustedOrganization.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24073,
        "sourceUnit": 7411,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 23481,
        "nodeType": "ImportDirective",
        "src": "273:47:100",
        "nodes": [],
        "absolutePath": "contracts/interfaces/staking/IStaking.sol",
        "file": "../../interfaces/staking/IStaking.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24073,
        "sourceUnit": 9240,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 23482,
        "nodeType": "ImportDirective",
        "src": "321:39:100",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IProfile.sol",
        "file": "../../interfaces/IProfile.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24073,
        "sourceUnit": 6868,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 23483,
        "nodeType": "ImportDirective",
        "src": "361:34:100",
        "nodes": [],
        "absolutePath": "contracts/ronin/profile/ProfileXComponents.sol",
        "file": "./ProfileXComponents.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24073,
        "sourceUnit": 24769,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 23486,
        "nodeType": "ImportDirective",
        "src": "396:75:100",
        "nodes": [],
        "absolutePath": "contracts/utils/CommonErrors.sol",
        "file": "../../utils/CommonErrors.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24073,
        "sourceUnit": 35482,
        "symbolAliases": [
          {
            "foreign": {
              "id": 23484,
              "name": "ErrUnauthorized",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 35349,
              "src": "405:15:100",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 23485,
              "name": "RoleAccess",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 35763,
              "src": "422:10:100",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 23488,
        "nodeType": "ImportDirective",
        "src": "472:60:100",
        "nodes": [],
        "absolutePath": "contracts/utils/ContractType.sol",
        "file": "../../utils/ContractType.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24073,
        "sourceUnit": 35501,
        "symbolAliases": [
          {
            "foreign": {
              "id": 23487,
              "name": "ContractType",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 35500,
              "src": "481:12:100",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 23489,
        "nodeType": "PragmaDirective",
        "src": "534:23:100",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 24072,
        "nodeType": "ContractDefinition",
        "src": "559:7782:100",
        "nodes": [
          {
            "id": 23502,
            "nodeType": "FunctionDefinition",
            "src": "627:47:100",
            "nodes": [],
            "body": {
              "id": 23501,
              "nodeType": "Block",
              "src": "641:33:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 23498,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 147464,
                      "src": "647:20:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 23499,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "647:22:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23500,
                  "nodeType": "ExpressionStatement",
                  "src": "647:22:100"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 23496,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "638:2:100"
            },
            "returnParameters": {
              "id": 23497,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "641:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 23516,
            "nodeType": "FunctionDefinition",
            "src": "678:134:100",
            "nodes": [],
            "body": {
              "id": 23515,
              "nodeType": "Block",
              "src": "746:66:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 23510,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35500,
                          "src": "765:12:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$35500_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 23511,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "778:9:100",
                        "memberName": "VALIDATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 35492,
                        "src": "765:22:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$35500",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 23512,
                        "name": "validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23504,
                        "src": "789:17:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$35500",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23509,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "752:12:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$35500_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 23513,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "752:55:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23514,
                  "nodeType": "ExpressionStatement",
                  "src": "752:55:100"
                }
              ]
            },
            "functionSelector": "c4d66de8",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 23507,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 23506,
                  "name": "initializer",
                  "nameLocations": [
                    "734:11:100"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 147385,
                  "src": "734:11:100"
                },
                "nodeType": "ModifierInvocation",
                "src": "734:11:100"
              }
            ],
            "name": "initialize",
            "nameLocation": "687:10:100",
            "parameters": {
              "id": 23505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23504,
                  "mutability": "mutable",
                  "name": "validatorContract",
                  "nameLocation": "706:17:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23516,
                  "src": "698:25:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23503,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "698:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "697:27:100"
            },
            "returnParameters": {
              "id": 23508,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "746:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23588,
            "nodeType": "FunctionDefinition",
            "src": "816:622:100",
            "nodes": [],
            "body": {
              "id": 23587,
              "nodeType": "Block",
              "src": "917:521:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 23527,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35500,
                          "src": "936:12:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$35500_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 23528,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "949:7:100",
                        "memberName": "STAKING",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 35493,
                        "src": "936:20:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$35500",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 23529,
                        "name": "stakingContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23518,
                        "src": "958:15:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$35500",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23526,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "923:12:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$35500_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 23530,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "923:51:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23531,
                  "nodeType": "ExpressionStatement",
                  "src": "923:51:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 23533,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35500,
                          "src": "993:12:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$35500_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 23534,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1006:26:100",
                        "memberName": "RONIN_TRUSTED_ORGANIZATION",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 35494,
                        "src": "993:39:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$35500",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 23535,
                        "name": "trustedOrgContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23520,
                        "src": "1034:18:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$35500",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23532,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "980:12:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$35500_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 23536,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "980:73:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23537,
                  "nodeType": "ExpressionStatement",
                  "src": "980:73:100"
                },
                {
                  "assignments": [
                    23542
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23542,
                      "mutability": "mutable",
                      "name": "validatorCandidates",
                      "nameLocation": "1080:19:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23587,
                      "src": "1060:39:100",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr",
                        "typeString": "TConsensus[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 23540,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 23539,
                            "name": "TConsensus",
                            "nameLocations": [
                              "1060:10:100"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 35219,
                            "src": "1060:10:100"
                          },
                          "referencedDeclaration": 35219,
                          "src": "1060:10:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                            "typeString": "TConsensus"
                          }
                        },
                        "id": 23541,
                        "nodeType": "ArrayTypeName",
                        "src": "1060:12:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_storage_ptr",
                          "typeString": "TConsensus[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23551,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 23545,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 35500,
                                  "src": "1133:12:100",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$35500_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 23546,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "1146:9:100",
                                "memberName": "VALIDATOR",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 35492,
                                "src": "1133:22:100",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$35500",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$35500",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 23544,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "1121:11:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$35500_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 23547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1121:35:100",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 23543,
                          "name": "IRoninValidatorSet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9810,
                          "src": "1102:18:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$9810_$",
                            "typeString": "type(contract IRoninValidatorSet)"
                          }
                        },
                        "id": 23548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1102:55:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 23549,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1165:22:100",
                      "memberName": "getValidatorCandidates",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9400,
                      "src": "1102:85:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr_$",
                        "typeString": "function () view external returns (TConsensus[] memory)"
                      }
                    },
                    "id": 23550,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1102:87:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr",
                      "typeString": "TConsensus[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1060:129:100"
                },
                {
                  "body": {
                    "id": 23582,
                    "nodeType": "Block",
                    "src": "1249:146:100",
                    "statements": [
                      {
                        "assignments": [
                          23564
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 23564,
                            "mutability": "mutable",
                            "name": "consensus",
                            "nameLocation": "1268:9:100",
                            "nodeType": "VariableDeclaration",
                            "scope": 23582,
                            "src": "1257:20:100",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                              "typeString": "TConsensus"
                            },
                            "typeName": {
                              "id": 23563,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 23562,
                                "name": "TConsensus",
                                "nameLocations": [
                                  "1257:10:100"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 35219,
                                "src": "1257:10:100"
                              },
                              "referencedDeclaration": 35219,
                              "src": "1257:10:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                                "typeString": "TConsensus"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 23568,
                        "initialValue": {
                          "baseExpression": {
                            "id": 23565,
                            "name": "validatorCandidates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23542,
                            "src": "1280:19:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr",
                              "typeString": "TConsensus[] memory"
                            }
                          },
                          "id": 23567,
                          "indexExpression": {
                            "id": 23566,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23553,
                            "src": "1300:1:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1280:22:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                            "typeString": "TConsensus"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1257:45:100"
                      },
                      {
                        "assignments": [
                          23570
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 23570,
                            "mutability": "mutable",
                            "name": "id",
                            "nameLocation": "1318:2:100",
                            "nodeType": "VariableDeclaration",
                            "scope": 23582,
                            "src": "1310:10:100",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 23569,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1310:7:100",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 23575,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 23573,
                              "name": "consensus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 23564,
                              "src": "1341:9:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                                "typeString": "TConsensus"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                                "typeString": "TConsensus"
                              }
                            ],
                            "expression": {
                              "id": 23571,
                              "name": "TConsensus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35219,
                              "src": "1323:10:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_userDefinedValueType$_TConsensus_$35219_$",
                                "typeString": "type(TConsensus)"
                              }
                            },
                            "id": 23572,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "1334:6:100",
                            "memberName": "unwrap",
                            "nodeType": "MemberAccess",
                            "src": "1323:17:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_TConsensus_$35219_$returns$_t_address_$",
                              "typeString": "function (TConsensus) pure returns (address)"
                            }
                          },
                          "id": 23574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1323:28:100",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1310:41:100"
                      },
                      {
                        "expression": {
                          "id": 23580,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 23576,
                              "name": "_consensus2Id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24299,
                              "src": "1359:13:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_userDefinedValueType$_TConsensus_$35219_$_t_address_$",
                                "typeString": "mapping(TConsensus => address)"
                              }
                            },
                            "id": 23578,
                            "indexExpression": {
                              "id": 23577,
                              "name": "consensus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 23564,
                              "src": "1373:9:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                                "typeString": "TConsensus"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1359:24:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 23579,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23570,
                            "src": "1386:2:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1359:29:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 23581,
                        "nodeType": "ExpressionStatement",
                        "src": "1359:29:100"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 23558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 23555,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23553,
                      "src": "1212:1:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 23556,
                        "name": "validatorCandidates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23542,
                        "src": "1216:19:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr",
                          "typeString": "TConsensus[] memory"
                        }
                      },
                      "id": 23557,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1236:6:100",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1216:26:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1212:30:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 23583,
                  "initializationExpression": {
                    "assignments": [
                      23553
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 23553,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1209:1:100",
                        "nodeType": "VariableDeclaration",
                        "scope": 23583,
                        "src": "1201:9:100",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 23552,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1201:7:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 23554,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1201:9:100"
                  },
                  "isSimpleCounterLoop": true,
                  "loopExpression": {
                    "expression": {
                      "id": 23560,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "1244:3:100",
                      "subExpression": {
                        "id": 23559,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23553,
                        "src": "1246:1:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 23561,
                    "nodeType": "ExpressionStatement",
                    "src": "1244:3:100"
                  },
                  "nodeType": "ForStatement",
                  "src": "1196:199:100"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 23584,
                      "name": "__migrationRenouncedCandidates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23606,
                      "src": "1401:30:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 23585,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1401:32:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23586,
                  "nodeType": "ExpressionStatement",
                  "src": "1401:32:100"
                }
              ]
            },
            "functionSelector": "0840ba72",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 23523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "914:1:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 23524,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 23522,
                  "name": "reinitializer",
                  "nameLocations": [
                    "900:13:100"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 147418,
                  "src": "900:13:100"
                },
                "nodeType": "ModifierInvocation",
                "src": "900:16:100"
              }
            ],
            "name": "initializeV2",
            "nameLocation": "825:12:100",
            "parameters": {
              "id": 23521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23518,
                  "mutability": "mutable",
                  "name": "stakingContract",
                  "nameLocation": "846:15:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23588,
                  "src": "838:23:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23517,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "838:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23520,
                  "mutability": "mutable",
                  "name": "trustedOrgContract",
                  "nameLocation": "871:18:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23588,
                  "src": "863:26:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23519,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "863:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "837:53:100"
            },
            "returnParameters": {
              "id": 23525,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "917:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23601,
            "nodeType": "FunctionDefinition",
            "src": "1442:111:100",
            "nodes": [],
            "body": {
              "id": 23600,
              "nodeType": "Block",
              "src": "1508:45:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23597,
                        "name": "cooldown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23590,
                        "src": "1539:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 23596,
                      "name": "_setPubkeyChangeCooldown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24627,
                      "src": "1514:24:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 23598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1514:34:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23599,
                  "nodeType": "ExpressionStatement",
                  "src": "1514:34:100"
                }
              ]
            },
            "functionSelector": "3c3d8410",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "33",
                    "id": 23593,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1505:1:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3_by_1",
                      "typeString": "int_const 3"
                    },
                    "value": "3"
                  }
                ],
                "id": 23594,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 23592,
                  "name": "reinitializer",
                  "nameLocations": [
                    "1491:13:100"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 147418,
                  "src": "1491:13:100"
                },
                "nodeType": "ModifierInvocation",
                "src": "1491:16:100"
              }
            ],
            "name": "initializeV3",
            "nameLocation": "1451:12:100",
            "parameters": {
              "id": 23591,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23590,
                  "mutability": "mutable",
                  "name": "cooldown",
                  "nameLocation": "1472:8:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23601,
                  "src": "1464:16:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 23589,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1464:7:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1463:18:100"
            },
            "returnParameters": {
              "id": 23595,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1508:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23606,
            "nodeType": "FunctionDefinition",
            "src": "1667:61:100",
            "nodes": [],
            "body": {
              "id": 23605,
              "nodeType": "Block",
              "src": "1726:2:100",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 23602,
              "nodeType": "StructuredDocumentation",
              "src": "1557:107:100",
              "text": " @dev Add addresses of renounced candidates into registry. Only called during {initializeV2}."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__migrationRenouncedCandidates",
            "nameLocation": "1676:30:100",
            "parameters": {
              "id": 23603,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1706:2:100"
            },
            "returnParameters": {
              "id": 23604,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1726:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 23657,
            "nodeType": "FunctionDefinition",
            "src": "1970:361:100",
            "nodes": [],
            "body": {
              "id": 23656,
              "nodeType": "Block",
              "src": "2052:279:100",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    23618
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23618,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "2083:8:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23656,
                      "src": "2058:33:100",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 23617,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23616,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "2058:16:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6678,
                          "src": "2058:16:100"
                        },
                        "referencedDeclaration": 6678,
                        "src": "2058:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23622,
                  "initialValue": {
                    "baseExpression": {
                      "id": 23619,
                      "name": "_id2Profile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24288,
                      "src": "2094:11:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_CandidateProfile_$6678_storage_$",
                        "typeString": "mapping(address => struct IProfile.CandidateProfile storage ref)"
                      }
                    },
                    "id": 23621,
                    "indexExpression": {
                      "id": 23620,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23609,
                      "src": "2106:2:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2094:15:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage",
                      "typeString": "struct IProfile.CandidateProfile storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2058:51:100"
                },
                {
                  "expression": {
                    "id": 23627,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 23623,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23618,
                        "src": "2115:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      "id": 23625,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "2124:2:100",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6655,
                      "src": "2115:11:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 23626,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23609,
                      "src": "2129:2:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2115:16:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 23628,
                  "nodeType": "ExpressionStatement",
                  "src": "2115:16:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23630,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23618,
                        "src": "2152:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 23633,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23609,
                            "src": "2178:2:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 23631,
                            "name": "TConsensus",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 35219,
                            "src": "2162:10:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_userDefinedValueType$_TConsensus_$35219_$",
                              "typeString": "type(TConsensus)"
                            }
                          },
                          "id": 23632,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "2173:4:100",
                          "memberName": "wrap",
                          "nodeType": "MemberAccess",
                          "src": "2162:15:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_wrap_pure$_t_address_$returns$_t_userDefinedValueType$_TConsensus_$35219_$",
                            "typeString": "function (address) pure returns (TConsensus)"
                          }
                        },
                        "id": 23634,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2162:19:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      ],
                      "id": 23629,
                      "name": "_setConsensus",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24415,
                      "src": "2138:13:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$6678_storage_ptr_$_t_userDefinedValueType$_TConsensus_$35219_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,TConsensus)"
                      }
                    },
                    "id": 23635,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2138:44:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23636,
                  "nodeType": "ExpressionStatement",
                  "src": "2138:44:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23638,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23618,
                        "src": "2198:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 23639,
                        "name": "candidateAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23611,
                        "src": "2208:14:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23637,
                      "name": "_setAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24450,
                      "src": "2188:9:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$6678_storage_ptr_$_t_address_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,address)"
                      }
                    },
                    "id": 23640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2188:35:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23641,
                  "nodeType": "ExpressionStatement",
                  "src": "2188:35:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23643,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23618,
                        "src": "2242:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 23646,
                            "name": "treasury",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23613,
                            "src": "2260:8:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 23645,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2252:8:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 23644,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2252:8:100",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 23647,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2252:17:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 23642,
                      "name": "_setTreasury",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24488,
                      "src": "2229:12:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$6678_storage_ptr_$_t_address_payable_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,address payable)"
                      }
                    },
                    "id": 23648,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2229:41:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23649,
                  "nodeType": "ExpressionStatement",
                  "src": "2229:41:100"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 23651,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23609,
                        "src": "2297:2:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 23652,
                        "name": "candidateAdmin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23611,
                        "src": "2301:14:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 23653,
                        "name": "treasury",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23613,
                        "src": "2317:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23650,
                      "name": "ProfileMigrated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6692,
                      "src": "2281:15:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address,address)"
                      }
                    },
                    "id": 23654,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2281:45:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23655,
                  "nodeType": "EmitStatement",
                  "src": "2276:50:100"
                }
              ]
            },
            "documentation": {
              "id": 23607,
              "nodeType": "StructuredDocumentation",
              "src": "1732:235:100",
              "text": " @dev This method is used in REP-4 migration, which creates profile for all community-validators and renounced validators.\n This method can be removed after REP-4 goes live.\n DO NOT use for any other purpose."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__migrate",
            "nameLocation": "1979:9:100",
            "parameters": {
              "id": 23614,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23609,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "1997:2:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23657,
                  "src": "1989:10:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23608,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1989:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23611,
                  "mutability": "mutable",
                  "name": "candidateAdmin",
                  "nameLocation": "2009:14:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23657,
                  "src": "2001:22:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23610,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2001:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23613,
                  "mutability": "mutable",
                  "name": "treasury",
                  "nameLocation": "2033:8:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23657,
                  "src": "2025:16:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23612,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2025:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1988:54:100"
            },
            "returnParameters": {
              "id": 23615,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2052:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 23671,
            "nodeType": "FunctionDefinition",
            "src": "2373:116:100",
            "nodes": [],
            "body": {
              "id": 23670,
              "nodeType": "Block",
              "src": "2456:33:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 23666,
                      "name": "_id2Profile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24288,
                      "src": "2469:11:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_CandidateProfile_$6678_storage_$",
                        "typeString": "mapping(address => struct IProfile.CandidateProfile storage ref)"
                      }
                    },
                    "id": 23668,
                    "indexExpression": {
                      "id": 23667,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23660,
                      "src": "2481:2:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2469:15:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage",
                      "typeString": "struct IProfile.CandidateProfile storage ref"
                    }
                  },
                  "functionReturnParameters": 23665,
                  "id": 23669,
                  "nodeType": "Return",
                  "src": "2462:22:100"
                }
              ]
            },
            "baseFunctions": [
              6762
            ],
            "documentation": {
              "id": 23658,
              "nodeType": "StructuredDocumentation",
              "src": "2335:35:100",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "f4660940",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getId2Profile",
            "nameLocation": "2382:13:100",
            "parameters": {
              "id": 23661,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23660,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "2404:2:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23671,
                  "src": "2396:10:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23659,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2396:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2395:12:100"
            },
            "returnParameters": {
              "id": 23665,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23664,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 23671,
                  "src": "2431:23:100",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CandidateProfile_$6678_memory_ptr",
                    "typeString": "struct IProfile.CandidateProfile"
                  },
                  "typeName": {
                    "id": 23663,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 23662,
                      "name": "CandidateProfile",
                      "nameLocations": [
                        "2431:16:100"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6678,
                      "src": "2431:16:100"
                    },
                    "referencedDeclaration": 6678,
                    "src": "2431:16:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2430:25:100"
            },
            "scope": 24072,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23717,
            "nodeType": "FunctionDefinition",
            "src": "2531:308:100",
            "nodes": [],
            "body": {
              "id": 23716,
              "nodeType": "Block",
              "src": "2645:194:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 23690,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 23682,
                      "name": "consensusList",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23680,
                      "src": "2651:13:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr",
                        "typeString": "TConsensus[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 23687,
                            "name": "idList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23675,
                            "src": "2684:6:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "id": 23688,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2691:6:100",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "2684:13:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 23686,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2667:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (TConsensus[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 23684,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 23683,
                              "name": "TConsensus",
                              "nameLocations": [
                                "2671:10:100"
                              ],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 35219,
                              "src": "2671:10:100"
                            },
                            "referencedDeclaration": 35219,
                            "src": "2671:10:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                              "typeString": "TConsensus"
                            }
                          },
                          "id": 23685,
                          "nodeType": "ArrayTypeName",
                          "src": "2671:12:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_storage_ptr",
                            "typeString": "TConsensus[]"
                          }
                        }
                      },
                      "id": 23689,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2667:31:100",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr",
                        "typeString": "TConsensus[] memory"
                      }
                    },
                    "src": "2651:47:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr",
                      "typeString": "TConsensus[] memory"
                    }
                  },
                  "id": 23691,
                  "nodeType": "ExpressionStatement",
                  "src": "2651:47:100"
                },
                {
                  "id": 23715,
                  "nodeType": "UncheckedBlock",
                  "src": "2704:131:100",
                  "statements": [
                    {
                      "body": {
                        "id": 23713,
                        "nodeType": "Block",
                        "src": "2759:70:100",
                        "statements": [
                          {
                            "expression": {
                              "id": 23711,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 23702,
                                  "name": "consensusList",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 23680,
                                  "src": "2769:13:100",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr",
                                    "typeString": "TConsensus[] memory"
                                  }
                                },
                                "id": 23704,
                                "indexExpression": {
                                  "id": 23703,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 23693,
                                  "src": "2783:1:100",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "2769:16:100",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                                  "typeString": "TConsensus"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 23705,
                                    "name": "_id2Profile",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 24288,
                                    "src": "2788:11:100",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_CandidateProfile_$6678_storage_$",
                                      "typeString": "mapping(address => struct IProfile.CandidateProfile storage ref)"
                                    }
                                  },
                                  "id": 23709,
                                  "indexExpression": {
                                    "baseExpression": {
                                      "id": 23706,
                                      "name": "idList",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 23675,
                                      "src": "2800:6:100",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                        "typeString": "address[] calldata"
                                      }
                                    },
                                    "id": 23708,
                                    "indexExpression": {
                                      "id": 23707,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 23693,
                                      "src": "2807:1:100",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2800:9:100",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2788:22:100",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage",
                                    "typeString": "struct IProfile.CandidateProfile storage ref"
                                  }
                                },
                                "id": 23710,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2811:9:100",
                                "memberName": "consensus",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 6659,
                                "src": "2788:32:100",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                                  "typeString": "TConsensus"
                                }
                              },
                              "src": "2769:51:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                                "typeString": "TConsensus"
                              }
                            },
                            "id": 23712,
                            "nodeType": "ExpressionStatement",
                            "src": "2769:51:100"
                          }
                        ]
                      },
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 23698,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 23695,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 23693,
                          "src": "2735:1:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "expression": {
                            "id": 23696,
                            "name": "idList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23675,
                            "src": "2739:6:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "id": 23697,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2746:6:100",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "2739:13:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2735:17:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 23714,
                      "initializationExpression": {
                        "assignments": [
                          23693
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 23693,
                            "mutability": "mutable",
                            "name": "i",
                            "nameLocation": "2732:1:100",
                            "nodeType": "VariableDeclaration",
                            "scope": 23714,
                            "src": "2727:6:100",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 23692,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "2727:4:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 23694,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2727:6:100"
                      },
                      "isSimpleCounterLoop": true,
                      "loopExpression": {
                        "expression": {
                          "id": 23700,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": true,
                          "src": "2754:3:100",
                          "subExpression": {
                            "id": 23699,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23693,
                            "src": "2756:1:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 23701,
                        "nodeType": "ExpressionStatement",
                        "src": "2754:3:100"
                      },
                      "nodeType": "ForStatement",
                      "src": "2722:107:100"
                    }
                  ]
                }
              ]
            },
            "baseFunctions": [
              6773
            ],
            "documentation": {
              "id": 23672,
              "nodeType": "StructuredDocumentation",
              "src": "2493:35:100",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "b261596f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getManyId2Consensus",
            "nameLocation": "2540:19:100",
            "parameters": {
              "id": 23676,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23675,
                  "mutability": "mutable",
                  "name": "idList",
                  "nameLocation": "2579:6:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23717,
                  "src": "2560:25:100",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 23673,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2560:7:100",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 23674,
                    "nodeType": "ArrayTypeName",
                    "src": "2560:9:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2559:27:100"
            },
            "returnParameters": {
              "id": 23681,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23680,
                  "mutability": "mutable",
                  "name": "consensusList",
                  "nameLocation": "2630:13:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23717,
                  "src": "2610:33:100",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_memory_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 23678,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 23677,
                        "name": "TConsensus",
                        "nameLocations": [
                          "2610:10:100"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 35219,
                        "src": "2610:10:100"
                      },
                      "referencedDeclaration": 35219,
                      "src": "2610:10:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 23679,
                    "nodeType": "ArrayTypeName",
                    "src": "2610:12:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2609:35:100"
            },
            "scope": 24072,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23733,
            "nodeType": "FunctionDefinition",
            "src": "2881:122:100",
            "nodes": [],
            "body": {
              "id": 23732,
              "nodeType": "Block",
              "src": "2963:40:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 23730,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 23726,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23724,
                      "src": "2969:2:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 23727,
                        "name": "_consensus2Id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24299,
                        "src": "2974:13:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_userDefinedValueType$_TConsensus_$35219_$_t_address_$",
                          "typeString": "mapping(TConsensus => address)"
                        }
                      },
                      "id": 23729,
                      "indexExpression": {
                        "id": 23728,
                        "name": "consensus",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23721,
                        "src": "2988:9:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2974:24:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2969:29:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 23731,
                  "nodeType": "ExpressionStatement",
                  "src": "2969:29:100"
                }
              ]
            },
            "baseFunctions": [
              6782
            ],
            "documentation": {
              "id": 23718,
              "nodeType": "StructuredDocumentation",
              "src": "2843:35:100",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "50a9fc29",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getConsensus2Id",
            "nameLocation": "2890:15:100",
            "parameters": {
              "id": 23722,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23721,
                  "mutability": "mutable",
                  "name": "consensus",
                  "nameLocation": "2917:9:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23733,
                  "src": "2906:20:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 23720,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 23719,
                      "name": "TConsensus",
                      "nameLocations": [
                        "2906:10:100"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 35219,
                      "src": "2906:10:100"
                    },
                    "referencedDeclaration": 35219,
                    "src": "2906:10:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2905:22:100"
            },
            "returnParameters": {
              "id": 23725,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23724,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "2959:2:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23733,
                  "src": "2951:10:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23723,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2951:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2950:12:100"
            },
            "scope": 24072,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23777,
            "nodeType": "FunctionDefinition",
            "src": "3045:304:100",
            "nodes": [],
            "body": {
              "id": 23776,
              "nodeType": "Block",
              "src": "3159:190:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 23751,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 23744,
                      "name": "idList",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23742,
                      "src": "3165:6:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 23748,
                            "name": "consensusList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23738,
                            "src": "3188:13:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_calldata_ptr",
                              "typeString": "TConsensus[] calldata"
                            }
                          },
                          "id": 23749,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3202:6:100",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3188:20:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 23747,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "3174:13:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (address[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 23745,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3178:7:100",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 23746,
                          "nodeType": "ArrayTypeName",
                          "src": "3178:9:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        }
                      },
                      "id": 23750,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3174:35:100",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[] memory"
                      }
                    },
                    "src": "3165:44:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "id": 23752,
                  "nodeType": "ExpressionStatement",
                  "src": "3165:44:100"
                },
                {
                  "id": 23775,
                  "nodeType": "UncheckedBlock",
                  "src": "3215:130:100",
                  "statements": [
                    {
                      "body": {
                        "id": 23773,
                        "nodeType": "Block",
                        "src": "3277:62:100",
                        "statements": [
                          {
                            "expression": {
                              "id": 23771,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 23763,
                                  "name": "idList",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 23742,
                                  "src": "3287:6:100",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                    "typeString": "address[] memory"
                                  }
                                },
                                "id": 23765,
                                "indexExpression": {
                                  "id": 23764,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 23754,
                                  "src": "3294:1:100",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "3287:9:100",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "baseExpression": {
                                  "id": 23766,
                                  "name": "_consensus2Id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 24299,
                                  "src": "3299:13:100",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_userDefinedValueType$_TConsensus_$35219_$_t_address_$",
                                    "typeString": "mapping(TConsensus => address)"
                                  }
                                },
                                "id": 23770,
                                "indexExpression": {
                                  "baseExpression": {
                                    "id": 23767,
                                    "name": "consensusList",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 23738,
                                    "src": "3313:13:100",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_calldata_ptr",
                                      "typeString": "TConsensus[] calldata"
                                    }
                                  },
                                  "id": 23769,
                                  "indexExpression": {
                                    "id": 23768,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 23754,
                                    "src": "3327:1:100",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "3313:16:100",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                                    "typeString": "TConsensus"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3299:31:100",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "3287:43:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 23772,
                            "nodeType": "ExpressionStatement",
                            "src": "3287:43:100"
                          }
                        ]
                      },
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 23759,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 23756,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 23754,
                          "src": "3246:1:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "expression": {
                            "id": 23757,
                            "name": "consensusList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23738,
                            "src": "3250:13:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_calldata_ptr",
                              "typeString": "TConsensus[] calldata"
                            }
                          },
                          "id": 23758,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3264:6:100",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3250:20:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3246:24:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 23774,
                      "initializationExpression": {
                        "assignments": [
                          23754
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 23754,
                            "mutability": "mutable",
                            "name": "i",
                            "nameLocation": "3243:1:100",
                            "nodeType": "VariableDeclaration",
                            "scope": 23774,
                            "src": "3238:6:100",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 23753,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "3238:4:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 23755,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3238:6:100"
                      },
                      "isSimpleCounterLoop": true,
                      "loopExpression": {
                        "expression": {
                          "id": 23761,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": true,
                          "src": "3272:3:100",
                          "subExpression": {
                            "id": 23760,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23754,
                            "src": "3274:1:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 23762,
                        "nodeType": "ExpressionStatement",
                        "src": "3272:3:100"
                      },
                      "nodeType": "ForStatement",
                      "src": "3233:106:100"
                    }
                  ]
                }
              ]
            },
            "baseFunctions": [
              6793
            ],
            "documentation": {
              "id": 23734,
              "nodeType": "StructuredDocumentation",
              "src": "3007:35:100",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "f9226b1a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getManyConsensus2Id",
            "nameLocation": "3054:19:100",
            "parameters": {
              "id": 23739,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23738,
                  "mutability": "mutable",
                  "name": "consensusList",
                  "nameLocation": "3096:13:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23777,
                  "src": "3074:35:100",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_calldata_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 23736,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 23735,
                        "name": "TConsensus",
                        "nameLocations": [
                          "3074:10:100"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 35219,
                        "src": "3074:10:100"
                      },
                      "referencedDeclaration": 35219,
                      "src": "3074:10:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 23737,
                    "nodeType": "ArrayTypeName",
                    "src": "3074:12:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$35219_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3073:37:100"
            },
            "returnParameters": {
              "id": 23743,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23742,
                  "mutability": "mutable",
                  "name": "idList",
                  "nameLocation": "3151:6:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23777,
                  "src": "3134:23:100",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 23740,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3134:7:100",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 23741,
                    "nodeType": "ArrayTypeName",
                    "src": "3134:9:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3133:25:100"
            },
            "scope": 24072,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23811,
            "nodeType": "FunctionDefinition",
            "src": "3391:248:100",
            "nodes": [],
            "body": {
              "id": 23810,
              "nodeType": "Block",
              "src": "3466:173:100",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    23788
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23788,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "3497:8:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23810,
                      "src": "3472:33:100",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 23787,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23786,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "3472:16:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6678,
                          "src": "3472:16:100"
                        },
                        "referencedDeclaration": 6678,
                        "src": "3472:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23793,
                  "initialValue": {
                    "baseExpression": {
                      "id": 23789,
                      "name": "_id2Profile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24288,
                      "src": "3508:11:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_CandidateProfile_$6678_storage_$",
                        "typeString": "mapping(address => struct IProfile.CandidateProfile storage ref)"
                      }
                    },
                    "id": 23792,
                    "indexExpression": {
                      "expression": {
                        "id": 23790,
                        "name": "profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23781,
                        "src": "3520:7:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_memory_ptr",
                          "typeString": "struct IProfile.CandidateProfile memory"
                        }
                      },
                      "id": 23791,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3528:2:100",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6655,
                      "src": "3520:10:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3508:23:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage",
                      "typeString": "struct IProfile.CandidateProfile storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3472:59:100"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 23800,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 23794,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23788,
                        "src": "3541:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      "id": 23795,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3550:2:100",
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6655,
                      "src": "3541:11:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 23798,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3564:1:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 23797,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "3556:7:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 23796,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3556:7:100",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 23799,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3556:10:100",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3541:25:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 23804,
                  "nodeType": "IfStatement",
                  "src": "3537:58:100",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 23801,
                        "name": "ErrExistentProfile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6719,
                        "src": "3575:18:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 23802,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3575:20:100",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 23803,
                    "nodeType": "RevertStatement",
                    "src": "3568:27:100"
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23806,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23788,
                        "src": "3616:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 23807,
                        "name": "profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23781,
                        "src": "3626:7:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_memory_ptr",
                          "typeString": "struct IProfile.CandidateProfile memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_memory_ptr",
                          "typeString": "struct IProfile.CandidateProfile memory"
                        }
                      ],
                      "id": 23805,
                      "name": "_addNewProfile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24360,
                      "src": "3601:14:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$6678_storage_ptr_$_t_struct$_CandidateProfile_$6678_memory_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,struct IProfile.CandidateProfile memory)"
                      }
                    },
                    "id": 23808,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3601:33:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23809,
                  "nodeType": "ExpressionStatement",
                  "src": "3601:33:100"
                }
              ]
            },
            "baseFunctions": [
              6800
            ],
            "documentation": {
              "id": 23778,
              "nodeType": "StructuredDocumentation",
              "src": "3353:35:100",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "d1cb8830",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 23784,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 23783,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "3456:9:100"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3558,
                  "src": "3456:9:100"
                },
                "nodeType": "ModifierInvocation",
                "src": "3456:9:100"
              }
            ],
            "name": "addNewProfile",
            "nameLocation": "3400:13:100",
            "parameters": {
              "id": 23782,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23781,
                  "mutability": "mutable",
                  "name": "profile",
                  "nameLocation": "3438:7:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23811,
                  "src": "3414:31:100",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CandidateProfile_$6678_memory_ptr",
                    "typeString": "struct IProfile.CandidateProfile"
                  },
                  "typeName": {
                    "id": 23780,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 23779,
                      "name": "CandidateProfile",
                      "nameLocations": [
                        "3414:16:100"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6678,
                      "src": "3414:16:100"
                    },
                    "referencedDeclaration": 6678,
                    "src": "3414:16:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3413:33:100"
            },
            "returnParameters": {
              "id": 23785,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3466:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23896,
            "nodeType": "FunctionDefinition",
            "src": "4190:790:100",
            "nodes": [],
            "body": {
              "id": 23895,
              "nodeType": "Block",
              "src": "4268:712:100",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    23821
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23821,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "4299:8:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23895,
                      "src": "4274:33:100",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 23820,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23819,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "4274:16:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6678,
                          "src": "4274:16:100"
                        },
                        "referencedDeclaration": 6678,
                        "src": "4274:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23825,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 23823,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23814,
                        "src": "4331:2:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23822,
                      "name": "_getId2ProfileHelper",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24601,
                      "src": "4310:20:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_struct$_CandidateProfile_$6678_storage_ptr_$",
                        "typeString": "function (address) view returns (struct IProfile.CandidateProfile storage pointer)"
                      }
                    },
                    "id": 23824,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4310:24:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile storage pointer"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4274:60:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23827,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23821,
                        "src": "4363:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      ],
                      "id": 23826,
                      "name": "_requireCandidateAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24058,
                      "src": "4340:22:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_CandidateProfile_$6678_storage_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer) view"
                      }
                    },
                    "id": 23828,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4340:32:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23829,
                  "nodeType": "ExpressionStatement",
                  "src": "4340:32:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 23831,
                          "name": "RoleAccess",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35763,
                          "src": "4410:10:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_RoleAccess_$35763_$",
                            "typeString": "type(enum RoleAccess)"
                          }
                        },
                        "id": 23832,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "4421:15:100",
                        "memberName": "CANDIDATE_ADMIN",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 35756,
                        "src": "4410:26:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RoleAccess_$35763",
                          "typeString": "enum RoleAccess"
                        }
                      },
                      {
                        "id": 23833,
                        "name": "newAdminAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23816,
                        "src": "4438:12:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_RoleAccess_$35763",
                          "typeString": "enum RoleAccess"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23830,
                      "name": "_requireNonZeroAndNonDuplicated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24153,
                      "src": "4378:31:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_enum$_RoleAccess_$35763_$_t_address_$returns$__$",
                        "typeString": "function (enum RoleAccess,address) view"
                      }
                    },
                    "id": 23834,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4378:73:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23835,
                  "nodeType": "ExpressionStatement",
                  "src": "4378:73:100"
                },
                {
                  "assignments": [
                    23838
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23838,
                      "mutability": "mutable",
                      "name": "stakingContract",
                      "nameLocation": "4467:15:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23895,
                      "src": "4458:24:100",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IStaking_$9239",
                        "typeString": "contract IStaking"
                      },
                      "typeName": {
                        "id": 23837,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23836,
                          "name": "IStaking",
                          "nameLocations": [
                            "4458:8:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 9239,
                          "src": "4458:8:100"
                        },
                        "referencedDeclaration": 9239,
                        "src": "4458:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStaking_$9239",
                          "typeString": "contract IStaking"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23845,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 23841,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35500,
                              "src": "4506:12:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$35500_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 23842,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "4519:7:100",
                            "memberName": "STAKING",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 35493,
                            "src": "4506:20:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$35500",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$35500",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 23840,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "4494:11:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$35500_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 23843,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4494:33:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23839,
                      "name": "IStaking",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9239,
                      "src": "4485:8:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IStaking_$9239_$",
                        "typeString": "type(contract IStaking)"
                      }
                    },
                    "id": 23844,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4485:43:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IStaking_$9239",
                      "typeString": "contract IStaking"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4458:70:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23849,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23814,
                        "src": "4583:2:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 23850,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4602:3:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 23851,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4606:6:100",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4602:10:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 23852,
                        "name": "newAdminAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23816,
                        "src": "4628:12:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 23846,
                        "name": "stakingContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23838,
                        "src": "4534:15:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IStaking_$9239",
                          "typeString": "contract IStaking"
                        }
                      },
                      "id": 23848,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4550:22:100",
                      "memberName": "execChangeAdminAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9253,
                      "src": "4534:38:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address,address) external"
                      }
                    },
                    "id": 23853,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [
                      "4575:6:100",
                      "4587:13:100",
                      "4614:12:100"
                    ],
                    "names": [
                      "poolId",
                      "currAdminAddr",
                      "newAdminAddr"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "4534:109:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23854,
                  "nodeType": "ExpressionStatement",
                  "src": "4534:109:100"
                },
                {
                  "assignments": [
                    23857
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23857,
                      "mutability": "mutable",
                      "name": "validatorContract",
                      "nameLocation": "4669:17:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23895,
                      "src": "4650:36:100",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                        "typeString": "contract IRoninValidatorSet"
                      },
                      "typeName": {
                        "id": 23856,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23855,
                          "name": "IRoninValidatorSet",
                          "nameLocations": [
                            "4650:18:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 9810,
                          "src": "4650:18:100"
                        },
                        "referencedDeclaration": 9810,
                        "src": "4650:18:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23864,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 23860,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35500,
                              "src": "4720:12:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$35500_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 23861,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "4733:9:100",
                            "memberName": "VALIDATOR",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 35492,
                            "src": "4720:22:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$35500",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$35500",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 23859,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "4708:11:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$35500_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 23862,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4708:35:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23858,
                      "name": "IRoninValidatorSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9810,
                      "src": "4689:18:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$9810_$",
                        "typeString": "type(contract IRoninValidatorSet)"
                      }
                    },
                    "id": 23863,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4689:55:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                      "typeString": "contract IRoninValidatorSet"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4650:94:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23868,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23814,
                        "src": "4791:2:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 23869,
                        "name": "newAdminAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23816,
                        "src": "4795:12:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 23865,
                        "name": "validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23857,
                        "src": "4750:17:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 23867,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4768:22:100",
                      "memberName": "execChangeAdminAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9510,
                      "src": "4750:40:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address) external"
                      }
                    },
                    "id": 23870,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4750:58:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23871,
                  "nodeType": "ExpressionStatement",
                  "src": "4750:58:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23875,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23814,
                        "src": "4858:2:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 23878,
                            "name": "newAdminAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23816,
                            "src": "4870:12:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 23877,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4862:8:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 23876,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4862:8:100",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 23879,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4862:21:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 23872,
                        "name": "validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23857,
                        "src": "4814:17:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 23874,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4832:25:100",
                      "memberName": "execChangeTreasuryAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9527,
                      "src": "4814:43:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_payable_$returns$__$",
                        "typeString": "function (address,address payable) external"
                      }
                    },
                    "id": 23880,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4814:70:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23881,
                  "nodeType": "ExpressionStatement",
                  "src": "4814:70:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23883,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23821,
                        "src": "4901:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 23884,
                        "name": "newAdminAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23816,
                        "src": "4911:12:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23882,
                      "name": "_setAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24450,
                      "src": "4891:9:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$6678_storage_ptr_$_t_address_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,address)"
                      }
                    },
                    "id": 23885,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4891:33:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23886,
                  "nodeType": "ExpressionStatement",
                  "src": "4891:33:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23888,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23821,
                        "src": "4943:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 23891,
                            "name": "newAdminAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23816,
                            "src": "4961:12:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 23890,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4953:8:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 23889,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4953:8:100",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 23892,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4953:21:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 23887,
                      "name": "_setTreasury",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24488,
                      "src": "4930:12:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$6678_storage_ptr_$_t_address_payable_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,address payable)"
                      }
                    },
                    "id": 23893,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4930:45:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23894,
                  "nodeType": "ExpressionStatement",
                  "src": "4930:45:100"
                }
              ]
            },
            "baseFunctions": [
              6822
            ],
            "documentation": {
              "id": 23812,
              "nodeType": "StructuredDocumentation",
              "src": "3643:544:100",
              "text": " @inheritdoc IProfile\n @dev Side-effects on other contracts:\n - Update Staking contract:\n    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.\n    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.\n    + [x] Move staking amount of previous admin to the the new admin.\n - Update Validator contract:\n    + [x] Update (id => ValidatorCandidate) mapping\n - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical."
            },
            "functionSelector": "84cb1010",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "requestChangeAdminAddress",
            "nameLocation": "4199:25:100",
            "parameters": {
              "id": 23817,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23814,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "4233:2:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23896,
                  "src": "4225:10:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23813,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4225:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23816,
                  "mutability": "mutable",
                  "name": "newAdminAddr",
                  "nameLocation": "4245:12:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23896,
                  "src": "4237:20:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23815,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4237:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4224:34:100"
            },
            "returnParameters": {
              "id": 23818,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4268:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23971,
            "nodeType": "FunctionDefinition",
            "src": "5847:868:100",
            "nodes": [],
            "body": {
              "id": 23970,
              "nodeType": "Block",
              "src": "5933:782:100",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    23907
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23907,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "5964:8:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23970,
                      "src": "5939:33:100",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 23906,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23905,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "5939:16:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6678,
                          "src": "5939:16:100"
                        },
                        "referencedDeclaration": 6678,
                        "src": "5939:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23911,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 23909,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23899,
                        "src": "5996:2:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23908,
                      "name": "_getId2ProfileHelper",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24601,
                      "src": "5975:20:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_struct$_CandidateProfile_$6678_storage_ptr_$",
                        "typeString": "function (address) view returns (struct IProfile.CandidateProfile storage pointer)"
                      }
                    },
                    "id": 23910,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5975:24:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile storage pointer"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5939:60:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23913,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23907,
                        "src": "6028:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      ],
                      "id": 23912,
                      "name": "_requireCandidateAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24058,
                      "src": "6005:22:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_CandidateProfile_$6678_storage_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer) view"
                      }
                    },
                    "id": 23914,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6005:32:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23915,
                  "nodeType": "ExpressionStatement",
                  "src": "6005:32:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 23917,
                          "name": "RoleAccess",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35763,
                          "src": "6075:10:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_RoleAccess_$35763_$",
                            "typeString": "type(enum RoleAccess)"
                          }
                        },
                        "id": 23918,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "6086:9:100",
                        "memberName": "CONSENSUS",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 35761,
                        "src": "6075:20:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RoleAccess_$35763",
                          "typeString": "enum RoleAccess"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 23921,
                            "name": "newConsensusAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 23902,
                            "src": "6115:16:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                              "typeString": "TConsensus"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                              "typeString": "TConsensus"
                            }
                          ],
                          "expression": {
                            "id": 23919,
                            "name": "TConsensus",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 35219,
                            "src": "6097:10:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_userDefinedValueType$_TConsensus_$35219_$",
                              "typeString": "type(TConsensus)"
                            }
                          },
                          "id": 23920,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "6108:6:100",
                          "memberName": "unwrap",
                          "nodeType": "MemberAccess",
                          "src": "6097:17:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_TConsensus_$35219_$returns$_t_address_$",
                            "typeString": "function (TConsensus) pure returns (address)"
                          }
                        },
                        "id": 23922,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6097:35:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_RoleAccess_$35763",
                          "typeString": "enum RoleAccess"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23916,
                      "name": "_requireNonZeroAndNonDuplicated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24153,
                      "src": "6043:31:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_enum$_RoleAccess_$35763_$_t_address_$returns$__$",
                        "typeString": "function (enum RoleAccess,address) view"
                      }
                    },
                    "id": 23923,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6043:90:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23924,
                  "nodeType": "ExpressionStatement",
                  "src": "6043:90:100"
                },
                {
                  "assignments": [
                    23927
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23927,
                      "mutability": "mutable",
                      "name": "oldConsensusAddr",
                      "nameLocation": "6151:16:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23970,
                      "src": "6140:27:100",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                        "typeString": "TConsensus"
                      },
                      "typeName": {
                        "id": 23926,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23925,
                          "name": "TConsensus",
                          "nameLocations": [
                            "6140:10:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 35219,
                          "src": "6140:10:100"
                        },
                        "referencedDeclaration": 35219,
                        "src": "6140:10:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23930,
                  "initialValue": {
                    "expression": {
                      "id": 23928,
                      "name": "_profile",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23907,
                      "src": "6170:8:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile storage pointer"
                      }
                    },
                    "id": 23929,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "6179:9:100",
                    "memberName": "consensus",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 6659,
                    "src": "6170:18:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                      "typeString": "TConsensus"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6140:48:100"
                },
                {
                  "assignments": [
                    23933
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23933,
                      "mutability": "mutable",
                      "name": "validatorContract",
                      "nameLocation": "6214:17:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23970,
                      "src": "6195:36:100",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                        "typeString": "contract IRoninValidatorSet"
                      },
                      "typeName": {
                        "id": 23932,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23931,
                          "name": "IRoninValidatorSet",
                          "nameLocations": [
                            "6195:18:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 9810,
                          "src": "6195:18:100"
                        },
                        "referencedDeclaration": 9810,
                        "src": "6195:18:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23940,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 23936,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35500,
                              "src": "6265:12:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$35500_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 23937,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "6278:9:100",
                            "memberName": "VALIDATOR",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 35492,
                            "src": "6265:22:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$35500",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$35500",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 23935,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "6253:11:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$35500_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 23938,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6253:35:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23934,
                      "name": "IRoninValidatorSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9810,
                      "src": "6234:18:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$9810_$",
                        "typeString": "type(contract IRoninValidatorSet)"
                      }
                    },
                    "id": 23939,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6234:55:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                      "typeString": "contract IRoninValidatorSet"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6195:94:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23944,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23899,
                        "src": "6340:2:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 23945,
                        "name": "newConsensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23902,
                        "src": "6344:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      ],
                      "expression": {
                        "id": 23941,
                        "name": "validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23933,
                        "src": "6295:17:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 23943,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6313:26:100",
                      "memberName": "execChangeConsensusAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9519,
                      "src": "6295:44:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_userDefinedValueType$_TConsensus_$35219_$returns$__$",
                        "typeString": "function (address,TConsensus) external"
                      }
                    },
                    "id": 23946,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6295:66:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23947,
                  "nodeType": "ExpressionStatement",
                  "src": "6295:66:100"
                },
                {
                  "assignments": [
                    23950
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23950,
                      "mutability": "mutable",
                      "name": "trustedOrgContract",
                      "nameLocation": "6394:18:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 23970,
                      "src": "6368:44:100",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRoninTrustedOrganization_$7410",
                        "typeString": "contract IRoninTrustedOrganization"
                      },
                      "typeName": {
                        "id": 23949,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23948,
                          "name": "IRoninTrustedOrganization",
                          "nameLocations": [
                            "6368:25:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 7410,
                          "src": "6368:25:100"
                        },
                        "referencedDeclaration": 7410,
                        "src": "6368:25:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninTrustedOrganization_$7410",
                          "typeString": "contract IRoninTrustedOrganization"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 23957,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 23953,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35500,
                              "src": "6460:12:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$35500_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 23954,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "6473:26:100",
                            "memberName": "RONIN_TRUSTED_ORGANIZATION",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 35494,
                            "src": "6460:39:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$35500",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$35500",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 23952,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "6448:11:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$35500_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 23955,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6448:52:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23951,
                      "name": "IRoninTrustedOrganization",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7410,
                      "src": "6415:25:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IRoninTrustedOrganization_$7410_$",
                        "typeString": "type(contract IRoninTrustedOrganization)"
                      }
                    },
                    "id": 23956,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6415:91:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRoninTrustedOrganization_$7410",
                      "typeString": "contract IRoninTrustedOrganization"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6368:138:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23961,
                        "name": "oldConsensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23927,
                        "src": "6597:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      },
                      {
                        "id": 23962,
                        "name": "newConsensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23902,
                        "src": "6639:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      ],
                      "expression": {
                        "id": 23958,
                        "name": "trustedOrgContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23950,
                        "src": "6512:18:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninTrustedOrganization_$7410",
                          "typeString": "contract IRoninTrustedOrganization"
                        }
                      },
                      "id": 23960,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6531:39:100",
                      "memberName": "execChangeConsensusAddressForTrustedOrg",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7295,
                      "src": "6512:58:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_userDefinedValueType$_TConsensus_$35219_$_t_userDefinedValueType$_TConsensus_$35219_$returns$__$",
                        "typeString": "function (TConsensus,TConsensus) external"
                      }
                    },
                    "id": 23963,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [
                      "6579:16:100",
                      "6621:16:100"
                    ],
                    "names": [
                      "oldConsensusAddr",
                      "newConsensusAddr"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "6512:150:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23964,
                  "nodeType": "ExpressionStatement",
                  "src": "6512:150:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 23966,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23907,
                        "src": "6683:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 23967,
                        "name": "newConsensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23902,
                        "src": "6693:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                          "typeString": "TConsensus"
                        }
                      ],
                      "id": 23965,
                      "name": "_setConsensus",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24415,
                      "src": "6669:13:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$6678_storage_ptr_$_t_userDefinedValueType$_TConsensus_$35219_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,TConsensus)"
                      }
                    },
                    "id": 23968,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6669:41:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23969,
                  "nodeType": "ExpressionStatement",
                  "src": "6669:41:100"
                }
              ]
            },
            "baseFunctions": [
              6831
            ],
            "documentation": {
              "id": 23897,
              "nodeType": "StructuredDocumentation",
              "src": "4984:860:100",
              "text": " @inheritdoc IProfile\n @dev Side-effects on other contracts:\n - Update in Staking contract for Consensus address mapping:\n   + [x] Keep the same previous pool address.\n - Update in Validator contract for:\n   + [x] Consensus Address mapping\n   + [x] Bridge Address mapping\n   + [x] Jail mapping\n   + [x] Pending reward mapping\n   + [x] Schedule mapping\n - Update in Slashing contract for:\n   + [x] Handling slash indicator\n   + [x] Handling slash fast finality\n   + [x] Handling slash double sign\n - Update in Proposal contract for:\n   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit\n - Update Trusted Org contracts:\n   + [x] Remove and delete weight of the old consensus\n   + [x] Replace and add weight for the new consensus"
            },
            "functionSelector": "1f97bdb1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "requestChangeConsensusAddr",
            "nameLocation": "5856:26:100",
            "parameters": {
              "id": 23903,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23899,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "5891:2:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23971,
                  "src": "5883:10:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23898,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5883:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23902,
                  "mutability": "mutable",
                  "name": "newConsensusAddr",
                  "nameLocation": "5906:16:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 23971,
                  "src": "5895:27:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 23901,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 23900,
                      "name": "TConsensus",
                      "nameLocations": [
                        "5895:10:100"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 35219,
                      "src": "5895:10:100"
                    },
                    "referencedDeclaration": 35219,
                    "src": "5895:10:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5882:41:100"
            },
            "returnParameters": {
              "id": 23904,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5933:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 23984,
            "nodeType": "FunctionDefinition",
            "src": "7317:135:100",
            "nodes": [],
            "body": {
              "id": 23983,
              "nodeType": "Block",
              "src": "7418:34:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "4e6f7420737570706f72746564",
                        "id": 23980,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7431:15:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e5b7c22b986abeee436d3f29779441c97ce367faa95f4de1bae94ece3817df25",
                          "typeString": "literal_string \"Not supported\""
                        },
                        "value": "Not supported"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_e5b7c22b986abeee436d3f29779441c97ce367faa95f4de1bae94ece3817df25",
                          "typeString": "literal_string \"Not supported\""
                        }
                      ],
                      "id": 23979,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -19,
                        -19
                      ],
                      "referencedDeclaration": -19,
                      "src": "7424:6:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 23981,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7424:23:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23982,
                  "nodeType": "ExpressionStatement",
                  "src": "7424:23:100"
                }
              ]
            },
            "baseFunctions": [
              6839
            ],
            "documentation": {
              "id": 23972,
              "nodeType": "StructuredDocumentation",
              "src": "6719:595:100",
              "text": " @inheritdoc IProfile\n @notice This method is not supported. Change treasury also requires changing the admin address.\n Using the {requestChangeAdminAddress} method instead\n @dev Side-effects on other contracts:\n - Update Validator contract:\n    + [x] Update (id => ValidatorCandidate) mapping\n - Update governance admin:\n    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.\n          Cannot impl since we cannot cancel the previous the ballot and\n          create a new ballot on behalf of the validator contract."
            },
            "functionSelector": "183584c1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "requestChangeTreasuryAddr",
            "nameLocation": "7326:25:100",
            "parameters": {
              "id": 23977,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23974,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 23984,
                  "src": "7352:7:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23973,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7352:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23976,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 23984,
                  "src": "7369:15:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 23975,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7369:15:100",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7351:52:100"
            },
            "returnParameters": {
              "id": 23978,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7418:0:100"
            },
            "scope": 24072,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 24024,
            "nodeType": "FunctionDefinition",
            "src": "7494:372:100",
            "nodes": [],
            "body": {
              "id": 24023,
              "nodeType": "Block",
              "src": "7594:272:100",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    23996
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 23996,
                      "mutability": "mutable",
                      "name": "_profile",
                      "nameLocation": "7625:8:100",
                      "nodeType": "VariableDeclaration",
                      "scope": 24023,
                      "src": "7600:33:100",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                        "typeString": "struct IProfile.CandidateProfile"
                      },
                      "typeName": {
                        "id": 23995,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 23994,
                          "name": "CandidateProfile",
                          "nameLocations": [
                            "7600:16:100"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6678,
                          "src": "7600:16:100"
                        },
                        "referencedDeclaration": 6678,
                        "src": "7600:16:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 24000,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 23998,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23987,
                        "src": "7657:2:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 23997,
                      "name": "_getId2ProfileHelper",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24601,
                      "src": "7636:20:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_struct$_CandidateProfile_$6678_storage_ptr_$",
                        "typeString": "function (address) view returns (struct IProfile.CandidateProfile storage pointer)"
                      }
                    },
                    "id": 23999,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7636:24:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile storage pointer"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7600:60:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24002,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23996,
                        "src": "7689:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      ],
                      "id": 24001,
                      "name": "_requireCandidateAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24058,
                      "src": "7666:22:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_CandidateProfile_$6678_storage_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer) view"
                      }
                    },
                    "id": 24003,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7666:32:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24004,
                  "nodeType": "ExpressionStatement",
                  "src": "7666:32:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24006,
                        "name": "pubkey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23989,
                        "src": "7732:6:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 24005,
                      "name": "_requireNonDuplicatedPubkey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24211,
                      "src": "7704:27:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (bytes memory) view"
                      }
                    },
                    "id": 24007,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7704:35:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24008,
                  "nodeType": "ExpressionStatement",
                  "src": "7704:35:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24010,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23996,
                        "src": "7772:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      ],
                      "id": 24009,
                      "name": "_checkPubkeyChangeCooldown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24270,
                      "src": "7745:26:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_CandidateProfile_$6678_storage_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer) view"
                      }
                    },
                    "id": 24011,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7745:36:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24012,
                  "nodeType": "ExpressionStatement",
                  "src": "7745:36:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24014,
                        "name": "pubkey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23989,
                        "src": "7801:6:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 24015,
                        "name": "proofOfPossession",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23991,
                        "src": "7809:17:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 24013,
                      "name": "_verifyPubkey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24251,
                      "src": "7787:13:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes_calldata_ptr_$_t_bytes_calldata_ptr_$returns$__$",
                        "typeString": "function (bytes calldata,bytes calldata)"
                      }
                    },
                    "id": 24016,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7787:40:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24017,
                  "nodeType": "ExpressionStatement",
                  "src": "7787:40:100"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24019,
                        "name": "_profile",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23996,
                        "src": "7844:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        }
                      },
                      {
                        "id": 24020,
                        "name": "pubkey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23989,
                        "src": "7854:6:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                          "typeString": "struct IProfile.CandidateProfile storage pointer"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 24018,
                      "name": "_setPubkey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24574,
                      "src": "7833:10:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CandidateProfile_$6678_storage_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (struct IProfile.CandidateProfile storage pointer,bytes memory)"
                      }
                    },
                    "id": 24021,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7833:28:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24022,
                  "nodeType": "ExpressionStatement",
                  "src": "7833:28:100"
                }
              ]
            },
            "baseFunctions": [
              6849
            ],
            "documentation": {
              "id": 23985,
              "nodeType": "StructuredDocumentation",
              "src": "7456:35:100",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "9a1a05e0",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changePubkey",
            "nameLocation": "7503:12:100",
            "parameters": {
              "id": 23992,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23987,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "7524:2:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 24024,
                  "src": "7516:10:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23986,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7516:7:100",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23989,
                  "mutability": "mutable",
                  "name": "pubkey",
                  "nameLocation": "7543:6:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 24024,
                  "src": "7528:21:100",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 23988,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7528:5:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23991,
                  "mutability": "mutable",
                  "name": "proofOfPossession",
                  "nameLocation": "7566:17:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 24024,
                  "src": "7551:32:100",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 23990,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7551:5:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7515:69:100"
            },
            "returnParameters": {
              "id": 23993,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7594:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 24058,
            "nodeType": "FunctionDefinition",
            "src": "7870:312:100",
            "nodes": [],
            "body": {
              "id": 24057,
              "nodeType": "Block",
              "src": "7951:231:100",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 24048,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 24034,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 24030,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "7968:3:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 24031,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "7972:6:100",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "7968:10:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "expression": {
                          "id": 24032,
                          "name": "sProfile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24027,
                          "src": "7982:8:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                            "typeString": "struct IProfile.CandidateProfile storage pointer"
                          }
                        },
                        "id": 24033,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "7991:5:100",
                        "memberName": "admin",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6662,
                        "src": "7982:14:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "7968:28:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "id": 24047,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "!",
                      "prefix": true,
                      "src": "8006:105:100",
                      "subExpression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 24042,
                              "name": "sProfile",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24027,
                              "src": "8080:8:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                                "typeString": "struct IProfile.CandidateProfile storage pointer"
                              }
                            },
                            "id": 24043,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8089:9:100",
                            "memberName": "consensus",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 6659,
                            "src": "8080:18:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                              "typeString": "TConsensus"
                            }
                          },
                          {
                            "expression": {
                              "id": 24044,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "8100:3:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 24045,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8104:6:100",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "8100:10:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$35219",
                              "typeString": "TConsensus"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 24037,
                                      "name": "ContractType",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 35500,
                                      "src": "8038:12:100",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_ContractType_$35500_$",
                                        "typeString": "type(enum ContractType)"
                                      }
                                    },
                                    "id": 24038,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberLocation": "8051:9:100",
                                    "memberName": "VALIDATOR",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 35492,
                                    "src": "8038:22:100",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_ContractType_$35500",
                                      "typeString": "enum ContractType"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_enum$_ContractType_$35500",
                                      "typeString": "enum ContractType"
                                    }
                                  ],
                                  "id": 24036,
                                  "name": "getContract",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3484,
                                  "src": "8026:11:100",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$35500_$returns$_t_address_$",
                                    "typeString": "function (enum ContractType) view returns (address)"
                                  }
                                },
                                "id": 24039,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8026:35:100",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 24035,
                              "name": "IRoninValidatorSet",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9810,
                              "src": "8007:18:100",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$9810_$",
                                "typeString": "type(contract IRoninValidatorSet)"
                              }
                            },
                            "id": 24040,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8007:55:100",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IRoninValidatorSet_$9810",
                              "typeString": "contract IRoninValidatorSet"
                            }
                          },
                          "id": 24041,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8063:16:100",
                          "memberName": "isCandidateAdmin",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 9436,
                          "src": "8007:72:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_userDefinedValueType$_TConsensus_$35219_$_t_address_$returns$_t_bool_$",
                            "typeString": "function (TConsensus,address) view external returns (bool)"
                          }
                        },
                        "id": 24046,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8007:104:100",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "7968:143:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 24056,
                  "nodeType": "IfStatement",
                  "src": "7957:220:100",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 24050,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "8141:3:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 24051,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8145:3:100",
                          "memberName": "sig",
                          "nodeType": "MemberAccess",
                          "src": "8141:7:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        {
                          "expression": {
                            "id": 24052,
                            "name": "RoleAccess",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 35763,
                            "src": "8150:10:100",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RoleAccess_$35763_$",
                              "typeString": "type(enum RoleAccess)"
                            }
                          },
                          "id": 24053,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "8161:15:100",
                          "memberName": "CANDIDATE_ADMIN",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 35756,
                          "src": "8150:26:100",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RoleAccess_$35763",
                            "typeString": "enum RoleAccess"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          {
                            "typeIdentifier": "t_enum$_RoleAccess_$35763",
                            "typeString": "enum RoleAccess"
                          }
                        ],
                        "id": 24049,
                        "name": "ErrUnauthorized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35349,
                        "src": "8125:15:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_bytes4_$_t_enum$_RoleAccess_$35763_$returns$__$",
                          "typeString": "function (bytes4,enum RoleAccess) pure"
                        }
                      },
                      "id": 24054,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8125:52:100",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 24055,
                    "nodeType": "RevertStatement",
                    "src": "8118:59:100"
                  }
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_requireCandidateAdmin",
            "nameLocation": "7879:22:100",
            "parameters": {
              "id": 24028,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24027,
                  "mutability": "mutable",
                  "name": "sProfile",
                  "nameLocation": "7927:8:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 24058,
                  "src": "7902:33:100",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                    "typeString": "struct IProfile.CandidateProfile"
                  },
                  "typeName": {
                    "id": 24026,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 24025,
                      "name": "CandidateProfile",
                      "nameLocations": [
                        "7902:16:100"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6678,
                      "src": "7902:16:100"
                    },
                    "referencedDeclaration": 6678,
                    "src": "7902:16:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CandidateProfile_$6678_storage_ptr",
                      "typeString": "struct IProfile.CandidateProfile"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7901:35:100"
            },
            "returnParameters": {
              "id": 24029,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7951:0:100"
            },
            "scope": 24072,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 24071,
            "nodeType": "FunctionDefinition",
            "src": "8224:115:100",
            "nodes": [],
            "body": {
              "id": 24070,
              "nodeType": "Block",
              "src": "8294:45:100",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24067,
                        "name": "cooldown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24061,
                        "src": "8325:8:100",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 24066,
                      "name": "_setPubkeyChangeCooldown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24627,
                      "src": "8300:24:100",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 24068,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8300:34:100",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24069,
                  "nodeType": "ExpressionStatement",
                  "src": "8300:34:100"
                }
              ]
            },
            "baseFunctions": [
              6866
            ],
            "documentation": {
              "id": 24059,
              "nodeType": "StructuredDocumentation",
              "src": "8186:35:100",
              "text": " @inheritdoc IProfile"
            },
            "functionSelector": "98a02c2c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 24064,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 24063,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "8284:9:100"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3558,
                  "src": "8284:9:100"
                },
                "nodeType": "ModifierInvocation",
                "src": "8284:9:100"
              }
            ],
            "name": "setPubkeyChangeCooldown",
            "nameLocation": "8233:23:100",
            "parameters": {
              "id": 24062,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24061,
                  "mutability": "mutable",
                  "name": "cooldown",
                  "nameLocation": "8265:8:100",
                  "nodeType": "VariableDeclaration",
                  "scope": 24071,
                  "src": "8257:16:100",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24060,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8257:7:100",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8256:18:100"
            },
            "returnParameters": {
              "id": 24065,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8294:0:100"
            },
            "scope": 24072,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 23490,
              "name": "IProfile",
              "nameLocations": [
                "579:8:100"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6867,
              "src": "579:8:100"
            },
            "id": 23491,
            "nodeType": "InheritanceSpecifier",
            "src": "579:8:100"
          },
          {
            "baseName": {
              "id": 23492,
              "name": "ProfileXComponents",
              "nameLocations": [
                "589:18:100"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 24768,
              "src": "589:18:100"
            },
            "id": 23493,
            "nodeType": "InheritanceSpecifier",
            "src": "589:18:100"
          },
          {
            "baseName": {
              "id": 23494,
              "name": "Initializable",
              "nameLocations": [
                "609:13:100"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 147465,
              "src": "609:13:100"
            },
            "id": 23495,
            "nodeType": "InheritanceSpecifier",
            "src": "609:13:100"
          }
        ],
        "canonicalName": "Profile",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24072,
          147465,
          24768,
          24271,
          24628,
          3544,
          35749,
          8176,
          3589,
          6867,
          16486,
          16493
        ],
        "name": "Profile",
        "nameLocation": "568:7:100",
        "scope": 24073,
        "usedErrors": [
          6719,
          6722,
          6725,
          6728,
          6736,
          6740,
          6745,
          6747,
          6753,
          8149,
          16492,
          35321,
          35349,
          35364
        ],
        "usedEvents": [
          6683,
          6692,
          6702,
          6709,
          6716,
          8157,
          147329
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 24275799,
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b603354610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60335460ff9081161015620000e2576033805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6125c680620000f46000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80639a1a05e0116100b2578063c4d66de811610081578063de981f1b11610066578063de981f1b146102a1578063f4660940146102b4578063f9226b1a146102d457600080fd5b8063c4d66de81461027b578063d1cb88301461028e57600080fd5b80639a1a05e01461022e578063b0abaea614610241578063b261596f14610248578063b5017aef1461026857600080fd5b806350a9fc291161010957806384cb1010116100ee57806384cb1010146101f5578063865e6fd31461020857806398a02c2c1461021b57600080fd5b806350a9fc29146101895780637e18b566146101d257600080fd5b80630840ba721461013b578063183584c1146101505780631f97bdb1146101635780633c3d841014610176575b600080fd5b61014e610149366004611a8d565b6102e7565b005b61014e61015e366004611a8d565b6104b4565b61014e610171366004611a8d565b6104fc565b61014e610184366004611ac6565b610655565b6101b5610197366004611adf565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e56101e0366004611b03565b61073d565b60405190151581526020016101c9565b61014e610203366004611a8d565b610821565b61014e610216366004611b4d565b6109f7565b61014e610229366004611ac6565b610a16565b61014e61023c366004611bb2565b610a2a565b606a6101b5565b61025b610256366004611c7a565b610ad4565b6040516101c99190611cbc565b61014e610276366004611d09565b610bad565b61014e610289366004611adf565b610cca565b61014e61029c366004611e92565b610dd7565b6101b56102af366004611f83565b610e27565b6102c76102c2366004611adf565b610ebb565b6040516101c99190611fe4565b61025b6102e2366004611c7a565b611097565b603354600290610100900460ff16158015610309575060335460ff8083169116105b6103715760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6033805461ffff191660ff831617610100179055610390600984611167565b61039b600a83611167565b60006103a76008610e27565b6001600160a01b031663ba77b06c6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261040c91908101906120a0565b905060005b815181101561046c57600082828151811061042e5761042e612152565b6020908102919091018101516001600160a01b031660008181526002909252604090912080546001600160a01b031916909117905550600101610411565b50506033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152606401610368565b60006105078361120d565b905061051281611261565b61051d600983611340565b60018101546001600160a01b031660006105376008610e27565b6040517fd93fa3060000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063d93fa30690604401600060405180830381600087803b15801561059f57600080fd5b505af11580156105b3573d6000803e3d6000fd5b5050505060006105c3600a610e27565b6040517fa0c302a70000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015287811660248301529192509082169063a0c302a790604401600060405180830381600087803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b5050505061064d848661138c565b505050505050565b603354600390610100900460ff16158015610677575060335460ff8083169116105b6106da5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610368565b6033805461ffff191660ff8316176101001790556106f782600355565b6033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6000805b60028110156108185760005b83826002811061075f5761075f612152565b60200281019061076f9190612168565b905081101561080f576107f984836002811061078d5761078d612152565b60200281019061079d9190612168565b838181106107ad576107ad612152565b90506020028101906107bf91906121b2565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061143392505050565b610807575060009392505050565b60010161074d565b50600101610741565b50600192915050565b600061082c8361120d565b905061083781611261565b610842600483611340565b600061084e6009610e27565b6040517f9ee3c3f80000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152336024830152858116604483015291925090821690639ee3c3f890606401600060405180830381600087803b1580156108bc57600080fd5b505af11580156108d0573d6000803e3d6000fd5b5050505060006108e06008610e27565b6040517fea80d67d0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063ea80d67d90604401600060405180830381600087803b15801561094857600080fd5b505af115801561095c573d6000803e3d6000fd5b50506040517fecd850cc0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301528416925063ecd850cc9150604401600060405180830381600087803b1580156109c457600080fd5b505af11580156109d8573d6000803e3d6000fd5b505050506109e68385611462565b6109f083856114a5565b5050505050565b6109ff6114e8565b610a0881611542565b610a128282611167565b5050565b610a1e6114e8565b610a2781600355565b50565b6000610a358661120d565b9050610a4081611261565b610a7f85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061159192505050565b610a88816115d3565b610a948585858561161d565b61064d8186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116aa92505050565b60608167ffffffffffffffff811115610aef57610aef611db1565b604051908082528060200260200182016040528015610b18578160200160208202803683370190505b50905060005b82811015610ba657600080858584818110610b3b57610b3b612152565b9050602002016020810190610b509190611adf565b6001600160a01b0390811682526020820192909252604001600020600101548351911690839083908110610b8657610b86612152565b6001600160a01b0390921660209283029190910190910152600101610b1e565b5092915050565b6009610bb881611767565b6001600160a01b038088166000908152602081905260409020805490911615610bf45760405163249b38f960e01b815260040160405180910390fd5b60006040518061010001604052808a6001600160a01b031681526020018a6001600160a01b031681526020018b6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018290526040805191820181529181529101529050610ca8816117cc565b610cb48787878761161d565b610cbe8282611815565b50505050505050505050565b603354610100900460ff1615808015610cea5750603354600160ff909116105b80610d045750303b158015610d04575060335460ff166001145b610d675760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610368565b6033805460ff191660011790558015610d8a576033805461ff0019166101001790555b610d95600883611167565b8015610a12576033805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610731565b610ddf6114e8565b80516001600160a01b039081166000908152602081905260409020805490911615610e1d5760405163249b38f960e01b815260040160405180910390fd5b610a128183611815565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610e5e57610e5e6121f9565b60ff1681526020810191909152604001600020546001600160a01b0316905080610eb657816040517f812281be0000000000000000000000000000000000000000000000000000000081526004016103689190612223565b919050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082019290925260e08101919091526001600160a01b0380831660009081526020818152604091829020825161010081018452815485168152600182015485169281019290925260028101548416928201929092526003820154831660608201526004820154909216608083015260058101805460a084019190610f7290612237565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9e90612237565b8015610feb5780601f10610fc057610100808354040283529160200191610feb565b820191906000526020600020905b815481529060010190602001808311610fce57829003601f168201915b505050505081526020016006820154815260200160078201805461100e90612237565b80601f016020809104026020016040519081016040528092919081815260200182805461103a90612237565b80156110875780601f1061105c57610100808354040283529160200191611087565b820191906000526020600020905b81548152906001019060200180831161106a57829003601f168201915b5050505050815250509050919050565b60608167ffffffffffffffff8111156110b2576110b2611db1565b6040519080825280602002602001820160405280156110db578160200160208202803683370190505b50905060005b82811015610ba657600260008585848181106110ff576110ff612152565b90506020020160208101906111149190611adf565b6001600160a01b039081168252602082019290925260400160002054835191169083908390811061114757611147612152565b6001600160a01b03909216602092830291909101909101526001016110e1565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561119d5761119d6121f9565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156111de576111de6121f9565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b565b6001600160a01b0380821660009081526020819052604090208054909116610eb6576040517f682a559600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101546001600160a01b03163314158061131257506112826008610e27565b60018201546040517f04d971ab0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529116906304d971ab90604401602060405180830381865afa1580156112ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113109190612271565b155b15610a27576000356001600160e01b0319166004604051620f948f60ea1b81526004016103689291906122a3565b6001600160a01b03811661138257816040517f57ed62e400000000000000000000000000000000000000000000000000000000815260040161036891906122c1565b610a1282826118b4565b600180830180546001600160a01b03908116600090815260026020908152604080832080546001600160a01b03199081169091558854888616808652838620805484169290971691909117909555855416841790945584905291909120805460ff191690921790915560095b83546040516001600160a01b03909116907fe9654874a1d2cdb1459fe91e0442173d77f8e1baa4897e3f5c10e769a1515d0690600090a45050565b60006001600061144884805160209091012090565b815260208101919091526040016000205460ff1692915050565b6002820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff1916909117905560046113f8565b6003820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff19169091179055600a6113f8565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316331461120b576000356001600160e01b0319166001604051620f948f60ea1b81526004016103689291906122a3565b806001600160a01b03163b600003610a27576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610368565b61159a81611433565b15610a2757806040517f7995d6c800000000000000000000000000000000000000000000000000000000815260040161036891906122cf565b60035481600601546115e591906122e2565b4211610a27576040517f07420f4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61162984848484611914565b61166757838383836040517f97cf1c8d000000000000000000000000000000000000000000000000000000008152600401610368949392919061232c565b7fb737fd977072c109cccc97108f9f8a9017af4bbf4d20938a747f17d8921c50a68484848460405161169c949392919061232c565b60405180910390a150505050565b8160050180546116b990612237565b1590506116d357600782016116d160058401826123ab565b505b600582016116e18282612488565b5042600683015560018060006116fc84805160209091012090565b815260208101919091526040908101600020805460ff191692151592909217909155825490516001600160a01b03909116907fe13225a225fbfeebd9d707546f3d7adee5d72738ac686cc5b97266c49745a56b9061175b9084906122cf565b60405180910390a25050565b61177081610e27565b6001600160a01b0316336001600160a01b031614610a27576000356001600160e01b03191681336040517f8383e63400000000000000000000000000000000000000000000000000000000815260040161036893929190612540565b6117db60098260200151611340565b6117ea60048260400151611340565b6117f9600a8260600151611340565b611808600a82608001516118b4565b610a278160a00151611591565b805182546001600160a01b0319166001600160a01b03909116178255602081015161184190839061138c565b61184f828260400151611462565b61185d8282606001516114a5565b61186b828260800151611a02565b611879828260a001516116aa565b80516040516001600160a01b03909116907fc9da0ae38bd4761b72da1045c9b2618f0cd991dcac01e1f9bbf68474025f074390600090a25050565b6001600160a01b03811660009081526001602052604090205460ff1615610a125781816001600160a01b03166040517fe4166aaa000000000000000000000000000000000000000000000000000000008152600401610368929190612575565b604051600090606a90600190839061193690899089908990899060240161232c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7eae32c200000000000000000000000000000000000000000000000000000000179052805190915061199b611a4f565b602083016020828483895afa6119b057600094505b503d6119bb57600093505b836119f2576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159998505050505050505050565b6004820180546001600160a01b0319166001600160a01b03831690811790915515610a12576001600160a01b03166000908152600160208190526040909120805460ff1916909117905550565b60405180602001604052806001906020820280368337509192915050565b6001600160a01b0381168114610a2757600080fd5b8035610eb681611a6d565b60008060408385031215611aa057600080fd5b8235611aab81611a6d565b91506020830135611abb81611a6d565b809150509250929050565b600060208284031215611ad857600080fd5b5035919050565b600060208284031215611af157600080fd5b8135611afc81611a6d565b9392505050565b600060208284031215611b1557600080fd5b813567ffffffffffffffff811115611b2c57600080fd5b820160408101841015611afc57600080fd5b803560108110610eb657600080fd5b60008060408385031215611b6057600080fd5b611aab83611b3e565b60008083601f840112611b7b57600080fd5b50813567ffffffffffffffff811115611b9357600080fd5b602083019150836020828501011115611bab57600080fd5b9250929050565b600080600080600060608688031215611bca57600080fd5b8535611bd581611a6d565b9450602086013567ffffffffffffffff80821115611bf257600080fd5b611bfe89838a01611b69565b90965094506040880135915080821115611c1757600080fd5b50611c2488828901611b69565b969995985093965092949392505050565b60008083601f840112611c4757600080fd5b50813567ffffffffffffffff811115611c5f57600080fd5b6020830191508360208260051b8501011115611bab57600080fd5b60008060208385031215611c8d57600080fd5b823567ffffffffffffffff811115611ca457600080fd5b611cb085828601611c35565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611cfd5783516001600160a01b031683529284019291840191600101611cd8565b50909695505050505050565b600080600080600080600060a0888a031215611d2457600080fd5b8735611d2f81611a6d565b96506020880135611d3f81611a6d565b95506040880135611d4f81611a6d565b9450606088013567ffffffffffffffff80821115611d6c57600080fd5b611d788b838c01611b69565b909650945060808a0135915080821115611d9157600080fd5b50611d9e8a828b01611b69565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611deb57611deb611db1565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e1a57611e1a611db1565b604052919050565b600082601f830112611e3357600080fd5b813567ffffffffffffffff811115611e4d57611e4d611db1565b611e60601f8201601f1916602001611df1565b818152846020838601011115611e7557600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ea457600080fd5b813567ffffffffffffffff80821115611ebc57600080fd5b908301906101008286031215611ed157600080fd5b611ed9611dc7565b611ee283611a82565b8152611ef060208401611a82565b6020820152611f0160408401611a82565b6040820152611f1260608401611a82565b6060820152611f2360808401611a82565b608082015260a083013582811115611f3a57600080fd5b611f4687828601611e22565b60a08301525060c083013560c082015260e083013582811115611f6857600080fd5b611f7487828601611e22565b60e08301525095945050505050565b600060208284031215611f9557600080fd5b611afc82611b3e565b6000815180845260005b81811015611fc457602081850181015186830182015201611fa8565b506000602082860101526020601f19601f83011685010191505092915050565b602081526001600160a01b0382511660208201526000602083015161201460408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516101008060c0850152612070610120850183611f9e565b915060c085015160e085015260e0850151601f1985840301828601526120968382611f9e565b9695505050505050565b600060208083850312156120b357600080fd5b825167ffffffffffffffff808211156120cb57600080fd5b818501915085601f8301126120df57600080fd5b8151818111156120f1576120f1611db1565b8060051b9150612102848301611df1565b818152918301840191848101908884111561211c57600080fd5b938501935b83851015612146578451925061213683611a6d565b8282529385019390850190612121565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261217f57600080fd5b83018035915067ffffffffffffffff82111561219a57600080fd5b6020019150600581901b3603821315611bab57600080fd5b6000808335601e198436030181126121c957600080fd5b83018035915067ffffffffffffffff8211156121e457600080fd5b602001915036819003821315611bab57600080fd5b634e487b7160e01b600052602160045260246000fd5b6010811061221f5761221f6121f9565b9052565b60208101612231828461220f565b92915050565b600181811c9082168061224b57607f821691505b60208210810361226b57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561228357600080fd5b81518015158114611afc57600080fd5b600b811061221f5761221f6121f9565b6001600160e01b03198316815260408101611afc6020830184612293565b602081016122318284612293565b602081526000611afc6020830184611f9e565b8082018082111561223157634e487b7160e01b600052601160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000612340604083018688612303565b8281036020840152612353818587612303565b979650505050505050565b601f8211156123a6576000816000526020600020601f850160051c810160208610156123875750805b601f850160051c820191505b8181101561064d57828155600101612393565b505050565b8181036123b6575050565b6123c08254612237565b67ffffffffffffffff8111156123d8576123d8611db1565b6123ec816123e68454612237565b8461235e565b6000601f82116001811461242057600083156124085750848201545b600019600385901b1c1916600184901b1784556109f0565b600085815260209020601f19841690600086815260209020845b8381101561245a578286015482556001958601959091019060200161243a565b50858310156124785781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b815167ffffffffffffffff8111156124a2576124a2611db1565b6124b0816123e68454612237565b602080601f8311600181146124e557600084156124cd5750858301515b600019600386901b1c1916600185901b17855561064d565b600085815260208120601f198616915b82811015612514578886015182559484019460019091019084016124f5565b508582101561247857939096015160001960f8600387901b161c19169092555050600190811b01905550565b6001600160e01b0319841681526060810161255e602083018561220f565b6001600160a01b0383166040830152949350505050565b604081016125838285612293565b826020830152939250505056fea26469706673582212202de9dafb63c7bfa54b70608d010a2e9f919e7cf2b0a022f0068be5ab5dbca8f964736f6c63430008160033",
  "chainId": 2021,
  "contractAbsolutePath": "Profile.sol",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80639a1a05e0116100b2578063c4d66de811610081578063de981f1b11610066578063de981f1b146102a1578063f4660940146102b4578063f9226b1a146102d457600080fd5b8063c4d66de81461027b578063d1cb88301461028e57600080fd5b80639a1a05e01461022e578063b0abaea614610241578063b261596f14610248578063b5017aef1461026857600080fd5b806350a9fc291161010957806384cb1010116100ee57806384cb1010146101f5578063865e6fd31461020857806398a02c2c1461021b57600080fd5b806350a9fc29146101895780637e18b566146101d257600080fd5b80630840ba721461013b578063183584c1146101505780631f97bdb1146101635780633c3d841014610176575b600080fd5b61014e610149366004611a8d565b6102e7565b005b61014e61015e366004611a8d565b6104b4565b61014e610171366004611a8d565b6104fc565b61014e610184366004611ac6565b610655565b6101b5610197366004611adf565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e56101e0366004611b03565b61073d565b60405190151581526020016101c9565b61014e610203366004611a8d565b610821565b61014e610216366004611b4d565b6109f7565b61014e610229366004611ac6565b610a16565b61014e61023c366004611bb2565b610a2a565b606a6101b5565b61025b610256366004611c7a565b610ad4565b6040516101c99190611cbc565b61014e610276366004611d09565b610bad565b61014e610289366004611adf565b610cca565b61014e61029c366004611e92565b610dd7565b6101b56102af366004611f83565b610e27565b6102c76102c2366004611adf565b610ebb565b6040516101c99190611fe4565b61025b6102e2366004611c7a565b611097565b603354600290610100900460ff16158015610309575060335460ff8083169116105b6103715760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6033805461ffff191660ff831617610100179055610390600984611167565b61039b600a83611167565b60006103a76008610e27565b6001600160a01b031663ba77b06c6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261040c91908101906120a0565b905060005b815181101561046c57600082828151811061042e5761042e612152565b6020908102919091018101516001600160a01b031660008181526002909252604090912080546001600160a01b031916909117905550600101610411565b50506033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152606401610368565b60006105078361120d565b905061051281611261565b61051d600983611340565b60018101546001600160a01b031660006105376008610e27565b6040517fd93fa3060000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063d93fa30690604401600060405180830381600087803b15801561059f57600080fd5b505af11580156105b3573d6000803e3d6000fd5b5050505060006105c3600a610e27565b6040517fa0c302a70000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015287811660248301529192509082169063a0c302a790604401600060405180830381600087803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b5050505061064d848661138c565b505050505050565b603354600390610100900460ff16158015610677575060335460ff8083169116105b6106da5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610368565b6033805461ffff191660ff8316176101001790556106f782600355565b6033805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6000805b60028110156108185760005b83826002811061075f5761075f612152565b60200281019061076f9190612168565b905081101561080f576107f984836002811061078d5761078d612152565b60200281019061079d9190612168565b838181106107ad576107ad612152565b90506020028101906107bf91906121b2565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061143392505050565b610807575060009392505050565b60010161074d565b50600101610741565b50600192915050565b600061082c8361120d565b905061083781611261565b610842600483611340565b600061084e6009610e27565b6040517f9ee3c3f80000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152336024830152858116604483015291925090821690639ee3c3f890606401600060405180830381600087803b1580156108bc57600080fd5b505af11580156108d0573d6000803e3d6000fd5b5050505060006108e06008610e27565b6040517fea80d67d0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529192509082169063ea80d67d90604401600060405180830381600087803b15801561094857600080fd5b505af115801561095c573d6000803e3d6000fd5b50506040517fecd850cc0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301528416925063ecd850cc9150604401600060405180830381600087803b1580156109c457600080fd5b505af11580156109d8573d6000803e3d6000fd5b505050506109e68385611462565b6109f083856114a5565b5050505050565b6109ff6114e8565b610a0881611542565b610a128282611167565b5050565b610a1e6114e8565b610a2781600355565b50565b6000610a358661120d565b9050610a4081611261565b610a7f85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061159192505050565b610a88816115d3565b610a948585858561161d565b61064d8186868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116aa92505050565b60608167ffffffffffffffff811115610aef57610aef611db1565b604051908082528060200260200182016040528015610b18578160200160208202803683370190505b50905060005b82811015610ba657600080858584818110610b3b57610b3b612152565b9050602002016020810190610b509190611adf565b6001600160a01b0390811682526020820192909252604001600020600101548351911690839083908110610b8657610b86612152565b6001600160a01b0390921660209283029190910190910152600101610b1e565b5092915050565b6009610bb881611767565b6001600160a01b038088166000908152602081905260409020805490911615610bf45760405163249b38f960e01b815260040160405180910390fd5b60006040518061010001604052808a6001600160a01b031681526020018a6001600160a01b031681526020018b6001600160a01b03168152602001896001600160a01b0316815260200160006001600160a01b0316815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018290526040805191820181529181529101529050610ca8816117cc565b610cb48787878761161d565b610cbe8282611815565b50505050505050505050565b603354610100900460ff1615808015610cea5750603354600160ff909116105b80610d045750303b158015610d04575060335460ff166001145b610d675760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610368565b6033805460ff191660011790558015610d8a576033805461ff0019166101001790555b610d95600883611167565b8015610a12576033805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610731565b610ddf6114e8565b80516001600160a01b039081166000908152602081905260409020805490911615610e1d5760405163249b38f960e01b815260040160405180910390fd5b610a128183611815565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610e5e57610e5e6121f9565b60ff1681526020810191909152604001600020546001600160a01b0316905080610eb657816040517f812281be0000000000000000000000000000000000000000000000000000000081526004016103689190612223565b919050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c082019290925260e08101919091526001600160a01b0380831660009081526020818152604091829020825161010081018452815485168152600182015485169281019290925260028101548416928201929092526003820154831660608201526004820154909216608083015260058101805460a084019190610f7290612237565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9e90612237565b8015610feb5780601f10610fc057610100808354040283529160200191610feb565b820191906000526020600020905b815481529060010190602001808311610fce57829003601f168201915b505050505081526020016006820154815260200160078201805461100e90612237565b80601f016020809104026020016040519081016040528092919081815260200182805461103a90612237565b80156110875780601f1061105c57610100808354040283529160200191611087565b820191906000526020600020905b81548152906001019060200180831161106a57829003601f168201915b5050505050815250509050919050565b60608167ffffffffffffffff8111156110b2576110b2611db1565b6040519080825280602002602001820160405280156110db578160200160208202803683370190505b50905060005b82811015610ba657600260008585848181106110ff576110ff612152565b90506020020160208101906111149190611adf565b6001600160a01b039081168252602082019290925260400160002054835191169083908390811061114757611147612152565b6001600160a01b03909216602092830291909101909101526001016110e1565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561119d5761119d6121f9565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156111de576111de6121f9565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b565b6001600160a01b0380821660009081526020819052604090208054909116610eb6576040517f682a559600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101546001600160a01b03163314158061131257506112826008610e27565b60018201546040517f04d971ab0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201523360248201529116906304d971ab90604401602060405180830381865afa1580156112ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113109190612271565b155b15610a27576000356001600160e01b0319166004604051620f948f60ea1b81526004016103689291906122a3565b6001600160a01b03811661138257816040517f57ed62e400000000000000000000000000000000000000000000000000000000815260040161036891906122c1565b610a1282826118b4565b600180830180546001600160a01b03908116600090815260026020908152604080832080546001600160a01b03199081169091558854888616808652838620805484169290971691909117909555855416841790945584905291909120805460ff191690921790915560095b83546040516001600160a01b03909116907fe9654874a1d2cdb1459fe91e0442173d77f8e1baa4897e3f5c10e769a1515d0690600090a45050565b60006001600061144884805160209091012090565b815260208101919091526040016000205460ff1692915050565b6002820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff1916909117905560046113f8565b6003820180546001600160a01b0319166001600160a01b0383169081179091556000818152600160208190526040909120805460ff19169091179055600a6113f8565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316331461120b576000356001600160e01b0319166001604051620f948f60ea1b81526004016103689291906122a3565b806001600160a01b03163b600003610a27576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610368565b61159a81611433565b15610a2757806040517f7995d6c800000000000000000000000000000000000000000000000000000000815260040161036891906122cf565b60035481600601546115e591906122e2565b4211610a27576040517f07420f4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61162984848484611914565b61166757838383836040517f97cf1c8d000000000000000000000000000000000000000000000000000000008152600401610368949392919061232c565b7fb737fd977072c109cccc97108f9f8a9017af4bbf4d20938a747f17d8921c50a68484848460405161169c949392919061232c565b60405180910390a150505050565b8160050180546116b990612237565b1590506116d357600782016116d160058401826123ab565b505b600582016116e18282612488565b5042600683015560018060006116fc84805160209091012090565b815260208101919091526040908101600020805460ff191692151592909217909155825490516001600160a01b03909116907fe13225a225fbfeebd9d707546f3d7adee5d72738ac686cc5b97266c49745a56b9061175b9084906122cf565b60405180910390a25050565b61177081610e27565b6001600160a01b0316336001600160a01b031614610a27576000356001600160e01b03191681336040517f8383e63400000000000000000000000000000000000000000000000000000000815260040161036893929190612540565b6117db60098260200151611340565b6117ea60048260400151611340565b6117f9600a8260600151611340565b611808600a82608001516118b4565b610a278160a00151611591565b805182546001600160a01b0319166001600160a01b03909116178255602081015161184190839061138c565b61184f828260400151611462565b61185d8282606001516114a5565b61186b828260800151611a02565b611879828260a001516116aa565b80516040516001600160a01b03909116907fc9da0ae38bd4761b72da1045c9b2618f0cd991dcac01e1f9bbf68474025f074390600090a25050565b6001600160a01b03811660009081526001602052604090205460ff1615610a125781816001600160a01b03166040517fe4166aaa000000000000000000000000000000000000000000000000000000008152600401610368929190612575565b604051600090606a90600190839061193690899089908990899060240161232c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7eae32c200000000000000000000000000000000000000000000000000000000179052805190915061199b611a4f565b602083016020828483895afa6119b057600094505b503d6119bb57600093505b836119f2576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159998505050505050505050565b6004820180546001600160a01b0319166001600160a01b03831690811790915515610a12576001600160a01b03166000908152600160208190526040909120805460ff1916909117905550565b60405180602001604052806001906020820280368337509192915050565b6001600160a01b0381168114610a2757600080fd5b8035610eb681611a6d565b60008060408385031215611aa057600080fd5b8235611aab81611a6d565b91506020830135611abb81611a6d565b809150509250929050565b600060208284031215611ad857600080fd5b5035919050565b600060208284031215611af157600080fd5b8135611afc81611a6d565b9392505050565b600060208284031215611b1557600080fd5b813567ffffffffffffffff811115611b2c57600080fd5b820160408101841015611afc57600080fd5b803560108110610eb657600080fd5b60008060408385031215611b6057600080fd5b611aab83611b3e565b60008083601f840112611b7b57600080fd5b50813567ffffffffffffffff811115611b9357600080fd5b602083019150836020828501011115611bab57600080fd5b9250929050565b600080600080600060608688031215611bca57600080fd5b8535611bd581611a6d565b9450602086013567ffffffffffffffff80821115611bf257600080fd5b611bfe89838a01611b69565b90965094506040880135915080821115611c1757600080fd5b50611c2488828901611b69565b969995985093965092949392505050565b60008083601f840112611c4757600080fd5b50813567ffffffffffffffff811115611c5f57600080fd5b6020830191508360208260051b8501011115611bab57600080fd5b60008060208385031215611c8d57600080fd5b823567ffffffffffffffff811115611ca457600080fd5b611cb085828601611c35565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611cfd5783516001600160a01b031683529284019291840191600101611cd8565b50909695505050505050565b600080600080600080600060a0888a031215611d2457600080fd5b8735611d2f81611a6d565b96506020880135611d3f81611a6d565b95506040880135611d4f81611a6d565b9450606088013567ffffffffffffffff80821115611d6c57600080fd5b611d788b838c01611b69565b909650945060808a0135915080821115611d9157600080fd5b50611d9e8a828b01611b69565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715611deb57611deb611db1565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e1a57611e1a611db1565b604052919050565b600082601f830112611e3357600080fd5b813567ffffffffffffffff811115611e4d57611e4d611db1565b611e60601f8201601f1916602001611df1565b818152846020838601011115611e7557600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ea457600080fd5b813567ffffffffffffffff80821115611ebc57600080fd5b908301906101008286031215611ed157600080fd5b611ed9611dc7565b611ee283611a82565b8152611ef060208401611a82565b6020820152611f0160408401611a82565b6040820152611f1260608401611a82565b6060820152611f2360808401611a82565b608082015260a083013582811115611f3a57600080fd5b611f4687828601611e22565b60a08301525060c083013560c082015260e083013582811115611f6857600080fd5b611f7487828601611e22565b60e08301525095945050505050565b600060208284031215611f9557600080fd5b611afc82611b3e565b6000815180845260005b81811015611fc457602081850181015186830182015201611fa8565b506000602082860101526020601f19601f83011685010191505092915050565b602081526001600160a01b0382511660208201526000602083015161201460408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a08301516101008060c0850152612070610120850183611f9e565b915060c085015160e085015260e0850151601f1985840301828601526120968382611f9e565b9695505050505050565b600060208083850312156120b357600080fd5b825167ffffffffffffffff808211156120cb57600080fd5b818501915085601f8301126120df57600080fd5b8151818111156120f1576120f1611db1565b8060051b9150612102848301611df1565b818152918301840191848101908884111561211c57600080fd5b938501935b83851015612146578451925061213683611a6d565b8282529385019390850190612121565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261217f57600080fd5b83018035915067ffffffffffffffff82111561219a57600080fd5b6020019150600581901b3603821315611bab57600080fd5b6000808335601e198436030181126121c957600080fd5b83018035915067ffffffffffffffff8211156121e457600080fd5b602001915036819003821315611bab57600080fd5b634e487b7160e01b600052602160045260246000fd5b6010811061221f5761221f6121f9565b9052565b60208101612231828461220f565b92915050565b600181811c9082168061224b57607f821691505b60208210810361226b57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561228357600080fd5b81518015158114611afc57600080fd5b600b811061221f5761221f6121f9565b6001600160e01b03198316815260408101611afc6020830184612293565b602081016122318284612293565b602081526000611afc6020830184611f9e565b8082018082111561223157634e487b7160e01b600052601160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000612340604083018688612303565b8281036020840152612353818587612303565b979650505050505050565b601f8211156123a6576000816000526020600020601f850160051c810160208610156123875750805b601f850160051c820191505b8181101561064d57828155600101612393565b505050565b8181036123b6575050565b6123c08254612237565b67ffffffffffffffff8111156123d8576123d8611db1565b6123ec816123e68454612237565b8461235e565b6000601f82116001811461242057600083156124085750848201545b600019600385901b1c1916600184901b1784556109f0565b600085815260209020601f19841690600086815260209020845b8381101561245a578286015482556001958601959091019060200161243a565b50858310156124785781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b815167ffffffffffffffff8111156124a2576124a2611db1565b6124b0816123e68454612237565b602080601f8311600181146124e557600084156124cd5750858301515b600019600386901b1c1916600185901b17855561064d565b600085815260208120601f198616915b82811015612514578886015182559484019460019091019084016124f5565b508582101561247857939096015160001960f8600387901b161c19169092555050600190811b01905550565b6001600160e01b0319841681526060810161255e602083018561220f565b6001600160a01b0383166040830152949350505050565b604081016125838285612293565b826020830152939250505056fea26469706673582212202de9dafb63c7bfa54b70608d010a2e9f919e7cf2b0a022f0068be5ab5dbca8f964736f6c63430008160033",
  "deployer": "0x31762cdd4Aa65CD6f5F09D7a05a56211720A1168",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "addNewProfile((address,address,address,address,address,bytes,uint256,bytes))": {
        "details": "Requirements: - The profile must not be existent before. - Only contract admin can call this method."
      },
      "arePublicKeysRegistered(bytes[][2])": {
        "details": "Cross-contract function to for slash indicator to check the list of public keys in finality slash proof Returns whether all public keys are registered."
      },
      "changePubkey(address,bytes,bytes)": {
        "details": "Requirements: - The profile must be existed. - Only user with candidate admin role can call this method. - New public key must not be duplicated. - The proof of public key possession must be verified successfully. - The public key change cooldown must be ended."
      },
      "execApplyValidatorCandidate(address,address,address,bytes,bytes)": {
        "details": "Cross-contract function to add/update new profile of a validator candidate when they applying for candidate role. Requirements: - Only `stakingContract` can call this method."
      },
      "getConsensus2Id(address)": {
        "details": "Getter to backward query from `consensus` address to `id` address."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getId2Profile(address)": {
        "details": "Getter to query full `profile` from `id` address."
      },
      "getManyConsensus2Id(address[])": {
        "details": "Getter to backward batch query from `consensus` address to `id` address."
      },
      "getManyId2Consensus(address[])": {
        "details": "Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist."
      },
      "precompileVerifyBLSPublicKeyAddress()": {
        "details": "Gets the address of the precompile of validating double sign evidence"
      },
      "requestChangeAdminAddress(address,address)": {
        "details": "Side-effects on other contracts: - Update Staking contract:    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.    + [x] Move staking amount of previous admin to the the new admin. - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical."
      },
      "requestChangeConsensusAddr(address,address)": {
        "details": "Side-effects on other contracts: - Update in Staking contract for Consensus address mapping:   + [x] Keep the same previous pool address. - Update in Validator contract for:   + [x] Consensus Address mapping   + [x] Bridge Address mapping   + [x] Jail mapping   + [x] Pending reward mapping   + [x] Schedule mapping - Update in Slashing contract for:   + [x] Handling slash indicator   + [x] Handling slash fast finality   + [x] Handling slash double sign - Update in Proposal contract for:   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit - Update Trusted Org contracts:   + [x] Remove and delete weight of the old consensus   + [x] Replace and add weight for the new consensus"
      },
      "requestChangeTreasuryAddr(address,address)": {
        "details": "Side-effects on other contracts: - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - Update governance admin:    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.          Cannot impl since we cannot cancel the previous the ballot and          create a new ballot on behalf of the validator contract."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setPubkeyChangeCooldown(uint256)": {
        "details": "Change the cooldown between 2 public key change Requirement:  - Only admin can call this method"
      }
    },
    "events": {
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ProfileAdded(address)": {
        "details": "Event emitted when a profile with `id` is added."
      },
      "ProfileAddressChanged(address,uint8,address)": {
        "details": "Event emitted when a address in a profile is changed."
      },
      "ProfileMigrated(address,address,address)": {
        "details": "Event emitted when the profile is migrated (mostly when REP-4 update)."
      },
      "PubkeyChanged(address,bytes)": {
        "details": "Event emitted when the pubkey of the `id` is changed."
      },
      "PubkeyVerified(bytes,bytes)": {
        "details": "Event emitted when the pubkey is verified successfully."
      }
    },
    "errors": {
      "ErrCallPrecompiled()": [
        {
          "details": "Error of call to precompile fails."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrDuplicatedInfo(uint8,uint256)": [
        {
          "details": "Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key, and with value type of `infoType`."
        }
      ],
      "ErrExistentProfile()": [
        {
          "details": "Error of already existed profile."
        }
      ],
      "ErrIdAndConsensusDiffer()": [
        {
          "details": "Error when create a new profile whose id and consensus are not identical."
        }
      ],
      "ErrNonExistentProfile()": [
        {
          "details": "Error of non existed profile."
        }
      ],
      "ErrPubkeyChangeCooldownNotEnded()": [
        {
          "details": "Error when failed to change public key because cooldown is not ended."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrCallPrecompiled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum RoleAccess\",\"name\":\"infoType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ErrDuplicatedInfo\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"ErrDuplicatedPubkey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExistentProfile\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrIdAndConsensusDiffer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"ErrInvalidProofOfPossession\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNonExistentProfile\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrPubkeyChangeCooldownNotEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum RoleAccess\",\"name\":\"infoType\",\"type\":\"uint8\"}],\"name\":\"ErrZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroPubkey\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"ProfileAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum RoleAccess\",\"name\":\"addressType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ProfileAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"ProfileMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"PubkeyVerified\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__reservedGovernor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"pubkeyLastChange\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oldPubkey\",\"type\":\"bytes\"}],\"internalType\":\"struct IProfile.CandidateProfile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"name\":\"addNewProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[][2]\",\"name\":\"listOfPublicKey\",\"type\":\"bytes[][2]\"}],\"name\":\"arePublicKeysRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"changePubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"execApplyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getConsensus2Id\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"getId2Profile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__reservedGovernor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"pubkeyLastChange\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oldPubkey\",\"type\":\"bytes\"}],\"internalType\":\"struct IProfile.CandidateProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"name\":\"getManyConsensus2Id\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"}],\"name\":\"getManyId2Consensus\",\"outputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedOrgContract\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileVerifyBLSPublicKeyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdminAddr\",\"type\":\"address\"}],\"name\":\"requestChangeAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"newConsensusAddr\",\"type\":\"address\"}],\"name\":\"requestChangeConsensusAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestChangeTreasuryAddr\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"setPubkeyChangeCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrCallPrecompiled()\":[{\"details\":\"Error of call to precompile fails.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrDuplicatedInfo(uint8,uint256)\":[{\"details\":\"Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key, and with value type of `infoType`.\"}],\"ErrExistentProfile()\":[{\"details\":\"Error of already existed profile.\"}],\"ErrIdAndConsensusDiffer()\":[{\"details\":\"Error when create a new profile whose id and consensus are not identical.\"}],\"ErrNonExistentProfile()\":[{\"details\":\"Error of non existed profile.\"}],\"ErrPubkeyChangeCooldownNotEnded()\":[{\"details\":\"Error when failed to change public key because cooldown is not ended.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ProfileAdded(address)\":{\"details\":\"Event emitted when a profile with `id` is added.\"},\"ProfileAddressChanged(address,uint8,address)\":{\"details\":\"Event emitted when a address in a profile is changed.\"},\"ProfileMigrated(address,address,address)\":{\"details\":\"Event emitted when the profile is migrated (mostly when REP-4 update).\"},\"PubkeyChanged(address,bytes)\":{\"details\":\"Event emitted when the pubkey of the `id` is changed.\"},\"PubkeyVerified(bytes,bytes)\":{\"details\":\"Event emitted when the pubkey is verified successfully.\"}},\"kind\":\"dev\",\"methods\":{\"addNewProfile((address,address,address,address,address,bytes,uint256,bytes))\":{\"details\":\"Requirements: - The profile must not be existent before. - Only contract admin can call this method.\"},\"arePublicKeysRegistered(bytes[][2])\":{\"details\":\"Cross-contract function to for slash indicator to check the list of public keys in finality slash proof Returns whether all public keys are registered.\"},\"changePubkey(address,bytes,bytes)\":{\"details\":\"Requirements: - The profile must be existed. - Only user with candidate admin role can call this method. - New public key must not be duplicated. - The proof of public key possession must be verified successfully. - The public key change cooldown must be ended.\"},\"execApplyValidatorCandidate(address,address,address,bytes,bytes)\":{\"details\":\"Cross-contract function to add/update new profile of a validator candidate when they applying for candidate role. Requirements: - Only `stakingContract` can call this method.\"},\"getConsensus2Id(address)\":{\"details\":\"Getter to backward query from `consensus` address to `id` address.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getId2Profile(address)\":{\"details\":\"Getter to query full `profile` from `id` address.\"},\"getManyConsensus2Id(address[])\":{\"details\":\"Getter to backward batch query from `consensus` address to `id` address.\"},\"getManyId2Consensus(address[])\":{\"details\":\"Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\"},\"precompileVerifyBLSPublicKeyAddress()\":{\"details\":\"Gets the address of the precompile of validating double sign evidence\"},\"requestChangeAdminAddress(address,address)\":{\"details\":\"Side-effects on other contracts: - Update Staking contract:    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.    + [x] Move staking amount of previous admin to the the new admin. - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical.\"},\"requestChangeConsensusAddr(address,address)\":{\"details\":\"Side-effects on other contracts: - Update in Staking contract for Consensus address mapping:   + [x] Keep the same previous pool address. - Update in Validator contract for:   + [x] Consensus Address mapping   + [x] Bridge Address mapping   + [x] Jail mapping   + [x] Pending reward mapping   + [x] Schedule mapping - Update in Slashing contract for:   + [x] Handling slash indicator   + [x] Handling slash fast finality   + [x] Handling slash double sign - Update in Proposal contract for:   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit - Update Trusted Org contracts:   + [x] Remove and delete weight of the old consensus   + [x] Replace and add weight for the new consensus\"},\"requestChangeTreasuryAddr(address,address)\":{\"details\":\"Side-effects on other contracts: - Update Validator contract:    + [x] Update (id => ValidatorCandidate) mapping - Update governance admin:    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.          Cannot impl since we cannot cancel the previous the ballot and          create a new ballot on behalf of the validator contract.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setPubkeyChangeCooldown(uint256)\":{\"details\":\"Change the cooldown between 2 public key change Requirement:  - Only admin can call this method\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewProfile((address,address,address,address,address,bytes,uint256,bytes))\":{\"notice\":\"Add a new profile.\"},\"changePubkey(address,bytes,bytes)\":{\"notice\":\"The candidate admin changes the public key.\"},\"requestChangeTreasuryAddr(address,address)\":{\"notice\":\"This method is not supported. Change treasury also requires changing the admin address. Using the {requestChangeAdminAddress} method instead\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/profile/Profile.sol\":\"Profile\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Pool admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Last public key change timestamp.\\n    uint256 pubkeyLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change public key because cooldown is not ended.\\n  error ErrPubkeyChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Add a new profile.\\n   *\\n   * @dev Requirements:\\n   * - The profile must not be existent before.\\n   * - Only contract admin can call this method.\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external;\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setPubkeyChangeCooldown(uint256 cooldown) external;\\n}\\n\",\"keccak256\":\"0x9bb73040b679f2c318bf995f81950004b6e306166080325eb0a177fc85d4603f\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x0b2a44131128f965e20cbea424987817cb504502e5d83d6523ae45ffeb5e53fe\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    /**\\n     * @dev Address of the pool.\\n     * @custom non-volatile-storage Permanently set to the first consensus address of the candidate.\\n     */\\n    address pid;\\n\\n    /**\\n     * @dev The address of the pool admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with the admin in `Profile-CandidateProfile`.\\n     */\\n    address __shadowedPoolAdmin;\\n\\n    /// @dev Self-staking amount\\n    uint256 stakingAmount;\\n\\n    /// @dev Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n\\n    /// @dev Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n\\n    /// @dev Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n\\n    /// @dev Mapping that indicate an admin was either current or previous admin of this pool\\n    mapping(address => bool) wasAdmin;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(TConsensus consensusAddr, address poolId);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `admin` is currently active.\\n   */\\n  function isAdminOfActivePool(address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address admin) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool details.\\n   */\\n  function getPoolDetail(\\n    TConsensus consensusAddr\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  function getPoolDetailById(\\n    address poolId\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external;\\n}\\n\",\"keccak256\":\"0x074b913dc7edd77f6826aeaf0b57c51637b778865205b2d0f497ca0c272853bc\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the commission rate range is updated.\\n  event CommissionRateRangeUpdated(uint256 minRate, uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the holder of the staking amount in the `poolId` is changed.\\n  event StakeholderChanged(address indexed poolId, address oldAdmin , address newAdmin, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed poolId, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] poolIds);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed poolId,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed poolId,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of cannot transfer RON to specified target.\\n  error ErrCannotInitTransferRON(address addr, string extraInfo);\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the commission rate range that the candidate can set.\\n   */\\n  function getCommissionRateRange() external view returns (uint256 minRange, uint256 maxRange);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the commission rate range that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `CommissionRateRangeUpdated` event.\\n   *\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata pools, uint256 period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `consensusAddr` for `amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x676f728608e5ef14ebf4fea88ca5ef225e4c0cc19871136fe71ab64479bf7a76\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed poolId, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(TConsensus consensusAddrSrc, TConsensus consensusAddrDst, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(\\n    address user,\\n    TConsensus[] calldata consensusAddrList\\n  ) external view returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(TConsensus[] calldata consensusAddrList) external returns (uint256 amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(\\n    TConsensus[] calldata consensusAddrList,\\n    TConsensus consensusAddrDst\\n  ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xe8a650a7348d45b2614ece66083f140801e8375bb8b733addf02209073991ef3\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolId, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolId, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolId, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolIds, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolIds, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolIds);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(\\n    TConsensus[] calldata consensusAddrs,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  function getManyStakingAmountsById(\\n    address[] calldata poolIds,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools corresponding to `consensusAddrs`.\\n   */\\n  function getManyStakingTotals(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `poolIds`.\\n   */\\n  function getManyStakingTotalsById(\\n    address[] calldata poolIds\\n  ) external view returns (uint256[] memory stakingAmounts_);\\n}\\n\",\"keccak256\":\"0xa1b17b962f24571a7125c33420ead1fba5be4c03caabb47916d4ca597fa91482\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./IStakingCallback.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking, IStakingCallback {\\n  /// @dev Event emitted when the `wasAdmin` is finished to migrate.\\n  event MigrateWasAdminFinished();\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(address[] calldata poolIds, uint256[] calldata rewards, uint256 period) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address poolId, uint256 amount) external returns (uint256 actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xcb47179ecec12817f44b3f43e0477260d3453b6608cddf330554f13b63a6d8db\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddress(address poolId, address currAdminAddr, address newAdminAddr) external;\\n}\\n\",\"keccak256\":\"0x555b90214ae8cb66c72a40f343a4933ea87b1e82bb0933c81ae92401b20c5f43\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x7943726a9ecd82a625d3f86c5f7ddbe02427368478b6c98d90fe93dc2f399ba4\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeAdminAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddress(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddress(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeTreasuryAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddress(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xfbe83dc9a4df46f4eb34b6d68c73041de663f188671264c7fe5315b8a0813511\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed cid,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] cids,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xabf7541c6acfef6db495585f74bc9be88a65c20b09850197bc06ab452f07d172\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0xaa2df8b56a83730a3a1b3876708570d70843802737ff7c776a5725c71d7ea8f7\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0xf4f96a624e7c77bbce044c67e3f4b406e65871debc19e7bfab663c1fcfcbc7b0\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x27afa712094804b997f55e8f8d320760e07d7260ab33aeb8fb61c39849f09bf3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xa6298427da3b2055724dc3a6457e653629ce760ef39abfb15dfdfdd5a809a261\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PCUVerifyBLSPublicKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUVerifyBLSPublicKey is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of validating double sign evidence\\n  function precompileVerifyBLSPublicKeyAddress() public view virtual returns (address) {\\n    return address(0x6a);\\n  }\\n\\n  /**\\n   * @dev Validates the proof of possession of BLS public key\\n   *\\n   * Note: The verify process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcVerifyBLSPublicKey(\\n    bytes calldata publicKey,\\n    bytes calldata proofOfPossession\\n  ) internal view virtual returns (bool validPublicKey) {\\n    address smc = precompileVerifyBLSPublicKeyAddress();\\n    bool success = true;\\n\\n    bytes memory payload = abi.encodeWithSignature(\\n      \\\"validateProofOfPossession(bytes,bytes)\\\",\\n      publicKey,\\n      proofOfPossession\\n    );\\n    uint payloadLength = payload.length;\\n    uint[1] memory output;\\n\\n    assembly {\\n      let payloadStart := add(payload, 0x20)\\n      if iszero(staticcall(gas(), smc, payloadStart, payloadLength, output, 0x20)) {\\n        success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        success := 0\\n      }\\n    }\\n\\n    if (!success) revert ErrCallPrecompiled();\\n    return (output[0] != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x531462d5448ad4cc818da59626c383a3cadd52331a8228bf4ce3fa62c0cbffd2\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompiledUsage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PrecompiledUsage {\\n  /// @dev Error of call to precompile fails.\\n  error ErrCallPrecompiled();\\n}\\n\",\"keccak256\":\"0x76facc3f3a8dd573c826bbbfedaa5cd8ef30963fbabd8c163c0c72b6efea5551\",\"license\":\"MIT\"},\"contracts/ronin/profile/Profile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/validator/ICandidateManager.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"./ProfileXComponents.sol\\\";\\nimport { ErrUnauthorized, RoleAccess } from \\\"../../utils/CommonErrors.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\npragma solidity ^0.8.9;\\n\\ncontract Profile is IProfile, ProfileXComponents, Initializable {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address validatorContract) external initializer {\\n    _setContract(ContractType.VALIDATOR, validatorContract);\\n  }\\n\\n  function initializeV2(address stakingContract, address trustedOrgContract) external reinitializer(2) {\\n    _setContract(ContractType.STAKING, stakingContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, trustedOrgContract);\\n\\n    TConsensus[] memory validatorCandidates = IRoninValidatorSet(getContract(ContractType.VALIDATOR))\\n      .getValidatorCandidates();\\n\\n    for (uint256 i; i < validatorCandidates.length; ++i) {\\n      TConsensus consensus = validatorCandidates[i];\\n      address id = TConsensus.unwrap(consensus);\\n      _consensus2Id[consensus] = id;\\n    }\\n\\n    __migrationRenouncedCandidates();\\n  }\\n\\n  function initializeV3(uint256 cooldown) external reinitializer(3) {\\n    _setPubkeyChangeCooldown(cooldown);\\n  }\\n\\n  /**\\n   * @dev Add addresses of renounced candidates into registry. Only called during {initializeV2}.\\n   */\\n  function __migrationRenouncedCandidates() internal virtual {}\\n\\n  /**\\n   * @dev This method is used in REP-4 migration, which creates profile for all community-validators and renounced validators.\\n   * This method can be removed after REP-4 goes live.\\n   *\\n   * DO NOT use for any other purpose.\\n   */\\n  function __migrate(address id, address candidateAdmin, address treasury) internal {\\n    CandidateProfile storage _profile = _id2Profile[id];\\n    _profile.id = id;\\n\\n    _setConsensus(_profile, TConsensus.wrap(id));\\n    _setAdmin(_profile, candidateAdmin);\\n    _setTreasury(_profile, payable(treasury));\\n    emit ProfileMigrated(id, candidateAdmin, treasury);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getId2Profile(address id) external view returns (CandidateProfile memory) {\\n    return _id2Profile[id];\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList) {\\n    consensusList = new TConsensus[](idList.length);\\n    unchecked {\\n      for (uint i; i < idList.length; ++i) {\\n        consensusList[i] = _id2Profile[idList[i]].consensus;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id) {\\n    id = _consensus2Id[consensus];\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function getManyConsensus2Id(TConsensus[] calldata consensusList) external view returns (address[] memory idList) {\\n    idList = new address[](consensusList.length);\\n    unchecked {\\n      for (uint i; i < consensusList.length; ++i) {\\n        idList[i] = _consensus2Id[consensusList[i]];\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external onlyAdmin {\\n    CandidateProfile storage _profile = _id2Profile[profile.id];\\n    if (_profile.id != address(0)) revert ErrExistentProfile();\\n    _addNewProfile(_profile, profile);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   *\\n   * @dev Side-effects on other contracts:\\n   * - Update Staking contract:\\n   *    + [x] Update (id => PoolDetail) mapping in {BaseStaking.sol}.\\n   *    + [x] Update `_adminOfActivePoolMapping` in {BaseStaking.sol}.\\n   *    + [x] Move staking amount of previous admin to the the new admin.\\n   * - Update Validator contract:\\n   *    + [x] Update (id => ValidatorCandidate) mapping\\n   *\\n   * - See other side-effects for treasury in {requestChangeTreasuryAddr}, since treasury and admin must be identical.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external {\\n    CandidateProfile storage _profile = _getId2ProfileHelper(id);\\n    _requireCandidateAdmin(_profile);\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CANDIDATE_ADMIN, newAdminAddr);\\n\\n    IStaking stakingContract = IStaking(getContract(ContractType.STAKING));\\n    stakingContract.execChangeAdminAddress({ poolId: id, currAdminAddr: msg.sender, newAdminAddr: newAdminAddr });\\n\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    validatorContract.execChangeAdminAddress(id, newAdminAddr);\\n    validatorContract.execChangeTreasuryAddress(id, payable(newAdminAddr));\\n\\n    _setAdmin(_profile, newAdminAddr);\\n    _setTreasury(_profile, payable(newAdminAddr));\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   *\\n   * @dev Side-effects on other contracts:\\n   * - Update in Staking contract for Consensus address mapping:\\n   *   + [x] Keep the same previous pool address.\\n   * - Update in Validator contract for:\\n   *   + [x] Consensus Address mapping\\n   *   + [x] Bridge Address mapping\\n   *   + [x] Jail mapping\\n   *   + [x] Pending reward mapping\\n   *   + [x] Schedule mapping\\n   * - Update in Slashing contract for:\\n   *   + [x] Handling slash indicator\\n   *   + [x] Handling slash fast finality\\n   *   + [x] Handling slash double sign\\n   * - Update in Proposal contract for:\\n   *   + [-] Preserve the consensus address and recipient target of locked amount of emergency exit\\n   * - Update Trusted Org contracts:\\n   *   + [x] Remove and delete weight of the old consensus\\n   *   + [x] Replace and add weight for the new consensus\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external {\\n    CandidateProfile storage _profile = _getId2ProfileHelper(id);\\n    _requireCandidateAdmin(_profile);\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CONSENSUS, TConsensus.unwrap(newConsensusAddr));\\n\\n    TConsensus oldConsensusAddr = _profile.consensus;\\n\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    validatorContract.execChangeConsensusAddress(id, newConsensusAddr);\\n\\n    IRoninTrustedOrganization trustedOrgContract = IRoninTrustedOrganization(\\n      getContract(ContractType.RONIN_TRUSTED_ORGANIZATION)\\n    );\\n    trustedOrgContract.execChangeConsensusAddressForTrustedOrg({\\n      oldConsensusAddr: oldConsensusAddr,\\n      newConsensusAddr: newConsensusAddr\\n    });\\n\\n    _setConsensus(_profile, newConsensusAddr);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   *\\n   * @notice This method is not supported. Change treasury also requires changing the admin address.\\n   * Using the {requestChangeAdminAddress} method instead\\n   *\\n   * @dev Side-effects on other contracts:\\n   * - Update Validator contract:\\n   *    + [x] Update (id => ValidatorCandidate) mapping\\n   * - Update governance admin:\\n   *    + [-] Update recipient in the EmergencyExitBallot to the newTreasury.\\n   *          Cannot impl since we cannot cancel the previous the ballot and\\n   *          create a new ballot on behalf of the validator contract.\\n   */\\n  function requestChangeTreasuryAddr(address /*id */, address payable /* newTreasury */) external pure {\\n    revert(\\\"Not supported\\\");\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function changePubkey(address id, bytes calldata pubkey, bytes calldata proofOfPossession) external {\\n    CandidateProfile storage _profile = _getId2ProfileHelper(id);\\n    _requireCandidateAdmin(_profile);\\n    _requireNonDuplicatedPubkey(pubkey);\\n    _checkPubkeyChangeCooldown(_profile);\\n    _verifyPubkey(pubkey, proofOfPossession);\\n    _setPubkey(_profile, pubkey);\\n  }\\n\\n  function _requireCandidateAdmin(CandidateProfile storage sProfile) internal view {\\n    if (\\n      msg.sender != sProfile.admin ||\\n      !IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isCandidateAdmin(sProfile.consensus, msg.sender)\\n    ) revert ErrUnauthorized(msg.sig, RoleAccess.CANDIDATE_ADMIN);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function setPubkeyChangeCooldown(uint256 cooldown) external onlyAdmin {\\n    _setPubkeyChangeCooldown(cooldown);\\n  }\\n}\\n\",\"keccak256\":\"0xf9190159a43e6cb615a96200b0b45e741fb426418267b4d2034fb10772e2ea57\",\"license\":\"MIT\"},\"contracts/ronin/profile/ProfileHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../udvts/Types.sol\\\";\\nimport \\\"../../utils/RoleAccess.sol\\\";\\nimport { ProfileStorage } from \\\"./ProfileStorage.sol\\\";\\nimport { PCUVerifyBLSPublicKey } from \\\"../../precompile-usages/PCUVerifyBLSPublicKey.sol\\\";\\n\\nabstract contract ProfileHandler is PCUVerifyBLSPublicKey, ProfileStorage {\\n  /**\\n   * @dev Checks each element in the new profile and reverts if there is duplication with any existing profile.\\n   */\\n  function _requireNonDuplicatedInRegistry(CandidateProfile memory profile) internal view {\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CONSENSUS, TConsensus.unwrap(profile.consensus));\\n    _requireNonZeroAndNonDuplicated(RoleAccess.CANDIDATE_ADMIN, profile.admin);\\n    _requireNonZeroAndNonDuplicated(RoleAccess.TREASURY, profile.treasury);\\n    _requireNonDuplicated(RoleAccess.TREASURY, profile.__reservedGovernor);\\n    _requireNonDuplicatedPubkey(profile.pubkey);\\n  }\\n\\n  function _requireNonZeroAndNonDuplicated(RoleAccess addressType, address addr) internal view {\\n    if (addr == address(0)) revert ErrZeroAddress(addressType);\\n    _requireNonDuplicated(addressType, addr);\\n  }\\n\\n  function _requireNonDuplicated(RoleAccess addressType, address addr) internal view {\\n    if (_isRegisteredAddr(addr)) {\\n      revert ErrDuplicatedInfo(addressType, uint256(uint160(addr)));\\n    }\\n  }\\n\\n  function _isRegisteredAddr(address addr) internal view returns (bool) {\\n    return _registry[uint256(uint160(addr))];\\n  }\\n\\n  function _requireNonDuplicatedPubkey(bytes memory pubkey) internal view {\\n    if (_isRegisteredPubkey(pubkey)) {\\n      revert ErrDuplicatedPubkey(pubkey);\\n    }\\n  }\\n\\n  function _isRegisteredPubkey(bytes memory pubkey) internal view returns (bool) {\\n    return _registry[_hashPubkey(pubkey)];\\n  }\\n\\n  function _verifyPubkey(bytes calldata publicKey, bytes calldata proofOfPossession) internal {\\n    if (!_pcVerifyBLSPublicKey(publicKey, proofOfPossession)) {\\n      revert ErrInvalidProofOfPossession(publicKey, proofOfPossession);\\n    } else {\\n      emit PubkeyVerified(publicKey, proofOfPossession);\\n    }\\n  }\\n\\n  function _checkPubkeyChangeCooldown(CandidateProfile storage profile) internal view {\\n    if (block.timestamp <= profile.pubkeyLastChange + pubkeyChangeCooldown) {\\n      revert ErrPubkeyChangeCooldownNotEnded();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x34cda031dbcd6a0852f78273eff2e92b067cb611e6761ed62af5f17a159bec77\",\"license\":\"MIT\"},\"contracts/ronin/profile/ProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../udvts/Types.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../utils/RoleAccess.sol\\\";\\nimport { IProfile } from \\\"../../interfaces/IProfile.sol\\\";\\n\\nabstract contract ProfileStorage is IProfile, HasContracts {\\n  /// @dev Mapping from id address => candidate profile.\\n  mapping(address => CandidateProfile) internal _id2Profile;\\n\\n  /**\\n   * @dev Mapping from any address or keccak256(pubkey) => whether it is already registered.\\n   * This registry can only be toggled to `true` and NOT vice versa. All registered values\\n   * cannot be reused.\\n   */\\n  mapping(uint256 => bool) internal _registry;\\n\\n  /// @dev Mapping from consensus address => id address.\\n  mapping(TConsensus => address) internal _consensus2Id;\\n\\n  /// @dev The cooldown time the change public key.\\n  uint256 pubkeyChangeCooldown;\\n\\n  /// @dev Upgradeable gap.\\n  bytes32[47] __gap;\\n\\n  /**\\n   * @dev Add a profile from memory to storage.\\n   */\\n  function _addNewProfile(CandidateProfile storage _profile, CandidateProfile memory newProfile) internal {\\n    _profile.id = newProfile.id;\\n\\n    _setConsensus(_profile, newProfile.consensus);\\n    _setAdmin(_profile, newProfile.admin);\\n    _setTreasury(_profile, newProfile.treasury);\\n    _setGovernor(_profile, newProfile.__reservedGovernor);\\n    _setPubkey(_profile, newProfile.pubkey);\\n\\n    emit ProfileAdded(newProfile.id);\\n  }\\n\\n  function _setConsensus(CandidateProfile storage _profile, TConsensus consensus) internal {\\n    delete _consensus2Id[_profile.consensus];\\n    _consensus2Id[consensus] = _profile.id;\\n\\n    _profile.consensus = consensus;\\n    _registry[uint256(uint160(TConsensus.unwrap(consensus)))] = true;\\n\\n    emit ProfileAddressChanged(_profile.id, RoleAccess.CONSENSUS, TConsensus.unwrap(consensus));\\n  }\\n\\n  function _setAdmin(CandidateProfile storage _profile, address admin) internal {\\n    _profile.admin = admin;\\n    _registry[uint256(uint160(admin))] = true;\\n\\n    emit ProfileAddressChanged(_profile.id, RoleAccess.CANDIDATE_ADMIN, admin);\\n  }\\n\\n  function _setTreasury(CandidateProfile storage _profile, address payable treasury) internal {\\n    _profile.treasury = treasury;\\n    _registry[uint256(uint160(address(treasury)))] = true;\\n\\n    emit ProfileAddressChanged(_profile.id, RoleAccess.TREASURY, treasury);\\n  }\\n\\n  /**\\n   * @dev Allow to registry a profile without governor address since not all validators are governing validators.\\n   */\\n  function _setGovernor(CandidateProfile storage _profile, address governor) internal {\\n    _profile.__reservedGovernor = governor;\\n    if (governor != address(0)) {\\n      _registry[uint256(uint160(governor))] = true;\\n    }\\n  }\\n\\n  function _setPubkey(CandidateProfile storage _profile, bytes memory pubkey) internal {\\n    if (_profile.pubkey.length != 0) {\\n      _profile.oldPubkey = _profile.pubkey;\\n    }\\n\\n    _profile.pubkey = pubkey;\\n    _profile.pubkeyLastChange = block.timestamp;\\n    _registry[_hashPubkey(pubkey)] = true;\\n\\n    emit PubkeyChanged(_profile.id, pubkey);\\n  }\\n\\n  /**\\n   * @dev Get an existed profile struct from `id`. Revert if the profile does not exists.\\n   */\\n  function _getId2ProfileHelper(address id) internal view returns (CandidateProfile storage _profile) {\\n    _profile = _id2Profile[id];\\n    if (_profile.id == address(0)) revert ErrNonExistentProfile();\\n  }\\n\\n  /**\\n   * @dev Returns hash of a public key.\\n   */\\n  function _hashPubkey(bytes memory pubkey) internal pure returns (uint256) {\\n    return uint256(keccak256(pubkey));\\n  }\\n\\n  function _setPubkeyChangeCooldown(uint256 cooldown) internal {\\n    pubkeyChangeCooldown = cooldown;\\n  }\\n}\\n\",\"keccak256\":\"0x9a36cece7f1495f70095d390078b28e400e7af8adf8cf9b96da18aa36e72108a\",\"license\":\"MIT\"},\"contracts/ronin/profile/ProfileXComponents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\nimport \\\"./ProfileHandler.sol\\\";\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract ProfileXComponents is IProfile, ProfileHandler {\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external override onlyContract(ContractType.STAKING) {\\n    // Check existent profile\\n    CandidateProfile storage _profile = _id2Profile[id];\\n    if (_profile.id != address(0)) revert ErrExistentProfile();\\n\\n    // Validate the info and add the profile\\n    CandidateProfile memory profile = CandidateProfile({\\n      id: id,\\n      consensus: TConsensus.wrap(id),\\n      admin: admin,\\n      treasury: payable(treasury),\\n      __reservedGovernor: address(0),\\n      pubkey: pubkey,\\n      pubkeyLastChange: 0,\\n      oldPubkey: \\\"\\\"\\n    });\\n    _requireNonDuplicatedInRegistry(profile);\\n    _verifyPubkey(pubkey, proofOfPossession);\\n    _addNewProfile(_profile, profile);\\n  }\\n\\n  /**\\n   * @inheritdoc IProfile\\n   */\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool) {\\n    for (uint256 i; i < listOfPublicKey.length; ) {\\n      for (uint256 j; j < listOfPublicKey[i].length; ) {\\n        if (!_isRegisteredPubkey(listOfPublicKey[i][j])) {\\n          return false;\\n        }\\n\\n        unchecked {\\n          j++;\\n        }\\n      }\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x57fd7432144a0057f52e2d08864cb7d22ce0c32c5cd02ceb246a5135ee9c067d\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 30,
  "numDeployments": 13,
  "storageLayout": {
    "storage": [
      {
        "astId": 24288,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_id2Profile",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(CandidateProfile)6678_storage)"
      },
      {
        "astId": 24293,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_registry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 24299,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_consensus2Id",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_userDefinedValueType(TConsensus)35219,t_address)"
      },
      {
        "astId": 24302,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "pubkeyChangeCooldown",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 24307,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)47_storage"
      },
      {
        "astId": 147321,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_initialized",
        "offset": 0,
        "slot": "51",
        "type": "t_uint8"
      },
      {
        "astId": 147324,
        "contract": "contracts/ronin/profile/Profile.sol:Profile",
        "label": "_initializing",
        "offset": 1,
        "slot": "51",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)47_storage": {
        "encoding": "inplace",
        "label": "bytes32[47]",
        "numberOfBytes": "1504",
        "base": "t_bytes32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(CandidateProfile)6678_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IProfile.CandidateProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(CandidateProfile)6678_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_userDefinedValueType(TConsensus)35219,t_address)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TConsensus)35219",
        "label": "mapping(TConsensus => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(CandidateProfile)6678_storage": {
        "encoding": "inplace",
        "label": "struct IProfile.CandidateProfile",
        "numberOfBytes": "256",
        "members": [
          {
            "astId": 6655,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6659,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "consensus",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(TConsensus)35219"
          },
          {
            "astId": 6662,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "admin",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6665,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "treasury",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 6668,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "__reservedGovernor",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 6671,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "pubkey",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          },
          {
            "astId": 6674,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "pubkeyLastChange",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6677,
            "contract": "contracts/ronin/profile/Profile.sol:Profile",
            "label": "oldPubkey",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes_storage"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(TConsensus)35219": {
        "encoding": "inplace",
        "label": "TConsensus",
        "numberOfBytes": "20"
      }
    }
  },
  "timestamp": 1708941642,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "addNewProfile((address,address,address,address,address,bytes,uint256,bytes))": {
        "notice": "Add a new profile."
      },
      "changePubkey(address,bytes,bytes)": {
        "notice": "The candidate admin changes the public key."
      },
      "requestChangeTreasuryAddr(address,address)": {
        "notice": "This method is not supported. Change treasury also requires changing the admin address. Using the {requestChangeAdminAddress} method instead"
      }
    }
  }
}