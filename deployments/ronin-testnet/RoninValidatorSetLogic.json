{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "fallback",
      "stateMutability": "payable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADDITION_GAS",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "PERIOD_DURATION",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkJailed",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkJailedAtBlock",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "blockNum",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyJailed",
      "inputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyJailedById",
      "inputs": [
        {
          "name": "candidateIds",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMiningRewardDeprecated",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMiningRewardDeprecatedAtPeriod",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "currentPeriod",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "currentPeriodStartAtBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "emergencyExitLockedAmount",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "emergencyExpiryDuration",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "epochEndingAt",
      "inputs": [
        {
          "name": "_block",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "epochOf",
      "inputs": [
        {
          "name": "_block",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "execApplyValidatorCandidate",
      "inputs": [
        {
          "name": "candidateAdmin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "treasuryAddr",
          "type": "address",
          "internalType": "address payable"
        },
        {
          "name": "commissionRate",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execBailOut",
      "inputs": [
        {
          "name": "validatorId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execChangeAdminAddress",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newAdmin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execChangeConsensusAddress",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newConsensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execChangeTreasuryAddress",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newTreasury",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execReleaseLockedFundForEmergencyExitRequest",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execRequestEmergencyExit",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "secLeftToRevoke",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execRequestRenounceCandidate",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "secsLeft",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execRequestUpdateCommissionRate",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "effectiveDaysOnwards",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "commissionRate",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execSlash",
      "inputs": [
        {
          "name": "validatorId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newJailedUntil",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "slashAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cannotBailout",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getBlockProducerIds",
      "inputs": [],
      "outputs": [
        {
          "name": "cids",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getBlockProducers",
      "inputs": [],
      "outputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCandidateInfo",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ICandidateManager.ValidatorCandidate",
          "components": [
            {
              "name": "__shadowedAdmin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "__shadowedConsensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "__shadowedTreasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "____deprecatedBridgeOperatorAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "commissionRate",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "revokingTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "topupDeadline",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCandidateInfos",
      "inputs": [],
      "outputs": [
        {
          "name": "list",
          "type": "tuple[]",
          "internalType": "struct ICandidateManager.ValidatorCandidate[]",
          "components": [
            {
              "name": "__shadowedAdmin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "__shadowedConsensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "__shadowedTreasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "____deprecatedBridgeOperatorAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "commissionRate",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "revokingTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "topupDeadline",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCommissionChangeSchedule",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ICandidateManager.CommissionSchedule",
          "components": [
            {
              "name": "effectiveTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "commissionRate",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getEmergencyExitInfo",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "_info",
          "type": "tuple",
          "internalType": "struct ICommonInfo.EmergencyExitInfo",
          "components": [
            {
              "name": "lockedAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "recyclingAt",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getJailedTimeLeft",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "isJailed_",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "blockLeft_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "epochLeft_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getJailedTimeLeftAtBlock",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "_blockNum",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "isJailed_",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "blockLeft_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "epochLeft_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getLastUpdatedBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getValidatorCandidateIds",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getValidatorCandidates",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getValidatorIds",
      "inputs": [],
      "outputs": [
        {
          "name": "cids",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getValidators",
      "inputs": [],
      "outputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "__slashIndicatorContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__stakingContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__stakingVestingContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__maintenanceContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__roninTrustedOrganizationContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__maxValidatorNumber",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__maxValidatorCandidate",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__maxPrioritizedValidatorNumber",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__minEffectiveDaysOnwards",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__numberOfBlocksInEpoch",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__emergencyExitConfigs",
          "type": "uint256[2]",
          "internalType": "uint256[2]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "fastFinalityTrackingContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV4",
      "inputs": [
        {
          "name": "profileContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "isBlockProducer",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isCandidateAdmin",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPeriodEnding",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isValidatorCandidate",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxPrioritizedValidatorNumber",
      "inputs": [],
      "outputs": [
        {
          "name": "_maximumPrioritizedValidatorNumber",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxValidatorCandidate",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxValidatorNumber",
      "inputs": [],
      "outputs": [
        {
          "name": "_maximumValidatorNumber",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "minEffectiveDaysOnward",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "numberOfBlocksInEpoch",
      "inputs": [],
      "outputs": [
        {
          "name": "_numberOfBlocks",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "precompilePickValidatorSetAddress",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "precompileSortValidatorsAddress",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setEmergencyExitLockedAmount",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setEmergencyExpiryDuration",
      "inputs": [
        {
          "name": "duration",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMaxPrioritizedValidatorNumber",
      "inputs": [
        {
          "name": "_number",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMaxValidatorCandidate",
      "inputs": [
        {
          "name": "_number",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMaxValidatorNumber",
      "inputs": [
        {
          "name": "_max",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMinEffectiveDaysOnwards",
      "inputs": [
        {
          "name": "_numOfDays",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "submitBlockReward",
      "inputs": [],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "totalBlockProducer",
      "inputs": [],
      "outputs": [
        {
          "name": "total",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "totalDeprecatedReward",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "tryGetPeriodOfEpoch",
      "inputs": [
        {
          "name": "_epoch",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "_filled",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "_periodNumber",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "validatorCount",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "wrapUpEpoch",
      "inputs": [],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "event",
      "name": "BlockProducerSetUpdated",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "epoch",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BlockRewardDeprecated",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "rewardAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "deprecatedType",
          "type": "uint8",
          "indexed": false,
          "internalType": "enum ICoinbaseExecution.BlockRewardDeprecatedType"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BlockRewardSubmitted",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "submittedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "bonusAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BridgeOperatorRewardDistributed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "bridgeOperator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipientAddr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BridgeOperatorRewardDistributionFailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "bridgeOperator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BridgeOperatorSetUpdated",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "epoch",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "bridgeOperators",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CandidateGranted",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "treasuryAddr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "admin",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CandidateRevokingTimestampUpdated",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "revokingTimestamp",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CandidateTopupDeadlineUpdated",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "topupDeadline",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CandidatesRevoked",
      "inputs": [
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CommissionRateUpdateScheduled",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "effectiveTimestamp",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "rate",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CommissionRateUpdated",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "rate",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "DeprecatedRewardRecycleFailed",
      "inputs": [
        {
          "name": "recipientAddr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "balance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "DeprecatedRewardRecycled",
      "inputs": [
        {
          "name": "recipientAddr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitLockedAmountUpdated",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitLockedFundReleased",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "unlockedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitLockedFundReleasingFailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "unlockedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitRequested",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "lockedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExpiryDurationUpdated",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "FastFinalityRewardDistributed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "FastFinalityRewardDistributionFailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaxPrioritizedValidatorNumberUpdated",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaxValidatorCandidateUpdated",
      "inputs": [
        {
          "name": "threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaxValidatorNumberUpdated",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MinEffectiveDaysOnwardsUpdated",
      "inputs": [
        {
          "name": "numOfDays",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MiningRewardDistributed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MiningRewardDistributionFailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "StakingRewardDistributed",
      "inputs": [
        {
          "name": "totalAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "StakingRewardDistributionFailed",
      "inputs": [
        {
          "name": "totalAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ValidatorPunished",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "jailedUntil",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "deductedStakingAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "blockProducerRewardDeprecated",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        },
        {
          "name": "bridgeOperatorRewardDeprecated",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ValidatorSetUpdated",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ValidatorUnjailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "WrappedUpEpoch",
      "inputs": [
        {
          "name": "periodNumber",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "epochNumber",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "periodEnding",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyRequestedEmergencyExit",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAlreadyRequestedRevokingCandidate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAlreadyRequestedUpdatingCommissionRate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAlreadyWrappedEpoch",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAtEndOfEpochOnly",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrCallPrecompiled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrCallerMustBeCoinbase",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrCannotBailout",
      "inputs": [
        {
          "name": "validator",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrExceedsMaxNumberOfCandidate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrExistentCandidate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrExistentCandidateAdmin",
      "inputs": [
        {
          "name": "candidateAdminAddr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrExistentTreasury",
      "inputs": [
        {
          "name": "treasuryAddr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInsufficientBalance",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "currentBalance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "sendAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidCommissionRate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidEffectiveDaysOnwards",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidMaxPrioritizedValidatorNumber",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidMinEffectiveDaysOnwards",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrLockedFundMightBeRecycled",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrLockedFundReleaseInfoNotFound",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNonExistentCandidate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrRecipientRevert",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrTrustedOrgCannotRenounce",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnauthorizedReceiveRON",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "NonExistentRecyclingInfo",
      "inputs": []
    }
  ],
  "address": "0x99DA0Fb31C830eBb0bDe0EfCEf428A02D72994Be",
  "args": "0x",
  "ast": {
    "absolutePath": "contracts/ronin/validator/RoninValidatorSet.sol",
    "id": 36239,
    "exportedSymbols": {
      "Address": [
        150935
      ],
      "CoinbaseExecution": [
        35443
      ],
      "CommonStorage": [
        36789
      ],
      "ContractType": [
        38245
      ],
      "EmergencyExit": [
        35926
      ],
      "EnumFlags": [
        10971
      ],
      "ErrCallerMustBeCoinbase": [
        38226
      ],
      "ErrUnexpectedInternalCall": [
        38109
      ],
      "GlobalConfigConsumer": [
        3600
      ],
      "HasBridgeTrackingDeprecated": [
        38284
      ],
      "HasContracts": [
        3544
      ],
      "HasMaintenanceDeprecated": [
        38272
      ],
      "HasProxyAdmin": [
        3589
      ],
      "HasSlashIndicatorDeprecated": [
        38252
      ],
      "HasStakingDeprecated": [
        38268
      ],
      "HasStakingVestingDeprecated": [
        38256
      ],
      "HasTrustedOrgDeprecated": [
        38276
      ],
      "IBaseSlash": [
        8727
      ],
      "IBaseStaking": [
        9205
      ],
      "ICandidateManager": [
        9926
      ],
      "ICandidateManagerCallback": [
        10007
      ],
      "ICandidateStaking": [
        9403
      ],
      "ICoinbaseExecution": [
        10175
      ],
      "ICommonInfo": [
        10394
      ],
      "ICreditScore": [
        8854
      ],
      "IDelegatorStaking": [
        9511
      ],
      "IEmergencyExit": [
        10268
      ],
      "IFastFinalityTracking": [
        6685
      ],
      "IHasContracts": [
        8655
      ],
      "IJailingInfo": [
        10486
      ],
      "IMaintenance": [
        7125
      ],
      "IProfile": [
        7346
      ],
      "IQuorum": [
        7396
      ],
      "IRewardPool": [
        9676
      ],
      "IRoninTrustedOrganization": [
        7889
      ],
      "IRoninValidatorSet": [
        10289
      ],
      "ISlashDoubleSign": [
        8902
      ],
      "ISlashIndicator": [
        8969
      ],
      "ISlashUnavailability": [
        9048
      ],
      "ISlashingExecution": [
        10339
      ],
      "IStaking": [
        9718
      ],
      "IStakingCallback": [
        9733
      ],
      "IStakingVesting": [
        8000
      ],
      "ITimingInfo": [
        10545
      ],
      "IValidatorInfoV2": [
        10633
      ],
      "IdentityGuard": [
        38494
      ],
      "Initializable": [
        150298
      ],
      "JailingStorage": [
        37186
      ],
      "Math": [
        11550
      ],
      "PCUPickValidatorSet": [
        18746
      ],
      "PCUSortValidators": [
        18817
      ],
      "PeriodWrapperConsumer": [
        8679
      ],
      "PrecompiledUsage": [
        19062
      ],
      "RONTransferHelper": [
        791
      ],
      "RoleAccess": [
        38508
      ],
      "RoninValidatorSet": [
        36238
      ],
      "SlashingExecution": [
        36425
      ],
      "TConsensus": [
        37964
      ],
      "TConsensusEq": [
        38016
      ],
      "TPoolId": [
        37962
      ],
      "TPoolIdEq": [
        37994
      ],
      "TimingStorage": [
        37360
      ],
      "ValidatorInfoStorageV2": [
        37721
      ]
    },
    "nodeType": "SourceUnit",
    "src": "33:4354:141",
    "nodes": [
      {
        "id": 35928,
        "nodeType": "PragmaDirective",
        "src": "33:23:141",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 35929,
        "nodeType": "ImportDirective",
        "src": "58:63:141",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 36239,
        "sourceUnit": 150299,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 35930,
        "nodeType": "ImportDirective",
        "src": "122:59:141",
        "nodes": [],
        "absolutePath": "contracts/interfaces/validator/IRoninValidatorSet.sol",
        "file": "../../interfaces/validator/IRoninValidatorSet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 36239,
        "sourceUnit": 10290,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 35931,
        "nodeType": "ImportDirective",
        "src": "182:33:141",
        "nodes": [],
        "absolutePath": "contracts/ronin/validator/CoinbaseExecution.sol",
        "file": "./CoinbaseExecution.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 36239,
        "sourceUnit": 35444,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 35932,
        "nodeType": "ImportDirective",
        "src": "216:33:141",
        "nodes": [],
        "absolutePath": "contracts/ronin/validator/SlashingExecution.sol",
        "file": "./SlashingExecution.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 36239,
        "sourceUnit": 36426,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 36238,
        "nodeType": "ContractDefinition",
        "src": "251:4135:141",
        "nodes": [
          {
            "id": 35945,
            "nodeType": "FunctionDefinition",
            "src": "337:47:141",
            "nodes": [],
            "body": {
              "id": 35944,
              "nodeType": "Block",
              "src": "351:33:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 35941,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 150297,
                      "src": "357:20:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 35942,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "357:22:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35943,
                  "nodeType": "ExpressionStatement",
                  "src": "357:22:141"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 35939,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "348:2:141"
            },
            "returnParameters": {
              "id": 35940,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "351:0:141"
            },
            "scope": 36238,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 35952,
            "nodeType": "FunctionDefinition",
            "src": "388:50:141",
            "nodes": [],
            "body": {
              "id": 35951,
              "nodeType": "Block",
              "src": "416:22:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 35948,
                      "name": "_fallback",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 36164,
                      "src": "422:9:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$__$",
                        "typeString": "function () view"
                      }
                    },
                    "id": 35949,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "422:11:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35950,
                  "nodeType": "ExpressionStatement",
                  "src": "422:11:141"
                }
              ]
            },
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 35946,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "396:2:141"
            },
            "returnParameters": {
              "id": 35947,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "416:0:141"
            },
            "scope": 36238,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 35959,
            "nodeType": "FunctionDefinition",
            "src": "442:49:141",
            "nodes": [],
            "body": {
              "id": 35958,
              "nodeType": "Block",
              "src": "469:22:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 35955,
                      "name": "_fallback",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 36164,
                      "src": "475:9:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$__$",
                        "typeString": "function () view"
                      }
                    },
                    "id": 35956,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "475:11:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35957,
                  "nodeType": "ExpressionStatement",
                  "src": "475:11:141"
                }
              ]
            },
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 35953,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "449:2:141"
            },
            "returnParameters": {
              "id": 35954,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "469:0:141"
            },
            "scope": 36238,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 36054,
            "nodeType": "FunctionDefinition",
            "src": "551:1426:141",
            "nodes": [],
            "body": {
              "id": 36053,
              "nodeType": "Block",
              "src": "1188:789:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 35992,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "1207:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 35993,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1220:15:141",
                        "memberName": "SLASH_INDICATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38235,
                        "src": "1207:28:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 35994,
                        "name": "__slashIndicatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35962,
                        "src": "1237:24:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 35991,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1194:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 35995,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1194:68:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35996,
                  "nodeType": "ExpressionStatement",
                  "src": "1194:68:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 35998,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "1281:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 35999,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1294:7:141",
                        "memberName": "STAKING",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38238,
                        "src": "1281:20:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36000,
                        "name": "__stakingContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35964,
                        "src": "1303:17:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 35997,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1268:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36001,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1268:53:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36002,
                  "nodeType": "ExpressionStatement",
                  "src": "1268:53:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36004,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "1340:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36005,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1353:15:141",
                        "memberName": "STAKING_VESTING",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38236,
                        "src": "1340:28:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36006,
                        "name": "__stakingVestingContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35966,
                        "src": "1370:24:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36003,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1327:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36007,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1327:68:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36008,
                  "nodeType": "ExpressionStatement",
                  "src": "1327:68:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36010,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "1414:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36011,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1427:11:141",
                        "memberName": "MAINTENANCE",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38234,
                        "src": "1414:24:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36012,
                        "name": "__maintenanceContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35968,
                        "src": "1440:21:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36009,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1401:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36013,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1401:61:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36014,
                  "nodeType": "ExpressionStatement",
                  "src": "1401:61:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36016,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "1481:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36017,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1494:26:141",
                        "memberName": "RONIN_TRUSTED_ORGANIZATION",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38239,
                        "src": "1481:39:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36018,
                        "name": "__roninTrustedOrganizationContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35970,
                        "src": "1522:34:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36015,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1468:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36019,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1468:89:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36020,
                  "nodeType": "ExpressionStatement",
                  "src": "1468:89:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 36022,
                        "name": "__maxValidatorNumber",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35974,
                        "src": "1587:20:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 36021,
                      "name": "_setMaxValidatorNumber",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37667,
                      "src": "1564:22:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 36023,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1564:44:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36024,
                  "nodeType": "ExpressionStatement",
                  "src": "1564:44:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 36026,
                        "name": "__maxValidatorCandidate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35976,
                        "src": "1640:23:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 36025,
                      "name": "_setMaxValidatorCandidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33731,
                      "src": "1614:25:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 36027,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1614:50:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36028,
                  "nodeType": "ExpressionStatement",
                  "src": "1614:50:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 36030,
                        "name": "__maxPrioritizedValidatorNumber",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35978,
                        "src": "1704:31:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 36029,
                      "name": "_setMaxPrioritizedValidatorNumber",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37689,
                      "src": "1670:33:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 36031,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1670:66:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36032,
                  "nodeType": "ExpressionStatement",
                  "src": "1670:66:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 36034,
                        "name": "__minEffectiveDaysOnwards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35980,
                        "src": "1770:25:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 36033,
                      "name": "_setMinEffectiveDaysOnwards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33753,
                      "src": "1742:27:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 36035,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1742:54:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36036,
                  "nodeType": "ExpressionStatement",
                  "src": "1742:54:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 36038,
                          "name": "__emergencyExitConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35986,
                          "src": "1832:22:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$2_calldata_ptr",
                            "typeString": "uint256[2] calldata"
                          }
                        },
                        "id": 36040,
                        "indexExpression": {
                          "hexValue": "30",
                          "id": 36039,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1855:1:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1832:25:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 36037,
                      "name": "_setEmergencyExitLockedAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35910,
                      "src": "1802:29:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 36041,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1802:56:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36042,
                  "nodeType": "ExpressionStatement",
                  "src": "1802:56:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 36044,
                          "name": "__emergencyExitConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35986,
                          "src": "1892:22:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$2_calldata_ptr",
                            "typeString": "uint256[2] calldata"
                          }
                        },
                        "id": 36046,
                        "indexExpression": {
                          "hexValue": "31",
                          "id": 36045,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1915:1:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1892:25:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 36043,
                      "name": "_setEmergencyExpiryDuration",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35925,
                      "src": "1864:27:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 36047,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1864:54:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36048,
                  "nodeType": "ExpressionStatement",
                  "src": "1864:54:141"
                },
                {
                  "expression": {
                    "id": 36051,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 36049,
                      "name": "_numberOfBlocksInEpoch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37197,
                      "src": "1924:22:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 36050,
                      "name": "__numberOfBlocksInEpoch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35982,
                      "src": "1949:23:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1924:48:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 36052,
                  "nodeType": "ExpressionStatement",
                  "src": "1924:48:141"
                }
              ]
            },
            "documentation": {
              "id": 35960,
              "nodeType": "StructuredDocumentation",
              "src": "495:53:141",
              "text": " @dev Initializes the contract storage."
            },
            "functionSelector": "367ec12b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 35989,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 35988,
                  "name": "initializer",
                  "nameLocations": [
                    "1176:11:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150218,
                  "src": "1176:11:141"
                },
                "nodeType": "ModifierInvocation",
                "src": "1176:11:141"
              }
            ],
            "name": "initialize",
            "nameLocation": "560:10:141",
            "parameters": {
              "id": 35987,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35962,
                  "mutability": "mutable",
                  "name": "__slashIndicatorContract",
                  "nameLocation": "584:24:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "576:32:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 35961,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "576:7:141",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35964,
                  "mutability": "mutable",
                  "name": "__stakingContract",
                  "nameLocation": "622:17:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "614:25:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 35963,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "614:7:141",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35966,
                  "mutability": "mutable",
                  "name": "__stakingVestingContract",
                  "nameLocation": "653:24:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "645:32:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 35965,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "645:7:141",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35968,
                  "mutability": "mutable",
                  "name": "__maintenanceContract",
                  "nameLocation": "691:21:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "683:29:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 35967,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "683:7:141",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35970,
                  "mutability": "mutable",
                  "name": "__roninTrustedOrganizationContract",
                  "nameLocation": "726:34:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "718:42:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 35969,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "718:7:141",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35972,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "766:7:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 35971,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "766:7:141",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35974,
                  "mutability": "mutable",
                  "name": "__maxValidatorNumber",
                  "nameLocation": "818:20:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "810:28:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35973,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "810:7:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35976,
                  "mutability": "mutable",
                  "name": "__maxValidatorCandidate",
                  "nameLocation": "852:23:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "844:31:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35975,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "844:7:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35978,
                  "mutability": "mutable",
                  "name": "__maxPrioritizedValidatorNumber",
                  "nameLocation": "889:31:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "881:39:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35977,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "881:7:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35980,
                  "mutability": "mutable",
                  "name": "__minEffectiveDaysOnwards",
                  "nameLocation": "934:25:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "926:33:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35979,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "926:7:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35982,
                  "mutability": "mutable",
                  "name": "__numberOfBlocksInEpoch",
                  "nameLocation": "973:23:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "965:31:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35981,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "965:7:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35986,
                  "mutability": "mutable",
                  "name": "__emergencyExitConfigs",
                  "nameLocation": "1140:22:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36054,
                  "src": "1120:42:141",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_calldata_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 35983,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1120:7:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 35985,
                    "length": {
                      "hexValue": "32",
                      "id": 35984,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1128:1:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1120:10:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "570:596:141"
            },
            "returnParameters": {
              "id": 35990,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1188:0:141"
            },
            "scope": 36238,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 36109,
            "nodeType": "FunctionDefinition",
            "src": "1981:701:141",
            "nodes": [],
            "body": {
              "id": 36108,
              "nodeType": "Block",
              "src": "2031:651:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36061,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2050:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36062,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2063:7:141",
                        "memberName": "STAKING",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38238,
                        "src": "2050:20:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36063,
                        "name": "______deprecatedStakingContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38267,
                        "src": "2072:31:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36060,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2037:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36064,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2037:67:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36065,
                  "nodeType": "ExpressionStatement",
                  "src": "2037:67:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36067,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2123:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36068,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2136:11:141",
                        "memberName": "MAINTENANCE",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38234,
                        "src": "2123:24:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36069,
                        "name": "______deprecatedMaintenance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38271,
                        "src": "2149:27:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36066,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2110:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36070,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2110:67:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36071,
                  "nodeType": "ExpressionStatement",
                  "src": "2110:67:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36073,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2196:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36074,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2209:15:141",
                        "memberName": "SLASH_INDICATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38235,
                        "src": "2196:28:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36075,
                        "name": "______deprecatedSlashIndicator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38251,
                        "src": "2226:30:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36072,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2183:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36076,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2183:74:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36077,
                  "nodeType": "ExpressionStatement",
                  "src": "2183:74:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36079,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2276:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36080,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2289:15:141",
                        "memberName": "STAKING_VESTING",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38236,
                        "src": "2276:28:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36081,
                        "name": "______deprecatedStakingVesting",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38255,
                        "src": "2306:30:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36078,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2263:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36082,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2263:74:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36083,
                  "nodeType": "ExpressionStatement",
                  "src": "2263:74:141"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36085,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2356:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36086,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2369:26:141",
                        "memberName": "RONIN_TRUSTED_ORGANIZATION",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38239,
                        "src": "2356:39:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36087,
                        "name": "______deprecatedTrustedOrg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38275,
                        "src": "2397:26:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36084,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2343:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36088,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2343:81:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36089,
                  "nodeType": "ExpressionStatement",
                  "src": "2343:81:141"
                },
                {
                  "expression": {
                    "id": 36091,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "2431:38:141",
                    "subExpression": {
                      "id": 36090,
                      "name": "______deprecatedStakingContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38267,
                      "src": "2438:31:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36092,
                  "nodeType": "ExpressionStatement",
                  "src": "2431:38:141"
                },
                {
                  "expression": {
                    "id": 36094,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "2475:34:141",
                    "subExpression": {
                      "id": 36093,
                      "name": "______deprecatedMaintenance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38271,
                      "src": "2482:27:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36095,
                  "nodeType": "ExpressionStatement",
                  "src": "2475:34:141"
                },
                {
                  "expression": {
                    "id": 36097,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "2515:37:141",
                    "subExpression": {
                      "id": 36096,
                      "name": "______deprecatedSlashIndicator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38251,
                      "src": "2522:30:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36098,
                  "nodeType": "ExpressionStatement",
                  "src": "2515:37:141"
                },
                {
                  "expression": {
                    "id": 36100,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "2558:37:141",
                    "subExpression": {
                      "id": 36099,
                      "name": "______deprecatedStakingVesting",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38255,
                      "src": "2565:30:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36101,
                  "nodeType": "ExpressionStatement",
                  "src": "2558:37:141"
                },
                {
                  "expression": {
                    "id": 36103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "2601:37:141",
                    "subExpression": {
                      "id": 36102,
                      "name": "______deprecatedBridgeTracking",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38283,
                      "src": "2608:30:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36104,
                  "nodeType": "ExpressionStatement",
                  "src": "2601:37:141"
                },
                {
                  "expression": {
                    "id": 36106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "2644:33:141",
                    "subExpression": {
                      "id": 36105,
                      "name": "______deprecatedTrustedOrg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38275,
                      "src": "2651:26:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36107,
                  "nodeType": "ExpressionStatement",
                  "src": "2644:33:141"
                }
              ]
            },
            "functionSelector": "5cd8a76b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 36057,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2028:1:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 36058,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 36056,
                  "name": "reinitializer",
                  "nameLocations": [
                    "2014:13:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150251,
                  "src": "2014:13:141"
                },
                "nodeType": "ModifierInvocation",
                "src": "2014:16:141"
              }
            ],
            "name": "initializeV2",
            "nameLocation": "1990:12:141",
            "parameters": {
              "id": 36055,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2002:2:141"
            },
            "returnParameters": {
              "id": 36059,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2031:0:141"
            },
            "scope": 36238,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 36124,
            "nodeType": "FunctionDefinition",
            "src": "2686:176:141",
            "nodes": [],
            "body": {
              "id": 36123,
              "nodeType": "Block",
              "src": "2772:90:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36118,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2791:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36119,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2804:22:141",
                        "memberName": "FAST_FINALITY_TRACKING",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38243,
                        "src": "2791:35:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36120,
                        "name": "fastFinalityTrackingContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36111,
                        "src": "2828:28:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36117,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2778:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2778:79:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36122,
                  "nodeType": "ExpressionStatement",
                  "src": "2778:79:141"
                }
              ]
            },
            "functionSelector": "3101cfcb",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "33",
                    "id": 36114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2769:1:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3_by_1",
                      "typeString": "int_const 3"
                    },
                    "value": "3"
                  }
                ],
                "id": 36115,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 36113,
                  "name": "reinitializer",
                  "nameLocations": [
                    "2755:13:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150251,
                  "src": "2755:13:141"
                },
                "nodeType": "ModifierInvocation",
                "src": "2755:16:141"
              }
            ],
            "name": "initializeV3",
            "nameLocation": "2695:12:141",
            "parameters": {
              "id": 36112,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36111,
                  "mutability": "mutable",
                  "name": "fastFinalityTrackingContract",
                  "nameLocation": "2716:28:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36124,
                  "src": "2708:36:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36110,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2708:7:141",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2707:38:141"
            },
            "returnParameters": {
              "id": 36116,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2772:0:141"
            },
            "scope": 36238,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 36139,
            "nodeType": "FunctionDefinition",
            "src": "2866:135:141",
            "nodes": [],
            "body": {
              "id": 36138,
              "nodeType": "Block",
              "src": "2939:62:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 36133,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2958:12:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 36134,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2971:7:141",
                        "memberName": "PROFILE",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38244,
                        "src": "2958:20:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 36135,
                        "name": "profileContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36126,
                        "src": "2980:15:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 36132,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2945:12:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 36136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2945:51:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 36137,
                  "nodeType": "ExpressionStatement",
                  "src": "2945:51:141"
                }
              ]
            },
            "functionSelector": "110a8308",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "34",
                    "id": 36129,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2936:1:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_4_by_1",
                      "typeString": "int_const 4"
                    },
                    "value": "4"
                  }
                ],
                "id": 36130,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 36128,
                  "name": "reinitializer",
                  "nameLocations": [
                    "2922:13:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150251,
                  "src": "2922:13:141"
                },
                "nodeType": "ModifierInvocation",
                "src": "2922:16:141"
              }
            ],
            "name": "initializeV4",
            "nameLocation": "2875:12:141",
            "parameters": {
              "id": 36127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36126,
                  "mutability": "mutable",
                  "name": "profileContract",
                  "nameLocation": "2896:15:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36139,
                  "src": "2888:23:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36125,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2888:7:141",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2887:25:141"
            },
            "returnParameters": {
              "id": 36131,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2939:0:141"
            },
            "scope": 36238,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 36164,
            "nodeType": "FunctionDefinition",
            "src": "3179:206:141",
            "nodes": [],
            "body": {
              "id": 36163,
              "nodeType": "Block",
              "src": "3214:171:141",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 36157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 36149,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 36143,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3224:3:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 36144,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3228:6:141",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3224:10:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 36146,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38245,
                              "src": "3250:12:141",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 36147,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3263:15:141",
                            "memberName": "STAKING_VESTING",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38236,
                            "src": "3250:28:141",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$38245",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$38245",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 36145,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "3238:11:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 36148,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3238:41:141",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "3224:55:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 36156,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 36150,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3283:3:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 36151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3287:6:141",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3283:10:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 36153,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38245,
                              "src": "3309:12:141",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 36154,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3322:7:141",
                            "memberName": "STAKING",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38238,
                            "src": "3309:20:141",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$38245",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$38245",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 36152,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "3297:11:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 36155,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3297:33:141",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "3283:47:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3224:106:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 36162,
                  "nodeType": "IfStatement",
                  "src": "3220:161:141",
                  "trueBody": {
                    "id": 36161,
                    "nodeType": "Block",
                    "src": "3332:49:141",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 36158,
                            "name": "ErrUnauthorizedReceiveRON",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10374,
                            "src": "3347:25:141",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 36159,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3347:27:141",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 36160,
                        "nodeType": "RevertStatement",
                        "src": "3340:34:141"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 36140,
              "nodeType": "StructuredDocumentation",
              "src": "3005:171:141",
              "text": " @dev Only receives RON from staking vesting contract (for topping up bonus), and from staking contract (for transferring\n deducting amount on slashing)."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_fallback",
            "nameLocation": "3188:9:141",
            "parameters": {
              "id": 36141,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3197:2:141"
            },
            "returnParameters": {
              "id": 36142,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3214:0:141"
            },
            "scope": 36238,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 36187,
            "nodeType": "FunctionDefinition",
            "src": "3484:208:141",
            "nodes": [],
            "body": {
              "id": 36186,
              "nodeType": "Block",
              "src": "3600:92:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 36183,
                        "name": "consensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36168,
                        "src": "3673:13:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 36178,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38245,
                                  "src": "3634:12:141",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 36179,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "3647:7:141",
                                "memberName": "PROFILE",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 38244,
                                "src": "3634:20:141",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 36177,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "3622:11:141",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 36180,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3622:33:141",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 36176,
                          "name": "IProfile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7346,
                          "src": "3613:8:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IProfile_$7346_$",
                            "typeString": "type(contract IProfile)"
                          }
                        },
                        "id": 36181,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3613:43:141",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProfile_$7346",
                          "typeString": "contract IProfile"
                        }
                      },
                      "id": 36182,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3657:15:141",
                      "memberName": "getConsensus2Id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7261,
                      "src": "3613:59:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                        "typeString": "function (TConsensus) view external returns (address)"
                      }
                    },
                    "id": 36184,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3613:74:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 36175,
                  "id": 36185,
                  "nodeType": "Return",
                  "src": "3606:81:141"
                }
              ]
            },
            "baseFunctions": [
              35867,
              36774
            ],
            "documentation": {
              "id": 36165,
              "nodeType": "StructuredDocumentation",
              "src": "3389:92:141",
              "text": " @dev Convert consensus address to corresponding id from the Profile contract."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__css2cid",
            "nameLocation": "3493:9:141",
            "overrides": {
              "id": 36172,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 36170,
                  "name": "EmergencyExit",
                  "nameLocations": [
                    "3552:13:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 35926,
                  "src": "3552:13:141"
                },
                {
                  "id": 36171,
                  "name": "CommonStorage",
                  "nameLocations": [
                    "3567:13:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 36789,
                  "src": "3567:13:141"
                }
              ],
              "src": "3543:38:141"
            },
            "parameters": {
              "id": 36169,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36168,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "3514:13:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36187,
                  "src": "3503:24:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 36167,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 36166,
                      "name": "TConsensus",
                      "nameLocations": [
                        "3503:10:141"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "3503:10:141"
                    },
                    "referencedDeclaration": 37964,
                    "src": "3503:10:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3502:26:141"
            },
            "returnParameters": {
              "id": 36175,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36174,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 36187,
                  "src": "3591:7:141",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 36173,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3591:7:141",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3590:9:141"
            },
            "scope": 36238,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 36212,
            "nodeType": "FunctionDefinition",
            "src": "3799:245:141",
            "nodes": [],
            "body": {
              "id": 36211,
              "nodeType": "Block",
              "src": "3947:97:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 36208,
                        "name": "consensusAddrs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36192,
                        "src": "4024:14:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                          "typeString": "TConsensus[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                          "typeString": "TConsensus[] memory"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 36203,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38245,
                                  "src": "3981:12:141",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 36204,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "3994:7:141",
                                "memberName": "PROFILE",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 38244,
                                "src": "3981:20:141",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 36202,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "3969:11:141",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 36205,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3969:33:141",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 36201,
                          "name": "IProfile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7346,
                          "src": "3960:8:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IProfile_$7346_$",
                            "typeString": "type(contract IProfile)"
                          }
                        },
                        "id": 36206,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3960:43:141",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProfile_$7346",
                          "typeString": "contract IProfile"
                        }
                      },
                      "id": 36207,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4004:19:141",
                      "memberName": "getManyConsensus2Id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7272,
                      "src": "3960:63:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                        "typeString": "function (TConsensus[] memory) view external returns (address[] memory)"
                      }
                    },
                    "id": 36209,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3960:79:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "functionReturnParameters": 36200,
                  "id": 36210,
                  "nodeType": "Return",
                  "src": "3953:86:141"
                }
              ]
            },
            "baseFunctions": [
              35881,
              36788
            ],
            "documentation": {
              "id": 36188,
              "nodeType": "StructuredDocumentation",
              "src": "3696:100:141",
              "text": " @dev Convert many consensus addresses to corresponding ids from the Profile contract."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__css2cidBatch",
            "nameLocation": "3808:14:141",
            "overrides": {
              "id": 36196,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 36194,
                  "name": "EmergencyExit",
                  "nameLocations": [
                    "3890:13:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 35926,
                  "src": "3890:13:141"
                },
                {
                  "id": 36195,
                  "name": "CommonStorage",
                  "nameLocations": [
                    "3905:13:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 36789,
                  "src": "3905:13:141"
                }
              ],
              "src": "3881:38:141"
            },
            "parameters": {
              "id": 36193,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36192,
                  "mutability": "mutable",
                  "name": "consensusAddrs",
                  "nameLocation": "3848:14:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36212,
                  "src": "3828:34:141",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 36190,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 36189,
                        "name": "TConsensus",
                        "nameLocations": [
                          "3828:10:141"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 37964,
                        "src": "3828:10:141"
                      },
                      "referencedDeclaration": 37964,
                      "src": "3828:10:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 36191,
                    "nodeType": "ArrayTypeName",
                    "src": "3828:12:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3822:44:141"
            },
            "returnParameters": {
              "id": 36200,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36199,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 36212,
                  "src": "3929:16:141",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 36197,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3929:7:141",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 36198,
                    "nodeType": "ArrayTypeName",
                    "src": "3929:9:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3928:18:141"
            },
            "scope": 36238,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 36237,
            "nodeType": "FunctionDefinition",
            "src": "4150:234:141",
            "nodes": [],
            "body": {
              "id": 36236,
              "nodeType": "Block",
              "src": "4297:87:141",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 36233,
                        "name": "cids",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 36216,
                        "src": "4374:4:141",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 36228,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38245,
                                  "src": "4331:12:141",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 36229,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "4344:7:141",
                                "memberName": "PROFILE",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 38244,
                                "src": "4331:20:141",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 36227,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "4319:11:141",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 36230,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4319:33:141",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 36226,
                          "name": "IProfile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7346,
                          "src": "4310:8:141",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IProfile_$7346_$",
                            "typeString": "type(contract IProfile)"
                          }
                        },
                        "id": 36231,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4310:43:141",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProfile_$7346",
                          "typeString": "contract IProfile"
                        }
                      },
                      "id": 36232,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4354:19:141",
                      "memberName": "getManyId2Consensus",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7252,
                      "src": "4310:63:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_array$_t_address_$dyn_memory_ptr_$returns$_t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr_$",
                        "typeString": "function (address[] memory) view external returns (TConsensus[] memory)"
                      }
                    },
                    "id": 36234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4310:69:141",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                      "typeString": "TConsensus[] memory"
                    }
                  },
                  "functionReturnParameters": 36225,
                  "id": 36235,
                  "nodeType": "Return",
                  "src": "4303:76:141"
                }
              ]
            },
            "baseFunctions": [
              35895,
              37720
            ],
            "documentation": {
              "id": 36213,
              "nodeType": "StructuredDocumentation",
              "src": "4048:99:141",
              "text": " @dev Convert many id to corresponding consensus addresses from the Profile contract."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__cid2cssBatch",
            "nameLocation": "4159:14:141",
            "overrides": {
              "id": 36220,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 36218,
                  "name": "EmergencyExit",
                  "nameLocations": [
                    "4228:13:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 35926,
                  "src": "4228:13:141"
                },
                {
                  "id": 36219,
                  "name": "ValidatorInfoStorageV2",
                  "nameLocations": [
                    "4243:22:141"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 37721,
                  "src": "4243:22:141"
                }
              ],
              "src": "4219:47:141"
            },
            "parameters": {
              "id": 36217,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36216,
                  "mutability": "mutable",
                  "name": "cids",
                  "nameLocation": "4196:4:141",
                  "nodeType": "VariableDeclaration",
                  "scope": 36237,
                  "src": "4179:21:141",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 36214,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "4179:7:141",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 36215,
                    "nodeType": "ArrayTypeName",
                    "src": "4179:9:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4173:31:141"
            },
            "returnParameters": {
              "id": 36225,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 36224,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 36237,
                  "src": "4276:19:141",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 36222,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 36221,
                        "name": "TConsensus",
                        "nameLocations": [
                          "4276:10:141"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 37964,
                        "src": "4276:10:141"
                      },
                      "referencedDeclaration": 37964,
                      "src": "4276:10:141",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 36223,
                    "nodeType": "ArrayTypeName",
                    "src": "4276:12:141",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4275:21:141"
            },
            "scope": 36238,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 35933,
              "name": "Initializable",
              "nameLocations": [
                "281:13:141"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 150298,
              "src": "281:13:141"
            },
            "id": 35934,
            "nodeType": "InheritanceSpecifier",
            "src": "281:13:141"
          },
          {
            "baseName": {
              "id": 35935,
              "name": "CoinbaseExecution",
              "nameLocations": [
                "296:17:141"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 35443,
              "src": "296:17:141"
            },
            "id": 35936,
            "nodeType": "InheritanceSpecifier",
            "src": "296:17:141"
          },
          {
            "baseName": {
              "id": 35937,
              "name": "SlashingExecution",
              "nameLocations": [
                "315:17:141"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 36425,
              "src": "315:17:141"
            },
            "id": 35938,
            "nodeType": "InheritanceSpecifier",
            "src": "315:17:141"
          }
        ],
        "canonicalName": "RoninValidatorSet",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          36238,
          36425,
          35443,
          35926,
          36789,
          37721,
          38276,
          34234,
          33903,
          38268,
          38252,
          38272,
          38284,
          38256,
          3544,
          38494,
          8655,
          3589,
          37186,
          37360,
          3600,
          10394,
          10633,
          10486,
          10545,
          3606,
          9926,
          10007,
          18746,
          18817,
          791,
          10268,
          19062,
          10175,
          10339,
          150298
        ],
        "name": "RoninValidatorSet",
        "nameLocation": "260:17:141",
        "scope": 36239,
        "usedErrors": [
          676,
          681,
          8628,
          9816,
          9819,
          9822,
          9827,
          9832,
          9835,
          9838,
          9942,
          9945,
          9948,
          9951,
          10163,
          10166,
          10217,
          10222,
          10227,
          10318,
          10374,
          10377,
          10553,
          19061,
          38066,
          38094,
          38109,
          38226
        ],
        "usedEvents": [
          8636,
          9772,
          9777,
          9786,
          9793,
          9800,
          9806,
          9813,
          9939,
          10024,
          10034,
          10044,
          10054,
          10063,
          10072,
          10083,
          10094,
          10107,
          10116,
          10127,
          10138,
          10151,
          10160,
          10184,
          10193,
          10204,
          10209,
          10214,
          10306,
          10313,
          10362,
          10371,
          10558,
          10563,
          150162
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 24102399,
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b615b3280620000f46000396000f3fe6080604052600436106103fd5760003560e01c80636611f8431161020d578063afc69d7311610128578063d93fa306116100bb578063ea80d67d1161008a578063edb194bb1161006f578063edb194bb14610b6b578063eeb629a814610b8b578063f883afaf14610ba05761040c565b8063ea80d67d14610b2b578063ecd850cc14610b4b5761040c565b8063d93fa30614610aab578063dd716ad314610acb578063de981f1b14610aeb578063e5125a1d14610b0b5761040c565b8063c4e227f3116100f7578063c4e227f314610a41578063c94aaa0214610a56578063cdaa4e8114610a76578063d09f1ab414610a965761040c565b8063afc69d73146109e2578063b7ab4db5146109f7578063ba77b06c14610a0c578063c3c8b5d614610a215761040c565b8063873a5a70116101a05780639a57bd931161016f5780639a57bd9314610978578063a0c3f2d21461098d578063a3d545f5146109ad578063a66c0f77146109cd5761040c565b8063873a5a701461090f57806387c891bd1461092f5780638d559c381461094457806396585fc2146109585761040c565b80637593ff71116101dc5780637593ff711461088f5780637e1dc16f146108af578063823a7b9c146108cf578063865e6fd3146108ef5761040c565b80636611f8431461083d578063690b75361461085d5780636aa1c2ef1461087257806372e46810146108875761040c565b806331a8aef5116103185780634ee4d72b116102ab5780635cd8a76b1161027a578063612c8d981161025f578063612c8d98146107f157806365244ece146108065780636558954f146108265761040c565b80635cd8a76b146107c7578063605239a1146107dc5761040c565b80634ee4d72b146107685780634f2a693f1461077d57806352091f171461079d5780635248184a146107a55761040c565b806349096d26116102e757806349096d26146106d75780634d8df063146106f95780634de2b735146107195780634e9b8b0a146107465761040c565b806331a8aef514610638578063367ec12b146106585780633b3159b614610678578063468c96ae146106a05761040c565b8063217f35c211610390578063297a8fca1161035f578063297a8fca146105b65780632d784a98146105cb5780632f78204c146105f85780633101cfcb146106185761040c565b8063217f35c21461053457806323c65eb01461054957806328bde1e1146105695780632924de71146105965761040c565b8063110a8308116103cc578063110a83081461049757806311662dc2146104b75780631196ab66146104f457806315b5ebde146105145761040c565b8063038278841461041457806304d971ab1461043d578063060406181461046d5780630f43a677146104825761040c565b3661040c5761040a610bc0565b005b61040a610bc0565b34801561042057600080fd5b5061042a6104b081565b6040519081526020015b60405180910390f35b34801561044957600080fd5b5061045d610458366004614f01565b610c3f565b6040519015158152602001610434565b34801561047957600080fd5b5061042a610c79565b34801561048e57600080fd5b5060aa5461042a565b3480156104a357600080fd5b5061040a6104b2366004614f3a565b610c89565b3480156104c357600080fd5b506104d76104d2366004614f57565b610d77565b604080519315158452602084019290925290820152606001610434565b34801561050057600080fd5b5061040a61050f366004614f83565b610d9c565b34801561052057600080fd5b5061040a61052f366004614f57565b610db0565b34801561054057600080fd5b5061045d610eca565b34801561055557600080fd5b5061045d610564366004614f57565b610edf565b34801561057557600080fd5b50610589610584366004614f3a565b610f13565b6040516104349190614f9c565b3480156105a257600080fd5b5061045d6105b1366004614f3a565b61100c565b3480156105c257600080fd5b5060045461042a565b3480156105d757600080fd5b506105eb6105e6366004614f3a565b61103f565b6040516104349190614ffa565b34801561060457600080fd5b5061040a61061336600461501f565b6110d3565b34801561062457600080fd5b5061040a610633366004614f3a565b6112f3565b34801561064457600080fd5b5061045d610653366004614f57565b611397565b34801561066457600080fd5b5061040a61067336600461507a565b6113ce565b34801561068457600080fd5b5060685b6040516001600160a01b039091168152602001610434565b3480156106ac57600080fd5b506106c06106bb366004614f83565b61155a565b604080519215158352602083019190915201610434565b3480156106e357600080fd5b506106ec611598565b6040516104349190615140565b34801561070557600080fd5b5061040a610714366004614f83565b6115aa565b34801561072557600080fd5b506107396107343660046151d9565b6115bb565b604051610434919061521b565b34801561075257600080fd5b5061075b611601565b604051610434919061529a565b34801561077457600080fd5b5060e45461042a565b34801561078957600080fd5b5061040a610798366004614f83565b6116cb565b61040a6116dc565b3480156107b157600080fd5b506107ba611b4c565b60405161043491906152ad565b3480156107d357600080fd5b5061040a611ca0565b3480156107e857600080fd5b5060725461042a565b3480156107fd57600080fd5b5060765461042a565b34801561081257600080fd5b5061045d610821366004614f3a565b611e32565b34801561083257600080fd5b5061042a6201518081565b34801561084957600080fd5b5061040a610858366004614f83565b611e45565b34801561086957600080fd5b5060e55461042a565b34801561087e57600080fd5b5060015461042a565b61040a611e56565b34801561089b57600080fd5b5061045d6108aa366004614f83565b612108565b3480156108bb57600080fd5b506107396108ca3660046151d9565b61212c565b3480156108db57600080fd5b5061040a6108ea366004614f83565b61216a565b3480156108fb57600080fd5b5061040a61090a36600461534e565b61217b565b34801561091b57600080fd5b5061045d61092a366004614f3a565b61219a565b34801561093b57600080fd5b5060025461042a565b34801561095057600080fd5b506066610688565b34801561096457600080fd5b506104d7610973366004614f3a565b6121dc565b34801561098457600080fd5b5061075b612200565b34801561099957600080fd5b5061045d6109a8366004614f3a565b6122ad565b3480156109b957600080fd5b5061042a6109c8366004614f83565b6122d8565b3480156109d957600080fd5b5060e65461042a565b3480156109ee57600080fd5b5061042a6122e3565b348015610a0357600080fd5b506106ec612326565b348015610a1857600080fd5b506106ec612333565b348015610a2d57600080fd5b5061040a610a3c366004614f01565b612340565b348015610a4d57600080fd5b5061075b61260c565b348015610a6257600080fd5b5061040a610a71366004614f83565b61266e565b348015610a8257600080fd5b5061040a610a91366004614f57565b61267f565b348015610aa257600080fd5b5060a95461042a565b348015610ab757600080fd5b5061040a610ac6366004614f01565b612920565b348015610ad757600080fd5b5061040a610ae6366004614f57565b61295d565b348015610af757600080fd5b50610688610b0636600461536a565b612a15565b348015610b1757600080fd5b5061040a610b26366004615385565b612aa4565b348015610b3757600080fd5b5061040a610b46366004614f01565b612be8565b348015610b5757600080fd5b5061040a610b66366004614f01565b612c22565b348015610b7757600080fd5b506105eb610b86366004614f3a565b612c5f565b348015610b9757600080fd5b5060ad5461042a565b348015610bac57600080fd5b5061040a610bbb3660046153ba565b612cb9565b610bca6007612a15565b6001600160a01b0316336001600160a01b031614158015610c065750610bf06009612a15565b6001600160a01b0316336001600160a01b031614155b15610c3d576040517fffcb451300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000610c70610c4d84612f3d565b6001600160a01b0390811660009081526075602052604090205481169084161490565b90505b92915050565b6000610c8460035490565b905090565b600054600490610100900460ff16158015610cab575060005460ff8083169116105b610d135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff831617610100179055610d32600f83612fce565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6000806000610d8e610d8886612f3d565b85613072565b9250925092505b9250925092565b610da46130f4565b610dad81613168565b50565b6006610dbb816131d8565b6001600160a01b0383166000908152603c60205260409020544311610e17576040517f53e0424d0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610d0a565b6001600160a01b038316600081815260386020908152604080832086845282528083208054600160ff199182168117909255948452603783528184208785529092529091208054909216909155610e6e9043615421565b6001600160a01b0384166000818152603a6020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e90610ebd9085815260200190565b60405180910390a2505050565b6000610c84610ed84261323d565b6003541090565b600080610eeb84612f3d565b6001600160a01b0381166000908152603a60205260409020549091508311155b949350505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905290610f5583612f3d565b9050610f78816001600160a01b0316600090815260746020526040902054151590565b610f955760405163a64b34ad60e01b815260040160405180910390fd5b6001600160a01b03908116600090815260756020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015292915050565b60008061101883612f3d565b6001600160a01b0381166000908152603a60205260409020549091504311155b9392505050565b604080518082019091526000808252602082015260e8600061106084612f3d565b6001600160a01b031681526020808201929092526040908101600090812082518084019093528054835260010154928201839052909250036110ce576040517fe1fba9e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60066110de816131d8565b60006110e8610c79565b6001600160a01b03871660008181526037602090815260408083208584528252808320805460ff1916600117905592825260e181528282205460e09091529190205491925061113691615434565b60e460008282546111479190615434565b90915550506001600160a01b038616600090815260e06020908152604080832083905560e18252808320839055603a90915290205461118790869061324c565b6001600160a01b0387166000908152603a602052604090205583156112425760006111b26009612a15565b60405163138ac02f60e11b81526001600160a01b038981166004830152602482018890529190911690632715805e906044016020604051808303816000875af1158015611203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112279190615447565b90508060e4600082825461123b9190615434565b9091555050505b8215611286576001600160a01b0386166000908152603c602052604090205461126c90869061324c565b6001600160a01b0387166000908152603c60205260409020555b6001600160a01b0386166000818152603a6020908152604080832054815190815291820188905260019082015260608101919091528291907f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a9060800160405180910390a3505050505050565b600054600390610100900460ff16158015611315575060005460ff8083169116105b6113785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d0a565b6000805461ffff191660ff831617610100179055610d32600e83612fce565b6000610c706113a584612f3d565b6001600160a01b0316600090815260376020908152604080832086845290915290205460ff1690565b600054610100900460ff16158080156113ee5750600054600160ff909116105b806114085750303b158015611408575060005460ff166001145b61146b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d0a565b6000805460ff19166001179055801561148e576000805461ff0019166101001790555b61149960068e612fce565b6114a460098d612fce565b6114af60078c612fce565b6114ba60058b612fce565b6114c5600a8a612fce565b6114ce87613263565b6114d786613298565b6114e0856132cd565b6114e984613168565b6114f3823561333e565b6115006020830135613373565b6001839055801561154b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b600080611566436122d8565b83111580611581575060008381526005602052604090205415155b600093845260056020526040909320549293915050565b6060610c846115a5611601565b6133a8565b6115b26130f4565b610dad81613373565b6060610c706115fc84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061342492505050565b6134a0565b606060aa5467ffffffffffffffff81111561161e5761161e615476565b604051908082528060200260200182016040528015611647578160200160208202803683370190505b5090506000805b82518110156116c557600081815260ab60205260409020546001600160a01b031661167881613546565b156116bc578084846116898161548c565b95508151811061169b5761169b615460565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161164e565b50815290565b6116d36130f4565b610dad81613298565b6116e4613580565b60006116ef33612f3d565b905060006116fc82613546565b801561170e575061170c826135b9565b155b801561174e575061174c82611721610c79565b6001600160a01b03919091166000908152603760209081526040808320938352929052205460ff1690565b155b905060008061175d6007612a15565b6040517f0634f5b90000000000000000000000000000000000000000000000000000000081528415156004820152600060248201526001600160a01b039190911690630634f5b9906044016080604051808303816000875af11580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117eb91906154a5565b93505092505082611859573460e460008282546118089190615434565b92505081905550836001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e34600160405161184b9291906154fa565b60405180910390a250505050565b60408051348152602081018490526001600160a01b038616917f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b1910160405180910390a260006118a7610c79565b905060006118b58434615434565b905060006127106118c6858461551e565b6118d0919061554b565b905060006118de8284615421565b905060008260e260008282546118f49190615434565b909155505033600090815260386020908152604080832088845290915290205460ff1615611a085760006119286006612a15565b6001600160a01b031663c6391fa26040518163ffffffff1660e01b8152600401608060405180830381865afa158015611965573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611989919061555f565b9350505050612710818461199d919061551e565b6119a7919061554b565b91508160e460008282546119bb9190615434565b92505081905550896001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e8360026040516119fe9291906154fa565b60405180910390a2505b611a128183615421565b9150600080611a216009612a15565b6001600160a01b0316634530d2026040518163ffffffff1660e01b81526004016040805180830381865afa158015611a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a819190615595565b6001600160a01b038d1660009081526075602052604081206004015492945090925090611ab890611ab290846135da565b8461324c565b90506000612710611ac9878461551e565b611ad3919061554b565b6001600160a01b038e16600090815260e06020526040812080549293508392909190611b00908490615434565b90915550611b1090508187615421565b6001600160a01b038e16600090815260e1602052604081208054909190611b38908490615434565b909155505050505050505050505050505050565b60735460609067ffffffffffffffff811115611b6a57611b6a615476565b604051908082528060200260200182016040528015611bd157816020015b6040805160e08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c08201528252600019909201910181611b885790505b50905060005b8151811015611c9c576075600060738381548110611bf757611bf7615460565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c08201528251839083908110611c8957611c89615460565b6020908102919091010152600101611bd7565b5090565b600054600290610100900460ff16158015611cc2575060005460ff8083169116105b611d255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d0a565b6000805461ffff191660ff831617610100179055607154611d51906009906001600160a01b0316612fce565b606f54611d69906005906001600160a01b0316612fce565b607054611d81906006906001600160a01b0316612fce565b606d54611d99906007906001600160a01b0316612fce565b60a854611db190600a906001600160a01b0316612fce565b607180546001600160a01b0319908116909155606f8054821690556070805482169055606d805482169055606e80548216905560a8805490911690556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6000610c73611e4083612f3d565b613546565b611e4d6130f4565b610dad8161333e565b611e5e613580565b611e6743612108565b611e9d576040517f6c74eecf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ea6436122d8565b611eb16002546122d8565b10611ee8576040517f2458f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b436002556000611ef74261323d565b90506000611f06826003541090565b90506000611f12612200565b905060606000611f21436122d8565b90506000611f30826001615434565b90506000611f3c610c79565b9050611f4883866135e9565b85156120a257600080611f5b8388613758565b91509150611f6b83888484613944565b611f73613a67565b611f7b613bbb565b6000611f876006612a15565b6040517f185368db0000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063185368db90611fd1908b9088906004016155b9565b600060405180830381600087803b158015611feb57600080fd5b505af1158015611fff573d6000803e3d6000fd5b5050505061200c8a613d17565b8051919950975015612090576040517f07c2d2f60000000000000000000000000000000000000000000000000000000081526001600160a01b038216906307c2d2f69061205d908a9060040161529a565b600060405180830381600087803b15801561207757600080fd5b505af115801561208b573d6000803e3d6000fd5b505050505b61209b436001615434565b6004555050505b6120ad878387613ea8565b82817f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce7886040516120e2911515815260200190565b60405180910390a350600090815260056020526040902085905550505060039190915550565b6000600180546121189190615421565b60015461212590846155db565b1492915050565b6060610c708383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506134a092505050565b6121726130f4565b610dad81613263565b6121836130f4565b61218c81614144565b6121968282612fce565b5050565b6000806121a5610c79565b90506110386121b384612f3d565b6001600160a01b0316600090815260376020908152604080832085845290915290205460ff1690565b60008060006121f36121ed85612f3d565b43613072565b9250925092509193909250565b606060aa5467ffffffffffffffff81111561221d5761221d615476565b604051908082528060200260200182016040528015612246578160200160208202803683370190505b5090506000805b82518110156122a857600081815260ab602052604090205483516001600160a01b039091169250829084908390811061228857612288615460565b6001600160a01b039092166020928302919091019091015260010161224d565b505090565b6000610c736122bb83612f3d565b6001600160a01b0316600090815260746020526040902054151590565b6000610c7382614193565b6000805b60aa54811015611c9c57600081815260ab6020526040902054612312906001600160a01b0316613546565b1561231e576001909101905b6001016122e7565b6060610c846115a5612200565b6060610c846115a561260c565b6123486130f4565b6001600160a01b038216600090815260e8602052604081206001015490036123a7576040517fe8e6d2dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610d0a565b60e7548060005b828110156123fd57846001600160a01b031660e782815481106123d3576123d3615460565b6000918252602090912001546001600160a01b0316036123f5578091506123fd565b6001016123ae565b50818103612442576040517fb69ea4250000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610d0a565b6001600160a01b038416600090815260e860205260409020548015612605576001600160a01b038516600090815260e8602052604081208181556001908101919091558311156125045760e7612499600185615421565b815481106124a9576124a9615460565b60009182526020909120015460e780546001600160a01b0390921691849081106124d5576124d5615460565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480612515576125156155ef565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260e9905260409020805460ff1916600117905561256784826104b06141ae565b156125c057836001600160a01b0316856001600160a01b03167f7229136a18186c71a86246c012af3bb1df6460ef163934bbdccd6368abdd41e4836040516125b191815260200190565b60405180910390a35050505050565b604080518281524760208201526001600160a01b0380871692908816917f3747d14eb72ad3e35cba9c3e00dab3b8d15b40cac6bdbd08402356e4f69f30a191016125b1565b5050505050565b6060607380548060200260200160405190810160405280929190818152602001828054801561266457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612646575b5050505050905090565b6126766130f4565b610dad816132cd565b600961268a816131d8565b6001600160a01b038316600090815260e8602052604090206001810154156126de576040517f2bd5598800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006126ea8442615434565b6001600160a01b038616600090815260756020526040902090915061270f9082614223565b6001600160a01b0385166000818152603b602052604080822084905560e554905163138ac02f60e11b815260048101939093526024830152903390632715805e906044016020604051808303816000875af1158015612772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127969190615447565b905080156128d557600060e654426127ae9190615434565b60e78054600180820183556000929092527f6cb0db1d7354dfb4a1464318006df0643cafe2002a86a29ff8560f900fef28a10180546001600160a01b0319166001600160a01b038b16179055838655850181905590506128357fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6001600160a01b03888116600081815260756020526040908190206002015490517fa2fae5700000000000000000000000000000000000000000000000000000000081526004810192909252821660248201524260448201526064810184905291169063a2fae57090608401600060405180830381600087803b1580156128bb57600080fd5b505af11580156128cf573d6000803e3d6000fd5b50505050505b856001600160a01b03167f77a1a819870c0f4d04c3ca4cc2881a0393136abc28bd651af50aedade94a27c48260405161291091815260200190565b60405180910390a2505050505050565b600f61292b816131d8565b506001600160a01b03918216600090815260756020526040902060010180546001600160a01b03191691909216179055565b6009612968816131d8565b612971836142bf565b156129a8576040517f030081e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660009081526075602052604090206005810154156129fc576040517ffab9167300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612a0f81612a0a8542615434565b614223565b50505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115612a4c57612a4c6154e4565b60ff1681526020810191909152604001600020546001600160a01b03169050806110ce57816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610d0a9190615619565b6009612aaf816131d8565b6001600160a01b03841660009081526077602052604090205415612aff576040517f5e65b9ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710821115612b2257604051631b8454a360e21b815260040160405180910390fd5b607654831015612b5e576040517ffa0ae69300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166000908152607760205260408120906201518085612b86824261554b565b612b909190615434565b612b9a919061551e565b8083556001830185905560408051828152602081018790529192506001600160a01b038816917f6ebafd1bb6316b2f63198a81b05cff2149c6eaae1784466a6d062b4391900f219101612910565b600f612bf3816131d8565b506001600160a01b03918216600090815260756020526040902080546001600160a01b03191691909216179055565b600f612c2d816131d8565b506001600160a01b03918216600090815260756020526040902060020180546001600160a01b03191691909216179055565b604080518082019091526000808252602082015260776000612c8084612f3d565b6001600160a01b031681526020808201929092526040908101600020815180830190925280548252600101549181019190915292915050565b6009612cc4816131d8565b6073546072548110612d02576040517f8616841b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03851660009081526074602052604090205415612d52576040517f8ad9cdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710831115612d7557604051631b8454a360e21b815260040160405180910390fd5b60005b81811015612e6c5760006075600060738481548110612d9957612d99615460565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250811690891603612e0e576040517ffc3d8c750000000000000000000000000000000000000000000000000000000081526001600160a01b0389166004820152602401610d0a565b60028101546001600160a01b0390811690871603612e63576040517f5a674fce0000000000000000000000000000000000000000000000000000000081526001600160a01b0387166004820152602401610d0a565b50600101612d78565b506001600160a01b038581166000818152607460209081526040808320861990556073805460018082019092557ff79bde9ddd17963ebce6f7d021d60de7c2bd0db944d23c900c0c0e775f5300520180546001600160a01b031990811687179091556075909352818420805484168d881690811782559181018054851687179055600281018054909416968b1696871790935560048301899055905191949093909290917f1ca451a9920472b99355a9cf74185bf017604a7849c113f020888ecec9db93669190a450505050505050565b6000612f49600f612a15565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa158015612faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190615627565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f811115613004576130046154e4565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f811115613045576130456154e4565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b0382166000908152603a602052604081205481908190848110156130a857600080600093509350935050610d95565b600193506130b68582615421565b6130c1906001615434565b92506130cc856122d8565b6130d5826122d8565b6130df9190615421565b6130ea906001615434565b9150509250925092565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610c3d576000356001600160e01b03191660016040517f3e523c00000000000000000000000000000000000000000000000000000000008152600401610d0a929190615644565b60018110156131a3576040517f17b8970f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60768190556040518181527f266d432ffe659e3565750d26ec685b822a58041eee724b67a5afec3168a2526790602001611e27565b6131e181612a15565b6001600160a01b0316336001600160a01b031614610dad576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610d0a93929190615665565b6000610c73620151808361554b565b60008183101561325c5781610c70565b5090919050565b60a98190556040518181527fb5464c05fd0e0f000c535850116cda2742ee1f7b34384cb920ad7b8e802138b590602001611e27565b60728190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab490602001611e27565b60a954811115613309576040517faa8119d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ad8190556040518181527fa9588dc77416849bd922605ce4fc806712281ad8a8f32d4238d6c8cca548e15e90602001611e27565b60e58190556040518181527f17a6c3eb965cdd7439982da25abf85be88f0f772ca33198f548e2f99fee0289a90602001611e27565b60e68190556040518181527f0a50c66137118f386332efb949231ddd3946100dbf880003daca37ddd9e0662b90602001611e27565b60606133b4600f612a15565b6001600160a01b031663b261596f836040518263ffffffff1660e01b81526004016133df919061529a565b600060405180830381865afa1580156133fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c7391908101906156ef565b6060613430600f612a15565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b815260040161345b9190615140565b600060405180830381865afa158015613478573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c73919081019061578e565b6060815167ffffffffffffffff8111156134bc576134bc615476565b6040519080825280602002602001820160405280156134e5578160200160208202803683370190505b50905060005b82518110156135405761351683828151811061350957613509615460565b60200260200101516135b9565b82828151811061352857613528615460565b911515602092830291909101909101526001016134eb565b50919050565b6001600160a01b038116600090815260ac6020526040812054610c739060019060ff16600381111561357a5761357a6154e4565b90614358565b334114610c3d576040517f09f358fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000908152603a6020526040812054431115610c73565b600081831061325c5781610c70565b60006135f5600e612a15565b6001600160a01b031663468d24be84846040518363ffffffff1660e01b815260040161362292919061581d565b600060405180830381865afa15801561363f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136679190810190615836565b90506000825160015461367a919061551e565b60e25490915060009081805b865181101561372957848682815181106136a2576136a2615460565b6020026020010151846136b5919061551e565b6136bf919061554b565b93508360e360008984815181106136d8576136d8615460565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600082825461370f9190615434565b9091555061371f90508483615434565b9150600101613686565b506137348183615421565b60e460008282546137459190615434565b9091555050600060e25550505050505050565b60006060600080845167ffffffffffffffff81111561377957613779615476565b6040519080825280602002602001820160405280156137a2578160200160208202803683370190505b50925060005b855181101561393a578581815181106137c3576137c3615460565b6020908102919091018101516001600160a01b03808216600090815260759093526040909220600201549094501691506137fc836135b9565b15801561382d57506001600160a01b03831660009081526037602090815260408083208a845290915290205460ff16155b156138ab576001600160a01b038316600090815260e160205260409020546138559086615434565b6001600160a01b038416600090815260e1602052604090205485519196509085908390811061388657613886615460565b60200260200101818152505061389c838361438b565b6138a68383614453565b613902565b6001600160a01b038316600090815260e3602090815260408083205460e183528184205460e09093529220546138e19190615434565b6138eb9190615434565b60e460008282546138fc9190615434565b90915550505b6001600160a01b038316600090815260e16020908152604080832083905560e0825280832083905560e39091528120556001016137a8565b5050509250929050565b60006139506009612a15565b9050821561260557613962818461450e565b15613a23576040517facd79c460000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063acd79c46906139b090879086908a906004016158ed565b600060405180830381600087803b1580156139ca57600080fd5b505af11580156139de573d6000803e3d6000fd5b505050507f9e242ca1ef9dde96eb71ef8d19a3f0f6a619b63e4c0d3998771387103656d087838584604051613a1593929190615923565b60405180910390a150612a0f565b7fe5668ec1bb2b6bb144a50f810e388da4b1d7d3fc05fcb9d588a1aac59d248f8983858447604051613a589493929190615958565b60405180910390a15050505050565b60e754600080805b83831015612a0f5760e78381548110613a8a57613a8a615460565b60009182526020808320909101546001600160a01b031680835260e89091526040909120600181015491935091504210613bb057805460e48054600090613ad2908490615434565b90915550506001600160a01b038216600090815260e860205260408120818155600101819055613b0185615995565b9450841115613b785760e78481548110613b1d57613b1d615460565b60009182526020909120015460e780546001600160a01b039092169185908110613b4957613b49615460565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480613b8957613b896155ef565b600082815260209020810160001990810180546001600160a01b0319169055019055613a6f565b600190920191613a6f565b60e4548015610dad576000613bd06007612a15565b600060e481905560408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f59f778df00000000000000000000000000000000000000000000000000000000179052905192935090916001600160a01b038416918591613c4b91906159ac565b60006040518083038185875af1925050503d8060008114613c88576040519150601f19603f3d011682016040523d82523d6000602084013e613c8d565b606091505b505090508015613cd257816001600160a01b03167fc447c884574da5878be39c403db2245c22530c99b579ea7bcbb3720e1d110dc884604051610ebd91815260200190565b604080518481524760208201526001600160a01b038416917fa0561a59abed308fcd0556834574739d778cc6229018039a24ddda0f86aa0b739101610ebd565b505050565b606080613d238361456a565b90506000613d316009612a15565b6001600160a01b0316635a2ac07360736040518263ffffffff1660e01b8152600401613d5d91906159db565b600060405180830381865afa158015613d7a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613da29190810190615836565b90506000613db0600a612a15565b6001600160a01b0316632cccb53c60736040518263ffffffff1660e01b8152600401613ddc91906159db565b600060405180830381865afa158015613df9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e219190810190615836565b90506000613e906073805480602002602001604051908101604052809291908181526020018280548015613e7e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613e60575b5050505050848460a95460ad54614a92565b9095509050613ea0858288614ba3565b505050915091565b6000613eb46005612a15565b6001600160a01b031663ac57bd7683613ece436001615434565b6040518363ffffffff1660e01b8152600401613eeb9291906155b9565b600060405180830381865afa158015613f08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f309190810190615a1f565b905060005b82518110156140fd576000838281518110613f5257613f52615460565b6020908102919091018101516001600160a01b0381166000908152603b909252604082205490925042111590613f8783613546565b90506000613fba84613f9a436001615434565b6001600160a01b03919091166000908152603a6020526040902054101590565b80613fdb5750858581518110613fd257613fd2615460565b60200260200101515b80613fe35750825b15905081158015613ff15750805b1561406c576001600160a01b038416600090815260ac60205260409020546140309060019060ff16600381111561402a5761402a6154e4565b90614ce3565b6001600160a01b038516600090815260ac60205260409020805460ff19166001836003811115614062576140626154e4565b02179055506140ee565b818015614077575080155b156140ee576001600160a01b038416600090815260ac60205260409020546140b69060019060ff1660038111156140b0576140b06154e4565b90614d1e565b6001600160a01b038516600090815260ac60205260409020805460ff191660018360038111156140e8576140e86154e4565b02179055505b84600101945050505050613f35565b5082847f283b50d76057d5f828df85bc87724c6af604e9b55c363a07c9faa2a2cd688b82614129611601565b604051614136919061529a565b60405180910390a350505050565b806001600160a01b03163b600003610dad576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610d0a565b6000600154826141a3919061554b565b610c73906001615434565b6000826000036141c7576141c46108fc83615434565b91505b6040516001600160a01b03851690839085906000818181858888f193505050503d8060008114614213576040519150601f19603f3d011682016040523d82523d6000602084013e614218565b606091505b509095945050505050565b600182015460009061423d906001600160a01b0316612f3d565b9050614260816001600160a01b0316600090815260746020526040902054151590565b61427d5760405163a64b34ad60e01b815260040160405180910390fd5b600583018290556040518281526001600160a01b038216907fb9a1e33376bfbda9092f2d1e37662c1b435aab0d3fa8da3acc8f37ee222f99e790602001610ebd565b6000806142cc600a612a15565b6040517fb8cc3a500000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152919091169063b8cc3a5090602401602060405180830381865afa15801561432d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143519190615447565b1192915050565b600081600381111561436c5761436c6154e4565b83600381111561437e5761437e6154e4565b1660ff1615159392505050565b6001600160a01b038216600090815260e060205260409020548015613d12576143b782826104b06141ae565b1561440e57816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec8360405161440191815260200190565b60405180910390a3505050565b604080518281524760208201526001600160a01b0380851692908616917f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e9101614401565b6001600160a01b038216600090815260e360205260409020548015613d125761447f82826104b06141ae565b156144c957816001600160a01b0316836001600160a01b03167f0c4d6a43fc8470dee97db74874b5685e412cc517d9bdecfde1623c5e835b18e48360405161440191815260200190565b604080518281524760208201526001600160a01b0380851692908616917f98697ee35f04a599a814432016fff3968c483d2d88dacb484926b9358f8e7cf99101614401565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461455b576040519150601f19603f3d011682016040523d82523d6000602084013e614560565b606091505b5090949350505050565b606060006145786009612a15565b90506000816001600160a01b031663af2454296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156145ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145de9190615447565b90506000826001600160a01b031663909791dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146449190615447565b90506000836001600160a01b031663446850a160736040518263ffffffff1660e01b815260040161467591906159db565b600060405180830381865afa158015614692573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526146ba9190810190615836565b60735490915060008167ffffffffffffffff8111156146db576146db615476565b604051908082528060200260200182016040528015614704578160200160208202803683370190505b50965060008060005b848310156149ca576073838154811061472857614728615460565b60009182526020808320909101546001600160a01b03168083526075909152604090912060068101548851929450909250151590889088908690811061477057614770615460565b602002602001015110156147de57806147d957600061478f8a42615434565b600684018190556040518181529091506001600160a01b038516907f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a342759060200160405180910390a2505b614831565b8015614831578160060160009055826001600160a01b03167f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a34275600060405161482891815260200190565b60405180910390a25b6000826005015460001415801561484c575042836005015411155b8061486f57506001600160a01b038416600090815260e9602052604090205460ff165b90506000836006015460001415801561488c575042846006015411155b905081806148975750805b1561492957886148a689615995565b985088815181106148b9576148b9615460565b60200260200101518987815181106148d3576148d3615460565b602002602001018181525050848d88806001019950815181106148f8576148f8615460565b60200260200101906001600160a01b031690816001600160a01b03168152505061492185614d5a565b50505061470d565b6001600160a01b03851660009081526077602052604090205480158015906149515750428111155b156149ba576001600160a01b0386166000818152607760209081526040808320600181018054918590559390935560048901839055518281529192917f86d576c20e383fc2413ef692209cc48ddad5e52f25db5b32f8f7ec5076461ae9910160405180910390a2505b50506001909401935061470d9050565b5050508087528015614a87577f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c9187604051614a05919061529a565b60405180910390a16040517fe22d1c9d0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063e22d1c9d90614a54908a908c906004016155b9565b600060405180830381600087803b158015614a6e57600080fd5b505af1158015614a82573d6000803e3d6000fd5b505050505b505050505050919050565b60606000806068905060008888888888604051602401614ab6959493929190615aae565b60408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f779415120000000000000000000000000000000000000000000000000000000017905281518b519293506001929091600091614b279161551e565b614b32906040615434565b90506020840181888483895afa614b4857600093505b503d614b5357600092505b60208701965082614b90576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8651955050505050509550959350505050565b815b60aa54811015614bf757600081815260ab6020818152604080842080546001600160a01b0316855260ac8352908420805460ff19169055928490525280546001600160a01b0319169055600101614ba5565b5060005b82811015614c3757600081815260ab60209081526040808320546001600160a01b0316835260ac9091529020805460ff19169055600101614bfb565b5060005b82811015614cab576000848281518110614c5757614c57615460565b6020908102919091018101516001600160a01b0316600081815260ac83526040808220805460ff1916600317905585825260ab9093529190912080546001600160a01b031916909117905550600101614c3b565b508160aa81905550807f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e84604051610ebd919061529a565b6000816003811115614cf757614cf76154e4565b836003811115614d0957614d096154e4565b1760ff166003811115610c7057610c706154e4565b6000816003811115614d3257614d326154e4565b19836003811115614d4557614d456154e4565b1660ff166003811115610c7057610c706154e4565b6001600160a01b038116600090815260e960209081526040808320805460ff191690556074909152812054610dad91839190819003614d97575050565b6001600160a01b038216600090815260756020908152604080832080546001600160a01b031990811682556001808301805483169055600283018054831690556003830180549092169091556004820185905560058201859055600690910184905560748352818420849055607790925282208281558101829055607380549091614e2191615421565b81548110614e3157614e31615460565b6000918252602090912001546001600160a01b03908116915083168114614eb4576001600160a01b0381166000908152607460205260409020829055607380548291908419908110614e8557614e85615460565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6073805480614ec557614ec56155ef565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6001600160a01b0381168114610dad57600080fd5b60008060408385031215614f1457600080fd5b8235614f1f81614eec565b91506020830135614f2f81614eec565b809150509250929050565b600060208284031215614f4c57600080fd5b813561103881614eec565b60008060408385031215614f6a57600080fd5b8235614f7581614eec565b946020939093013593505050565b600060208284031215614f9557600080fd5b5035919050565b60e08101610c7382846001600160a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b815181526020808301519082015260408101610c73565b8015158114610dad57600080fd5b6000806000806080858703121561503557600080fd5b843561504081614eec565b93506020850135925060408501359150606085013561505e81615011565b939692955090935050565b8060408101831015610c7357600080fd5b6000806000806000806000806000806000806101a08d8f03121561509d57600080fd5b8c356150a881614eec565b9b5060208d01356150b881614eec565b9a5060408d01356150c881614eec565b995060608d01356150d881614eec565b985060808d01356150e881614eec565b975060a08d01356150f881614eec565b965060c08d0135955060e08d013594506101008d013593506101208d013592506101408d0135915061512e8e6101608f01615069565b90509295989b509295989b509295989b565b6020808252825182820181905260009190848201906040850190845b818110156151815783516001600160a01b03168352928401929184019160010161515c565b50909695505050505050565b60008083601f84011261519f57600080fd5b50813567ffffffffffffffff8111156151b757600080fd5b6020830191508360208260051b85010111156151d257600080fd5b9250929050565b600080602083850312156151ec57600080fd5b823567ffffffffffffffff81111561520357600080fd5b61520f8582860161518d565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015615181578351151583529284019291840191600101615237565b60008151808452602080850194506020840160005b8381101561528f5781516001600160a01b03168752958201959082019060010161526a565b509495945050505050565b602081526000610c706020830184615255565b6020808252825182820181905260009190848201906040850190845b818110156151815761532c8385516001600160a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b9284019260e092909201916001016152c9565b8035601081106110ce57600080fd5b6000806040838503121561536157600080fd5b614f1f8361533f565b60006020828403121561537c57600080fd5b610c708261533f565b60008060006060848603121561539a57600080fd5b83356153a581614eec565b95602085013595506040909401359392505050565b600080600080608085870312156153d057600080fd5b84356153db81614eec565b935060208501356153eb81614eec565b925060408501356153fb81614eec565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c7357610c7361540b565b80820180821115610c7357610c7361540b565b60006020828403121561545957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60006001820161549e5761549e61540b565b5060010190565b600080600080608085870312156154bb57600080fd5b84516154c681615011565b60208601516040870151606090970151919890975090945092505050565b634e487b7160e01b600052602160045260246000fd5b8281526040810160038310615511576155116154e4565b8260208301529392505050565b8082028115828204841417610c7357610c7361540b565b634e487b7160e01b600052601260045260246000fd5b60008261555a5761555a615535565b500490565b6000806000806080858703121561557557600080fd5b505082516020840151604085015160609095015191969095509092509050565b600080604083850312156155a857600080fd5b505080516020909101519092909150565b6040815260006155cc6040830185615255565b90508260208301529392505050565b6000826155ea576155ea615535565b500690565b634e487b7160e01b600052603160045260246000fd5b60108110615615576156156154e4565b9052565b60208101610c738284615605565b60006020828403121561563957600080fd5b815161103881614eec565b6001600160e01b03198316815260408101600b8310615511576155116154e4565b6001600160e01b031984168152606081016156836020830185615605565b6001600160a01b0383166040830152949350505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156156c3576156c3615476565b604052919050565b600067ffffffffffffffff8211156156e5576156e5615476565b5060051b60200190565b6000602080838503121561570257600080fd5b825167ffffffffffffffff81111561571957600080fd5b8301601f8101851361572a57600080fd5b805161573d615738826156cb565b61569a565b81815260059190911b8201830190838101908783111561575c57600080fd5b928401925b8284101561578357835161577481614eec565b82529284019290840190615761565b979650505050505050565b600060208083850312156157a157600080fd5b825167ffffffffffffffff8111156157b857600080fd5b8301601f810185136157c957600080fd5b80516157d7615738826156cb565b81815260059190911b820183019083810190878311156157f657600080fd5b928401925b8284101561578357835161580e81614eec565b825292840192908401906157fb565b828152604060208201526000610f0b6040830184615255565b6000602080838503121561584957600080fd5b825167ffffffffffffffff81111561586057600080fd5b8301601f8101851361587157600080fd5b805161587f615738826156cb565b81815260059190911b8201830190838101908783111561589e57600080fd5b928401925b82841015615783578351825292840192908401906158a3565b60008151808452602080850194506020840160005b8381101561528f578151875295820195908201906001016158d1565b6060815260006159006060830186615255565b828103602084015261591281866158bc565b915050826040830152949350505050565b83815260606020820152600061593c6060830185615255565b828103604084015261594e81856158bc565b9695505050505050565b8481526080602082015260006159716080830186615255565b828103604084015261598381866158bc565b91505082606083015295945050505050565b6000816159a4576159a461540b565b506000190190565b6000825160005b818110156159cd57602081860181015185830152016159b3565b506000920191825250919050565b6020808252825482820181905260008481528281209092916040850190845b818110156151815783546001600160a01b0316835260019384019392850192016159fa565b60006020808385031215615a3257600080fd5b825167ffffffffffffffff811115615a4957600080fd5b8301601f81018513615a5a57600080fd5b8051615a68615738826156cb565b81815260059190911b82018301908381019087831115615a8757600080fd5b928401925b82841015615783578351615a9f81615011565b82529284019290840190615a8c565b60a081526000615ac160a0830188615255565b8281036020840152615ad381886158bc565b90508281036040840152615ae781876158bc565b6060840195909552505060800152939250505056fea26469706673582212207139ba80bdedc2b63b3d481c7aee3e8c24a22a93ab860b859a0bf513c7ed47c664736f6c63430008160033",
  "chainId": 2021,
  "contractAbsolutePath": "RoninValidatorSet.sol",
  "deployedBytecode": "0x6080604052600436106103fd5760003560e01c80636611f8431161020d578063afc69d7311610128578063d93fa306116100bb578063ea80d67d1161008a578063edb194bb1161006f578063edb194bb14610b6b578063eeb629a814610b8b578063f883afaf14610ba05761040c565b8063ea80d67d14610b2b578063ecd850cc14610b4b5761040c565b8063d93fa30614610aab578063dd716ad314610acb578063de981f1b14610aeb578063e5125a1d14610b0b5761040c565b8063c4e227f3116100f7578063c4e227f314610a41578063c94aaa0214610a56578063cdaa4e8114610a76578063d09f1ab414610a965761040c565b8063afc69d73146109e2578063b7ab4db5146109f7578063ba77b06c14610a0c578063c3c8b5d614610a215761040c565b8063873a5a70116101a05780639a57bd931161016f5780639a57bd9314610978578063a0c3f2d21461098d578063a3d545f5146109ad578063a66c0f77146109cd5761040c565b8063873a5a701461090f57806387c891bd1461092f5780638d559c381461094457806396585fc2146109585761040c565b80637593ff71116101dc5780637593ff711461088f5780637e1dc16f146108af578063823a7b9c146108cf578063865e6fd3146108ef5761040c565b80636611f8431461083d578063690b75361461085d5780636aa1c2ef1461087257806372e46810146108875761040c565b806331a8aef5116103185780634ee4d72b116102ab5780635cd8a76b1161027a578063612c8d981161025f578063612c8d98146107f157806365244ece146108065780636558954f146108265761040c565b80635cd8a76b146107c7578063605239a1146107dc5761040c565b80634ee4d72b146107685780634f2a693f1461077d57806352091f171461079d5780635248184a146107a55761040c565b806349096d26116102e757806349096d26146106d75780634d8df063146106f95780634de2b735146107195780634e9b8b0a146107465761040c565b806331a8aef514610638578063367ec12b146106585780633b3159b614610678578063468c96ae146106a05761040c565b8063217f35c211610390578063297a8fca1161035f578063297a8fca146105b65780632d784a98146105cb5780632f78204c146105f85780633101cfcb146106185761040c565b8063217f35c21461053457806323c65eb01461054957806328bde1e1146105695780632924de71146105965761040c565b8063110a8308116103cc578063110a83081461049757806311662dc2146104b75780631196ab66146104f457806315b5ebde146105145761040c565b8063038278841461041457806304d971ab1461043d578063060406181461046d5780630f43a677146104825761040c565b3661040c5761040a610bc0565b005b61040a610bc0565b34801561042057600080fd5b5061042a6104b081565b6040519081526020015b60405180910390f35b34801561044957600080fd5b5061045d610458366004614f01565b610c3f565b6040519015158152602001610434565b34801561047957600080fd5b5061042a610c79565b34801561048e57600080fd5b5060aa5461042a565b3480156104a357600080fd5b5061040a6104b2366004614f3a565b610c89565b3480156104c357600080fd5b506104d76104d2366004614f57565b610d77565b604080519315158452602084019290925290820152606001610434565b34801561050057600080fd5b5061040a61050f366004614f83565b610d9c565b34801561052057600080fd5b5061040a61052f366004614f57565b610db0565b34801561054057600080fd5b5061045d610eca565b34801561055557600080fd5b5061045d610564366004614f57565b610edf565b34801561057557600080fd5b50610589610584366004614f3a565b610f13565b6040516104349190614f9c565b3480156105a257600080fd5b5061045d6105b1366004614f3a565b61100c565b3480156105c257600080fd5b5060045461042a565b3480156105d757600080fd5b506105eb6105e6366004614f3a565b61103f565b6040516104349190614ffa565b34801561060457600080fd5b5061040a61061336600461501f565b6110d3565b34801561062457600080fd5b5061040a610633366004614f3a565b6112f3565b34801561064457600080fd5b5061045d610653366004614f57565b611397565b34801561066457600080fd5b5061040a61067336600461507a565b6113ce565b34801561068457600080fd5b5060685b6040516001600160a01b039091168152602001610434565b3480156106ac57600080fd5b506106c06106bb366004614f83565b61155a565b604080519215158352602083019190915201610434565b3480156106e357600080fd5b506106ec611598565b6040516104349190615140565b34801561070557600080fd5b5061040a610714366004614f83565b6115aa565b34801561072557600080fd5b506107396107343660046151d9565b6115bb565b604051610434919061521b565b34801561075257600080fd5b5061075b611601565b604051610434919061529a565b34801561077457600080fd5b5060e45461042a565b34801561078957600080fd5b5061040a610798366004614f83565b6116cb565b61040a6116dc565b3480156107b157600080fd5b506107ba611b4c565b60405161043491906152ad565b3480156107d357600080fd5b5061040a611ca0565b3480156107e857600080fd5b5060725461042a565b3480156107fd57600080fd5b5060765461042a565b34801561081257600080fd5b5061045d610821366004614f3a565b611e32565b34801561083257600080fd5b5061042a6201518081565b34801561084957600080fd5b5061040a610858366004614f83565b611e45565b34801561086957600080fd5b5060e55461042a565b34801561087e57600080fd5b5060015461042a565b61040a611e56565b34801561089b57600080fd5b5061045d6108aa366004614f83565b612108565b3480156108bb57600080fd5b506107396108ca3660046151d9565b61212c565b3480156108db57600080fd5b5061040a6108ea366004614f83565b61216a565b3480156108fb57600080fd5b5061040a61090a36600461534e565b61217b565b34801561091b57600080fd5b5061045d61092a366004614f3a565b61219a565b34801561093b57600080fd5b5060025461042a565b34801561095057600080fd5b506066610688565b34801561096457600080fd5b506104d7610973366004614f3a565b6121dc565b34801561098457600080fd5b5061075b612200565b34801561099957600080fd5b5061045d6109a8366004614f3a565b6122ad565b3480156109b957600080fd5b5061042a6109c8366004614f83565b6122d8565b3480156109d957600080fd5b5060e65461042a565b3480156109ee57600080fd5b5061042a6122e3565b348015610a0357600080fd5b506106ec612326565b348015610a1857600080fd5b506106ec612333565b348015610a2d57600080fd5b5061040a610a3c366004614f01565b612340565b348015610a4d57600080fd5b5061075b61260c565b348015610a6257600080fd5b5061040a610a71366004614f83565b61266e565b348015610a8257600080fd5b5061040a610a91366004614f57565b61267f565b348015610aa257600080fd5b5060a95461042a565b348015610ab757600080fd5b5061040a610ac6366004614f01565b612920565b348015610ad757600080fd5b5061040a610ae6366004614f57565b61295d565b348015610af757600080fd5b50610688610b0636600461536a565b612a15565b348015610b1757600080fd5b5061040a610b26366004615385565b612aa4565b348015610b3757600080fd5b5061040a610b46366004614f01565b612be8565b348015610b5757600080fd5b5061040a610b66366004614f01565b612c22565b348015610b7757600080fd5b506105eb610b86366004614f3a565b612c5f565b348015610b9757600080fd5b5060ad5461042a565b348015610bac57600080fd5b5061040a610bbb3660046153ba565b612cb9565b610bca6007612a15565b6001600160a01b0316336001600160a01b031614158015610c065750610bf06009612a15565b6001600160a01b0316336001600160a01b031614155b15610c3d576040517fffcb451300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000610c70610c4d84612f3d565b6001600160a01b0390811660009081526075602052604090205481169084161490565b90505b92915050565b6000610c8460035490565b905090565b600054600490610100900460ff16158015610cab575060005460ff8083169116105b610d135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff831617610100179055610d32600f83612fce565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6000806000610d8e610d8886612f3d565b85613072565b9250925092505b9250925092565b610da46130f4565b610dad81613168565b50565b6006610dbb816131d8565b6001600160a01b0383166000908152603c60205260409020544311610e17576040517f53e0424d0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610d0a565b6001600160a01b038316600081815260386020908152604080832086845282528083208054600160ff199182168117909255948452603783528184208785529092529091208054909216909155610e6e9043615421565b6001600160a01b0384166000818152603a6020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e90610ebd9085815260200190565b60405180910390a2505050565b6000610c84610ed84261323d565b6003541090565b600080610eeb84612f3d565b6001600160a01b0381166000908152603a60205260409020549091508311155b949350505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905290610f5583612f3d565b9050610f78816001600160a01b0316600090815260746020526040902054151590565b610f955760405163a64b34ad60e01b815260040160405180910390fd5b6001600160a01b03908116600090815260756020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015292915050565b60008061101883612f3d565b6001600160a01b0381166000908152603a60205260409020549091504311155b9392505050565b604080518082019091526000808252602082015260e8600061106084612f3d565b6001600160a01b031681526020808201929092526040908101600090812082518084019093528054835260010154928201839052909250036110ce576040517fe1fba9e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60066110de816131d8565b60006110e8610c79565b6001600160a01b03871660008181526037602090815260408083208584528252808320805460ff1916600117905592825260e181528282205460e09091529190205491925061113691615434565b60e460008282546111479190615434565b90915550506001600160a01b038616600090815260e06020908152604080832083905560e18252808320839055603a90915290205461118790869061324c565b6001600160a01b0387166000908152603a602052604090205583156112425760006111b26009612a15565b60405163138ac02f60e11b81526001600160a01b038981166004830152602482018890529190911690632715805e906044016020604051808303816000875af1158015611203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112279190615447565b90508060e4600082825461123b9190615434565b9091555050505b8215611286576001600160a01b0386166000908152603c602052604090205461126c90869061324c565b6001600160a01b0387166000908152603c60205260409020555b6001600160a01b0386166000818152603a6020908152604080832054815190815291820188905260019082015260608101919091528291907f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a9060800160405180910390a3505050505050565b600054600390610100900460ff16158015611315575060005460ff8083169116105b6113785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d0a565b6000805461ffff191660ff831617610100179055610d32600e83612fce565b6000610c706113a584612f3d565b6001600160a01b0316600090815260376020908152604080832086845290915290205460ff1690565b600054610100900460ff16158080156113ee5750600054600160ff909116105b806114085750303b158015611408575060005460ff166001145b61146b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d0a565b6000805460ff19166001179055801561148e576000805461ff0019166101001790555b61149960068e612fce565b6114a460098d612fce565b6114af60078c612fce565b6114ba60058b612fce565b6114c5600a8a612fce565b6114ce87613263565b6114d786613298565b6114e0856132cd565b6114e984613168565b6114f3823561333e565b6115006020830135613373565b6001839055801561154b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b600080611566436122d8565b83111580611581575060008381526005602052604090205415155b600093845260056020526040909320549293915050565b6060610c846115a5611601565b6133a8565b6115b26130f4565b610dad81613373565b6060610c706115fc84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061342492505050565b6134a0565b606060aa5467ffffffffffffffff81111561161e5761161e615476565b604051908082528060200260200182016040528015611647578160200160208202803683370190505b5090506000805b82518110156116c557600081815260ab60205260409020546001600160a01b031661167881613546565b156116bc578084846116898161548c565b95508151811061169b5761169b615460565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161164e565b50815290565b6116d36130f4565b610dad81613298565b6116e4613580565b60006116ef33612f3d565b905060006116fc82613546565b801561170e575061170c826135b9565b155b801561174e575061174c82611721610c79565b6001600160a01b03919091166000908152603760209081526040808320938352929052205460ff1690565b155b905060008061175d6007612a15565b6040517f0634f5b90000000000000000000000000000000000000000000000000000000081528415156004820152600060248201526001600160a01b039190911690630634f5b9906044016080604051808303816000875af11580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117eb91906154a5565b93505092505082611859573460e460008282546118089190615434565b92505081905550836001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e34600160405161184b9291906154fa565b60405180910390a250505050565b60408051348152602081018490526001600160a01b038616917f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b1910160405180910390a260006118a7610c79565b905060006118b58434615434565b905060006127106118c6858461551e565b6118d0919061554b565b905060006118de8284615421565b905060008260e260008282546118f49190615434565b909155505033600090815260386020908152604080832088845290915290205460ff1615611a085760006119286006612a15565b6001600160a01b031663c6391fa26040518163ffffffff1660e01b8152600401608060405180830381865afa158015611965573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611989919061555f565b9350505050612710818461199d919061551e565b6119a7919061554b565b91508160e460008282546119bb9190615434565b92505081905550896001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e8360026040516119fe9291906154fa565b60405180910390a2505b611a128183615421565b9150600080611a216009612a15565b6001600160a01b0316634530d2026040518163ffffffff1660e01b81526004016040805180830381865afa158015611a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a819190615595565b6001600160a01b038d1660009081526075602052604081206004015492945090925090611ab890611ab290846135da565b8461324c565b90506000612710611ac9878461551e565b611ad3919061554b565b6001600160a01b038e16600090815260e06020526040812080549293508392909190611b00908490615434565b90915550611b1090508187615421565b6001600160a01b038e16600090815260e1602052604081208054909190611b38908490615434565b909155505050505050505050505050505050565b60735460609067ffffffffffffffff811115611b6a57611b6a615476565b604051908082528060200260200182016040528015611bd157816020015b6040805160e08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c08201528252600019909201910181611b885790505b50905060005b8151811015611c9c576075600060738381548110611bf757611bf7615460565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c08201528251839083908110611c8957611c89615460565b6020908102919091010152600101611bd7565b5090565b600054600290610100900460ff16158015611cc2575060005460ff8083169116105b611d255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d0a565b6000805461ffff191660ff831617610100179055607154611d51906009906001600160a01b0316612fce565b606f54611d69906005906001600160a01b0316612fce565b607054611d81906006906001600160a01b0316612fce565b606d54611d99906007906001600160a01b0316612fce565b60a854611db190600a906001600160a01b0316612fce565b607180546001600160a01b0319908116909155606f8054821690556070805482169055606d805482169055606e80548216905560a8805490911690556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6000610c73611e4083612f3d565b613546565b611e4d6130f4565b610dad8161333e565b611e5e613580565b611e6743612108565b611e9d576040517f6c74eecf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ea6436122d8565b611eb16002546122d8565b10611ee8576040517f2458f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b436002556000611ef74261323d565b90506000611f06826003541090565b90506000611f12612200565b905060606000611f21436122d8565b90506000611f30826001615434565b90506000611f3c610c79565b9050611f4883866135e9565b85156120a257600080611f5b8388613758565b91509150611f6b83888484613944565b611f73613a67565b611f7b613bbb565b6000611f876006612a15565b6040517f185368db0000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063185368db90611fd1908b9088906004016155b9565b600060405180830381600087803b158015611feb57600080fd5b505af1158015611fff573d6000803e3d6000fd5b5050505061200c8a613d17565b8051919950975015612090576040517f07c2d2f60000000000000000000000000000000000000000000000000000000081526001600160a01b038216906307c2d2f69061205d908a9060040161529a565b600060405180830381600087803b15801561207757600080fd5b505af115801561208b573d6000803e3d6000fd5b505050505b61209b436001615434565b6004555050505b6120ad878387613ea8565b82817f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce7886040516120e2911515815260200190565b60405180910390a350600090815260056020526040902085905550505060039190915550565b6000600180546121189190615421565b60015461212590846155db565b1492915050565b6060610c708383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506134a092505050565b6121726130f4565b610dad81613263565b6121836130f4565b61218c81614144565b6121968282612fce565b5050565b6000806121a5610c79565b90506110386121b384612f3d565b6001600160a01b0316600090815260376020908152604080832085845290915290205460ff1690565b60008060006121f36121ed85612f3d565b43613072565b9250925092509193909250565b606060aa5467ffffffffffffffff81111561221d5761221d615476565b604051908082528060200260200182016040528015612246578160200160208202803683370190505b5090506000805b82518110156122a857600081815260ab602052604090205483516001600160a01b039091169250829084908390811061228857612288615460565b6001600160a01b039092166020928302919091019091015260010161224d565b505090565b6000610c736122bb83612f3d565b6001600160a01b0316600090815260746020526040902054151590565b6000610c7382614193565b6000805b60aa54811015611c9c57600081815260ab6020526040902054612312906001600160a01b0316613546565b1561231e576001909101905b6001016122e7565b6060610c846115a5612200565b6060610c846115a561260c565b6123486130f4565b6001600160a01b038216600090815260e8602052604081206001015490036123a7576040517fe8e6d2dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610d0a565b60e7548060005b828110156123fd57846001600160a01b031660e782815481106123d3576123d3615460565b6000918252602090912001546001600160a01b0316036123f5578091506123fd565b6001016123ae565b50818103612442576040517fb69ea4250000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610d0a565b6001600160a01b038416600090815260e860205260409020548015612605576001600160a01b038516600090815260e8602052604081208181556001908101919091558311156125045760e7612499600185615421565b815481106124a9576124a9615460565b60009182526020909120015460e780546001600160a01b0390921691849081106124d5576124d5615460565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480612515576125156155ef565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260e9905260409020805460ff1916600117905561256784826104b06141ae565b156125c057836001600160a01b0316856001600160a01b03167f7229136a18186c71a86246c012af3bb1df6460ef163934bbdccd6368abdd41e4836040516125b191815260200190565b60405180910390a35050505050565b604080518281524760208201526001600160a01b0380871692908816917f3747d14eb72ad3e35cba9c3e00dab3b8d15b40cac6bdbd08402356e4f69f30a191016125b1565b5050505050565b6060607380548060200260200160405190810160405280929190818152602001828054801561266457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612646575b5050505050905090565b6126766130f4565b610dad816132cd565b600961268a816131d8565b6001600160a01b038316600090815260e8602052604090206001810154156126de576040517f2bd5598800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006126ea8442615434565b6001600160a01b038616600090815260756020526040902090915061270f9082614223565b6001600160a01b0385166000818152603b602052604080822084905560e554905163138ac02f60e11b815260048101939093526024830152903390632715805e906044016020604051808303816000875af1158015612772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127969190615447565b905080156128d557600060e654426127ae9190615434565b60e78054600180820183556000929092527f6cb0db1d7354dfb4a1464318006df0643cafe2002a86a29ff8560f900fef28a10180546001600160a01b0319166001600160a01b038b16179055838655850181905590506128357fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6001600160a01b03888116600081815260756020526040908190206002015490517fa2fae5700000000000000000000000000000000000000000000000000000000081526004810192909252821660248201524260448201526064810184905291169063a2fae57090608401600060405180830381600087803b1580156128bb57600080fd5b505af11580156128cf573d6000803e3d6000fd5b50505050505b856001600160a01b03167f77a1a819870c0f4d04c3ca4cc2881a0393136abc28bd651af50aedade94a27c48260405161291091815260200190565b60405180910390a2505050505050565b600f61292b816131d8565b506001600160a01b03918216600090815260756020526040902060010180546001600160a01b03191691909216179055565b6009612968816131d8565b612971836142bf565b156129a8576040517f030081e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660009081526075602052604090206005810154156129fc576040517ffab9167300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612a0f81612a0a8542615434565b614223565b50505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115612a4c57612a4c6154e4565b60ff1681526020810191909152604001600020546001600160a01b03169050806110ce57816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610d0a9190615619565b6009612aaf816131d8565b6001600160a01b03841660009081526077602052604090205415612aff576040517f5e65b9ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710821115612b2257604051631b8454a360e21b815260040160405180910390fd5b607654831015612b5e576040517ffa0ae69300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166000908152607760205260408120906201518085612b86824261554b565b612b909190615434565b612b9a919061551e565b8083556001830185905560408051828152602081018790529192506001600160a01b038816917f6ebafd1bb6316b2f63198a81b05cff2149c6eaae1784466a6d062b4391900f219101612910565b600f612bf3816131d8565b506001600160a01b03918216600090815260756020526040902080546001600160a01b03191691909216179055565b600f612c2d816131d8565b506001600160a01b03918216600090815260756020526040902060020180546001600160a01b03191691909216179055565b604080518082019091526000808252602082015260776000612c8084612f3d565b6001600160a01b031681526020808201929092526040908101600020815180830190925280548252600101549181019190915292915050565b6009612cc4816131d8565b6073546072548110612d02576040517f8616841b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03851660009081526074602052604090205415612d52576040517f8ad9cdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710831115612d7557604051631b8454a360e21b815260040160405180910390fd5b60005b81811015612e6c5760006075600060738481548110612d9957612d99615460565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250811690891603612e0e576040517ffc3d8c750000000000000000000000000000000000000000000000000000000081526001600160a01b0389166004820152602401610d0a565b60028101546001600160a01b0390811690871603612e63576040517f5a674fce0000000000000000000000000000000000000000000000000000000081526001600160a01b0387166004820152602401610d0a565b50600101612d78565b506001600160a01b038581166000818152607460209081526040808320861990556073805460018082019092557ff79bde9ddd17963ebce6f7d021d60de7c2bd0db944d23c900c0c0e775f5300520180546001600160a01b031990811687179091556075909352818420805484168d881690811782559181018054851687179055600281018054909416968b1696871790935560048301899055905191949093909290917f1ca451a9920472b99355a9cf74185bf017604a7849c113f020888ecec9db93669190a450505050505050565b6000612f49600f612a15565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa158015612faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190615627565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f811115613004576130046154e4565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f811115613045576130456154e4565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b0382166000908152603a602052604081205481908190848110156130a857600080600093509350935050610d95565b600193506130b68582615421565b6130c1906001615434565b92506130cc856122d8565b6130d5826122d8565b6130df9190615421565b6130ea906001615434565b9150509250925092565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610c3d576000356001600160e01b03191660016040517f3e523c00000000000000000000000000000000000000000000000000000000008152600401610d0a929190615644565b60018110156131a3576040517f17b8970f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60768190556040518181527f266d432ffe659e3565750d26ec685b822a58041eee724b67a5afec3168a2526790602001611e27565b6131e181612a15565b6001600160a01b0316336001600160a01b031614610dad576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610d0a93929190615665565b6000610c73620151808361554b565b60008183101561325c5781610c70565b5090919050565b60a98190556040518181527fb5464c05fd0e0f000c535850116cda2742ee1f7b34384cb920ad7b8e802138b590602001611e27565b60728190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab490602001611e27565b60a954811115613309576040517faa8119d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ad8190556040518181527fa9588dc77416849bd922605ce4fc806712281ad8a8f32d4238d6c8cca548e15e90602001611e27565b60e58190556040518181527f17a6c3eb965cdd7439982da25abf85be88f0f772ca33198f548e2f99fee0289a90602001611e27565b60e68190556040518181527f0a50c66137118f386332efb949231ddd3946100dbf880003daca37ddd9e0662b90602001611e27565b60606133b4600f612a15565b6001600160a01b031663b261596f836040518263ffffffff1660e01b81526004016133df919061529a565b600060405180830381865afa1580156133fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c7391908101906156ef565b6060613430600f612a15565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b815260040161345b9190615140565b600060405180830381865afa158015613478573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c73919081019061578e565b6060815167ffffffffffffffff8111156134bc576134bc615476565b6040519080825280602002602001820160405280156134e5578160200160208202803683370190505b50905060005b82518110156135405761351683828151811061350957613509615460565b60200260200101516135b9565b82828151811061352857613528615460565b911515602092830291909101909101526001016134eb565b50919050565b6001600160a01b038116600090815260ac6020526040812054610c739060019060ff16600381111561357a5761357a6154e4565b90614358565b334114610c3d576040517f09f358fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000908152603a6020526040812054431115610c73565b600081831061325c5781610c70565b60006135f5600e612a15565b6001600160a01b031663468d24be84846040518363ffffffff1660e01b815260040161362292919061581d565b600060405180830381865afa15801561363f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136679190810190615836565b90506000825160015461367a919061551e565b60e25490915060009081805b865181101561372957848682815181106136a2576136a2615460565b6020026020010151846136b5919061551e565b6136bf919061554b565b93508360e360008984815181106136d8576136d8615460565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600082825461370f9190615434565b9091555061371f90508483615434565b9150600101613686565b506137348183615421565b60e460008282546137459190615434565b9091555050600060e25550505050505050565b60006060600080845167ffffffffffffffff81111561377957613779615476565b6040519080825280602002602001820160405280156137a2578160200160208202803683370190505b50925060005b855181101561393a578581815181106137c3576137c3615460565b6020908102919091018101516001600160a01b03808216600090815260759093526040909220600201549094501691506137fc836135b9565b15801561382d57506001600160a01b03831660009081526037602090815260408083208a845290915290205460ff16155b156138ab576001600160a01b038316600090815260e160205260409020546138559086615434565b6001600160a01b038416600090815260e1602052604090205485519196509085908390811061388657613886615460565b60200260200101818152505061389c838361438b565b6138a68383614453565b613902565b6001600160a01b038316600090815260e3602090815260408083205460e183528184205460e09093529220546138e19190615434565b6138eb9190615434565b60e460008282546138fc9190615434565b90915550505b6001600160a01b038316600090815260e16020908152604080832083905560e0825280832083905560e39091528120556001016137a8565b5050509250929050565b60006139506009612a15565b9050821561260557613962818461450e565b15613a23576040517facd79c460000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063acd79c46906139b090879086908a906004016158ed565b600060405180830381600087803b1580156139ca57600080fd5b505af11580156139de573d6000803e3d6000fd5b505050507f9e242ca1ef9dde96eb71ef8d19a3f0f6a619b63e4c0d3998771387103656d087838584604051613a1593929190615923565b60405180910390a150612a0f565b7fe5668ec1bb2b6bb144a50f810e388da4b1d7d3fc05fcb9d588a1aac59d248f8983858447604051613a589493929190615958565b60405180910390a15050505050565b60e754600080805b83831015612a0f5760e78381548110613a8a57613a8a615460565b60009182526020808320909101546001600160a01b031680835260e89091526040909120600181015491935091504210613bb057805460e48054600090613ad2908490615434565b90915550506001600160a01b038216600090815260e860205260408120818155600101819055613b0185615995565b9450841115613b785760e78481548110613b1d57613b1d615460565b60009182526020909120015460e780546001600160a01b039092169185908110613b4957613b49615460565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480613b8957613b896155ef565b600082815260209020810160001990810180546001600160a01b0319169055019055613a6f565b600190920191613a6f565b60e4548015610dad576000613bd06007612a15565b600060e481905560408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f59f778df00000000000000000000000000000000000000000000000000000000179052905192935090916001600160a01b038416918591613c4b91906159ac565b60006040518083038185875af1925050503d8060008114613c88576040519150601f19603f3d011682016040523d82523d6000602084013e613c8d565b606091505b505090508015613cd257816001600160a01b03167fc447c884574da5878be39c403db2245c22530c99b579ea7bcbb3720e1d110dc884604051610ebd91815260200190565b604080518481524760208201526001600160a01b038416917fa0561a59abed308fcd0556834574739d778cc6229018039a24ddda0f86aa0b739101610ebd565b505050565b606080613d238361456a565b90506000613d316009612a15565b6001600160a01b0316635a2ac07360736040518263ffffffff1660e01b8152600401613d5d91906159db565b600060405180830381865afa158015613d7a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613da29190810190615836565b90506000613db0600a612a15565b6001600160a01b0316632cccb53c60736040518263ffffffff1660e01b8152600401613ddc91906159db565b600060405180830381865afa158015613df9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e219190810190615836565b90506000613e906073805480602002602001604051908101604052809291908181526020018280548015613e7e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613e60575b5050505050848460a95460ad54614a92565b9095509050613ea0858288614ba3565b505050915091565b6000613eb46005612a15565b6001600160a01b031663ac57bd7683613ece436001615434565b6040518363ffffffff1660e01b8152600401613eeb9291906155b9565b600060405180830381865afa158015613f08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613f309190810190615a1f565b905060005b82518110156140fd576000838281518110613f5257613f52615460565b6020908102919091018101516001600160a01b0381166000908152603b909252604082205490925042111590613f8783613546565b90506000613fba84613f9a436001615434565b6001600160a01b03919091166000908152603a6020526040902054101590565b80613fdb5750858581518110613fd257613fd2615460565b60200260200101515b80613fe35750825b15905081158015613ff15750805b1561406c576001600160a01b038416600090815260ac60205260409020546140309060019060ff16600381111561402a5761402a6154e4565b90614ce3565b6001600160a01b038516600090815260ac60205260409020805460ff19166001836003811115614062576140626154e4565b02179055506140ee565b818015614077575080155b156140ee576001600160a01b038416600090815260ac60205260409020546140b69060019060ff1660038111156140b0576140b06154e4565b90614d1e565b6001600160a01b038516600090815260ac60205260409020805460ff191660018360038111156140e8576140e86154e4565b02179055505b84600101945050505050613f35565b5082847f283b50d76057d5f828df85bc87724c6af604e9b55c363a07c9faa2a2cd688b82614129611601565b604051614136919061529a565b60405180910390a350505050565b806001600160a01b03163b600003610dad576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610d0a565b6000600154826141a3919061554b565b610c73906001615434565b6000826000036141c7576141c46108fc83615434565b91505b6040516001600160a01b03851690839085906000818181858888f193505050503d8060008114614213576040519150601f19603f3d011682016040523d82523d6000602084013e614218565b606091505b509095945050505050565b600182015460009061423d906001600160a01b0316612f3d565b9050614260816001600160a01b0316600090815260746020526040902054151590565b61427d5760405163a64b34ad60e01b815260040160405180910390fd5b600583018290556040518281526001600160a01b038216907fb9a1e33376bfbda9092f2d1e37662c1b435aab0d3fa8da3acc8f37ee222f99e790602001610ebd565b6000806142cc600a612a15565b6040517fb8cc3a500000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152919091169063b8cc3a5090602401602060405180830381865afa15801561432d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143519190615447565b1192915050565b600081600381111561436c5761436c6154e4565b83600381111561437e5761437e6154e4565b1660ff1615159392505050565b6001600160a01b038216600090815260e060205260409020548015613d12576143b782826104b06141ae565b1561440e57816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec8360405161440191815260200190565b60405180910390a3505050565b604080518281524760208201526001600160a01b0380851692908616917f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e9101614401565b6001600160a01b038216600090815260e360205260409020548015613d125761447f82826104b06141ae565b156144c957816001600160a01b0316836001600160a01b03167f0c4d6a43fc8470dee97db74874b5685e412cc517d9bdecfde1623c5e835b18e48360405161440191815260200190565b604080518281524760208201526001600160a01b0380851692908616917f98697ee35f04a599a814432016fff3968c483d2d88dacb484926b9358f8e7cf99101614401565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461455b576040519150601f19603f3d011682016040523d82523d6000602084013e614560565b606091505b5090949350505050565b606060006145786009612a15565b90506000816001600160a01b031663af2454296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156145ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145de9190615447565b90506000826001600160a01b031663909791dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146449190615447565b90506000836001600160a01b031663446850a160736040518263ffffffff1660e01b815260040161467591906159db565b600060405180830381865afa158015614692573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526146ba9190810190615836565b60735490915060008167ffffffffffffffff8111156146db576146db615476565b604051908082528060200260200182016040528015614704578160200160208202803683370190505b50965060008060005b848310156149ca576073838154811061472857614728615460565b60009182526020808320909101546001600160a01b03168083526075909152604090912060068101548851929450909250151590889088908690811061477057614770615460565b602002602001015110156147de57806147d957600061478f8a42615434565b600684018190556040518181529091506001600160a01b038516907f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a342759060200160405180910390a2505b614831565b8015614831578160060160009055826001600160a01b03167f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a34275600060405161482891815260200190565b60405180910390a25b6000826005015460001415801561484c575042836005015411155b8061486f57506001600160a01b038416600090815260e9602052604090205460ff165b90506000836006015460001415801561488c575042846006015411155b905081806148975750805b1561492957886148a689615995565b985088815181106148b9576148b9615460565b60200260200101518987815181106148d3576148d3615460565b602002602001018181525050848d88806001019950815181106148f8576148f8615460565b60200260200101906001600160a01b031690816001600160a01b03168152505061492185614d5a565b50505061470d565b6001600160a01b03851660009081526077602052604090205480158015906149515750428111155b156149ba576001600160a01b0386166000818152607760209081526040808320600181018054918590559390935560048901839055518281529192917f86d576c20e383fc2413ef692209cc48ddad5e52f25db5b32f8f7ec5076461ae9910160405180910390a2505b50506001909401935061470d9050565b5050508087528015614a87577f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c9187604051614a05919061529a565b60405180910390a16040517fe22d1c9d0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063e22d1c9d90614a54908a908c906004016155b9565b600060405180830381600087803b158015614a6e57600080fd5b505af1158015614a82573d6000803e3d6000fd5b505050505b505050505050919050565b60606000806068905060008888888888604051602401614ab6959493929190615aae565b60408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f779415120000000000000000000000000000000000000000000000000000000017905281518b519293506001929091600091614b279161551e565b614b32906040615434565b90506020840181888483895afa614b4857600093505b503d614b5357600092505b60208701965082614b90576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8651955050505050509550959350505050565b815b60aa54811015614bf757600081815260ab6020818152604080842080546001600160a01b0316855260ac8352908420805460ff19169055928490525280546001600160a01b0319169055600101614ba5565b5060005b82811015614c3757600081815260ab60209081526040808320546001600160a01b0316835260ac9091529020805460ff19169055600101614bfb565b5060005b82811015614cab576000848281518110614c5757614c57615460565b6020908102919091018101516001600160a01b0316600081815260ac83526040808220805460ff1916600317905585825260ab9093529190912080546001600160a01b031916909117905550600101614c3b565b508160aa81905550807f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e84604051610ebd919061529a565b6000816003811115614cf757614cf76154e4565b836003811115614d0957614d096154e4565b1760ff166003811115610c7057610c706154e4565b6000816003811115614d3257614d326154e4565b19836003811115614d4557614d456154e4565b1660ff166003811115610c7057610c706154e4565b6001600160a01b038116600090815260e960209081526040808320805460ff191690556074909152812054610dad91839190819003614d97575050565b6001600160a01b038216600090815260756020908152604080832080546001600160a01b031990811682556001808301805483169055600283018054831690556003830180549092169091556004820185905560058201859055600690910184905560748352818420849055607790925282208281558101829055607380549091614e2191615421565b81548110614e3157614e31615460565b6000918252602090912001546001600160a01b03908116915083168114614eb4576001600160a01b0381166000908152607460205260409020829055607380548291908419908110614e8557614e85615460565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6073805480614ec557614ec56155ef565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6001600160a01b0381168114610dad57600080fd5b60008060408385031215614f1457600080fd5b8235614f1f81614eec565b91506020830135614f2f81614eec565b809150509250929050565b600060208284031215614f4c57600080fd5b813561103881614eec565b60008060408385031215614f6a57600080fd5b8235614f7581614eec565b946020939093013593505050565b600060208284031215614f9557600080fd5b5035919050565b60e08101610c7382846001600160a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b815181526020808301519082015260408101610c73565b8015158114610dad57600080fd5b6000806000806080858703121561503557600080fd5b843561504081614eec565b93506020850135925060408501359150606085013561505e81615011565b939692955090935050565b8060408101831015610c7357600080fd5b6000806000806000806000806000806000806101a08d8f03121561509d57600080fd5b8c356150a881614eec565b9b5060208d01356150b881614eec565b9a5060408d01356150c881614eec565b995060608d01356150d881614eec565b985060808d01356150e881614eec565b975060a08d01356150f881614eec565b965060c08d0135955060e08d013594506101008d013593506101208d013592506101408d0135915061512e8e6101608f01615069565b90509295989b509295989b509295989b565b6020808252825182820181905260009190848201906040850190845b818110156151815783516001600160a01b03168352928401929184019160010161515c565b50909695505050505050565b60008083601f84011261519f57600080fd5b50813567ffffffffffffffff8111156151b757600080fd5b6020830191508360208260051b85010111156151d257600080fd5b9250929050565b600080602083850312156151ec57600080fd5b823567ffffffffffffffff81111561520357600080fd5b61520f8582860161518d565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015615181578351151583529284019291840191600101615237565b60008151808452602080850194506020840160005b8381101561528f5781516001600160a01b03168752958201959082019060010161526a565b509495945050505050565b602081526000610c706020830184615255565b6020808252825182820181905260009190848201906040850190845b818110156151815761532c8385516001600160a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b9284019260e092909201916001016152c9565b8035601081106110ce57600080fd5b6000806040838503121561536157600080fd5b614f1f8361533f565b60006020828403121561537c57600080fd5b610c708261533f565b60008060006060848603121561539a57600080fd5b83356153a581614eec565b95602085013595506040909401359392505050565b600080600080608085870312156153d057600080fd5b84356153db81614eec565b935060208501356153eb81614eec565b925060408501356153fb81614eec565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c7357610c7361540b565b80820180821115610c7357610c7361540b565b60006020828403121561545957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60006001820161549e5761549e61540b565b5060010190565b600080600080608085870312156154bb57600080fd5b84516154c681615011565b60208601516040870151606090970151919890975090945092505050565b634e487b7160e01b600052602160045260246000fd5b8281526040810160038310615511576155116154e4565b8260208301529392505050565b8082028115828204841417610c7357610c7361540b565b634e487b7160e01b600052601260045260246000fd5b60008261555a5761555a615535565b500490565b6000806000806080858703121561557557600080fd5b505082516020840151604085015160609095015191969095509092509050565b600080604083850312156155a857600080fd5b505080516020909101519092909150565b6040815260006155cc6040830185615255565b90508260208301529392505050565b6000826155ea576155ea615535565b500690565b634e487b7160e01b600052603160045260246000fd5b60108110615615576156156154e4565b9052565b60208101610c738284615605565b60006020828403121561563957600080fd5b815161103881614eec565b6001600160e01b03198316815260408101600b8310615511576155116154e4565b6001600160e01b031984168152606081016156836020830185615605565b6001600160a01b0383166040830152949350505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156156c3576156c3615476565b604052919050565b600067ffffffffffffffff8211156156e5576156e5615476565b5060051b60200190565b6000602080838503121561570257600080fd5b825167ffffffffffffffff81111561571957600080fd5b8301601f8101851361572a57600080fd5b805161573d615738826156cb565b61569a565b81815260059190911b8201830190838101908783111561575c57600080fd5b928401925b8284101561578357835161577481614eec565b82529284019290840190615761565b979650505050505050565b600060208083850312156157a157600080fd5b825167ffffffffffffffff8111156157b857600080fd5b8301601f810185136157c957600080fd5b80516157d7615738826156cb565b81815260059190911b820183019083810190878311156157f657600080fd5b928401925b8284101561578357835161580e81614eec565b825292840192908401906157fb565b828152604060208201526000610f0b6040830184615255565b6000602080838503121561584957600080fd5b825167ffffffffffffffff81111561586057600080fd5b8301601f8101851361587157600080fd5b805161587f615738826156cb565b81815260059190911b8201830190838101908783111561589e57600080fd5b928401925b82841015615783578351825292840192908401906158a3565b60008151808452602080850194506020840160005b8381101561528f578151875295820195908201906001016158d1565b6060815260006159006060830186615255565b828103602084015261591281866158bc565b915050826040830152949350505050565b83815260606020820152600061593c6060830185615255565b828103604084015261594e81856158bc565b9695505050505050565b8481526080602082015260006159716080830186615255565b828103604084015261598381866158bc565b91505082606083015295945050505050565b6000816159a4576159a461540b565b506000190190565b6000825160005b818110156159cd57602081860181015185830152016159b3565b506000920191825250919050565b6020808252825482820181905260008481528281209092916040850190845b818110156151815783546001600160a01b0316835260019384019392850192016159fa565b60006020808385031215615a3257600080fd5b825167ffffffffffffffff811115615a4957600080fd5b8301601f81018513615a5a57600080fd5b8051615a68615738826156cb565b81815260059190911b82018301908381019087831115615a8757600080fd5b928401925b82841015615783578351615a9f81615011565b82529284019290840190615a8c565b60a081526000615ac160a0830188615255565b8281036020840152615ad381886158bc565b90508281036040840152615ae781876158bc565b6060840195909552505060800152939250505056fea26469706673582212207139ba80bdedc2b63b3d481c7aee3e8c24a22a93ab860b859a0bf513c7ed47c664736f6c63430008160033",
  "deployer": "0x31762cdd4Aa65CD6f5F09D7a05a56211720A1168",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "checkJailed(address)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) during the current period."
      },
      "checkJailedAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) at a specific block."
      },
      "checkManyJailed(address[])": {
        "details": "Returns whether the validators are put in jail (cannot join the set of validators) during the current period."
      },
      "checkMiningRewardDeprecated(address)": {
        "details": "Returns whether the incoming reward of the block producer is deprecated during the current period."
      },
      "checkMiningRewardDeprecatedAtPeriod(address,uint256)": {
        "details": "Returns whether the incoming reward of the block producer is deprecated during a specific period."
      },
      "currentPeriod()": {
        "details": "Returns the period index from the current block."
      },
      "currentPeriodStartAtBlock()": {
        "details": "Returns the block number that the current period starts at."
      },
      "emergencyExitLockedAmount()": {
        "details": "Returns the amount of RON to lock from a consensus address."
      },
      "emergencyExpiryDuration()": {
        "details": "Returns the duration that an emergency request is expired and the fund will be recycled."
      },
      "epochEndingAt(uint256)": {
        "details": "Returns whether the epoch ending is at the block number `_block`."
      },
      "epochOf(uint256)": {
        "details": "Returns the epoch index from the block number."
      },
      "execApplyValidatorCandidate(address,address,address,uint256)": {
        "details": "Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`."
      },
      "execBailOut(address,uint256)": {
        "details": "Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`."
      },
      "execChangeAdminAddress(address,address)": {
        "details": "Fallback function of `Profile-requestChangeAdminAddress`. This updates the shadow storage slot of \"shadowedAdmin\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract."
      },
      "execChangeConsensusAddress(address,address)": {
        "details": "Fallback function of `Profile-requestChangeConsensusAddress`. This updates the shadow storage slot of \"shadowedConsensus\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract."
      },
      "execChangeTreasuryAddress(address,address)": {
        "details": "Fallback function of `Profile-requestChangeTreasuryAddress`. This updates the shadow storage slot of \"shadowedTreasury\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract."
      },
      "execReleaseLockedFundForEmergencyExitRequest(address,address)": {
        "details": "Unlocks fund for emergency exit request. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked. Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock."
      },
      "execRequestEmergencyExit(address,uint256)": {
        "details": "Fallback function of `IStaking-requestEmergencyExit`. Requirements: - The method caller is staking contract."
      },
      "execRequestRenounceCandidate(address,uint256)": {
        "details": "Requests to revoke a validator candidate in next `secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`."
      },
      "execRequestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`."
      },
      "execSlash(address,uint256,uint256,bool)": {
        "details": "Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`."
      },
      "getBlockProducerIds()": {
        "details": "Returns the ids current block producer list."
      },
      "getBlockProducers()": {
        "details": "Returns the current block producer list."
      },
      "getCandidateInfo(address)": {
        "details": "Returns the info of a candidate."
      },
      "getCandidateInfos()": {
        "details": "Returns all candidate info."
      },
      "getCommissionChangeSchedule(address)": {
        "details": "Returns the schedule of changing commission rate of a candidate address."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getEmergencyExitInfo(address)": {
        "details": "Returns the emergency exit request."
      },
      "getJailedTimeLeft(address)": {
        "details": "Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail."
      },
      "getJailedTimeLeftAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail."
      },
      "getLastUpdatedBlock()": {
        "details": "Returns the block that validator set was updated."
      },
      "getValidatorCandidateIds()": {
        "details": "Returns the list of validator candidate ids."
      },
      "getValidatorCandidates()": {
        "details": "Returns the list validator candidates."
      },
      "getValidatorIds()": {
        "details": "Returns the ids of current validator list."
      },
      "getValidators()": {
        "details": "Returns the current validator list."
      },
      "initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256[2])": {
        "details": "Initializes the contract storage."
      },
      "isBlockProducer(address)": {
        "details": "Returns whether the address is block producer or not."
      },
      "isCandidateAdmin(address,address)": {
        "details": "Returns whether the address is the candidate admin."
      },
      "isPeriodEnding()": {
        "details": "Returns whether the period ending at the current block number."
      },
      "isValidatorCandidate(address)": {
        "details": "Returns whether the address is a validator (candidate)."
      },
      "maxPrioritizedValidatorNumber()": {
        "details": "Returns the number of reserved slots for prioritized validators."
      },
      "maxValidatorCandidate()": {
        "details": "Returns the maximum number of validator candidate."
      },
      "maxValidatorNumber()": {
        "details": "Returns the maximum number of validators in the epoch."
      },
      "minEffectiveDaysOnward()": {
        "details": "Returns the minimum number of days to the effective date of commission rate change."
      },
      "numberOfBlocksInEpoch()": {
        "details": "Returns the number of blocks in a epoch."
      },
      "precompilePickValidatorSetAddress()": {
        "details": "Gets the address of the precompile of picking validator set"
      },
      "precompileSortValidatorsAddress()": {
        "details": "Gets the address of the precompile of sorting validators"
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setEmergencyExitLockedAmount(uint256)": {
        "details": "Sets the amount of RON to lock from a consensus address. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedAmountUpdated`."
      },
      "setEmergencyExpiryDuration(uint256)": {
        "details": "Sets the duration that an emergency request is expired and the fund will be recycled. Requirements: - The method caller is admin. Emits the event `EmergencyExpiryDurationUpdated`."
      },
      "setMaxPrioritizedValidatorNumber(uint256)": {
        "details": "Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`"
      },
      "setMaxValidatorCandidate(uint256)": {
        "details": "Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event."
      },
      "setMaxValidatorNumber(uint256)": {
        "details": "Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`"
      },
      "setMinEffectiveDaysOnwards(uint256)": {
        "details": "Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event."
      },
      "submitBlockReward()": {
        "details": "Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call."
      },
      "totalBlockProducer()": {
        "details": "Returns total numbers of the block producers."
      },
      "totalDeprecatedReward()": {
        "details": "Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators"
      },
      "tryGetPeriodOfEpoch(uint256)": {
        "details": "Tries to get the period index from the epoch number."
      },
      "wrapUpEpoch()": {
        "details": "Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`."
      }
    },
    "events": {
      "BlockProducerSetUpdated(uint256,uint256,address[])": {
        "details": "Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator."
      },
      "BlockRewardDeprecated(address,uint256,uint8)": {
        "details": "Emitted when the reward of the block producer is deprecated."
      },
      "BlockRewardSubmitted(address,uint256,uint256)": {
        "details": "Emitted when the block reward is submitted."
      },
      "BridgeOperatorRewardDistributed(address,address,address,uint256)": {
        "details": "Emitted when the bridge operator reward is distributed."
      },
      "BridgeOperatorRewardDistributionFailed(address,address,address,uint256,uint256)": {
        "details": "Emitted when the contract fails when distributing the bridge operator reward."
      },
      "BridgeOperatorSetUpdated(uint256,uint256,address[])": {
        "details": "Emitted when the bridge operator set is updated."
      },
      "CandidateGranted(address,address,address)": {
        "details": "Emitted when the validator candidate is granted."
      },
      "CandidateRevokingTimestampUpdated(address,uint256)": {
        "details": "Emitted when the revoking timestamp of a candidate is updated."
      },
      "CandidateTopupDeadlineUpdated(address,uint256)": {
        "details": "Emitted when the topup deadline of a candidate is updated."
      },
      "CandidatesRevoked(address[])": {
        "details": "Emitted when the validator candidate is revoked."
      },
      "CommissionRateUpdateScheduled(address,uint256,uint256)": {
        "details": "Emitted when a schedule for updating commission rate is set."
      },
      "CommissionRateUpdated(address,uint256)": {
        "details": "Emitted when the commission rate of a validator is updated."
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "DeprecatedRewardRecycleFailed(address,uint256,uint256)": {
        "details": "Emitted when the deprecated reward withdrawal is failed"
      },
      "DeprecatedRewardRecycled(address,uint256)": {
        "details": "Emitted when the deprecated reward is withdrawn."
      },
      "EmergencyExitLockedAmountUpdated(uint256)": {
        "details": "Emitted when the emergency exit locked amount is updated."
      },
      "EmergencyExitLockedFundReleased(address,address,uint256)": {
        "details": "Emitted when the fund that locked from an emergency exit request is transferred to the recipient."
      },
      "EmergencyExitLockedFundReleasingFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the fund that locked from an emergency exit request is failed to transferred back."
      },
      "EmergencyExitRequested(address,uint256)": {
        "details": "Emitted when the fund is locked from an emergency exit request"
      },
      "EmergencyExpiryDurationUpdated(uint256)": {
        "details": "Emitted when the emergency expiry duration is updated."
      },
      "FastFinalityRewardDistributed(address,address,uint256)": {
        "details": "Emitted when the fast finality reward is distributed."
      },
      "FastFinalityRewardDistributionFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the contract fails when distributing the fast finality reward."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaxPrioritizedValidatorNumberUpdated(uint256)": {
        "details": "Emitted when the number of reserved slots for prioritized validators is updated."
      },
      "MaxValidatorCandidateUpdated(uint256)": {
        "details": "Emitted when the maximum number of validator candidates is updated."
      },
      "MaxValidatorNumberUpdated(uint256)": {
        "details": "Emitted when the number of max validator is updated."
      },
      "MinEffectiveDaysOnwardsUpdated(uint256)": {
        "details": "Emitted when the min offset to the effective date of commission rate change is updated."
      },
      "MiningRewardDistributed(address,address,uint256)": {
        "details": "Emitted when the block producer reward is distributed."
      },
      "MiningRewardDistributionFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the contract fails when distributing the block producer reward."
      },
      "StakingRewardDistributed(uint256,address[],uint256[])": {
        "details": "Emitted when the amount of RON reward is distributed to staking contract."
      },
      "StakingRewardDistributionFailed(uint256,address[],uint256[],uint256)": {
        "details": "Emitted when the contracts fails when distributing the amount of RON to the staking contract."
      },
      "ValidatorPunished(address,uint256,uint256,uint256,bool,bool)": {
        "details": "Emitted when the validator is punished."
      },
      "ValidatorSetUpdated(uint256,address[])": {
        "details": "Emitted when the validator set is updated"
      },
      "ValidatorUnjailed(address,uint256)": {
        "details": "Emitted when the validator get out of jail by bailout."
      },
      "WrappedUpEpoch(uint256,uint256,bool)": {
        "details": "Emitted when the epoch is wrapped up."
      }
    },
    "errors": {
      "ErrAlreadyRequestedEmergencyExit()": [
        {
          "details": "Error of already requested emergency exit before."
        }
      ],
      "ErrAlreadyRequestedRevokingCandidate()": [
        {
          "details": "Error of already requested revoking candidate before."
        }
      ],
      "ErrAlreadyRequestedUpdatingCommissionRate()": [
        {
          "details": "Error of commission change schedule exists."
        }
      ],
      "ErrAlreadyWrappedEpoch()": [
        {
          "details": "Error of query for already wrapped up epoch"
        }
      ],
      "ErrAtEndOfEpochOnly()": [
        {
          "details": "Error of only allowed at the end of epoch"
        }
      ],
      "ErrCallPrecompiled()": [
        {
          "details": "Error of call to precompile fails."
        }
      ],
      "ErrCallerMustBeCoinbase()": [
        {
          "details": "Error of method caller must be coinbase"
        }
      ],
      "ErrCannotBailout(address)": [
        {
          "details": "Error of cannot bailout due to high tier slash."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrExceedsMaxNumberOfCandidate()": [
        {
          "details": "Error of exceeding maximum number of candidates."
        }
      ],
      "ErrExistentCandidate()": [
        {
          "details": "Error of querying for already existent candidate."
        }
      ],
      "ErrExistentCandidateAdmin(address)": [
        {
          "details": "Error of candidate admin already exists."
        }
      ],
      "ErrExistentTreasury(address)": [
        {
          "details": "Error of treasury already exists."
        }
      ],
      "ErrInsufficientBalance(bytes4,uint256,uint256)": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrInvalidCommissionRate()": [
        {
          "details": "Error of invalid commission rate."
        }
      ],
      "ErrInvalidEffectiveDaysOnwards()": [
        {
          "details": "Error of invalid effective days onwards."
        }
      ],
      "ErrInvalidMaxPrioritizedValidatorNumber()": [
        {
          "details": "Error thrown when an invalid maximum prioritized validator number is provided."
        }
      ],
      "ErrInvalidMinEffectiveDaysOnwards()": [
        {
          "details": "Error of invalid min effective days onwards."
        }
      ],
      "ErrLockedFundMightBeRecycled(address)": [
        {
          "details": "Error thrown when the the locked fund of emergency exit might be recycled."
        }
      ],
      "ErrLockedFundReleaseInfoNotFound(address)": [
        {
          "details": "Error thrown when the info of releasing locked fund not exist."
        }
      ],
      "ErrNonExistentCandidate()": [
        {
          "details": "Error of querying for non-existent candidate."
        }
      ],
      "ErrRecipientRevert(bytes4)": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrTrustedOrgCannotRenounce()": [
        {
          "details": "Error of trusted org cannot renounce."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnauthorizedReceiveRON()": [
        {
          "details": "Error thrown when receives RON from neither staking vesting contract nor staking contract"
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ],
      "NonExistentRecyclingInfo()": [
        {
          "details": "Error thrown when queries for a non existent info."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedEmergencyExit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedRevokingCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedUpdatingCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyWrappedEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAtEndOfEpochOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallPrecompiled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeCoinbase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ErrCannotBailout\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExceedsMaxNumberOfCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExistentCandidate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAdminAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentCandidateAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentTreasury\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidEffectiveDaysOnwards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMaxPrioritizedValidatorNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMinEffectiveDaysOnwards\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"ErrLockedFundMightBeRecycled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"ErrLockedFundReleaseInfoNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNonExistentCandidate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrTrustedOrgCannotRenounce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnauthorizedReceiveRON\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentRecyclingInfo\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"name\":\"BlockProducerSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICoinbaseExecution.BlockRewardDeprecatedType\",\"name\":\"deprecatedType\",\"type\":\"uint8\"}],\"name\":\"BlockRewardDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submittedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"BlockRewardSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CandidateGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"}],\"name\":\"CandidateRevokingTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"name\":\"CandidateTopupDeadlineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"name\":\"CandidatesRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdateScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycleFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedFundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedFundReleasingFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExpiryDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FastFinalityRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"FastFinalityRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxPrioritizedValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorCandidateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfDays\",\"type\":\"uint256\"}],\"name\":\"MinEffectiveDaysOnwardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"StakingRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deductedStakingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blockProducerRewardDeprecated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bridgeOperatorRewardDeprecated\",\"type\":\"bool\"}],\"name\":\"ValidatorPunished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"name\":\"ValidatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ValidatorUnjailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"periodEnding\",\"type\":\"bool\"}],\"name\":\"WrappedUpEpoch\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADDITION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"checkJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"checkJailedAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"name\":\"checkManyJailed\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"candidateIds\",\"type\":\"address[]\"}],\"name\":\"checkManyJailedById\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"checkMiningRewardDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"checkMiningRewardDeprecatedAtPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodStartAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExitLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochEndingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"execApplyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"execBailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"execChangeAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"newConsensusAddr\",\"type\":\"address\"}],\"name\":\"execChangeConsensusAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"execChangeTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"execReleaseLockedFundForEmergencyExitRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secLeftToRevoke\",\"type\":\"uint256\"}],\"name\":\"execRequestEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secsLeft\",\"type\":\"uint256\"}],\"name\":\"execRequestRenounceCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"execRequestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newJailedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cannotBailout\",\"type\":\"bool\"}],\"name\":\"execSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockProducerIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockProducers\",\"outputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getCandidateInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__shadowedAdmin\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"__shadowedConsensus\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"__shadowedTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"____deprecatedBridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCandidateInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__shadowedAdmin\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"__shadowedConsensus\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"__shadowedTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"____deprecatedBridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getCommissionChangeSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.CommissionSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getEmergencyExitInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recyclingAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommonInfo.EmergencyExitInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getJailedTimeLeft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"getJailedTimeLeftAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorCandidateIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorCandidates\",\"outputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__slashIndicatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingVestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorCandidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxPrioritizedValidatorNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__minEffectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__numberOfBlocksInEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"__emergencyExitConfigs\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fastFinalityTrackingContract\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profileContract\",\"type\":\"address\"}],\"name\":\"initializeV4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"isBlockProducer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isCandidateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPeriodEnding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"isValidatorCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrioritizedValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumPrioritizedValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEffectiveDaysOnward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompilePickValidatorSetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileSortValidatorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setEmergencyExitLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setEmergencyExpiryDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxPrioritizedValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfDays\",\"type\":\"uint256\"}],\"name\":\"setMinEffectiveDaysOnwards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitBlockReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlockProducer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeprecatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"tryGetPeriodOfEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_filled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_periodNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapUpEpoch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyRequestedEmergencyExit()\":[{\"details\":\"Error of already requested emergency exit before.\"}],\"ErrAlreadyRequestedRevokingCandidate()\":[{\"details\":\"Error of already requested revoking candidate before.\"}],\"ErrAlreadyRequestedUpdatingCommissionRate()\":[{\"details\":\"Error of commission change schedule exists.\"}],\"ErrAlreadyWrappedEpoch()\":[{\"details\":\"Error of query for already wrapped up epoch\"}],\"ErrAtEndOfEpochOnly()\":[{\"details\":\"Error of only allowed at the end of epoch\"}],\"ErrCallPrecompiled()\":[{\"details\":\"Error of call to precompile fails.\"}],\"ErrCallerMustBeCoinbase()\":[{\"details\":\"Error of method caller must be coinbase\"}],\"ErrCannotBailout(address)\":[{\"details\":\"Error of cannot bailout due to high tier slash.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrExceedsMaxNumberOfCandidate()\":[{\"details\":\"Error of exceeding maximum number of candidates.\"}],\"ErrExistentCandidate()\":[{\"details\":\"Error of querying for already existent candidate.\"}],\"ErrExistentCandidateAdmin(address)\":[{\"details\":\"Error of candidate admin already exists.\"}],\"ErrExistentTreasury(address)\":[{\"details\":\"Error of treasury already exists.\"}],\"ErrInsufficientBalance(bytes4,uint256,uint256)\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrInvalidCommissionRate()\":[{\"details\":\"Error of invalid commission rate.\"}],\"ErrInvalidEffectiveDaysOnwards()\":[{\"details\":\"Error of invalid effective days onwards.\"}],\"ErrInvalidMaxPrioritizedValidatorNumber()\":[{\"details\":\"Error thrown when an invalid maximum prioritized validator number is provided.\"}],\"ErrInvalidMinEffectiveDaysOnwards()\":[{\"details\":\"Error of invalid min effective days onwards.\"}],\"ErrLockedFundMightBeRecycled(address)\":[{\"details\":\"Error thrown when the the locked fund of emergency exit might be recycled.\"}],\"ErrLockedFundReleaseInfoNotFound(address)\":[{\"details\":\"Error thrown when the info of releasing locked fund not exist.\"}],\"ErrNonExistentCandidate()\":[{\"details\":\"Error of querying for non-existent candidate.\"}],\"ErrRecipientRevert(bytes4)\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrTrustedOrgCannotRenounce()\":[{\"details\":\"Error of trusted org cannot renounce.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnauthorizedReceiveRON()\":[{\"details\":\"Error thrown when receives RON from neither staking vesting contract nor staking contract\"}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}],\"NonExistentRecyclingInfo()\":[{\"details\":\"Error thrown when queries for a non existent info.\"}]},\"events\":{\"BlockProducerSetUpdated(uint256,uint256,address[])\":{\"details\":\"Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\"},\"BlockRewardDeprecated(address,uint256,uint8)\":{\"details\":\"Emitted when the reward of the block producer is deprecated.\"},\"BlockRewardSubmitted(address,uint256,uint256)\":{\"details\":\"Emitted when the block reward is submitted.\"},\"BridgeOperatorRewardDistributed(address,address,address,uint256)\":{\"details\":\"Emitted when the bridge operator reward is distributed.\"},\"BridgeOperatorRewardDistributionFailed(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when the contract fails when distributing the bridge operator reward.\"},\"BridgeOperatorSetUpdated(uint256,uint256,address[])\":{\"details\":\"Emitted when the bridge operator set is updated.\"},\"CandidateGranted(address,address,address)\":{\"details\":\"Emitted when the validator candidate is granted.\"},\"CandidateRevokingTimestampUpdated(address,uint256)\":{\"details\":\"Emitted when the revoking timestamp of a candidate is updated.\"},\"CandidateTopupDeadlineUpdated(address,uint256)\":{\"details\":\"Emitted when the topup deadline of a candidate is updated.\"},\"CandidatesRevoked(address[])\":{\"details\":\"Emitted when the validator candidate is revoked.\"},\"CommissionRateUpdateScheduled(address,uint256,uint256)\":{\"details\":\"Emitted when a schedule for updating commission rate is set.\"},\"CommissionRateUpdated(address,uint256)\":{\"details\":\"Emitted when the commission rate of a validator is updated.\"},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"DeprecatedRewardRecycleFailed(address,uint256,uint256)\":{\"details\":\"Emitted when the deprecated reward withdrawal is failed\"},\"DeprecatedRewardRecycled(address,uint256)\":{\"details\":\"Emitted when the deprecated reward is withdrawn.\"},\"EmergencyExitLockedAmountUpdated(uint256)\":{\"details\":\"Emitted when the emergency exit locked amount is updated.\"},\"EmergencyExitLockedFundReleased(address,address,uint256)\":{\"details\":\"Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\"},\"EmergencyExitLockedFundReleasingFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the fund that locked from an emergency exit request is failed to transferred back.\"},\"EmergencyExitRequested(address,uint256)\":{\"details\":\"Emitted when the fund is locked from an emergency exit request\"},\"EmergencyExpiryDurationUpdated(uint256)\":{\"details\":\"Emitted when the emergency expiry duration is updated.\"},\"FastFinalityRewardDistributed(address,address,uint256)\":{\"details\":\"Emitted when the fast finality reward is distributed.\"},\"FastFinalityRewardDistributionFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the contract fails when distributing the fast finality reward.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MaxPrioritizedValidatorNumberUpdated(uint256)\":{\"details\":\"Emitted when the number of reserved slots for prioritized validators is updated.\"},\"MaxValidatorCandidateUpdated(uint256)\":{\"details\":\"Emitted when the maximum number of validator candidates is updated.\"},\"MaxValidatorNumberUpdated(uint256)\":{\"details\":\"Emitted when the number of max validator is updated.\"},\"MinEffectiveDaysOnwardsUpdated(uint256)\":{\"details\":\"Emitted when the min offset to the effective date of commission rate change is updated.\"},\"MiningRewardDistributed(address,address,uint256)\":{\"details\":\"Emitted when the block producer reward is distributed.\"},\"MiningRewardDistributionFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the contract fails when distributing the block producer reward.\"},\"StakingRewardDistributed(uint256,address[],uint256[])\":{\"details\":\"Emitted when the amount of RON reward is distributed to staking contract.\"},\"StakingRewardDistributionFailed(uint256,address[],uint256[],uint256)\":{\"details\":\"Emitted when the contracts fails when distributing the amount of RON to the staking contract.\"},\"ValidatorPunished(address,uint256,uint256,uint256,bool,bool)\":{\"details\":\"Emitted when the validator is punished.\"},\"ValidatorSetUpdated(uint256,address[])\":{\"details\":\"Emitted when the validator set is updated\"},\"ValidatorUnjailed(address,uint256)\":{\"details\":\"Emitted when the validator get out of jail by bailout.\"},\"WrappedUpEpoch(uint256,uint256,bool)\":{\"details\":\"Emitted when the epoch is wrapped up.\"}},\"kind\":\"dev\",\"methods\":{\"checkJailed(address)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\"},\"checkJailedAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\"},\"checkManyJailed(address[])\":{\"details\":\"Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\"},\"checkMiningRewardDeprecated(address)\":{\"details\":\"Returns whether the incoming reward of the block producer is deprecated during the current period.\"},\"checkMiningRewardDeprecatedAtPeriod(address,uint256)\":{\"details\":\"Returns whether the incoming reward of the block producer is deprecated during a specific period.\"},\"currentPeriod()\":{\"details\":\"Returns the period index from the current block.\"},\"currentPeriodStartAtBlock()\":{\"details\":\"Returns the block number that the current period starts at.\"},\"emergencyExitLockedAmount()\":{\"details\":\"Returns the amount of RON to lock from a consensus address.\"},\"emergencyExpiryDuration()\":{\"details\":\"Returns the duration that an emergency request is expired and the fund will be recycled.\"},\"epochEndingAt(uint256)\":{\"details\":\"Returns whether the epoch ending is at the block number `_block`.\"},\"epochOf(uint256)\":{\"details\":\"Returns the epoch index from the block number.\"},\"execApplyValidatorCandidate(address,address,address,uint256)\":{\"details\":\"Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`.\"},\"execBailOut(address,uint256)\":{\"details\":\"Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`.\"},\"execChangeAdminAddress(address,address)\":{\"details\":\"Fallback function of `Profile-requestChangeAdminAddress`. This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract.\"},\"execChangeConsensusAddress(address,address)\":{\"details\":\"Fallback function of `Profile-requestChangeConsensusAddress`. This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract.\"},\"execChangeTreasuryAddress(address,address)\":{\"details\":\"Fallback function of `Profile-requestChangeTreasuryAddress`. This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract.\"},\"execReleaseLockedFundForEmergencyExitRequest(address,address)\":{\"details\":\"Unlocks fund for emergency exit request. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked. Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\"},\"execRequestEmergencyExit(address,uint256)\":{\"details\":\"Fallback function of `IStaking-requestEmergencyExit`. Requirements: - The method caller is staking contract.\"},\"execRequestRenounceCandidate(address,uint256)\":{\"details\":\"Requests to revoke a validator candidate in next `secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`.\"},\"execRequestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`.\"},\"execSlash(address,uint256,uint256,bool)\":{\"details\":\"Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`.\"},\"getBlockProducerIds()\":{\"details\":\"Returns the ids current block producer list.\"},\"getBlockProducers()\":{\"details\":\"Returns the current block producer list.\"},\"getCandidateInfo(address)\":{\"details\":\"Returns the info of a candidate.\"},\"getCandidateInfos()\":{\"details\":\"Returns all candidate info.\"},\"getCommissionChangeSchedule(address)\":{\"details\":\"Returns the schedule of changing commission rate of a candidate address.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getEmergencyExitInfo(address)\":{\"details\":\"Returns the emergency exit request.\"},\"getJailedTimeLeft(address)\":{\"details\":\"Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\"},\"getJailedTimeLeftAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\"},\"getLastUpdatedBlock()\":{\"details\":\"Returns the block that validator set was updated.\"},\"getValidatorCandidateIds()\":{\"details\":\"Returns the list of validator candidate ids.\"},\"getValidatorCandidates()\":{\"details\":\"Returns the list validator candidates.\"},\"getValidatorIds()\":{\"details\":\"Returns the ids of current validator list.\"},\"getValidators()\":{\"details\":\"Returns the current validator list.\"},\"initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256[2])\":{\"details\":\"Initializes the contract storage.\"},\"isBlockProducer(address)\":{\"details\":\"Returns whether the address is block producer or not.\"},\"isCandidateAdmin(address,address)\":{\"details\":\"Returns whether the address is the candidate admin.\"},\"isPeriodEnding()\":{\"details\":\"Returns whether the period ending at the current block number.\"},\"isValidatorCandidate(address)\":{\"details\":\"Returns whether the address is a validator (candidate).\"},\"maxPrioritizedValidatorNumber()\":{\"details\":\"Returns the number of reserved slots for prioritized validators.\"},\"maxValidatorCandidate()\":{\"details\":\"Returns the maximum number of validator candidate.\"},\"maxValidatorNumber()\":{\"details\":\"Returns the maximum number of validators in the epoch.\"},\"minEffectiveDaysOnward()\":{\"details\":\"Returns the minimum number of days to the effective date of commission rate change.\"},\"numberOfBlocksInEpoch()\":{\"details\":\"Returns the number of blocks in a epoch.\"},\"precompilePickValidatorSetAddress()\":{\"details\":\"Gets the address of the precompile of picking validator set\"},\"precompileSortValidatorsAddress()\":{\"details\":\"Gets the address of the precompile of sorting validators\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setEmergencyExitLockedAmount(uint256)\":{\"details\":\"Sets the amount of RON to lock from a consensus address. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedAmountUpdated`.\"},\"setEmergencyExpiryDuration(uint256)\":{\"details\":\"Sets the duration that an emergency request is expired and the fund will be recycled. Requirements: - The method caller is admin. Emits the event `EmergencyExpiryDurationUpdated`.\"},\"setMaxPrioritizedValidatorNumber(uint256)\":{\"details\":\"Updates the number of reserved slots for prioritized validators Requirements: - The method caller is admin Emits the event `MaxPrioritizedValidatorNumberUpdated`\"},\"setMaxValidatorCandidate(uint256)\":{\"details\":\"Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event.\"},\"setMaxValidatorNumber(uint256)\":{\"details\":\"Updates the max validator number Requirements: - The method caller is admin Emits the event `MaxValidatorNumberUpdated`\"},\"setMinEffectiveDaysOnwards(uint256)\":{\"details\":\"Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event.\"},\"submitBlockReward()\":{\"details\":\"Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call.\"},\"totalBlockProducer()\":{\"details\":\"Returns total numbers of the block producers.\"},\"totalDeprecatedReward()\":{\"details\":\"Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\"},\"tryGetPeriodOfEpoch(uint256)\":{\"details\":\"Tries to get the period index from the epoch number.\"},\"wrapUpEpoch()\":{\"details\":\"Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/validator/RoninValidatorSet.sol\":\"RoninValidatorSet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance(bytes4 msgSig, uint256 currentBalance, uint256 sendAmount);\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert(bytes4 msgSig);\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable recipient, uint256 amount) internal {\\n    if (!_sendRON(recipient, amount)) revert ErrRecipientRevert(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Send `amount` RON to the address `recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    if (address(this).balance < amount) revert ErrInsufficientBalance(msg.sig, address(this).balance, amount);\\n    return _unsafeSendRON(recipient, amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `amount` RON to the address `recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    (success, ) = recipient.call{ value: amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRONLimitGas(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRONLimitGas(\\n    address payable recipient,\\n    uint256 amount,\\n    uint256 gas\\n  ) internal returns (bool success) {\\n    // When msg.value = 0, the forwarding gas will not be auto-added 2300.\\n    // We add an extra 2300 to make sure all calls will have the same amount of gas.\\n    if (amount == 0) {\\n      gas += 2300;\\n    }\\n\\n    (success, ) = recipient.call{ value: amount, gas: gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xab6e6a68ae405cdf9e8aee87ed4192dd98b54e686b76060ece602a8476cbd686\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/extensions/consumers/GlobalConfigConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract GlobalConfigConsumer {\\n  /// @dev The addition amount of gas sending along in external calls. Total gas stipend is added with default 2300 gas.\\n  uint256 public constant DEFAULT_ADDITION_GAS = 1200;\\n  /// @dev The length of a period in second.\\n  uint256 public constant PERIOD_DURATION = 1 days;\\n}\\n\",\"keccak256\":\"0x96d6b1ea4c8e126a8c2468683e7513d195f8e05456d85dd8f259ab049347b527\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IFastFinalityTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IFastFinalityTracking {\\n  /**\\n   * @dev Submit list of `voters` who vote for fast finality in the current block.\\n   *\\n   * Requirements:\\n   * - Only called once per block\\n   * - Only coinbase can call this method\\n   */\\n  function recordFinality(address[] calldata voters) external;\\n\\n  /**\\n   * @dev Returns vote count of `addrs` in the `period`.\\n   */\\n  function getManyFinalityVoteCounts(\\n    uint256 period,\\n    address[] calldata addrs\\n  ) external view returns (uint256[] memory voteCounts);\\n}\\n\",\"keccak256\":\"0xdc397642692af9710314e971f8de772d50d6bc304db9e5babd9ffcfb9d2f4434\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../udvts/Types.sol\\\";\\n\\ninterface IMaintenance {\\n  /**\\n   * @dev Error thrown when attempting to schedule an already scheduled event.\\n   */\\n  error ErrAlreadyScheduled();\\n\\n  /**\\n   * @dev Error thrown when referring to a non-existent schedule.\\n   */\\n  error ErrUnexistedSchedule();\\n\\n  /**\\n   * @dev Error thrown when the end block of a schedule is out of range.\\n   */\\n  error ErrEndBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when the start block of a schedule is out of range.\\n   */\\n  error ErrStartBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when attempting to initiate maintenance while already in maintenance mode.\\n   */\\n  error ErrAlreadyOnMaintenance();\\n\\n  /**\\n   * @dev Error thrown when attempting an action before the cooldown period has ended.\\n   */\\n  error ErrCooldownTimeNotYetEnded();\\n\\n  /**\\n   * @dev Error thrown when the total number of schedules exceeds the limit.\\n   */\\n  error ErrTotalOfSchedulesExceeded();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration is specified.\\n   */\\n  error ErrInvalidMaintenanceDuration();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration configuration is provided.\\n   */\\n  error ErrInvalidMaintenanceDurationConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid offset is specified to start the schedule configurations.\\n   */\\n  error ErrInvalidOffsetToStartScheduleConfigs();\\n\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n    uint256 requestTimestamp;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed cid, Schedule);\\n  /// @dev Emitted when a schedule of maintenance is cancelled.\\n  event MaintenanceScheduleCancelled(address indexed cid);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules,\\n    uint256 cooldownSecsToMaintain\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(TConsensus consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator whose id `validatorId` maintained at the block number `_block`.\\n   */\\n  function checkMaintainedById(address validatorId, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    TConsensus consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `k` or not.\\n   */\\n  function checkManyMaintained(\\n    TConsensus[] calldata consensusAddrList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedById(\\n    address[] calldata candidateIdList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    TConsensus[] calldata _consensusAddrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedInBlockRangeById(\\n    address[] calldata idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has finished cooldown.\\n   */\\n  function checkCooldownEnded(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has schedule.\\n   */\\n  function checkScheduled(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `consensusAddr`.\\n   */\\n  function getSchedule(TConsensus consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedule() external view returns (uint256 count);\\n\\n  /**\\n   * @dev Returns the cooldown to maintain in seconds.\\n   */\\n  function cooldownSecsToMaintain() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedules_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `startedAtBlock` to `endedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - The candidate `consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(TConsensus consensusAddr, uint256 startedAtBlock, uint256 endedAtBlock) external;\\n\\n  /**\\n   * @dev Cancel the schedule of maintenance for the `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - A schedule for the `consensusAddr` must be existent and not executed yet.\\n   *\\n   * Emits the event `MaintenanceScheduleCancelled`.\\n   */\\n  function cancelSchedule(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x102d9129a1e6af05bd3a979347cfc1d07246317e09c749a2e4b196a93b0d62ab\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Pool admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Last public key change timestamp.\\n    uint256 pubkeyLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change public key because cooldown is not ended.\\n  error ErrPubkeyChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Add a new profile.\\n   *\\n   * @dev Requirements:\\n   * - The profile must not be existent before.\\n   * - Only contract admin can call this method.\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external;\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setPubkeyChangeCooldown(uint256 cooldown) external;\\n}\\n\",\"keccak256\":\"0x9bb73040b679f2c318bf995f81950004b6e306166080325eb0a177fc85d4603f\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\ninterface IRoninGovernanceAdmin {\\n  /// @dev Emitted when an emergency exit poll is created.\\n  event EmergencyExitPollCreated(\\n    bytes32 voteHash,\\n    address validatorId,\\n    address recipientAfterUnlockedFund,\\n    uint256 requestedAt,\\n    uint256 expiredAt\\n  );\\n  /// @dev Emitted when an emergency exit poll is approved.\\n  event EmergencyExitPollApproved(bytes32 voteHash);\\n  /// @dev Emitted when an emergency exit poll is expired.\\n  event EmergencyExitPollExpired(bytes32 voteHash);\\n  /// @dev Emitted when an emergency exit poll is voted.\\n  event EmergencyExitPollVoted(bytes32 indexed voteHash, address indexed voter);\\n\\n  /**\\n   * @dev Create a vote to agree that an emergency exit is valid and should return the locked funds back.a\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   */\\n  function createEmergencyExitPoll(\\n    address validatorId,\\n    address recipientAfterUnlockedFund,\\n    uint256 requestedAt,\\n    uint256 expiredAt\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1dc70b2e42a8c5f537daacf328b1244a0a21b65be13d535ff239c60707b03923\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x0b2a44131128f965e20cbea424987817cb504502e5d83d6523ae45ffeb5e53fe\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStakingVesting {\\n  /**\\n   * @dev Error thrown when attempting to send a bonus that has already been sent.\\n   */\\n  error ErrBonusAlreadySent();\\n\\n  /// @dev Emitted when the block bonus for block producer is transferred.\\n  event BonusTransferred(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount\\n  );\\n  /// @dev Emitted when the transfer of block bonus for block producer is failed.\\n  event BonusTransferFailed(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the block bonus for block producer is updated\\n  event BlockProducerBonusPerBlockUpdated(uint256);\\n  /// @dev Emitted when the block bonus for bridge operator is updated\\n  event BridgeOperatorBonusPerBlockUpdated(uint256);\\n  /// @dev Emitted when the percent of fast finality reward is updated\\n  event FastFinalityRewardPercentageUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the block producer at `blockNum`.\\n   */\\n  function blockProducerBlockBonus(uint256 blockNum) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the bridge validator at `blockNum`.\\n   */\\n  function bridgeOperatorBlockBonus(uint256 blockNum) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the percentage of fast finality reward.\\n   */\\n  function fastFinalityRewardPercentage() external view returns (uint256);\\n\\n  /**\\n   * @dev Receives RON from any address.\\n   */\\n  function receiveRON() external payable;\\n\\n  /**\\n   * @dev Returns the last block number that the staking vesting is sent.\\n   */\\n  function lastBlockSendingBonus() external view returns (uint256);\\n\\n  /**\\n   * @dev Transfers the staking vesting for the block producer and the bridge operator whenever a new block is mined.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   * - The method must be called only once per block.\\n   *\\n   * Emits the event `BonusTransferred` or `BonusTransferFailed`.\\n   *\\n   * Notes:\\n   * - The method does not revert when the contract balance is insufficient to send bonus. This assure the submit reward method\\n   * will not be reverted, and the underlying nodes does not hang.\\n   *\\n   * @param forBlockProducer Indicates whether requesting the bonus for the block procucer, in case of being in jail or relevance.\\n   * @param forBridgeOperator Indicates whether requesting the bonus for the bridge operator.\\n   *\\n   * @return success Whether the transfer is successfully. This returns false mostly because this contract is out of balance.\\n   * @return blockProducerBonus The amount of bonus actually sent for the block producer, returns 0 when the transfer is failed.\\n   * @return bridgeOperatorBonus The amount of bonus actually sent for the bridge operator, returns 0 when the transfer is failed.\\n   * @return fastFinalityRewardPercentage The percent of fast finality reward, returns 0 when the transfer is failed.\\n   *\\n   */\\n  function requestBonus(\\n    bool forBlockProducer,\\n    bool forBridgeOperator\\n  )\\n    external\\n    returns (\\n      bool success,\\n      uint256 blockProducerBonus,\\n      uint256 bridgeOperatorBonus,\\n      uint256 fastFinalityRewardPercentage\\n    );\\n\\n  /**\\n   * @dev Sets the bonus amount per block for block producer.\\n   *\\n   * Emits the event `BlockProducerBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBlockProducerBonusPerBlock(uint256 amount) external;\\n\\n  /**\\n   * @dev Sets the bonus amount per block for bridge operator.\\n   *\\n   * Emits the event `BridgeOperatorBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBridgeOperatorBonusPerBlock(uint256 _amount) external;\\n\\n  /**\\n   * @dev Sets the percent of fast finality reward.\\n   *\\n   * Emits the event `FastFinalityRewardPercentageUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setFastFinalityRewardPercentage(uint256 _percent) external;\\n}\\n\",\"keccak256\":\"0x4930321a5b4db60327df3f6f2dad22ae003446c40fbfd582e7173c8997b1f754\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2,\\n    UNAVAILABILITY_TIER_3,\\n    FAST_FINALITY\\n  }\\n\\n  /// @dev Error thrown when evidence has already been submitted.\\n  error ErrEvidenceAlreadySubmitted();\\n\\n  /// @dev Error thrown when public key in evidence is not registered.\\n  error ErrUnregisteredPublicKey();\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed cid, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0x0b93777d4c17f0e849fbfb29ed3868c898f595ee96f468fcc9a6a82f71742d4b\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICreditScore {\\n  /**\\n   * @dev Error thrown when an invalid credit score configuration is provided.\\n   */\\n  error ErrInvalidCreditScoreConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid cut-off percentage configuration is provided.\\n   */\\n  error ErrInvalidCutOffPercentageConfig();\\n\\n  /**\\n   * @dev Error thrown when the caller's credit score is insufficient to bail out a situation.\\n   */\\n  error ErrInsufficientCreditScoreToBailOut();\\n\\n  /**\\n   * @dev Error thrown when a validator has previously bailed out.\\n   */\\n  error ErrValidatorHasBailedOutPreviously();\\n\\n  /**\\n   * @dev Error thrown when the caller must be jailed in the current period.\\n   */\\n  error ErrCallerMustBeJailedInTheCurrentPeriod();\\n\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore,\\n    uint256 maxCreditScore,\\n    uint256 bailOutCostMultiplier,\\n    uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated.\\n  event CreditScoresUpdated(address[] cids, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail.\\n  event BailedOut(address indexed cid, uint256 period, uint256 usedCreditScore);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execUpdateCreditScores(address[] calldata validatorIds, uint256 period) external;\\n\\n  /**\\n   * @dev Resets the credit score for the revoked validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execResetCreditScores(address[] calldata validatorIds) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainScore The score to gain per period.\\n   * @param _maxScore The max number of credit score that a validator can hold.\\n   * @param _bailOutMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentage The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The score to gain per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(TConsensus consensus) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getManyCreditScores(\\n    TConsensus[] calldata consensusAddrs\\n  ) external view returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `consensus` has been bailed out at the `period`.\\n   */\\n  function checkBailedOutAtPeriod(TConsensus consensus, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x42a60955c5093185bd9ce80545b1ecb10fa1dee2fb2b72c95f1289153b9f5307\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(\\n    uint256 slashDoubleSignAmount,\\n    uint256 doubleSigningJailUntilBlock,\\n    uint256 doubleSigningOffsetLimitBlock\\n  );\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(TConsensus _validatorAddr, bytes calldata _header1, bytes calldata _header2) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _slashDoubleSignAmount,\\n      uint256 _doubleSigningJailUntilBlock,\\n      uint256 _doubleSigningOffsetLimitBlock\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _doubleSigningOffsetLimitBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb9bcab2333ef220db67a51edc072afa9dae94e261177cfddb601da0c0be04bdd\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is\\n  ISlashDoubleSign,\\n  ISlashUnavailability,\\n  ICreditScore\\n{}\\n\",\"keccak256\":\"0x2908d4111459fda33a8bedb4c66cbcbe9ae5ab2aa9c0ae2ca05e9ba9a93d9e5e\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Error thrown when attempting to slash a validator twice or slash more than one validator in one block.\\n   */\\n  error ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock();\\n\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the unavailability indicator in the period `period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(TConsensus consensusAddr, uint256 period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold. This threshold is applied for tier-1 and tier-3 slash.\\n   * @return unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   * @return slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed with tier-2 or tier-3.\\n   * @return jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed with tier-2 or tier-3.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 unavailabilityTier1Threshold,\\n      uint256 unavailabilityTier2Threshold,\\n      uint256 slashAmountForUnavailabilityTier2Threshold,\\n      uint256 jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 tier1Threshold,\\n    uint256 tier2Threshold,\\n    uint256 slashAmountForTier2Threshold,\\n    uint256 jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1a30a9edd2eb5593e1da65210dcd712173b9702d6814f4fb31f800efb5f2098b\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    /**\\n     * @dev Address of the pool.\\n     * @custom non-volatile-storage Permanently set to the first consensus address of the candidate.\\n     */\\n    address pid;\\n\\n    /**\\n     * @dev The address of the pool admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with the admin in `Profile-CandidateProfile`.\\n     */\\n    address __shadowedPoolAdmin;\\n\\n    /// @dev Self-staking amount\\n    uint256 stakingAmount;\\n\\n    /// @dev Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n\\n    /// @dev Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n\\n    /// @dev Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n\\n    /// @dev Mapping that indicate an admin was either current or previous admin of this pool\\n    mapping(address => bool) wasAdmin;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(TConsensus consensusAddr, address poolId);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `admin` is currently active.\\n   */\\n  function isAdminOfActivePool(address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address admin) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool details.\\n   */\\n  function getPoolDetail(\\n    TConsensus consensusAddr\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  function getPoolDetailById(\\n    address poolId\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external;\\n}\\n\",\"keccak256\":\"0x074b913dc7edd77f6826aeaf0b57c51637b778865205b2d0f497ca0c272853bc\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the commission rate range is updated.\\n  event CommissionRateRangeUpdated(uint256 minRate, uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the holder of the staking amount in the `poolId` is changed.\\n  event StakeholderChanged(address indexed poolId, address oldAdmin , address newAdmin, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed poolId, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] poolIds);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed poolId,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed poolId,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of cannot transfer RON to specified target.\\n  error ErrCannotInitTransferRON(address addr, string extraInfo);\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the commission rate range that the candidate can set.\\n   */\\n  function getCommissionRateRange() external view returns (uint256 minRange, uint256 maxRange);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the commission rate range that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `CommissionRateRangeUpdated` event.\\n   *\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata pools, uint256 period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `consensusAddr` for `amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x676f728608e5ef14ebf4fea88ca5ef225e4c0cc19871136fe71ab64479bf7a76\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed poolId, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(TConsensus consensusAddrSrc, TConsensus consensusAddrDst, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(\\n    address user,\\n    TConsensus[] calldata consensusAddrList\\n  ) external view returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(TConsensus[] calldata consensusAddrList) external returns (uint256 amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(\\n    TConsensus[] calldata consensusAddrList,\\n    TConsensus consensusAddrDst\\n  ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xe8a650a7348d45b2614ece66083f140801e8375bb8b733addf02209073991ef3\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolId, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolId, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolId, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolIds, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolIds, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolIds);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(\\n    TConsensus[] calldata consensusAddrs,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  function getManyStakingAmountsById(\\n    address[] calldata poolIds,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools corresponding to `consensusAddrs`.\\n   */\\n  function getManyStakingTotals(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `poolIds`.\\n   */\\n  function getManyStakingTotalsById(\\n    address[] calldata poolIds\\n  ) external view returns (uint256[] memory stakingAmounts_);\\n}\\n\",\"keccak256\":\"0xa1b17b962f24571a7125c33420ead1fba5be4c03caabb47916d4ca597fa91482\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./IStakingCallback.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking, IStakingCallback {\\n  /// @dev Event emitted when the `wasAdmin` is finished to migrate.\\n  event MigrateWasAdminFinished();\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(address[] calldata poolIds, uint256[] calldata rewards, uint256 period) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address poolId, uint256 amount) external returns (uint256 actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xcb47179ecec12817f44b3f43e0477260d3453b6608cddf330554f13b63a6d8db\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddress(address poolId, address currAdminAddr, address newAdminAddr) external;\\n}\\n\",\"keccak256\":\"0x555b90214ae8cb66c72a40f343a4933ea87b1e82bb0933c81ae92401b20c5f43\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x7943726a9ecd82a625d3f86c5f7ddbe02427368478b6c98d90fe93dc2f399ba4\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeAdminAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddress(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddress(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeTreasuryAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddress(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xfbe83dc9a4df46f4eb34b6d68c73041de663f188671264c7fe5315b8a0813511\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed cid,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] cids,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xabf7541c6acfef6db495585f74bc9be88a65c20b09850197bc06ab452f07d172\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0xaa2df8b56a83730a3a1b3876708570d70843802737ff7c776a5725c71d7ea8f7\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0xf4f96a624e7c77bbce044c67e3f4b406e65871debc19e7bfab663c1fcfcbc7b0\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x27afa712094804b997f55e8f8d320760e07d7260ab33aeb8fb61c39849f09bf3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xa6298427da3b2055724dc3a6457e653629ce760ef39abfb15dfdfdd5a809a261\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PCUPickValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUPickValidatorSet is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of picking validator set\\n  function precompilePickValidatorSetAddress() public view virtual returns (address) {\\n    return address(0x68);\\n  }\\n\\n  /**\\n   * @dev Sorts and arranges to return a new validator set.\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcPickValidatorSet(\\n    address[] memory _candidates,\\n    uint256[] memory _weights,\\n    uint256[] memory _trustedWeights,\\n    uint256 _maxValidatorNumber,\\n    uint256 _maxPrioritizedValidatorNumber\\n  ) internal view virtual returns (address[] memory _result, uint256 _newValidatorCount) {\\n    address _smc = precompilePickValidatorSetAddress();\\n    bytes memory _payload = abi.encodeWithSignature(\\n      \\\"pickValidatorSet(address[],uint256[],uint256[],uint256,uint256)\\\",\\n      _candidates,\\n      _weights,\\n      _trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    bool _success = true;\\n\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    if (!_success) revert ErrCallPrecompiled();\\n\\n    _newValidatorCount = _result.length;\\n  }\\n}\\n\",\"keccak256\":\"0xcb57a021897a773d11be9d98a195e0653f2124b7e95e84c4832b57d9d36d67e1\",\"license\":\"MIT\"},\"contracts/precompile-usages/PCUSortValidators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUSortValidators is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of sorting validators\\n  function precompileSortValidatorsAddress() public view virtual returns (address) {\\n    return address(0x66);\\n  }\\n\\n  /**\\n   * @dev Sorts candidates descending by their weights by calling precompile contract.\\n   *\\n   * Note: This function is marked as virtual for being wrapping in mock contract for testing purpose.\\n   */\\n  function _pcSortCandidates(\\n    address[] memory _candidates,\\n    uint256[] memory _weights\\n  ) internal view virtual returns (address[] memory _result) {\\n    address _smc = precompileSortValidatorsAddress();\\n    bool _success = true;\\n\\n    bytes memory _payload = abi.encodeWithSignature(\\\"sortValidators(address[],uint256[])\\\", _candidates, _weights);\\n    uint256 _payloadLength = _payload.length;\\n    uint256 _resultLength = 0x20 * _candidates.length + 0x40;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _result, _resultLength)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n\\n      _result := add(_result, 0x20)\\n    }\\n\\n    if (!_success) revert ErrCallPrecompiled();\\n  }\\n}\\n\",\"keccak256\":\"0xf2f21d25f9d1b77e591542440c839d98125ae3c41c73de7c42f8c46d95eac717\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompiledUsage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PrecompiledUsage {\\n  /// @dev Error of call to precompile fails.\\n  error ErrCallPrecompiled();\\n}\\n\",\"keccak256\":\"0x76facc3f3a8dd573c826bbbfedaa5cd8ef30963fbabd8c163c0c72b6efea5551\",\"license\":\"MIT\"},\"contracts/ronin/validator/CandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../interfaces/validator/ICandidateManager.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport { HasStakingDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\n\\nabstract contract CandidateManager is\\n  ICandidateManager,\\n  PercentageConsumer,\\n  GlobalConfigConsumer,\\n  HasContracts,\\n  HasStakingDeprecated\\n{\\n  /// @dev Maximum number of validator candidate\\n  uint256 private _maxValidatorCandidate;\\n\\n  /// @dev The array of candidate ids\\n  address[] internal _candidateIds;\\n  /// @dev Mapping from candidate id => bitwise negation of validator index in `_candidates`\\n  mapping(address => uint256) internal _candidateIndex;\\n  /// @dev Mapping from candidate id => their info\\n  mapping(address => ValidatorCandidate) internal _candidateInfo;\\n\\n  /**\\n   * @dev The minimum offset in day from current date to the effective date of a new commission schedule.\\n   * Value of 1 means the change gets affected at the beginning of the following day.\\n   **/\\n  uint256 internal _minEffectiveDaysOnwards;\\n  /// @dev Mapping from candidate consensus id => schedule commission change.\\n  mapping(address => CommissionSchedule) internal _candidateCommissionChangeSchedule;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function maxValidatorCandidate() public view override returns (uint256) {\\n    return _maxValidatorCandidate;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function minEffectiveDaysOnward() external view override returns (uint256) {\\n    return _minEffectiveDaysOnwards;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMaxValidatorCandidate(uint256 _number) external override onlyAdmin {\\n    _setMaxValidatorCandidate(_number);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external override onlyAdmin {\\n    _setMinEffectiveDaysOnwards(_numOfDays);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view override returns (bool) {\\n    return _isValidatorCandidateById(__css2cid(consensus));\\n  }\\n\\n  function _isValidatorCandidateById(address cid) internal view returns (bool) {\\n    return _candidateIndex[cid] != 0;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfos() external view override returns (ValidatorCandidate[] memory list) {\\n    list = new ValidatorCandidate[](_candidateIds.length);\\n    for (uint i; i < list.length; ) {\\n      list[i] = _candidateInfo[_candidateIds[i]];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view override returns (ValidatorCandidate memory) {\\n    address validatorId = __css2cid(consensus);\\n    if (!_isValidatorCandidateById(validatorId)) revert ErrNonExistentCandidate();\\n    return _candidateInfo[validatorId];\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getValidatorCandidates() external view override returns (TConsensus[] memory) {\\n    return __cid2cssBatch(getValidatorCandidateIds());\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getValidatorCandidateIds() public view override returns (address[] memory) {\\n    return _candidateIds;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCommissionChangeSchedule(\\n    TConsensus consensus\\n  ) external view override returns (CommissionSchedule memory) {\\n    return _candidateCommissionChangeSchedule[__css2cid(consensus)];\\n  }\\n\\n  /**\\n   * @dev Removes unsastisfied candidates, the ones who have insufficient minimum candidate staking amount,\\n   * or the ones who requested to renounce their candidate role.\\n   *\\n   * Emits the event `CandidatesRevoked` when a candidate is revoked.\\n   *\\n   */\\n  function _syncCandidateSet(uint256 _nextPeriod) internal returns (address[] memory _unsatisfiedCandidates) {\\n    IStaking _staking = IStaking(getContract(ContractType.STAKING));\\n    uint256 _waitingSecsToRevoke = _staking.waitingSecsToRevoke();\\n    uint256 _minStakingAmount = _staking.minValidatorStakingAmount();\\n    uint256[] memory _selfStakings = _staking.getManySelfStakingsById(_candidateIds);\\n\\n    uint256 _length = _candidateIds.length;\\n    uint256 _unsatisfiedCount;\\n    _unsatisfiedCandidates = new address[](_length);\\n\\n    {\\n      uint256 _i;\\n      address cid;\\n      ValidatorCandidate storage _info;\\n      while (_i < _length) {\\n        cid = _candidateIds[_i];\\n        _info = _candidateInfo[cid];\\n\\n        // Checks for under-balance status of candidates\\n        bool _hasTopupDeadline = _info.topupDeadline != 0;\\n        if (_selfStakings[_i] < _minStakingAmount) {\\n          // Updates deadline on the first time unsatisfied the staking amount condition\\n          if (!_hasTopupDeadline) {\\n            uint256 _topupDeadline = block.timestamp + _waitingSecsToRevoke;\\n            _info.topupDeadline = _topupDeadline;\\n            emit CandidateTopupDeadlineUpdated(cid, _topupDeadline);\\n          }\\n        } else if (_hasTopupDeadline) {\\n          // Removes the deadline if the staking amount condition is satisfied\\n          delete _info.topupDeadline;\\n          emit CandidateTopupDeadlineUpdated(cid, 0);\\n        }\\n\\n        // Removes unsatisfied candidates\\n        bool _revokingActivated = (_info.revokingTimestamp != 0 && _info.revokingTimestamp <= block.timestamp) ||\\n          _emergencyExitLockedFundReleased(cid);\\n        bool _topupDeadlineMissed = _info.topupDeadline != 0 && _info.topupDeadline <= block.timestamp;\\n        if (_revokingActivated || _topupDeadlineMissed) {\\n          _selfStakings[_i] = _selfStakings[--_length];\\n          unchecked {\\n            _unsatisfiedCandidates[_unsatisfiedCount++] = cid;\\n          }\\n          _removeCandidate(cid);\\n          continue;\\n        }\\n\\n        // Checks for schedule of commission change and updates commission rate\\n        uint256 _scheduleTimestamp = _candidateCommissionChangeSchedule[cid].effectiveTimestamp;\\n        if (_scheduleTimestamp != 0 && _scheduleTimestamp <= block.timestamp) {\\n          uint256 _commisionRate = _candidateCommissionChangeSchedule[cid].commissionRate;\\n          delete _candidateCommissionChangeSchedule[cid];\\n          _info.commissionRate = _commisionRate;\\n          emit CommissionRateUpdated(cid, _commisionRate);\\n        }\\n\\n        unchecked {\\n          _i++;\\n        }\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_unsatisfiedCandidates, _unsatisfiedCount)\\n    }\\n\\n    if (_unsatisfiedCount > 0) {\\n      emit CandidatesRevoked(_unsatisfiedCandidates);\\n      _staking.execDeprecatePools(_unsatisfiedCandidates, _nextPeriod);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isCandidateAdmin(TConsensus consensusAddr, address admin) external view override returns (bool) {\\n    return _isCandidateAdminById(__css2cid(consensusAddr), admin);\\n  }\\n\\n  function _isCandidateAdminById(address candidateId, address admin) internal view returns (bool) {\\n    return _candidateInfo[candidateId].__shadowedAdmin == admin;\\n  }\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function _setMaxValidatorCandidate(uint256 _threshold) internal {\\n    _maxValidatorCandidate = _threshold;\\n    emit MaxValidatorCandidateUpdated(_threshold);\\n  }\\n\\n  /**\\n   * @dev Sets the minimum number of days onwards to the effective date of commission rate change.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function _setMinEffectiveDaysOnwards(uint256 _numOfDays) internal {\\n    if (_numOfDays < 1) revert ErrInvalidMinEffectiveDaysOnwards();\\n    _minEffectiveDaysOnwards = _numOfDays;\\n    emit MinEffectiveDaysOnwardsUpdated(_numOfDays);\\n  }\\n\\n  /**\\n   * @dev Removes the candidate.\\n   */\\n  function _removeCandidate(address _addr) internal virtual {\\n    uint256 idx = _candidateIndex[_addr];\\n    if (idx == 0) {\\n      return;\\n    }\\n\\n    delete _candidateInfo[_addr];\\n    delete _candidateIndex[_addr];\\n    delete _candidateCommissionChangeSchedule[_addr];\\n\\n    address lastCid = _candidateIds[_candidateIds.length - 1];\\n    if (lastCid != _addr) {\\n      _candidateIndex[lastCid] = idx;\\n      _candidateIds[~idx] = lastCid;\\n    }\\n\\n    _candidateIds.pop();\\n  }\\n\\n  /**\\n   * @dev Sets timestamp to revoke a candidate.\\n   */\\n  function _setRevokingTimestamp(ValidatorCandidate storage _candidate, uint256 timestamp) internal {\\n    address cid = __css2cid(_candidate.__shadowedConsensus);\\n    if (!_isValidatorCandidateById(cid)) revert ErrNonExistentCandidate();\\n    _candidate.revokingTimestamp = timestamp;\\n    emit CandidateRevokingTimestampUpdated(cid, timestamp);\\n  }\\n\\n  /**\\n   * @dev Returns a flag indicating whether the fund is unlocked.\\n   */\\n  function _emergencyExitLockedFundReleased(address _consensusAddr) internal virtual returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator id is a trusted org or not.\\n   */\\n  function _isTrustedOrg(address validatorId) internal virtual returns (bool);\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view virtual returns (address[] memory);\\n\\n  /// @dev See {RoninValidatorSet-__cid2cssBatch}\\n  function __cid2cssBatch(address[] memory cids) internal view virtual returns (TConsensus[] memory);\\n}\\n\",\"keccak256\":\"0x7431dfcc3a8a7e86882d45b0f3b1a2d51dc56a3c4c79c86f1596cb0ba429cd4c\",\"license\":\"MIT\"},\"contracts/ronin/validator/CandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/validator/ICandidateManagerCallback.sol\\\";\\nimport \\\"./CandidateManager.sol\\\";\\n\\nabstract contract CandidateManagerCallback is ICandidateManagerCallback, CandidateManager {\\n  //                                             //\\n  // ----------- Staking's Callbacks ----------- //\\n  //                                             //\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external override onlyContract(ContractType.STAKING) {\\n    uint256 length = _candidateIds.length;\\n    if (length >= maxValidatorCandidate()) revert ErrExceedsMaxNumberOfCandidate();\\n    if (_isValidatorCandidateById(cid)) revert ErrExistentCandidate();\\n    if (commissionRate > _MAX_PERCENTAGE) revert ErrInvalidCommissionRate();\\n\\n    for (uint i; i < length; ) {\\n      ValidatorCandidate storage existentInfo = _candidateInfo[_candidateIds[i]];\\n      if (candidateAdmin == existentInfo.__shadowedAdmin) revert ErrExistentCandidateAdmin(candidateAdmin);\\n      if (treasuryAddr == existentInfo.__shadowedTreasury) revert ErrExistentTreasury(treasuryAddr);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    _candidateIndex[cid] = ~length;\\n    _candidateIds.push(cid);\\n\\n    ValidatorCandidate storage _info = _candidateInfo[cid];\\n    _info.__shadowedAdmin = candidateAdmin;\\n    _info.__shadowedConsensus = TConsensus.wrap(cid);\\n    _info.__shadowedTreasury = treasuryAddr;\\n    _info.commissionRate = commissionRate;\\n    emit CandidateGranted(cid, treasuryAddr, candidateAdmin);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execRequestRenounceCandidate(\\n    address cid,\\n    uint256 secsLeft\\n  ) external override onlyContract(ContractType.STAKING) {\\n    if (_isTrustedOrg(cid)) revert ErrTrustedOrgCannotRenounce();\\n\\n    ValidatorCandidate storage _info = _candidateInfo[cid];\\n    if (_info.revokingTimestamp != 0) revert ErrAlreadyRequestedRevokingCandidate();\\n    _setRevokingTimestamp(_info, block.timestamp + secsLeft);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address cid,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external override onlyContract(ContractType.STAKING) {\\n    if (_candidateCommissionChangeSchedule[cid].effectiveTimestamp != 0) {\\n      revert ErrAlreadyRequestedUpdatingCommissionRate();\\n    }\\n    if (commissionRate > _MAX_PERCENTAGE) revert ErrInvalidCommissionRate();\\n    if (effectiveDaysOnwards < _minEffectiveDaysOnwards) revert ErrInvalidEffectiveDaysOnwards();\\n\\n    CommissionSchedule storage _schedule = _candidateCommissionChangeSchedule[cid];\\n    uint256 effectiveTimestamp = ((block.timestamp / PERIOD_DURATION) + effectiveDaysOnwards) * PERIOD_DURATION;\\n    _schedule.effectiveTimestamp = effectiveTimestamp;\\n    _schedule.commissionRate = commissionRate;\\n\\n    emit CommissionRateUpdateScheduled(cid, effectiveTimestamp, commissionRate);\\n  }\\n\\n  //                                             //\\n  // ----------- Profile's Callbacks ----------- //\\n  //                                             //\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execChangeConsensusAddress(\\n    address cid,\\n    TConsensus newConsensusAddr\\n  ) external override onlyContract(ContractType.PROFILE) {\\n    _candidateInfo[cid].__shadowedConsensus = newConsensusAddr;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execChangeAdminAddress(address cid, address newAdmin) external onlyContract(ContractType.PROFILE) {\\n    _candidateInfo[cid].__shadowedAdmin = newAdmin;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execChangeTreasuryAddress(\\n    address cid,\\n    address payable newTreasury\\n  ) external onlyContract(ContractType.PROFILE) {\\n    _candidateInfo[cid].__shadowedTreasury = newTreasury;\\n  }\\n}\\n\",\"keccak256\":\"0x8ae35a97f2ed19bdbead9fc8b1cfb4c4355fa6e10aa05bc7cc6dfbde32056ae0\",\"license\":\"MIT\"},\"contracts/ronin/validator/CoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"../../interfaces/IStakingVesting.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../../interfaces/IFastFinalityTracking.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\nimport \\\"../../interfaces/validator/ICoinbaseExecution.sol\\\";\\nimport \\\"../../libraries/EnumFlags.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { HasStakingVestingDeprecated, HasBridgeTrackingDeprecated, HasMaintenanceDeprecated, HasSlashIndicatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"../../precompile-usages/PCUSortValidators.sol\\\";\\nimport \\\"../../precompile-usages/PCUPickValidatorSet.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\nimport { EmergencyExit } from \\\"./EmergencyExit.sol\\\";\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\nimport { ErrCallerMustBeCoinbase } from \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract CoinbaseExecution is\\n  ICoinbaseExecution,\\n  RONTransferHelper,\\n  PCUSortValidators,\\n  PCUPickValidatorSet,\\n  HasContracts,\\n  HasStakingVestingDeprecated,\\n  HasBridgeTrackingDeprecated,\\n  HasMaintenanceDeprecated,\\n  HasSlashIndicatorDeprecated,\\n  EmergencyExit\\n{\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  modifier onlyCoinbase() {\\n    _requireCoinbase();\\n    _;\\n  }\\n\\n  modifier whenEpochEnding() {\\n    if (!epochEndingAt(block.number)) revert ErrAtEndOfEpochOnly();\\n    _;\\n  }\\n\\n  modifier oncePerEpoch() {\\n    if (epochOf(_lastUpdatedBlock) >= epochOf(block.number)) revert ErrAlreadyWrappedEpoch();\\n    _lastUpdatedBlock = block.number;\\n    _;\\n  }\\n\\n  function _requireCoinbase() private view {\\n    if (msg.sender != block.coinbase) revert ErrCallerMustBeCoinbase();\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function submitBlockReward() external payable override onlyCoinbase {\\n    address id = __css2cid(TConsensus.wrap(msg.sender));\\n\\n    bool requestForBlockProducer = _isBlockProducerById(id) &&\\n      !_isJailedById(id) &&\\n      !_miningRewardDeprecatedById(id, currentPeriod());\\n\\n    (, uint256 blockProducerBonus, , uint256 fastFinalityRewardPercentage) = IStakingVesting(\\n      getContract(ContractType.STAKING_VESTING)\\n    ).requestBonus({ forBlockProducer: requestForBlockProducer, forBridgeOperator: false });\\n\\n    // Deprecates reward for non-validator or slashed validator\\n    if (!requestForBlockProducer) {\\n      _totalDeprecatedReward += msg.value;\\n      emit BlockRewardDeprecated(id, msg.value, BlockRewardDeprecatedType.UNAVAILABILITY);\\n      return;\\n    }\\n\\n    emit BlockRewardSubmitted(id, msg.value, blockProducerBonus);\\n\\n    uint256 period = currentPeriod();\\n    uint256 reward = msg.value + blockProducerBonus;\\n    uint256 rewardFastFinality = (reward * fastFinalityRewardPercentage) / _MAX_PERCENTAGE; // reward for fast finality\\n    uint256 rewardProducingBlock = reward - rewardFastFinality; // reward for producing blocks\\n    uint256 cutOffReward;\\n\\n    // Add fast finality reward to total reward for current epoch, then split it later in the {wrapUpEpoch} method.\\n    _totalFastFinalityReward += rewardFastFinality;\\n\\n    if (_miningRewardBailoutCutOffAtPeriod[msg.sender][period]) {\\n      (, , , uint256 cutOffPercentage) = ISlashIndicator(getContract(ContractType.SLASH_INDICATOR))\\n        .getCreditScoreConfigs();\\n      cutOffReward = (rewardProducingBlock * cutOffPercentage) / _MAX_PERCENTAGE;\\n      _totalDeprecatedReward += cutOffReward;\\n      emit BlockRewardDeprecated(id, cutOffReward, BlockRewardDeprecatedType.AFTER_BAILOUT);\\n    }\\n\\n    rewardProducingBlock -= cutOffReward;\\n    (uint256 minRate, uint256 maxRate) = IStaking(getContract(ContractType.STAKING)).getCommissionRateRange();\\n    uint256 rate = Math.max(Math.min(_candidateInfo[id].commissionRate, maxRate), minRate);\\n    uint256 miningAmount = (rate * rewardProducingBlock) / _MAX_PERCENTAGE;\\n    _miningReward[id] += miningAmount;\\n    _delegatingReward[id] += (rewardProducingBlock - miningAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function wrapUpEpoch() external payable virtual override onlyCoinbase whenEpochEnding oncePerEpoch {\\n    uint256 newPeriod = _computePeriod(block.timestamp);\\n    bool periodEnding = _isPeriodEnding(newPeriod);\\n\\n    address[] memory currValidatorIds = getValidatorIds();\\n    address[] memory revokedCandidateIds;\\n    uint256 epoch = epochOf(block.number);\\n    uint256 nextEpoch = epoch + 1;\\n    uint256 lastPeriod = currentPeriod();\\n\\n    _syncFastFinalityReward(epoch, currValidatorIds);\\n\\n    if (periodEnding) {\\n      (\\n        uint256 totalDelegatingReward,\\n        uint256[] memory delegatingRewards\\n      ) = _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(lastPeriod, currValidatorIds);\\n      _settleAndTransferDelegatingRewards(lastPeriod, currValidatorIds, totalDelegatingReward, delegatingRewards);\\n      _tryRecycleLockedFundsFromEmergencyExits();\\n      _recycleDeprecatedRewards();\\n\\n      ISlashIndicator slashIndicatorContract = ISlashIndicator(getContract(ContractType.SLASH_INDICATOR));\\n      slashIndicatorContract.execUpdateCreditScores(currValidatorIds, lastPeriod);\\n      (currValidatorIds, revokedCandidateIds) = _syncValidatorSet(newPeriod);\\n      if (revokedCandidateIds.length > 0) {\\n        slashIndicatorContract.execResetCreditScores(revokedCandidateIds);\\n      }\\n      _currentPeriodStartAtBlock = block.number + 1;\\n    }\\n    _revampRoles(newPeriod, nextEpoch, currValidatorIds);\\n    emit WrappedUpEpoch(lastPeriod, epoch, periodEnding);\\n    _periodOf[nextEpoch] = newPeriod;\\n    _lastUpdatedPeriod = newPeriod;\\n  }\\n\\n  /**\\n   * @dev This method calculate and update reward of each `validators` accordingly their fast finality voting performance\\n   * in the `epoch`. The leftover reward is added to the {_totalDeprecatedReward} and is recycled later to the\\n   * {StakingVesting} contract.\\n   *\\n   * Requirements:\\n   * - This method is only called once each epoch.\\n   */\\n  function _syncFastFinalityReward(uint256 epoch, address[] memory validatorIds) private {\\n    uint256[] memory voteCounts = IFastFinalityTracking(getContract(ContractType.FAST_FINALITY_TRACKING))\\n      .getManyFinalityVoteCounts(epoch, validatorIds);\\n    uint256 divisor = _numberOfBlocksInEpoch * validatorIds.length;\\n    uint256 iReward;\\n    uint256 totalReward = _totalFastFinalityReward;\\n    uint256 totalDispensedReward = 0;\\n\\n    for (uint i; i < validatorIds.length; ) {\\n      iReward = (totalReward * voteCounts[i]) / divisor;\\n      _fastFinalityReward[validatorIds[i]] += iReward;\\n      totalDispensedReward += iReward;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    _totalDeprecatedReward += (totalReward - totalDispensedReward);\\n    delete _totalFastFinalityReward;\\n  }\\n\\n  /**\\n   * @dev This loops over all current validators to:\\n   * - Update delegating reward for and calculate total delegating rewards to be sent to the staking contract,\\n   * - Distribute the reward of block producers and bridge operators to their treasury addresses,\\n   * - Update the total deprecated reward if the two previous conditions do not satisfy.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(\\n    uint256 lastPeriod,\\n    address[] memory currValidatorIds\\n  ) private returns (uint256 totalDelegatingReward, uint256[] memory delegatingRewards) {\\n    address vId; // validator id\\n    address payable treasury;\\n    delegatingRewards = new uint256[](currValidatorIds.length);\\n\\n    for (uint _i; _i < currValidatorIds.length; ) {\\n      vId = currValidatorIds[_i];\\n      treasury = _candidateInfo[vId].__shadowedTreasury;\\n\\n      if (!_isJailedById(vId) && !_miningRewardDeprecatedById(vId, lastPeriod)) {\\n        totalDelegatingReward += _delegatingReward[vId];\\n        delegatingRewards[_i] = _delegatingReward[vId];\\n        _distributeMiningReward(vId, treasury);\\n        _distributeFastFinalityReward(vId, treasury);\\n      } else {\\n        _totalDeprecatedReward += _miningReward[vId] + _delegatingReward[vId] + _fastFinalityReward[vId];\\n      }\\n\\n      delete _delegatingReward[vId];\\n      delete _miningReward[vId];\\n      delete _fastFinalityReward[vId];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Distributes bonus of staking vesting and mining fee for the block producer.\\n   *\\n   * Emits the `MiningRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `MiningRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeMiningReward(address cid, address payable treasury) private {\\n    uint256 amount = _miningReward[cid];\\n    if (amount > 0) {\\n      if (_unsafeSendRONLimitGas(treasury, amount, DEFAULT_ADDITION_GAS)) {\\n        emit MiningRewardDistributed(cid, treasury, amount);\\n        return;\\n      }\\n\\n      emit MiningRewardDistributionFailed(cid, treasury, amount, address(this).balance);\\n    }\\n  }\\n\\n  function _distributeFastFinalityReward(address cid, address payable treasury) private {\\n    uint256 amount = _fastFinalityReward[cid];\\n    if (amount > 0) {\\n      if (_unsafeSendRONLimitGas(treasury, amount, DEFAULT_ADDITION_GAS)) {\\n        emit FastFinalityRewardDistributed(cid, treasury, amount);\\n        return;\\n      }\\n\\n      emit FastFinalityRewardDistributionFailed(cid, treasury, amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Helper function to settle rewards for delegators of `currValidatorIds` at the end of each period,\\n   * then transfer the rewards from this contract to the staking contract, in order to finalize a period.\\n   *\\n   * Emits the `StakingRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `StakingRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _settleAndTransferDelegatingRewards(\\n    uint256 period,\\n    address[] memory currValidatorIds,\\n    uint256 totalDelegatingReward,\\n    uint256[] memory delegatingRewards\\n  ) private {\\n    IStaking _staking = IStaking(getContract(ContractType.STAKING));\\n    if (totalDelegatingReward > 0) {\\n      if (_unsafeSendRON(payable(address(_staking)), totalDelegatingReward)) {\\n        _staking.execRecordRewards(currValidatorIds, delegatingRewards, period);\\n        emit StakingRewardDistributed(totalDelegatingReward, currValidatorIds, delegatingRewards);\\n        return;\\n      }\\n\\n      emit StakingRewardDistributionFailed(\\n        totalDelegatingReward,\\n        currValidatorIds,\\n        delegatingRewards,\\n        address(this).balance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfer the deprecated rewards e.g. the rewards that get deprecated when validator is slashed/maintained,\\n   * to the staking vesting contract\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   */\\n  function _recycleDeprecatedRewards() private {\\n    uint256 withdrawAmount = _totalDeprecatedReward;\\n\\n    if (withdrawAmount != 0) {\\n      address withdrawTarget = getContract(ContractType.STAKING_VESTING);\\n\\n      delete _totalDeprecatedReward;\\n\\n      (bool _success, ) = withdrawTarget.call{ value: withdrawAmount }(\\n        abi.encodeWithSelector(IStakingVesting.receiveRON.selector)\\n      );\\n\\n      if (_success) {\\n        emit DeprecatedRewardRecycled(withdrawTarget, withdrawAmount);\\n      } else {\\n        emit DeprecatedRewardRecycleFailed(withdrawTarget, withdrawAmount, address(this).balance);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the validator set based on the validator candidates from the Staking contract.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _syncValidatorSet(\\n    uint256 newPeriod\\n  ) private returns (address[] memory newValidatorIds, address[] memory unsatisfiedCandidates) {\\n    unsatisfiedCandidates = _syncCandidateSet(newPeriod);\\n    uint256[] memory weights = IStaking(getContract(ContractType.STAKING)).getManyStakingTotalsById(_candidateIds);\\n    uint256[] memory trustedWeights = IRoninTrustedOrganization(getContract(ContractType.RONIN_TRUSTED_ORGANIZATION))\\n      .getConsensusWeightsById(_candidateIds);\\n    uint256 newValidatorCount;\\n    (newValidatorIds, newValidatorCount) = _pcPickValidatorSet(\\n      _candidateIds,\\n      weights,\\n      trustedWeights,\\n      _maxValidatorNumber,\\n      _maxPrioritizedValidatorNumber\\n    );\\n    _setNewValidatorSet(newValidatorIds, newValidatorCount, newPeriod);\\n  }\\n\\n  /**\\n   * @dev Private helper function helps writing the new validator set into the contract storage.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _setNewValidatorSet(\\n    address[] memory _newValidators,\\n    uint256 _newValidatorCount,\\n    uint256 _newPeriod\\n  ) private {\\n    // Remove exceeding validators in the current set\\n    for (uint256 _i = _newValidatorCount; _i < _validatorCount; ) {\\n      delete _validatorMap[_validatorIds[_i]];\\n      delete _validatorIds[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    // Remove flag for all validator in the current set\\n    for (uint _i; _i < _newValidatorCount; ) {\\n      delete _validatorMap[_validatorIds[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    // Update new validator set and set flag correspondingly.\\n    for (uint256 _i; _i < _newValidatorCount; ) {\\n      address _newValidator = _newValidators[_i];\\n      _validatorMap[_newValidator] = EnumFlags.ValidatorFlag.Both;\\n      _validatorIds[_i] = _newValidator;\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    _validatorCount = _newValidatorCount;\\n    emit ValidatorSetUpdated(_newPeriod, _newValidators);\\n  }\\n\\n  /**\\n   * @dev Activate/Deactivate the validators from producing blocks, based on their in jail status and maintenance status.\\n   *\\n   * Requirements:\\n   * - This method is called at the end of each epoch\\n   *\\n   * Emits the `BlockProducerSetUpdated` event.\\n   * Emits the `BridgeOperatorSetUpdated` event.\\n   *\\n   */\\n  function _revampRoles(uint256 _newPeriod, uint256 _nextEpoch, address[] memory currValidatorIds) private {\\n    bool[] memory _maintainedList = IMaintenance(getContract(ContractType.MAINTENANCE)).checkManyMaintainedById(\\n      currValidatorIds,\\n      block.number + 1\\n    );\\n\\n    for (uint _i; _i < currValidatorIds.length; ) {\\n      address validatorId = currValidatorIds[_i];\\n      bool emergencyExitRequested = block.timestamp <= _emergencyExitJailedTimestamp[validatorId];\\n      bool isProducerBefore = _isBlockProducerById(validatorId);\\n      bool isProducerAfter = !(_isJailedAtBlockById(validatorId, block.number + 1) ||\\n        _maintainedList[_i] ||\\n        emergencyExitRequested);\\n\\n      if (!isProducerBefore && isProducerAfter) {\\n        _validatorMap[validatorId] = _validatorMap[validatorId].addFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n      } else if (isProducerBefore && !isProducerAfter) {\\n        _validatorMap[validatorId] = _validatorMap[validatorId].removeFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit BlockProducerSetUpdated(_newPeriod, _nextEpoch, getBlockProducerIds());\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_isTrustedOrg`.\\n   */\\n  function _isTrustedOrg(address validatorId) internal view override returns (bool) {\\n    return\\n      IRoninTrustedOrganization(getContract(ContractType.RONIN_TRUSTED_ORGANIZATION)).getConsensusWeightById(\\n        validatorId\\n      ) > 0;\\n  }\\n}\\n\",\"keccak256\":\"0xa2abb4c53c070a3872bee736654f83f012f8a4fbf1795719341d1d8f6d483436\",\"license\":\"MIT\"},\"contracts/ronin/validator/EmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../interfaces/IRoninGovernanceAdmin.sol\\\";\\nimport \\\"../../interfaces/validator/IEmergencyExit.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\nimport \\\"./CandidateManagerCallback.sol\\\";\\n\\nabstract contract EmergencyExit is IEmergencyExit, RONTransferHelper, CandidateManagerCallback, CommonStorage {\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function emergencyExitLockedAmount() external view returns (uint256) {\\n    return _emergencyExitLockedAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function emergencyExpiryDuration() external view returns (uint256) {\\n    return _emergencyExpiryDuration;\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function execRequestEmergencyExit(address cid, uint256 secLeftToRevoke) external onlyContract(ContractType.STAKING) {\\n    EmergencyExitInfo storage _info = _exitInfo[cid];\\n    if (_info.recyclingAt != 0) revert ErrAlreadyRequestedEmergencyExit();\\n\\n    uint256 revokingTimestamp = block.timestamp + secLeftToRevoke;\\n    _setRevokingTimestamp(_candidateInfo[cid], revokingTimestamp);\\n    _emergencyExitJailedTimestamp[cid] = revokingTimestamp;\\n\\n    uint256 deductedAmount = IStaking(msg.sender).execDeductStakingAmount(cid, _emergencyExitLockedAmount);\\n    if (deductedAmount > 0) {\\n      uint256 recyclingAt = block.timestamp + _emergencyExpiryDuration;\\n      _lockedConsensusList.push(cid);\\n      _info.lockedAmount = deductedAmount;\\n      _info.recyclingAt = recyclingAt;\\n      IRoninGovernanceAdmin(_getAdmin()).createEmergencyExitPoll(\\n        cid,\\n        _candidateInfo[cid].__shadowedTreasury,\\n        block.timestamp,\\n        recyclingAt\\n      );\\n    }\\n    emit EmergencyExitRequested(cid, deductedAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function setEmergencyExitLockedAmount(uint256 amount) external onlyAdmin {\\n    _setEmergencyExitLockedAmount(amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function setEmergencyExpiryDuration(uint256 duration) external onlyAdmin {\\n    _setEmergencyExpiryDuration(duration);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address cid, address payable recipient) external onlyAdmin {\\n    if (_exitInfo[cid].recyclingAt == 0) {\\n      revert ErrLockedFundReleaseInfoNotFound(cid);\\n    }\\n\\n    uint256 length = _lockedConsensusList.length;\\n    uint256 index = length;\\n\\n    for (uint i; i < length; ) {\\n      if (_lockedConsensusList[i] == cid) {\\n        index = i;\\n        break;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // The locked amount might be recycled\\n    if (index == length) {\\n      revert ErrLockedFundMightBeRecycled(cid);\\n    }\\n\\n    uint256 amount = _exitInfo[cid].lockedAmount;\\n    if (amount > 0) {\\n      delete _exitInfo[cid];\\n      if (length > 1) {\\n        _lockedConsensusList[index] = _lockedConsensusList[length - 1];\\n      }\\n      _lockedConsensusList.pop();\\n\\n      _lockedFundReleased[cid] = true;\\n      if (_unsafeSendRONLimitGas(recipient, amount, DEFAULT_ADDITION_GAS)) {\\n        emit EmergencyExitLockedFundReleased(cid, recipient, amount);\\n        return;\\n      }\\n\\n      emit EmergencyExitLockedFundReleasingFailed(cid, recipient, amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tries to recycle the locked funds from emergency exit requests.\\n   */\\n  function _tryRecycleLockedFundsFromEmergencyExits() internal {\\n    uint256 length = _lockedConsensusList.length;\\n\\n    uint256 i;\\n    address addr;\\n    EmergencyExitInfo storage _info;\\n\\n    while (i < length) {\\n      addr = _lockedConsensusList[i];\\n      _info = _exitInfo[addr];\\n\\n      if (_info.recyclingAt <= block.timestamp) {\\n        _totalDeprecatedReward += _info.lockedAmount;\\n\\n        delete _exitInfo[addr];\\n        if (--length > 0) {\\n          _lockedConsensusList[i] = _lockedConsensusList[length];\\n        }\\n        _lockedConsensusList.pop();\\n        continue;\\n      }\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_emergencyExitLockedFundReleased`.\\n   */\\n  function _emergencyExitLockedFundReleased(address cid) internal virtual override returns (bool) {\\n    return _lockedFundReleased[cid];\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_removeCandidate`.\\n   */\\n  function _removeCandidate(address cid) internal override {\\n    delete _lockedFundReleased[cid];\\n    super._removeCandidate(cid);\\n  }\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(\\n    TConsensus consensusAddr\\n  ) internal view virtual override(CandidateManager, CommonStorage) returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(\\n    TConsensus[] memory consensusAddrs\\n  ) internal view virtual override(CandidateManager, CommonStorage) returns (address[] memory);\\n\\n  /// @dev See {RoninValidatorSet-__cid2cssBatch}\\n  function __cid2cssBatch(\\n    address[] memory cids\\n  ) internal view virtual override(CandidateManager, ValidatorInfoStorageV2) returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev See `setEmergencyExitLockedAmount.\\n   */\\n  function _setEmergencyExitLockedAmount(uint256 amount) internal {\\n    _emergencyExitLockedAmount = amount;\\n    emit EmergencyExitLockedAmountUpdated(amount);\\n  }\\n\\n  /**\\n   * @dev See `setEmergencyExpiryDuration`.\\n   */\\n  function _setEmergencyExpiryDuration(uint256 duration) internal {\\n    _emergencyExpiryDuration = duration;\\n    emit EmergencyExpiryDurationUpdated(duration);\\n  }\\n}\\n\",\"keccak256\":\"0x849d4a3905e7283b85cda57fcb77ab1b47b342a9cb7bf580a4d372243c5b8ecd\",\"license\":\"MIT\"},\"contracts/ronin/validator/RoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"./CoinbaseExecution.sol\\\";\\nimport \\\"./SlashingExecution.sol\\\";\\n\\ncontract RoninValidatorSet is Initializable, CoinbaseExecution, SlashingExecution {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __slashIndicatorContract,\\n    address __stakingContract,\\n    address __stakingVestingContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address /* __bridgeTrackingContract */,\\n    uint256 __maxValidatorNumber,\\n    uint256 __maxValidatorCandidate,\\n    uint256 __maxPrioritizedValidatorNumber,\\n    uint256 __minEffectiveDaysOnwards,\\n    uint256 __numberOfBlocksInEpoch,\\n    // __emergencyExitConfigs[0]: emergencyExitLockedAmount\\n    // __emergencyExitConfigs[1]: emergencyExpiryDuration\\n    uint256[2] calldata __emergencyExitConfigs\\n  ) external initializer {\\n    _setContract(ContractType.SLASH_INDICATOR, __slashIndicatorContract);\\n    _setContract(ContractType.STAKING, __stakingContract);\\n    _setContract(ContractType.STAKING_VESTING, __stakingVestingContract);\\n    _setContract(ContractType.MAINTENANCE, __maintenanceContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, __roninTrustedOrganizationContract);\\n\\n    _setMaxValidatorNumber(__maxValidatorNumber);\\n    _setMaxValidatorCandidate(__maxValidatorCandidate);\\n    _setMaxPrioritizedValidatorNumber(__maxPrioritizedValidatorNumber);\\n    _setMinEffectiveDaysOnwards(__minEffectiveDaysOnwards);\\n    _setEmergencyExitLockedAmount(__emergencyExitConfigs[0]);\\n    _setEmergencyExpiryDuration(__emergencyExitConfigs[1]);\\n    _numberOfBlocksInEpoch = __numberOfBlocksInEpoch;\\n  }\\n\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.STAKING, ______deprecatedStakingContract);\\n    _setContract(ContractType.MAINTENANCE, ______deprecatedMaintenance);\\n    _setContract(ContractType.SLASH_INDICATOR, ______deprecatedSlashIndicator);\\n    _setContract(ContractType.STAKING_VESTING, ______deprecatedStakingVesting);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, ______deprecatedTrustedOrg);\\n\\n    delete ______deprecatedStakingContract;\\n    delete ______deprecatedMaintenance;\\n    delete ______deprecatedSlashIndicator;\\n    delete ______deprecatedStakingVesting;\\n    delete ______deprecatedBridgeTracking;\\n    delete ______deprecatedTrustedOrg;\\n  }\\n\\n  function initializeV3(address fastFinalityTrackingContract) external reinitializer(3) {\\n    _setContract(ContractType.FAST_FINALITY_TRACKING, fastFinalityTrackingContract);\\n  }\\n\\n  function initializeV4(address profileContract) external reinitializer(4) {\\n    _setContract(ContractType.PROFILE, profileContract);\\n  }\\n\\n  /**\\n   * @dev Only receives RON from staking vesting contract (for topping up bonus), and from staking contract (for transferring\\n   * deducting amount on slashing).\\n   */\\n  function _fallback() internal view {\\n    if (msg.sender != getContract(ContractType.STAKING_VESTING) && msg.sender != getContract(ContractType.STAKING)) {\\n      revert ErrUnauthorizedReceiveRON();\\n    }\\n  }\\n\\n  /**\\n   * @dev Convert consensus address to corresponding id from the Profile contract.\\n   */\\n  function __css2cid(TConsensus consensusAddr) internal view override(EmergencyExit, CommonStorage) returns (address) {\\n    return IProfile(getContract(ContractType.PROFILE)).getConsensus2Id(consensusAddr);\\n  }\\n\\n  /**\\n   * @dev Convert many consensus addresses to corresponding ids from the Profile contract.\\n   */\\n  function __css2cidBatch(\\n    TConsensus[] memory consensusAddrs\\n  ) internal view override(EmergencyExit, CommonStorage) returns (address[] memory) {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyConsensus2Id(consensusAddrs);\\n  }\\n\\n  /**\\n   * @dev Convert many id to corresponding consensus addresses from the Profile contract.\\n   */\\n  function __cid2cssBatch(\\n    address[] memory cids\\n  ) internal view override(EmergencyExit, ValidatorInfoStorageV2) returns (TConsensus[] memory) {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyId2Consensus(cids);\\n  }\\n}\\n\",\"keccak256\":\"0xad214b54389a2488cbcaa13d9a216c339d24d6e46767532b45acbf025e70a7f9\",\"license\":\"MIT\"},\"contracts/ronin/validator/SlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../interfaces/validator/ISlashingExecution.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { HasSlashIndicatorDeprecated, HasStakingDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\n\\nabstract contract SlashingExecution is\\n  ISlashingExecution,\\n  HasContracts,\\n  HasSlashIndicatorDeprecated,\\n  HasStakingDeprecated,\\n  CommonStorage\\n{\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execSlash(\\n    address validatorId,\\n    uint256 newJailedUntil,\\n    uint256 slashAmount,\\n    bool cannotBailout\\n  ) external override onlyContract(ContractType.SLASH_INDICATOR) {\\n    uint256 period = currentPeriod();\\n    _miningRewardDeprecatedAtPeriod[validatorId][period] = true;\\n\\n    _totalDeprecatedReward += _miningReward[validatorId] + _delegatingReward[validatorId];\\n\\n    delete _miningReward[validatorId];\\n    delete _delegatingReward[validatorId];\\n\\n    _blockProducerJailedBlock[validatorId] = Math.max(newJailedUntil, _blockProducerJailedBlock[validatorId]);\\n\\n    if (slashAmount > 0) {\\n      uint256 _actualAmount = IStaking(getContract(ContractType.STAKING)).execDeductStakingAmount(\\n        validatorId,\\n        slashAmount\\n      );\\n      _totalDeprecatedReward += _actualAmount;\\n    }\\n\\n    if (cannotBailout) {\\n      _cannotBailoutUntilBlock[validatorId] = Math.max(newJailedUntil, _cannotBailoutUntilBlock[validatorId]);\\n    }\\n\\n    emit ValidatorPunished(validatorId, period, _blockProducerJailedBlock[validatorId], slashAmount, true, false);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execBailOut(\\n    address validatorId,\\n    uint256 period\\n  ) external override onlyContract(ContractType.SLASH_INDICATOR) {\\n    if (block.number <= _cannotBailoutUntilBlock[validatorId]) revert ErrCannotBailout(validatorId);\\n\\n    // Note: Removing rewards of validator in `bailOut` function is not needed, since the rewards have been\\n    // removed previously in the `slash` function.\\n    _miningRewardBailoutCutOffAtPeriod[validatorId][period] = true;\\n    _miningRewardDeprecatedAtPeriod[validatorId][period] = false;\\n    _blockProducerJailedBlock[validatorId] = block.number - 1;\\n\\n    emit ValidatorUnjailed(validatorId, period);\\n  }\\n}\\n\",\"keccak256\":\"0x073b121de38d13b3604624ebcb86b62d39c2ea08720ecad74615fda14069242d\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/CommonStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./JailingStorage.sol\\\";\\nimport \\\"./TimingStorage.sol\\\";\\nimport \\\"./ValidatorInfoStorageV2.sol\\\";\\n\\nabstract contract CommonStorage is ICommonInfo, TimingStorage, JailingStorage, ValidatorInfoStorageV2 {\\n  /// @dev Mapping from consensus address => pending reward from producing block\\n  mapping(address => uint256) internal _miningReward;\\n  /// @dev Mapping from consensus address => pending reward from delegating\\n  mapping(address => uint256) internal _delegatingReward;\\n\\n  /// @dev The total reward for fast finality\\n  uint256 internal _totalFastFinalityReward;\\n  /// @dev Mapping from consensus address => pending reward for fast finality\\n  mapping(address => uint256) internal _fastFinalityReward;\\n\\n  /// @dev The deprecated reward that has not been withdrawn by admin\\n  uint256 internal _totalDeprecatedReward;\\n\\n  /// @dev The amount of RON to lock from a consensus address.\\n  uint256 internal _emergencyExitLockedAmount;\\n  /// @dev The duration that an emergency request is expired and the fund will be recycled.\\n  uint256 internal _emergencyExpiryDuration;\\n  /// @dev The address list of consensus addresses that being locked fund.\\n  address[] internal _lockedConsensusList;\\n  /// @dev Mapping from consensus => request exist info\\n  mapping(address => EmergencyExitInfo) internal _exitInfo;\\n  /// @dev Mapping from consensus => flag indicating whether the locked fund is released\\n  mapping(address => bool) internal _lockedFundReleased;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[44] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICommonInfo\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view override returns (EmergencyExitInfo memory _info) {\\n    _info = _exitInfo[__css2cid(consensus)];\\n    if (_info.recyclingAt == 0) revert NonExistentRecyclingInfo();\\n  }\\n\\n  /**\\n   * @inheritdoc ICommonInfo\\n   */\\n  function totalDeprecatedReward() external view override returns (uint256) {\\n    return _totalDeprecatedReward;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(\\n    uint256 _block\\n  ) public view virtual override(ITimingInfo, JailingStorage, TimingStorage) returns (uint256) {\\n    return TimingStorage.epochOf(_block);\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override(ITimingInfo, JailingStorage, TimingStorage) returns (uint256) {\\n    return TimingStorage.currentPeriod();\\n  }\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(\\n    TConsensus consensusAddr\\n  ) internal view virtual override(JailingStorage, ValidatorInfoStorageV2) returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(\\n    TConsensus[] memory consensusAddrs\\n  ) internal view virtual override(JailingStorage, ValidatorInfoStorageV2) returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6e9dbce970dd4f6de450435e768f3baea6ea0f08b7414d5511e34be87525d43e\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/JailingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/IJailingInfo.sol\\\";\\n\\nabstract contract JailingStorage is IJailingInfo {\\n  /// @dev Mapping from candidate id => period number => block producer has no pending reward.\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardDeprecatedAtPeriod;\\n  /// @dev Mapping from candidate id => period number => whether the block producer get cut off reward, due to bailout.\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardBailoutCutOffAtPeriod;\\n  /// @dev Mapping from candidate id => period number => block operator has no pending reward.\\n  mapping(address => mapping(uint256 => bool)) internal ______deprecatedBridgeRewardDeprecatedAtPeriod;\\n\\n  /// @dev Mapping from candidate id => the last block that the block producer is jailed.\\n  mapping(address => uint256) internal _blockProducerJailedBlock;\\n  /// @dev Mapping from candidate id => the last timestamp that the bridge operator is jailed.\\n  mapping(address => uint256) internal _emergencyExitJailedTimestamp;\\n  /// @dev Mapping from candidate id => the last block that the block producer cannot bailout.\\n  mapping(address => uint256) internal _cannotBailoutUntilBlock;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailed(TConsensus consensus) external view override returns (bool) {\\n    address candidateId = __css2cid(consensus);\\n    return _isJailedAtBlockById(candidateId, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view override returns (bool) {\\n    address candidateId = __css2cid(addr);\\n    return _isJailedAtBlockById(candidateId, blockNum);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus consensus\\n  ) external view override returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_) {\\n    return _getJailedTimeLeftAtBlockById(__css2cid(consensus), block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus consensus,\\n    uint256 _blockNum\\n  ) external view override returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_) {\\n    return _getJailedTimeLeftAtBlockById(__css2cid(consensus), _blockNum);\\n  }\\n\\n  function _getJailedTimeLeftAtBlockById(\\n    address candidateId,\\n    uint256 blockNum\\n  ) internal view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_) {\\n    uint256 jailedBlock = _blockProducerJailedBlock[candidateId];\\n    if (jailedBlock < blockNum) {\\n      return (false, 0, 0);\\n    }\\n\\n    isJailed_ = true;\\n    blockLeft_ = jailedBlock - blockNum + 1;\\n    epochLeft_ = epochOf(jailedBlock) - epochOf(blockNum) + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkManyJailed(TConsensus[] calldata consensusList) external view override returns (bool[] memory) {\\n    return _checkManyJailedById(__css2cidBatch(consensusList));\\n  }\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view override returns (bool[] memory) {\\n    return _checkManyJailedById(candidateIds);\\n  }\\n\\n  function _checkManyJailedById(address[] memory candidateIds) internal view returns (bool[] memory result) {\\n    result = new bool[](candidateIds.length);\\n    for (uint256 i; i < candidateIds.length; ) {\\n      result[i] = _isJailedById(candidateIds[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecated(TConsensus consensus) external view override returns (bool) {\\n    uint256 period = currentPeriod();\\n    return _miningRewardDeprecatedById(__css2cid(consensus), period);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(\\n    TConsensus consensus,\\n    uint256 period\\n  ) external view override returns (bool) {\\n    return _miningRewardDeprecatedById(__css2cid(consensus), period);\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-epochOf`\\n   */\\n  function epochOf(uint256 _block) public view virtual returns (uint256);\\n\\n  /**\\n   * @dev See `ITimingInfo-currentPeriod`\\n   */\\n  function currentPeriod() public view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function _isJailedById(address validatorId) internal view returns (bool) {\\n    return _isJailedAtBlockById(validatorId, block.number);\\n  }\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function _isJailedAtBlockById(address validatorId, uint256 blockNum) internal view returns (bool) {\\n    return blockNum <= _blockProducerJailedBlock[validatorId];\\n  }\\n\\n  /**\\n   * @dev Returns whether the block producer has no pending reward in that period.\\n   */\\n  function _miningRewardDeprecatedById(address validatorId, uint256 period) internal view returns (bool) {\\n    return _miningRewardDeprecatedAtPeriod[validatorId][period];\\n  }\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view virtual returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xa6099c81511b974dc9b68ecd1bcc45d7b298bfec125aa84a6afcb468d247f400\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/TimingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport \\\"../../../interfaces/validator/info-fragments/ITimingInfo.sol\\\";\\n\\nabstract contract TimingStorage is ITimingInfo, GlobalConfigConsumer {\\n  /// @dev The number of blocks in a epoch\\n  uint256 internal _numberOfBlocksInEpoch;\\n  /// @dev The last updated block\\n  uint256 internal _lastUpdatedBlock;\\n  /// @dev The last updated period\\n  uint256 internal _lastUpdatedPeriod;\\n  /// @dev The starting block of the last updated period\\n  uint256 internal _currentPeriodStartAtBlock;\\n\\n  /// @dev Mapping from epoch index => period index\\n  mapping(uint256 => uint256) internal _periodOf;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function getLastUpdatedBlock() external view override returns (uint256) {\\n    return _lastUpdatedBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(uint256 _block) public view virtual override returns (uint256) {\\n    return _block / _numberOfBlocksInEpoch + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber) {\\n    return (_epoch <= epochOf(block.number) || _periodOf[_epoch] > 0, _periodOf[_epoch]);\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function isPeriodEnding() external view override returns (bool) {\\n    return _isPeriodEnding(_computePeriod(block.timestamp));\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochEndingAt(uint256 _block) public view virtual override returns (bool) {\\n    return _block % _numberOfBlocksInEpoch == _numberOfBlocksInEpoch - 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override returns (uint256) {\\n    return _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriodStartAtBlock() public view override returns (uint256) {\\n    return _currentPeriodStartAtBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function numberOfBlocksInEpoch() public view virtual override returns (uint256 _numberOfBlocks) {\\n    return _numberOfBlocksInEpoch;\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-isPeriodEnding`\\n   */\\n  function _isPeriodEnding(uint256 _newPeriod) internal view virtual returns (bool) {\\n    return _newPeriod > _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @dev Returns the calculated period.\\n   */\\n  function _computePeriod(uint256 _timestamp) internal pure returns (uint256) {\\n    return _timestamp / PERIOD_DURATION;\\n  }\\n}\\n\",\"keccak256\":\"0xc545f119b8b8978d793b62f2495dc2d49c3f416791459b9833bdc65f4dae8e7f\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/ValidatorInfoStorageV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { HasTrustedOrgDeprecated } from \\\"../../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"../../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../../interfaces/validator/info-fragments/IValidatorInfoV2.sol\\\";\\nimport \\\"../../../interfaces/IProfile.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\nabstract contract ValidatorInfoStorageV2 is IValidatorInfoV2, HasContracts, HasTrustedOrgDeprecated {\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  /// @dev The maximum number of validator.\\n  uint256 internal _maxValidatorNumber;\\n\\n  /// @dev The total of validators\\n  uint256 internal _validatorCount;\\n  /// @dev Mapping from validator index => validator id address\\n  mapping(uint256 => address) internal _validatorIds;\\n  /// @dev Mapping from validator id => flag indicating the validator ability: producing block, operating bridge\\n  mapping(address => EnumFlags.ValidatorFlag) internal _validatorMap;\\n  /// @dev The number of slot that is reserved for prioritized validators\\n  uint256 internal _maxPrioritizedValidatorNumber;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  function validatorCount() external view returns (uint256) {\\n    return _validatorCount;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function getValidators() public view override returns (TConsensus[] memory consensusList) {\\n    return __cid2cssBatch(getValidatorIds());\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function getValidatorIds() public view override returns (address[] memory cids) {\\n    cids = new address[](_validatorCount);\\n    address iValidator;\\n    for (uint i; i < cids.length; ) {\\n      iValidator = _validatorIds[i];\\n      cids[i] = iValidator;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function getBlockProducers() public view override returns (TConsensus[] memory consensusList) {\\n    return __cid2cssBatch(getBlockProducerIds());\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function getBlockProducerIds() public view override returns (address[] memory cids) {\\n    cids = new address[](_validatorCount);\\n    uint256 count = 0;\\n    for (uint i; i < cids.length; ) {\\n      address validatorId = _validatorIds[i];\\n      if (_isBlockProducerById(validatorId)) {\\n        cids[count++] = validatorId;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      mstore(cids, count)\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) public view override returns (bool) {\\n    return _isBlockProducerById(__css2cid(consensusAddr));\\n  }\\n\\n  function _isBlockProducerById(address id) internal view returns (bool) {\\n    return _validatorMap[id].hasFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function totalBlockProducer() external view returns (uint256 total) {\\n    unchecked {\\n      for (uint i; i < _validatorCount; i++) {\\n        if (_isBlockProducerById(_validatorIds[i])) {\\n          total++;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function maxValidatorNumber() external view override returns (uint256 _maximumValidatorNumber) {\\n    return _maxValidatorNumber;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function maxPrioritizedValidatorNumber() external view override returns (uint256 _maximumPrioritizedValidatorNumber) {\\n    return _maxPrioritizedValidatorNumber;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function setMaxValidatorNumber(uint256 _max) external override onlyAdmin {\\n    _setMaxValidatorNumber(_max);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _number) external override onlyAdmin {\\n    _setMaxPrioritizedValidatorNumber(_number);\\n  }\\n\\n  /**\\n   * @dev See `IValidatorInfoV2-setMaxValidatorNumber`\\n   */\\n  function _setMaxValidatorNumber(uint256 _number) internal {\\n    _maxValidatorNumber = _number;\\n    emit MaxValidatorNumberUpdated(_number);\\n  }\\n\\n  /**\\n   * @dev See `IValidatorInfoV2-setMaxPrioritizedValidatorNumber`\\n   */\\n  function _setMaxPrioritizedValidatorNumber(uint256 _number) internal {\\n    if (_number > _maxValidatorNumber) revert ErrInvalidMaxPrioritizedValidatorNumber();\\n    _maxPrioritizedValidatorNumber = _number;\\n    emit MaxPrioritizedValidatorNumberUpdated(_number);\\n  }\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view virtual returns (address[] memory);\\n\\n  /// @dev See {RoninValidatorSet-__cid2cssBatch}\\n  function __cid2cssBatch(address[] memory cids) internal view virtual returns (TConsensus[] memory);\\n}\\n\",\"keccak256\":\"0x90ebbae3c5052d43fef404214336f50af6e5644164b66d716e4280109ed88e9d\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 32,
  "numDeployments": 16,
  "storageLayout": {
    "storage": [
      {
        "astId": 150154,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 150157,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 37197,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_numberOfBlocksInEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 37200,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 37203,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 37206,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_currentPeriodStartAtBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 37211,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_periodOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 37216,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 36801,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 36808,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardBailoutCutOffAtPeriod",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 36815,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedBridgeRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 36820,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_blockProducerJailedBlock",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36825,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExitJailedTimestamp",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36830,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_cannotBailoutUntilBlock",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36835,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "61",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 38255,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedStakingVesting",
        "offset": 0,
        "slot": "109",
        "type": "t_address"
      },
      {
        "astId": 38283,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedBridgeTracking",
        "offset": 0,
        "slot": "110",
        "type": "t_address"
      },
      {
        "astId": 38271,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedMaintenance",
        "offset": 0,
        "slot": "111",
        "type": "t_address"
      },
      {
        "astId": 38251,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedSlashIndicator",
        "offset": 0,
        "slot": "112",
        "type": "t_address"
      },
      {
        "astId": 38267,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedStakingContract",
        "offset": 0,
        "slot": "113",
        "type": "t_address"
      },
      {
        "astId": 33201,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorCandidate",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 33205,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateIds",
        "offset": 0,
        "slot": "115",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 33210,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateIndex",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33216,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateInfo",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_address,t_struct(ValidatorCandidate)9760_storage)"
      },
      {
        "astId": 33219,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_minEffectiveDaysOnwards",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 33225,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateCommissionChangeSchedule",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_struct(CommissionSchedule)9767_storage)"
      },
      {
        "astId": 33230,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "120",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 38275,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedTrustedOrg",
        "offset": 0,
        "slot": "168",
        "type": "t_address"
      },
      {
        "astId": 37383,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorNumber",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      },
      {
        "astId": 37386,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorCount",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 37391,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorIds",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 37397,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorMap",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_enum(ValidatorFlag)10875)"
      },
      {
        "astId": 37400,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxPrioritizedValidatorNumber",
        "offset": 0,
        "slot": "173",
        "type": "t_uint256"
      },
      {
        "astId": 37405,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "174",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 36649,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningReward",
        "offset": 0,
        "slot": "224",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36654,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_delegatingReward",
        "offset": 0,
        "slot": "225",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36657,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalFastFinalityReward",
        "offset": 0,
        "slot": "226",
        "type": "t_uint256"
      },
      {
        "astId": 36662,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_fastFinalityReward",
        "offset": 0,
        "slot": "227",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36665,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalDeprecatedReward",
        "offset": 0,
        "slot": "228",
        "type": "t_uint256"
      },
      {
        "astId": 36668,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExitLockedAmount",
        "offset": 0,
        "slot": "229",
        "type": "t_uint256"
      },
      {
        "astId": 36671,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExpiryDuration",
        "offset": 0,
        "slot": "230",
        "type": "t_uint256"
      },
      {
        "astId": 36675,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lockedConsensusList",
        "offset": 0,
        "slot": "231",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 36681,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_exitInfo",
        "offset": 0,
        "slot": "232",
        "type": "t_mapping(t_address,t_struct(EmergencyExitInfo)10355_storage)"
      },
      {
        "astId": 36686,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lockedFundReleased",
        "offset": 0,
        "slot": "233",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 36691,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "234",
        "type": "t_array(t_uint256)44_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32",
        "base": "t_address"
      },
      "t_array(t_uint256)44_storage": {
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408",
        "base": "t_uint256"
      },
      "t_array(t_uint256)48_storage": {
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536",
        "base": "t_uint256"
      },
      "t_array(t_uint256)49_storage": {
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568",
        "base": "t_uint256"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ValidatorFlag)10875": {
        "encoding": "inplace",
        "label": "enum EnumFlags.ValidatorFlag",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ValidatorFlag)10875)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum EnumFlags.ValidatorFlag)",
        "numberOfBytes": "32",
        "value": "t_enum(ValidatorFlag)10875"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(CommissionSchedule)9767_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.CommissionSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(CommissionSchedule)9767_storage"
      },
      "t_mapping(t_address,t_struct(EmergencyExitInfo)10355_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICommonInfo.EmergencyExitInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(EmergencyExitInfo)10355_storage"
      },
      "t_mapping(t_address,t_struct(ValidatorCandidate)9760_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.ValidatorCandidate)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidatorCandidate)9760_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CommissionSchedule)9767_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.CommissionSchedule",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 9763,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "effectiveTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9766,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ]
      },
      "t_struct(EmergencyExitInfo)10355_storage": {
        "encoding": "inplace",
        "label": "struct ICommonInfo.EmergencyExitInfo",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 10352,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10354,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "recyclingAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ]
      },
      "t_struct(ValidatorCandidate)9760_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.ValidatorCandidate",
        "numberOfBytes": "224",
        "members": [
          {
            "astId": 9740,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "__shadowedAdmin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9744,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "__shadowedConsensus",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(TConsensus)37964"
          },
          {
            "astId": 9747,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "__shadowedTreasury",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 9750,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "____deprecatedBridgeOperatorAddr",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 9753,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9756,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "revokingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9759,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "topupDeadline",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(TConsensus)37964": {
        "encoding": "inplace",
        "label": "TConsensus",
        "numberOfBytes": "20"
      }
    }
  },
  "timestamp": 1708420448,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}