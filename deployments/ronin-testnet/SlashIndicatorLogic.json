{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "bailOut",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "checkBailedOutAtPeriod",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "currentUnavailabilityIndicator",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "execResetCreditScores",
      "inputs": [
        {
          "name": "validatorIds",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execUpdateCreditScores",
      "inputs": [
        {
          "name": "validatorIds",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCreditScore",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCreditScoreConfigs",
      "inputs": [],
      "outputs": [
        {
          "name": "gainCreditScore_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxCreditScore_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "bailOutCostMultiplier_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cutOffPercentageAfterBailout_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getDoubleSignSlashingConfigs",
      "inputs": [],
      "outputs": [
        {
          "name": "slashDoubleSignAmount_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "doubleSigningJailUntilBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "doubleSigningOffsetLimitBlock_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getFastFinalitySlashingConfigs",
      "inputs": [],
      "outputs": [
        {
          "name": "slashFastFinalityAmount_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "fastFinalityJailUntilBlock_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyCreditScores",
      "inputs": [
        {
          "name": "consensusAddrs",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "resultList",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUnavailabilityIndicator",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUnavailabilitySlashingConfigs",
      "inputs": [],
      "outputs": [
        {
          "name": "unavailabilityTier1Threshold_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "unavailabilityTier2Threshold_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "slashAmountForUnavailabilityTier2Threshold_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "jailDurationForUnavailabilityTier2Threshold_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "__validatorContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__maintenanceContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__roninTrustedOrganizationContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__roninGovernanceAdminContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256[4]",
          "internalType": "uint256[4]"
        },
        {
          "name": "",
          "type": "uint256[2]",
          "internalType": "uint256[2]"
        },
        {
          "name": "_doubleSignSlashingConfigs",
          "type": "uint256[3]",
          "internalType": "uint256[3]"
        },
        {
          "name": "_unavailabilitySlashingConfigs",
          "type": "uint256[4]",
          "internalType": "uint256[4]"
        },
        {
          "name": "_creditScoreConfigs",
          "type": "uint256[4]",
          "internalType": "uint256[4]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [
        {
          "name": "roninGovernanceAdminContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "profileContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "lastUnavailabilitySlashedBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "precompileValidateDoubleSignAddress",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "precompileValidateFastFinalityAddress",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCreditScoreConfigs",
      "inputs": [
        {
          "name": "_gainScore",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_maxScore",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_bailOutMultiplier",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_cutOffPercentage",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setDoubleSignSlashingConfigs",
      "inputs": [
        {
          "name": "_slashAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_jailUntilBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_offsetLimitBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setFastFinalitySlashingConfigs",
      "inputs": [
        {
          "name": "slashAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "jailUntilBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setUnavailabilitySlashingConfigs",
      "inputs": [
        {
          "name": "_tier1Threshold",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_tier2Threshold",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_slashAmountForTier2Threshold",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_jailDurationForTier2Threshold",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "slashDoubleSign",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "header1",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "header2",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "slashFastFinality",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "voterPublicKey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "targetBlockNumber",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "targetBlockHash",
          "type": "bytes32[2]",
          "internalType": "bytes32[2]"
        },
        {
          "name": "listOfPublicKey",
          "type": "bytes[][2]",
          "internalType": "bytes[][2]"
        },
        {
          "name": "aggregatedSignature",
          "type": "bytes[2]",
          "internalType": "bytes[2]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "slashUnavailability",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "BailedOut",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "usedCreditScore",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CreditScoreConfigsUpdated",
      "inputs": [
        {
          "name": "gainCreditScore",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "maxCreditScore",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "bailOutCostMultiplier",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "cutOffPercentageAfterBailout",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CreditScoresUpdated",
      "inputs": [
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "creditScores",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "DoubleSignSlashingConfigsUpdated",
      "inputs": [
        {
          "name": "slashDoubleSignAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "doubleSigningJailUntilBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "doubleSigningOffsetLimitBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "FastFinalitySlashingConfigsUpdated",
      "inputs": [
        {
          "name": "slashFastFinalityAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "fastFinalityJailUntilBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Slashed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "slashType",
          "type": "uint8",
          "indexed": false,
          "internalType": "enum IBaseSlash.SlashType"
        },
        {
          "name": "period",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "UnavailabilitySlashingConfigsUpdated",
      "inputs": [
        {
          "name": "unavailabilityTier1Threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "unavailabilityTier2Threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "slashAmountForUnavailabilityTier2Threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "jailDurationForUnavailabilityTier2Threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrCallPrecompiled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrCallerMustBeJailedInTheCurrentPeriod",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrEvidenceAlreadySubmitted",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInsufficientCreditScoreToBailOut",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidArguments",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidCreditScoreConfig",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidCutOffPercentageConfig",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidThreshold",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnregisteredPublicKey",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrValidatorHasBailedOutPreviously",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    }
  ],
  "address": "0x35ce4eef93809b997addaee8e0d979d966dbd02d",
  "args": "0x",
  "ast": {
    "absolutePath": "contracts/ronin/slash-indicator/SlashIndicator.sol",
    "id": 29390,
    "exportedSymbols": {
      "Address": [
        150935
      ],
      "ContractType": [
        38245
      ],
      "CreditScore": [
        28438
      ],
      "DeprecatedSlashBridgeOperator": [
        28471
      ],
      "DeprecatedSlashBridgeVoting": [
        28505
      ],
      "EnumFlags": [
        10971
      ],
      "ErrAddressIsNotCreatedEOA": [
        38040
      ],
      "ErrAlreadyVoted": [
        38163
      ],
      "ErrBridgeOperatorAlreadyExisted": [
        38045
      ],
      "ErrBridgeOperatorUpdateFailed": [
        38033
      ],
      "ErrCallPrecompiled": [
        38129
      ],
      "ErrCallerMustBeCoinbase": [
        38226
      ],
      "ErrEmptyArray": [
        38112
      ],
      "ErrInvalidArguments": [
        38071
      ],
      "ErrInvalidChainId": [
        38148
      ],
      "ErrInvalidOrder": [
        38139
      ],
      "ErrInvalidProposalNonce": [
        38158
      ],
      "ErrInvalidReceipt": [
        38196
      ],
      "ErrInvalidReceiptKind": [
        38193
      ],
      "ErrInvalidRequest": [
        38184
      ],
      "ErrInvalidReturnData": [
        38061
      ],
      "ErrInvalidSignatures": [
        38168
      ],
      "ErrInvalidThreshold": [
        38081
      ],
      "ErrInvalidTokenStandard": [
        38187
      ],
      "ErrInvalidVoteHash": [
        38211
      ],
      "ErrInvalidVoteWeight": [
        38178
      ],
      "ErrLengthMismatch": [
        38117
      ],
      "ErrNativeTransferFailed": [
        38134
      ],
      "ErrNonpayableAddress": [
        38201
      ],
      "ErrOncePerBlock": [
        38223
      ],
      "ErrOnlySelfCall": [
        38086
      ],
      "ErrPeriodAlreadyProcessed": [
        38208
      ],
      "ErrProxyCallFailed": [
        38124
      ],
      "ErrQueryForEmptyVote": [
        38214
      ],
      "ErrQueryForExpiredVote": [
        38217
      ],
      "ErrQueryForNonExistentVote": [
        38220
      ],
      "ErrQueryForOutdatedBridgeOperatorSet": [
        38181
      ],
      "ErrRelayFailed": [
        38173
      ],
      "ErrSyncTooFarPeriod": [
        38028
      ],
      "ErrUnauthorized": [
        38094
      ],
      "ErrUnauthorizedCall": [
        38099
      ],
      "ErrUnexpectedInternalCall": [
        38109
      ],
      "ErrUnsupportedInterface": [
        38052
      ],
      "ErrUnsupportedToken": [
        38190
      ],
      "ErrUnsupportedVoteType": [
        38153
      ],
      "ErrZeroAddress": [
        38076
      ],
      "ErrZeroCodeContract": [
        38066
      ],
      "HasContracts": [
        3544
      ],
      "HasGovernanceAdminDeprecated": [
        38280
      ],
      "HasMaintenanceDeprecated": [
        38272
      ],
      "HasProxyAdmin": [
        3589
      ],
      "HasTrustedOrgDeprecated": [
        38276
      ],
      "HasValidatorDeprecated": [
        38264
      ],
      "IBaseSlash": [
        8727
      ],
      "ICandidateManager": [
        9926
      ],
      "ICandidateManagerCallback": [
        10007
      ],
      "ICoinbaseExecution": [
        10175
      ],
      "ICommonInfo": [
        10394
      ],
      "ICreditScore": [
        8854
      ],
      "IEmergencyExit": [
        10268
      ],
      "IHasContracts": [
        8655
      ],
      "IJailingInfo": [
        10486
      ],
      "IMaintenance": [
        7125
      ],
      "IProfile": [
        7346
      ],
      "IRoninTrustedOrganization": [
        7889
      ],
      "IRoninValidatorSet": [
        10289
      ],
      "ISlashDoubleSign": [
        8902
      ],
      "ISlashFastFinality": [
        8957
      ],
      "ISlashIndicator": [
        8969
      ],
      "ISlashUnavailability": [
        9048
      ],
      "ISlashingExecution": [
        10339
      ],
      "ITimingInfo": [
        10545
      ],
      "IValidatorInfoV2": [
        10633
      ],
      "IdentityGuard": [
        38494
      ],
      "Initializable": [
        150298
      ],
      "Math": [
        11550
      ],
      "PCUValidateDoubleSign": [
        18893
      ],
      "PCUValidateFastFinality": [
        18982
      ],
      "PercentageConsumer": [
        3606
      ],
      "PrecompiledUsage": [
        19062
      ],
      "RoleAccess": [
        38508
      ],
      "SlashDoubleSign": [
        28737
      ],
      "SlashFastFinality": [
        29026
      ],
      "SlashIndicator": [
        29389
      ],
      "SlashUnavailability": [
        29802
      ],
      "StorageSlot": [
        151017
      ],
      "TConsensus": [
        37964
      ],
      "TConsensusEq": [
        38016
      ],
      "TPoolId": [
        37962
      ],
      "TPoolIdEq": [
        37994
      ]
    },
    "nodeType": "SourceUnit",
    "src": "33:5594:129",
    "nodes": [
      {
        "id": 29028,
        "nodeType": "PragmaDirective",
        "src": "33:23:129",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 29029,
        "nodeType": "ImportDirective",
        "src": "58:63:129",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 150299,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29030,
        "nodeType": "ImportDirective",
        "src": "122:62:129",
        "nodes": [],
        "absolutePath": "contracts/interfaces/slash-indicator/ISlashIndicator.sol",
        "file": "../../interfaces/slash-indicator/ISlashIndicator.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 8970,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29031,
        "nodeType": "ImportDirective",
        "src": "185:59:129",
        "nodes": [],
        "absolutePath": "contracts/interfaces/validator/IRoninValidatorSet.sol",
        "file": "../../interfaces/validator/IRoninValidatorSet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 10290,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29032,
        "nodeType": "ImportDirective",
        "src": "245:43:129",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IMaintenance.sol",
        "file": "../../interfaces/IMaintenance.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 7126,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29033,
        "nodeType": "ImportDirective",
        "src": "289:39:129",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IProfile.sol",
        "file": "../../interfaces/IProfile.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 7347,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29034,
        "nodeType": "ImportDirective",
        "src": "329:45:129",
        "nodes": [],
        "absolutePath": "contracts/ronin/slash-indicator/DeprecatedSlashBridgeOperator.sol",
        "file": "./DeprecatedSlashBridgeOperator.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 28472,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29035,
        "nodeType": "ImportDirective",
        "src": "375:43:129",
        "nodes": [],
        "absolutePath": "contracts/ronin/slash-indicator/DeprecatedSlashBridgeVoting.sol",
        "file": "./DeprecatedSlashBridgeVoting.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 28506,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29036,
        "nodeType": "ImportDirective",
        "src": "419:31:129",
        "nodes": [],
        "absolutePath": "contracts/ronin/slash-indicator/SlashDoubleSign.sol",
        "file": "./SlashDoubleSign.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 28738,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29037,
        "nodeType": "ImportDirective",
        "src": "451:33:129",
        "nodes": [],
        "absolutePath": "contracts/ronin/slash-indicator/SlashFastFinality.sol",
        "file": "./SlashFastFinality.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 29027,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29038,
        "nodeType": "ImportDirective",
        "src": "485:35:129",
        "nodes": [],
        "absolutePath": "contracts/ronin/slash-indicator/SlashUnavailability.sol",
        "file": "./SlashUnavailability.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 29803,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29039,
        "nodeType": "ImportDirective",
        "src": "521:27:129",
        "nodes": [],
        "absolutePath": "contracts/ronin/slash-indicator/CreditScore.sol",
        "file": "./CreditScore.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29390,
        "sourceUnit": 28439,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29389,
        "nodeType": "ContractDefinition",
        "src": "550:5076:129",
        "nodes": [
          {
            "id": 29062,
            "nodeType": "FunctionDefinition",
            "src": "758:47:129",
            "nodes": [],
            "body": {
              "id": 29061,
              "nodeType": "Block",
              "src": "772:33:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 29058,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 150297,
                      "src": "778:20:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 29059,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "778:22:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29060,
                  "nodeType": "ExpressionStatement",
                  "src": "778:22:129"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 29056,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "769:2:129"
            },
            "returnParameters": {
              "id": 29057,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "772:0:129"
            },
            "scope": 29389,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 29163,
            "nodeType": "FunctionDefinition",
            "src": "865:2031:129",
            "nodes": [],
            "body": {
              "id": 29162,
              "nodeType": "Block",
              "src": "2069:827:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29097,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2088:12:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 29098,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2101:9:129",
                        "memberName": "VALIDATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38237,
                        "src": "2088:22:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 29099,
                        "name": "__validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29065,
                        "src": "2112:19:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29096,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2075:12:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 29100,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2075:57:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29101,
                  "nodeType": "ExpressionStatement",
                  "src": "2075:57:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29103,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2151:12:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 29104,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2164:11:129",
                        "memberName": "MAINTENANCE",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38234,
                        "src": "2151:24:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 29105,
                        "name": "__maintenanceContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29067,
                        "src": "2177:21:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29102,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2138:12:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 29106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2138:61:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29107,
                  "nodeType": "ExpressionStatement",
                  "src": "2138:61:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29109,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2218:12:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 29110,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2231:16:129",
                        "memberName": "GOVERNANCE_ADMIN",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38233,
                        "src": "2218:29:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 29111,
                        "name": "__roninGovernanceAdminContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29071,
                        "src": "2249:30:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29108,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2205:12:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 29112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2205:75:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29113,
                  "nodeType": "ExpressionStatement",
                  "src": "2205:75:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29115,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2299:12:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 29116,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2312:26:129",
                        "memberName": "RONIN_TRUSTED_ORGANIZATION",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38239,
                        "src": "2299:39:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 29117,
                        "name": "__roninTrustedOrganizationContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29069,
                        "src": "2340:34:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29114,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2286:12:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 29118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2286:89:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29119,
                  "nodeType": "ExpressionStatement",
                  "src": "2286:89:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 29121,
                          "name": "_doubleSignSlashingConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29083,
                          "src": "2419:26:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$3_calldata_ptr",
                            "typeString": "uint256[3] calldata"
                          }
                        },
                        "id": 29123,
                        "indexExpression": {
                          "hexValue": "30",
                          "id": 29122,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2446:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2419:29:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 29124,
                          "name": "_doubleSignSlashingConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29083,
                          "src": "2456:26:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$3_calldata_ptr",
                            "typeString": "uint256[3] calldata"
                          }
                        },
                        "id": 29126,
                        "indexExpression": {
                          "hexValue": "31",
                          "id": 29125,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2483:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2456:29:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 29127,
                          "name": "_doubleSignSlashingConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29083,
                          "src": "2493:26:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$3_calldata_ptr",
                            "typeString": "uint256[3] calldata"
                          }
                        },
                        "id": 29129,
                        "indexExpression": {
                          "hexValue": "32",
                          "id": 29128,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2520:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2493:29:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29120,
                      "name": "_setDoubleSignSlashingConfigs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28717,
                      "src": "2382:29:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256,uint256)"
                      }
                    },
                    "id": 29130,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2382:146:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29131,
                  "nodeType": "ExpressionStatement",
                  "src": "2382:146:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 29133,
                          "name": "_unavailabilitySlashingConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29087,
                          "src": "2575:30:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                            "typeString": "uint256[4] calldata"
                          }
                        },
                        "id": 29135,
                        "indexExpression": {
                          "hexValue": "30",
                          "id": 29134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2606:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2575:33:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 29136,
                          "name": "_unavailabilitySlashingConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29087,
                          "src": "2616:30:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                            "typeString": "uint256[4] calldata"
                          }
                        },
                        "id": 29138,
                        "indexExpression": {
                          "hexValue": "31",
                          "id": 29137,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2647:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2616:33:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 29139,
                          "name": "_unavailabilitySlashingConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29087,
                          "src": "2657:30:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                            "typeString": "uint256[4] calldata"
                          }
                        },
                        "id": 29141,
                        "indexExpression": {
                          "hexValue": "32",
                          "id": 29140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2688:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2657:33:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 29142,
                          "name": "_unavailabilitySlashingConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29087,
                          "src": "2698:30:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                            "typeString": "uint256[4] calldata"
                          }
                        },
                        "id": 29144,
                        "indexExpression": {
                          "hexValue": "33",
                          "id": 29143,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2729:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_3_by_1",
                            "typeString": "int_const 3"
                          },
                          "value": "3"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2698:33:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29132,
                      "name": "_setUnavailabilitySlashingConfigs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29772,
                      "src": "2534:33:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256,uint256,uint256)"
                      }
                    },
                    "id": 29145,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2534:203:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29146,
                  "nodeType": "ExpressionStatement",
                  "src": "2534:203:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 29148,
                          "name": "_creditScoreConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29091,
                          "src": "2773:19:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                            "typeString": "uint256[4] calldata"
                          }
                        },
                        "id": 29150,
                        "indexExpression": {
                          "hexValue": "30",
                          "id": 29149,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2793:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2773:22:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 29151,
                          "name": "_creditScoreConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29091,
                          "src": "2803:19:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                            "typeString": "uint256[4] calldata"
                          }
                        },
                        "id": 29153,
                        "indexExpression": {
                          "hexValue": "31",
                          "id": 29152,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2823:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2803:22:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 29154,
                          "name": "_creditScoreConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29091,
                          "src": "2833:19:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                            "typeString": "uint256[4] calldata"
                          }
                        },
                        "id": 29156,
                        "indexExpression": {
                          "hexValue": "32",
                          "id": 29155,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2853:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2833:22:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 29157,
                          "name": "_creditScoreConfigs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29091,
                          "src": "2863:19:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                            "typeString": "uint256[4] calldata"
                          }
                        },
                        "id": 29159,
                        "indexExpression": {
                          "hexValue": "33",
                          "id": 29158,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2883:1:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_3_by_1",
                            "typeString": "int_const 3"
                          },
                          "value": "3"
                        },
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2863:22:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29147,
                      "name": "_setCreditScoreConfigs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28437,
                      "src": "2743:22:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256,uint256,uint256)"
                      }
                    },
                    "id": 29160,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2743:148:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29161,
                  "nodeType": "ExpressionStatement",
                  "src": "2743:148:129"
                }
              ]
            },
            "documentation": {
              "id": 29063,
              "nodeType": "StructuredDocumentation",
              "src": "809:53:129",
              "text": " @dev Initializes the contract storage."
            },
            "functionSelector": "99103f7b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 29094,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 29093,
                  "name": "initializer",
                  "nameLocations": [
                    "2057:11:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150218,
                  "src": "2057:11:129"
                },
                "nodeType": "ModifierInvocation",
                "src": "2057:11:129"
              }
            ],
            "name": "initialize",
            "nameLocation": "874:10:129",
            "parameters": {
              "id": 29092,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29065,
                  "mutability": "mutable",
                  "name": "__validatorContract",
                  "nameLocation": "898:19:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29163,
                  "src": "890:27:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29064,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "890:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29067,
                  "mutability": "mutable",
                  "name": "__maintenanceContract",
                  "nameLocation": "931:21:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29163,
                  "src": "923:29:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29066,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "923:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29069,
                  "mutability": "mutable",
                  "name": "__roninTrustedOrganizationContract",
                  "nameLocation": "966:34:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29163,
                  "src": "958:42:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29068,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "958:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29071,
                  "mutability": "mutable",
                  "name": "__roninGovernanceAdminContract",
                  "nameLocation": "1014:30:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29163,
                  "src": "1006:38:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29070,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1006:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29075,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 29163,
                  "src": "1050:19:129",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                    "typeString": "uint256[4]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 29072,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1050:7:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 29074,
                    "length": {
                      "hexValue": "34",
                      "id": 29073,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1058:1:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_4_by_1",
                        "typeString": "int_const 4"
                      },
                      "value": "4"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1050:10:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$4_storage_ptr",
                      "typeString": "uint256[4]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29079,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 29163,
                  "src": "1112:19:129",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_calldata_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 29076,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1112:7:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 29078,
                    "length": {
                      "hexValue": "32",
                      "id": 29077,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1120:1:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1112:10:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29083,
                  "mutability": "mutable",
                  "name": "_doubleSignSlashingConfigs",
                  "nameLocation": "1389:26:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29163,
                  "src": "1369:46:129",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$3_calldata_ptr",
                    "typeString": "uint256[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 29080,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1369:7:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 29082,
                    "length": {
                      "hexValue": "33",
                      "id": 29081,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1377:1:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1369:10:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$3_storage_ptr",
                      "typeString": "uint256[3]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29087,
                  "mutability": "mutable",
                  "name": "_unavailabilitySlashingConfigs",
                  "nameLocation": "1758:30:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29163,
                  "src": "1738:50:129",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                    "typeString": "uint256[4]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 29084,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1738:7:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 29086,
                    "length": {
                      "hexValue": "34",
                      "id": 29085,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1746:1:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_4_by_1",
                        "typeString": "int_const 4"
                      },
                      "value": "4"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1738:10:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$4_storage_ptr",
                      "typeString": "uint256[4]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29091,
                  "mutability": "mutable",
                  "name": "_creditScoreConfigs",
                  "nameLocation": "2024:19:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29163,
                  "src": "2004:39:129",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$4_calldata_ptr",
                    "typeString": "uint256[4]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 29088,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2004:7:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 29090,
                    "length": {
                      "hexValue": "34",
                      "id": 29089,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2012:1:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_4_by_1",
                        "typeString": "int_const 4"
                      },
                      "value": "4"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "2004:10:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$4_storage_ptr",
                      "typeString": "uint256[4]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "884:1163:129"
            },
            "returnParameters": {
              "id": 29095,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2069:0:129"
            },
            "scope": 29389,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 29208,
            "nodeType": "FunctionDefinition",
            "src": "2900:561:129",
            "nodes": [],
            "body": {
              "id": 29207,
              "nodeType": "Block",
              "src": "2986:475:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29172,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "3005:12:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 29173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3018:9:129",
                        "memberName": "VALIDATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38237,
                        "src": "3005:22:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 29174,
                        "name": "______deprecatedValidator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38263,
                        "src": "3029:25:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29171,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2992:12:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 29175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2992:63:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29176,
                  "nodeType": "ExpressionStatement",
                  "src": "2992:63:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29178,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "3074:12:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 29179,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3087:11:129",
                        "memberName": "MAINTENANCE",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38234,
                        "src": "3074:24:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 29180,
                        "name": "______deprecatedMaintenance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38271,
                        "src": "3100:27:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29177,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "3061:12:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 29181,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3061:67:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29182,
                  "nodeType": "ExpressionStatement",
                  "src": "3061:67:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29184,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "3147:12:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 29185,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3160:16:129",
                        "memberName": "GOVERNANCE_ADMIN",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38233,
                        "src": "3147:29:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 29186,
                        "name": "roninGovernanceAdminContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29165,
                        "src": "3178:28:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29183,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "3134:12:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 29187,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3134:73:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29188,
                  "nodeType": "ExpressionStatement",
                  "src": "3134:73:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29190,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "3226:12:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 29191,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3239:26:129",
                        "memberName": "RONIN_TRUSTED_ORGANIZATION",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38239,
                        "src": "3226:39:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 29192,
                        "name": "______deprecatedTrustedOrg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38275,
                        "src": "3267:26:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29189,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "3213:12:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 29193,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3213:81:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29194,
                  "nodeType": "ExpressionStatement",
                  "src": "3213:81:129"
                },
                {
                  "expression": {
                    "id": 29196,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "3301:32:129",
                    "subExpression": {
                      "id": 29195,
                      "name": "______deprecatedValidator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38263,
                      "src": "3308:25:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29197,
                  "nodeType": "ExpressionStatement",
                  "src": "3301:32:129"
                },
                {
                  "expression": {
                    "id": 29199,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "3339:34:129",
                    "subExpression": {
                      "id": 29198,
                      "name": "______deprecatedMaintenance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38271,
                      "src": "3346:27:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29200,
                  "nodeType": "ExpressionStatement",
                  "src": "3339:34:129"
                },
                {
                  "expression": {
                    "id": 29202,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "3379:33:129",
                    "subExpression": {
                      "id": 29201,
                      "name": "______deprecatedTrustedOrg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38275,
                      "src": "3386:26:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29203,
                  "nodeType": "ExpressionStatement",
                  "src": "3379:33:129"
                },
                {
                  "expression": {
                    "id": 29205,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "3418:38:129",
                    "subExpression": {
                      "id": 29204,
                      "name": "______deprecatedGovernanceAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38279,
                      "src": "3425:31:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29206,
                  "nodeType": "ExpressionStatement",
                  "src": "3418:38:129"
                }
              ]
            },
            "functionSelector": "29b6eca9",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 29168,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2983:1:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 29169,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 29167,
                  "name": "reinitializer",
                  "nameLocations": [
                    "2969:13:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150251,
                  "src": "2969:13:129"
                },
                "nodeType": "ModifierInvocation",
                "src": "2969:16:129"
              }
            ],
            "name": "initializeV2",
            "nameLocation": "2909:12:129",
            "parameters": {
              "id": 29166,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29165,
                  "mutability": "mutable",
                  "name": "roninGovernanceAdminContract",
                  "nameLocation": "2930:28:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29208,
                  "src": "2922:36:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29164,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2922:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2921:38:129"
            },
            "returnParameters": {
              "id": 29170,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2986:0:129"
            },
            "scope": 29389,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 29228,
            "nodeType": "FunctionDefinition",
            "src": "3465:226:129",
            "nodes": [],
            "body": {
              "id": 29227,
              "nodeType": "Block",
              "src": "3538:153:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29217,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "3557:12:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 29218,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3570:7:129",
                        "memberName": "PROFILE",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38244,
                        "src": "3557:20:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 29219,
                        "name": "profileContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29210,
                        "src": "3579:15:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29216,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "3544:12:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 29220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3544:51:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29221,
                  "nodeType": "ExpressionStatement",
                  "src": "3544:51:129"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 29223,
                        "name": "_slashDoubleSignAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28524,
                        "src": "3633:22:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 29224,
                        "name": "_doubleSigningJailUntilBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28527,
                        "src": "3657:28:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29222,
                      "name": "_setFastFinalitySlashingConfigs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28998,
                      "src": "3601:31:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 29225,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3601:85:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29226,
                  "nodeType": "ExpressionStatement",
                  "src": "3601:85:129"
                }
              ]
            },
            "functionSelector": "3101cfcb",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "33",
                    "id": 29213,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3535:1:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3_by_1",
                      "typeString": "int_const 3"
                    },
                    "value": "3"
                  }
                ],
                "id": 29214,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 29212,
                  "name": "reinitializer",
                  "nameLocations": [
                    "3521:13:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150251,
                  "src": "3521:13:129"
                },
                "nodeType": "ModifierInvocation",
                "src": "3521:16:129"
              }
            ],
            "name": "initializeV3",
            "nameLocation": "3474:12:129",
            "parameters": {
              "id": 29211,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29210,
                  "mutability": "mutable",
                  "name": "profileContract",
                  "nameLocation": "3495:15:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29228,
                  "src": "3487:23:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29209,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3487:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3486:25:129"
            },
            "returnParameters": {
              "id": 29215,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3538:0:129"
            },
            "scope": 29389,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 29250,
            "nodeType": "FunctionDefinition",
            "src": "3808:247:129",
            "nodes": [],
            "body": {
              "id": 29249,
              "nodeType": "Block",
              "src": "3967:88:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 29244,
                        "name": "validator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29231,
                        "src": "4021:9:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 29245,
                        "name": "period",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29233,
                        "src": "4032:6:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 29246,
                        "name": "indicator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29235,
                        "src": "4040:9:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 29241,
                        "name": "SlashUnavailability",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29802,
                        "src": "3973:19:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_SlashUnavailability_$29802_$",
                          "typeString": "type(contract SlashUnavailability)"
                        }
                      },
                      "id": 29243,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3993:27:129",
                      "memberName": "_setUnavailabilityIndicator",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29727,
                      "src": "3973:47:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256)"
                      }
                    },
                    "id": 29247,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3973:77:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29248,
                  "nodeType": "ExpressionStatement",
                  "src": "3973:77:129"
                }
              ]
            },
            "baseFunctions": [
              28369,
              29727
            ],
            "documentation": {
              "id": 29229,
              "nodeType": "StructuredDocumentation",
              "src": "3695:110:129",
              "text": " @dev Helper for CreditScore contract to reset the indicator of the validator after bailing out."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setUnavailabilityIndicator",
            "nameLocation": "3817:27:129",
            "overrides": {
              "id": 29239,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 29237,
                  "name": "CreditScore",
                  "nameLocations": [
                    "3933:11:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28438,
                  "src": "3933:11:129"
                },
                {
                  "id": 29238,
                  "name": "SlashUnavailability",
                  "nameLocations": [
                    "3946:19:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29802,
                  "src": "3946:19:129"
                }
              ],
              "src": "3924:42:129"
            },
            "parameters": {
              "id": 29236,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29231,
                  "mutability": "mutable",
                  "name": "validator",
                  "nameLocation": "3858:9:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29250,
                  "src": "3850:17:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29230,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3850:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29233,
                  "mutability": "mutable",
                  "name": "period",
                  "nameLocation": "3881:6:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29250,
                  "src": "3873:14:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 29232,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3873:7:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29235,
                  "mutability": "mutable",
                  "name": "indicator",
                  "nameLocation": "3901:9:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29250,
                  "src": "3893:17:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 29234,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3893:7:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3844:70:129"
            },
            "returnParameters": {
              "id": 29240,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3967:0:129"
            },
            "scope": 29389,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 29270,
            "nodeType": "FunctionDefinition",
            "src": "4150:255:129",
            "nodes": [],
            "body": {
              "id": 29269,
              "nodeType": "Block",
              "src": "4315:90:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 29265,
                        "name": "validatorId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29253,
                        "src": "4380:11:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 29266,
                        "name": "period",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29255,
                        "src": "4393:6:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 29263,
                        "name": "SlashUnavailability",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29802,
                        "src": "4328:19:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_SlashUnavailability_$29802_$",
                          "typeString": "type(contract SlashUnavailability)"
                        }
                      },
                      "id": 29264,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4348:31:129",
                      "memberName": "_getUnavailabilityIndicatorById",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29708,
                      "src": "4328:51:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256) view returns (uint256)"
                      }
                    },
                    "id": 29267,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4328:72:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 29262,
                  "id": 29268,
                  "nodeType": "Return",
                  "src": "4321:79:129"
                }
              ]
            },
            "baseFunctions": [
              28231,
              29708
            ],
            "documentation": {
              "id": 29251,
              "nodeType": "StructuredDocumentation",
              "src": "4059:88:129",
              "text": " @dev Helper for CreditScore contract to query indicator of the validator."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getUnavailabilityIndicatorById",
            "nameLocation": "4159:31:129",
            "overrides": {
              "id": 29259,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 29257,
                  "name": "CreditScore",
                  "nameLocations": [
                    "4263:11:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28438,
                  "src": "4263:11:129"
                },
                {
                  "id": 29258,
                  "name": "SlashUnavailability",
                  "nameLocations": [
                    "4276:19:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29802,
                  "src": "4276:19:129"
                }
              ],
              "src": "4254:42:129"
            },
            "parameters": {
              "id": 29256,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29253,
                  "mutability": "mutable",
                  "name": "validatorId",
                  "nameLocation": "4204:11:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29270,
                  "src": "4196:19:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29252,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4196:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29255,
                  "mutability": "mutable",
                  "name": "period",
                  "nameLocation": "4229:6:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29270,
                  "src": "4221:14:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 29254,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4221:7:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4190:49:129"
            },
            "returnParameters": {
              "id": 29262,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29261,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 29270,
                  "src": "4306:7:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 29260,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4306:7:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4305:9:129"
            },
            "scope": 29389,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 29289,
            "nodeType": "FunctionDefinition",
            "src": "4409:220:129",
            "nodes": [],
            "body": {
              "id": 29288,
              "nodeType": "Block",
              "src": "4559:70:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 29284,
                        "name": "cid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29272,
                        "src": "4612:3:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 29285,
                        "name": "period",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29274,
                        "src": "4617:6:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 29282,
                        "name": "CreditScore",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28438,
                        "src": "4572:11:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CreditScore_$28438_$",
                          "typeString": "type(contract CreditScore)"
                        }
                      },
                      "id": 29283,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4584:27:129",
                      "memberName": "_checkBailedOutAtPeriodById",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28359,
                      "src": "4572:39:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) view returns (bool)"
                      }
                    },
                    "id": 29286,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4572:52:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 29281,
                  "id": 29287,
                  "nodeType": "Return",
                  "src": "4565:59:129"
                }
              ]
            },
            "baseFunctions": [
              28359,
              29793
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkBailedOutAtPeriodById",
            "nameLocation": "4418:27:129",
            "overrides": {
              "id": 29278,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 29276,
                  "name": "CreditScore",
                  "nameLocations": [
                    "4510:11:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28438,
                  "src": "4510:11:129"
                },
                {
                  "id": 29277,
                  "name": "SlashUnavailability",
                  "nameLocations": [
                    "4523:19:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29802,
                  "src": "4523:19:129"
                }
              ],
              "src": "4501:42:129"
            },
            "parameters": {
              "id": 29275,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29272,
                  "mutability": "mutable",
                  "name": "cid",
                  "nameLocation": "4459:3:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29289,
                  "src": "4451:11:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29271,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4451:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29274,
                  "mutability": "mutable",
                  "name": "period",
                  "nameLocation": "4476:6:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29289,
                  "src": "4468:14:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 29273,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4468:7:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4445:41:129"
            },
            "returnParameters": {
              "id": 29281,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29280,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 29289,
                  "src": "4553:4:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 29279,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4553:4:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4552:6:129"
            },
            "scope": 29389,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 29342,
            "nodeType": "FunctionDefinition",
            "src": "4694:459:129",
            "nodes": [],
            "body": {
              "id": 29341,
              "nodeType": "Block",
              "src": "4847:306:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 29339,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 29326,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 29316,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 29309,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 29303,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "4867:3:129",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 29304,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4871:6:129",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4867:10:129",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 29307,
                                    "name": "consensus",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 29293,
                                    "src": "4899:9:129",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                                      "typeString": "TConsensus"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                                      "typeString": "TConsensus"
                                    }
                                  ],
                                  "expression": {
                                    "id": 29305,
                                    "name": "TConsensus",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 37964,
                                    "src": "4881:10:129",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_userDefinedValueType$_TConsensus_$37964_$",
                                      "typeString": "type(TConsensus)"
                                    }
                                  },
                                  "id": 29306,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberLocation": "4892:6:129",
                                  "memberName": "unwrap",
                                  "nodeType": "MemberAccess",
                                  "src": "4881:17:129",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                                    "typeString": "function (TConsensus) pure returns (address)"
                                  }
                                },
                                "id": 29308,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4881:28:129",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "4867:42:129",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 29310,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4866:44:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 29314,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 29311,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "4921:3:129",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 29312,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4925:6:129",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "4921:10:129",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 29313,
                                "name": "validatorId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 29295,
                                "src": "4935:11:129",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "4921:25:129",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "id": 29315,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4920:27:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "4866:81:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "&&",
                      "rightExpression": {
                        "arguments": [
                          {
                            "id": 29324,
                            "name": "consensus",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 29293,
                            "src": "5029:9:129",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 29319,
                                      "name": "ContractType",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 38245,
                                      "src": "4988:12:129",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                        "typeString": "type(enum ContractType)"
                                      }
                                    },
                                    "id": 29320,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberLocation": "5001:9:129",
                                    "memberName": "VALIDATOR",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 38237,
                                    "src": "4988:22:129",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_ContractType_$38245",
                                      "typeString": "enum ContractType"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_enum$_ContractType_$38245",
                                      "typeString": "enum ContractType"
                                    }
                                  ],
                                  "id": 29318,
                                  "name": "getContract",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3484,
                                  "src": "4976:11:129",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                    "typeString": "function (enum ContractType) view returns (address)"
                                  }
                                },
                                "id": 29321,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4976:35:129",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 29317,
                              "name": "IRoninValidatorSet",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10289,
                              "src": "4957:18:129",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$10289_$",
                                "typeString": "type(contract IRoninValidatorSet)"
                              }
                            },
                            "id": 29322,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4957:55:129",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                              "typeString": "contract IRoninValidatorSet"
                            }
                          },
                          "id": 29323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5013:15:129",
                          "memberName": "isBlockProducer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 10614,
                          "src": "4957:71:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_bool_$",
                            "typeString": "function (TConsensus) view external returns (bool)"
                          }
                        },
                        "id": 29325,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4957:82:129",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "4866:173:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "id": 29338,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "!",
                      "prefix": true,
                      "src": "5049:99:129",
                      "subExpression": {
                        "arguments": [
                          {
                            "id": 29334,
                            "name": "validatorId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 29295,
                            "src": "5122:11:129",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "expression": {
                              "id": 29335,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "5135:5:129",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 29336,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5141:6:129",
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "src": "5135:12:129",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 29329,
                                      "name": "ContractType",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 38245,
                                      "src": "5075:12:129",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                        "typeString": "type(enum ContractType)"
                                      }
                                    },
                                    "id": 29330,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberLocation": "5088:11:129",
                                    "memberName": "MAINTENANCE",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 38234,
                                    "src": "5075:24:129",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_ContractType_$38245",
                                      "typeString": "enum ContractType"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_enum$_ContractType_$38245",
                                      "typeString": "enum ContractType"
                                    }
                                  ],
                                  "id": 29328,
                                  "name": "getContract",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3484,
                                  "src": "5063:11:129",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                    "typeString": "function (enum ContractType) view returns (address)"
                                  }
                                },
                                "id": 29331,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5063:37:129",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 29327,
                              "name": "IMaintenance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7125,
                              "src": "5050:12:129",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IMaintenance_$7125_$",
                                "typeString": "type(contract IMaintenance)"
                              }
                            },
                            "id": 29332,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5050:51:129",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IMaintenance_$7125",
                              "typeString": "contract IMaintenance"
                            }
                          },
                          "id": 29333,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5102:19:129",
                          "memberName": "checkMaintainedById",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 6955,
                          "src": "5050:71:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view external returns (bool)"
                          }
                        },
                        "id": 29337,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5050:98:129",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4866:282:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 29302,
                  "id": 29340,
                  "nodeType": "Return",
                  "src": "4853:295:129"
                }
              ]
            },
            "baseFunctions": [
              28728,
              29783
            ],
            "documentation": {
              "id": 29290,
              "nodeType": "StructuredDocumentation",
              "src": "4633:58:129",
              "text": " @dev Sanity check the address to be slashed"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_shouldSlash",
            "nameLocation": "4703:12:129",
            "overrides": {
              "id": 29299,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 29297,
                  "name": "SlashDoubleSign",
                  "nameLocations": [
                    "4794:15:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28737,
                  "src": "4794:15:129"
                },
                {
                  "id": 29298,
                  "name": "SlashUnavailability",
                  "nameLocations": [
                    "4811:19:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29802,
                  "src": "4811:19:129"
                }
              ],
              "src": "4785:46:129"
            },
            "parameters": {
              "id": 29296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29293,
                  "mutability": "mutable",
                  "name": "consensus",
                  "nameLocation": "4732:9:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29342,
                  "src": "4721:20:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 29292,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 29291,
                      "name": "TConsensus",
                      "nameLocations": [
                        "4721:10:129"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "4721:10:129"
                    },
                    "referencedDeclaration": 37964,
                    "src": "4721:10:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29295,
                  "mutability": "mutable",
                  "name": "validatorId",
                  "nameLocation": "4755:11:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29342,
                  "src": "4747:19:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29294,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4747:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4715:55:129"
            },
            "returnParameters": {
              "id": 29302,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29301,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 29342,
                  "src": "4841:4:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 29300,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4841:4:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4840:6:129"
            },
            "scope": 29389,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 29366,
            "nodeType": "FunctionDefinition",
            "src": "5157:256:129",
            "nodes": [],
            "body": {
              "id": 29365,
              "nodeType": "Block",
              "src": "5321:92:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 29362,
                        "name": "consensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29345,
                        "src": "5394:13:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 29357,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38245,
                                  "src": "5355:12:129",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 29358,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "5368:7:129",
                                "memberName": "PROFILE",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 38244,
                                "src": "5355:20:129",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 29356,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "5343:11:129",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 29359,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5343:33:129",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 29355,
                          "name": "IProfile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7346,
                          "src": "5334:8:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IProfile_$7346_$",
                            "typeString": "type(contract IProfile)"
                          }
                        },
                        "id": 29360,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5334:43:129",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProfile_$7346",
                          "typeString": "contract IProfile"
                        }
                      },
                      "id": 29361,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5378:15:129",
                      "memberName": "getConsensus2Id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7261,
                      "src": "5334:59:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                        "typeString": "function (TConsensus) view external returns (address)"
                      }
                    },
                    "id": 29363,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5334:74:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 29354,
                  "id": 29364,
                  "nodeType": "Return",
                  "src": "5327:81:129"
                }
              ]
            },
            "baseFunctions": [
              28377,
              28736,
              29025,
              29801
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__css2cid",
            "nameLocation": "5166:9:129",
            "overrides": {
              "id": 29351,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 29347,
                  "name": "CreditScore",
                  "nameLocations": [
                    "5233:11:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28438,
                  "src": "5233:11:129"
                },
                {
                  "id": 29348,
                  "name": "SlashDoubleSign",
                  "nameLocations": [
                    "5246:15:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28737,
                  "src": "5246:15:129"
                },
                {
                  "id": 29349,
                  "name": "SlashUnavailability",
                  "nameLocations": [
                    "5263:19:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29802,
                  "src": "5263:19:129"
                },
                {
                  "id": 29350,
                  "name": "SlashFastFinality",
                  "nameLocations": [
                    "5284:17:129"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29026,
                  "src": "5284:17:129"
                }
              ],
              "src": "5224:78:129"
            },
            "parameters": {
              "id": 29346,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29345,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "5192:13:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29366,
                  "src": "5181:24:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 29344,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 29343,
                      "name": "TConsensus",
                      "nameLocations": [
                        "5181:10:129"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "5181:10:129"
                    },
                    "referencedDeclaration": 37964,
                    "src": "5181:10:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5175:34:129"
            },
            "returnParameters": {
              "id": 29354,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29353,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 29366,
                  "src": "5312:7:129",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29352,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5312:7:129",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5311:9:129"
            },
            "scope": 29389,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 29388,
            "nodeType": "FunctionDefinition",
            "src": "5417:207:129",
            "nodes": [],
            "body": {
              "id": 29387,
              "nodeType": "Block",
              "src": "5527:97:129",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 29384,
                        "name": "consensusAddrs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29370,
                        "src": "5604:14:129",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                          "typeString": "TConsensus[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                          "typeString": "TConsensus[] memory"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 29379,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38245,
                                  "src": "5561:12:129",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 29380,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "5574:7:129",
                                "memberName": "PROFILE",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 38244,
                                "src": "5561:20:129",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 29378,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "5549:11:129",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 29381,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5549:33:129",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 29377,
                          "name": "IProfile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7346,
                          "src": "5540:8:129",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IProfile_$7346_$",
                            "typeString": "type(contract IProfile)"
                          }
                        },
                        "id": 29382,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5540:43:129",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProfile_$7346",
                          "typeString": "contract IProfile"
                        }
                      },
                      "id": 29383,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5584:19:129",
                      "memberName": "getManyConsensus2Id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7272,
                      "src": "5540:63:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                        "typeString": "function (TConsensus[] memory) view external returns (address[] memory)"
                      }
                    },
                    "id": 29385,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5540:79:129",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "functionReturnParameters": 29376,
                  "id": 29386,
                  "nodeType": "Return",
                  "src": "5533:86:129"
                }
              ]
            },
            "baseFunctions": [
              28387
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__css2cidBatch",
            "nameLocation": "5426:14:129",
            "overrides": {
              "id": 29372,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5491:8:129"
            },
            "parameters": {
              "id": 29371,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29370,
                  "mutability": "mutable",
                  "name": "consensusAddrs",
                  "nameLocation": "5461:14:129",
                  "nodeType": "VariableDeclaration",
                  "scope": 29388,
                  "src": "5441:34:129",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 29368,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 29367,
                        "name": "TConsensus",
                        "nameLocations": [
                          "5441:10:129"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 37964,
                        "src": "5441:10:129"
                      },
                      "referencedDeclaration": 37964,
                      "src": "5441:10:129",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 29369,
                    "nodeType": "ArrayTypeName",
                    "src": "5441:12:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5440:36:129"
            },
            "returnParameters": {
              "id": 29376,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29375,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 29388,
                  "src": "5509:16:129",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 29373,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "5509:7:129",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 29374,
                    "nodeType": "ArrayTypeName",
                    "src": "5509:9:129",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5508:18:129"
            },
            "scope": 29389,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 29040,
              "name": "ISlashIndicator",
              "nameLocations": [
                "579:15:129"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8969,
              "src": "579:15:129"
            },
            "id": 29041,
            "nodeType": "InheritanceSpecifier",
            "src": "579:15:129"
          },
          {
            "baseName": {
              "id": 29042,
              "name": "SlashDoubleSign",
              "nameLocations": [
                "598:15:129"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 28737,
              "src": "598:15:129"
            },
            "id": 29043,
            "nodeType": "InheritanceSpecifier",
            "src": "598:15:129"
          },
          {
            "baseName": {
              "id": 29044,
              "name": "SlashFastFinality",
              "nameLocations": [
                "617:17:129"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29026,
              "src": "617:17:129"
            },
            "id": 29045,
            "nodeType": "InheritanceSpecifier",
            "src": "617:17:129"
          },
          {
            "baseName": {
              "id": 29046,
              "name": "DeprecatedSlashBridgeVoting",
              "nameLocations": [
                "638:27:129"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 28505,
              "src": "638:27:129"
            },
            "id": 29047,
            "nodeType": "InheritanceSpecifier",
            "src": "638:27:129"
          },
          {
            "baseName": {
              "id": 29048,
              "name": "DeprecatedSlashBridgeOperator",
              "nameLocations": [
                "669:29:129"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 28471,
              "src": "669:29:129"
            },
            "id": 29049,
            "nodeType": "InheritanceSpecifier",
            "src": "669:29:129"
          },
          {
            "baseName": {
              "id": 29050,
              "name": "SlashUnavailability",
              "nameLocations": [
                "702:19:129"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29802,
              "src": "702:19:129"
            },
            "id": 29051,
            "nodeType": "InheritanceSpecifier",
            "src": "702:19:129"
          },
          {
            "baseName": {
              "id": 29052,
              "name": "CreditScore",
              "nameLocations": [
                "725:11:129"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 28438,
              "src": "725:11:129"
            },
            "id": 29053,
            "nodeType": "InheritanceSpecifier",
            "src": "725:11:129"
          },
          {
            "baseName": {
              "id": 29054,
              "name": "Initializable",
              "nameLocations": [
                "740:13:129"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 150298,
              "src": "740:13:129"
            },
            "id": 29055,
            "nodeType": "InheritanceSpecifier",
            "src": "740:13:129"
          }
        ],
        "canonicalName": "SlashIndicator",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          29389,
          150298,
          28438,
          29802,
          28471,
          3606,
          38272,
          28505,
          38280,
          38276,
          29026,
          18982,
          28737,
          18893,
          19062,
          38264,
          3544,
          38494,
          8655,
          3589,
          8957,
          8969,
          8854,
          9048,
          8902,
          8727
        ],
        "name": "SlashIndicator",
        "nameLocation": "559:14:129",
        "scope": 29390,
        "usedErrors": [
          8628,
          8713,
          8716,
          8734,
          8737,
          8740,
          8743,
          8746,
          8979,
          19061,
          38066,
          38071,
          38081,
          38094,
          38109
        ],
        "usedEvents": [
          8636,
          8726,
          8757,
          8766,
          8775,
          8870,
          8916,
          8990,
          150162
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 24102399,
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e7565b61011354610100900460ff1615620000905760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b6101135460ff9081161015620000e557610113805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6136b080620000f76000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063a345ecb2116100f9578063d3dd2bdf11610097578063e9bb166611610071578063e9bb1666146103d1578063f1001e78146103d8578063f562b3c4146103f8578063fd422cd01461040057600080fd5b8063d3dd2bdf14610387578063de981f1b1461039a578063df4b6ee0146103ad57600080fd5b8063cf39d13c116100d3578063cf39d13c1461033b578063d1737e271461034e578063d1cf434314610361578063d1f992f71461037457600080fd5b8063a345ecb214610304578063c6391fa214610317578063ccbb72ed1461032857600080fd5b80633101cfcb1161016657806362ffe6cb1161014057806362ffe6cb146102b05780637c2b55a0146102c3578063865e6fd3146102de57806399103f7b146102f157600080fd5b80633101cfcb146102555780633d48fd7d14610268578063487e00ea1461029557600080fd5b80631e90b2a0116101975780631e90b2a01461020c57806329b6eca91461021f57806329ddc3c01461023257600080fd5b806307c2d2f6146101be578063082e7420146101d3578063185368db146101f9575b600080fd5b6101d16101cc366004612761565b610413565b005b6101e66101e13660046127b8565b610521565b6040519081526020015b60405180910390f35b6101d16102073660046127d5565b6105a5565b6101d161021a366004612863565b6108bc565b6101d161022d3660046127b8565b610ae8565b6102456102403660046128e6565b610c5c565b60405190151581526020016101f0565b6101d16102633660046127b8565b610c77565b60a55460a65460a75460a8545b6040805194855260208501939093529183015260608201526080016101f0565b601d54601e54604080519283526020830191909152016101f0565b6101e66102be3660046128e6565b610d6b565b60675b6040516001600160a01b0390911681526020016101f0565b6101d16102ec366004612921565b610d7f565b6101d16102ff36600461297a565b610d9e565b6101d1610312366004612a38565b610f28565b60dd5460de5460df5460e054610275565b6101d1610336366004612a5a565b610f3a565b6101d1610349366004612a8c565b610f54565b6101d161035c366004612a5a565b610f6c565b6101d161036f366004612ab8565b610f80565b6101d16103823660046127b8565b6113ea565b6101e66103953660046127b8565b611896565b6102c66103a8366004612b77565b6118c5565b600154600254600354604080519384526020840192909252908201526060016101f0565b60696102c6565b6103eb6103e6366004612761565b611959565b6040516101f09190612bce565b60a3546101e6565b6101d161040e3660046127b8565b611a59565b600861041e81611dfa565b60008267ffffffffffffffff81111561043957610439612be1565b604051908082528060200260200182016040528015610462578160200160208202803683370190505b50905060005b838110156104df57600085858381811061048457610484612bf7565b905060200201602081019061049991906127b8565b6001600160a01b038116600090815260dc602052604081205583519091508390839081106104c9576104c9612bf7565b6000602091820292909201015250600101610468565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c2348084848360405161051393929190612c4b565b60405180910390a150505050565b600061059f61052f83611e5f565b61053960086118c5565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a9190612c7b565b611ef0565b92915050565b60086105b081611dfa565b60003390506000816001600160a01b031663297a8fca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190612c7b565b90506000826001600160a01b0316637e1dc16f88886040518363ffffffff1660e01b815260040161064b929190612c94565b600060405180830381865afa158015610668573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106909190810190612d5a565b9050600061069e60056118c5565b6001600160a01b0316638b042a72898986436040518563ffffffff1660e01b81526004016106cf9493929190612df7565b600060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107149190810190612d5a565b905060008767ffffffffffffffff81111561073157610731612be1565b60405190808252806020026020018201604052801561075a578160200160208202803683370190505b50905060005b888110156108755760008a8a8381811061077c5761077c612bf7565b905060200201602081019061079191906127b8565b9050600061079f828b611ef0565b905060008684815181106107b5576107b5612bf7565b6020026020010151905060008685815181106107d3576107d3612bf7565b60200260200101519050600082806107e85750815b6107fd576107f860dd5485611f19565b610800565b60005b6001600160a01b038616600090815260dc602052604090205460de5491925061082a918390611f33565b6001600160a01b038616600090815260dc60205260409020819055875188908890811061085957610859612bf7565b6020026020010181815250508560010195505050505050610760565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c234808989836040516108a993929190612c4b565b60405180910390a1505050505050505050565b6108c4611f50565b600084846040516108d6929190612e1e565b60405180910390209050600083836040516108f2929190612e1e565b604080519182900390912060008481526004602052919091205490915060ff168061092b575060008181526004602052604090205460ff165b156109495760405163f27b8ec960e01b815260040160405180910390fd5b600061095488611e5f565b90506001600160a01b0381166109675750865b6109748188888888611fac565b15610ade57600061098560086118c5565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190612c7b565b6000868152600460205260408082208054600160ff19918216811790925588845292829020805490931617909155519091506001600160a01b038416907f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d990610a58906003908590612e44565b60405180910390a260025460018054604051630bde081360e21b81526001600160a01b03878116600483015260248201949094526044810191909152606481019190915290831690632f78204c90608401600060405180830381600087803b158015610ac357600080fd5b505af1158015610ad7573d6000803e3d6000fd5b5050505050505b5050505050505050565b61011354600290610100900460ff16158015610b0c57506101135460ff8083169116105b610b745760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b610113805461ffff191660ff831617610100179055600054610ba1906008906001600160a01b031661209d565b606c54610bb9906005906001600160a01b031661209d565b610bc460048361209d565b603554610bdc90600a906001600160a01b031661209d565b6000805473ffffffffffffffffffffffffffffffffffffffff19908116909155606c8054821690556035805482169055603680549091169055610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6000610c70610c6a84611e5f565b8361214e565b9392505050565b61011354600390610100900460ff16158015610c9b57506101135460ff8083169116105b610cfe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b6b565b610113805461ffff191660ff831617610100179055610d1e600f8361209d565b610d2c60015460025461217a565b610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610c50565b6000610c70610d7984611e5f565b83611ef0565b610d87611f50565b610d90816121ba565b610d9a828261209d565b5050565b61011354610100900460ff1615808015610dc0575061011354600160ff909116105b80610ddb5750303b158015610ddb57506101135460ff166001145b610e3e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b6b565b610113805460ff191660011790558015610e6357610113805461ff0019166101001790555b610e6e60088b61209d565b610e7960058a61209d565b610e8460048861209d565b610e8f600a8961209d565b610ea3843560208601356040870135612209565b610ebc833560208501356040860135606087013561225e565b610ed58235602084013560408501356060860135612303565b8015610f1c57610113805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b610f30611f50565b610d9a828261217a565b610f42611f50565b610f4e84848484612303565b50505050565b610f5c611f50565b610f67838383612209565b505050565b610f74611f50565b610f4e8484848461225e565b610f89336123d2565b600003610fb9576000356001600160e01b0319166003604051620f948f60ea1b8152600401610b6b929190612e62565b6000610fc488611e5f565b90506000610fd2600f6118c5565b6040517ff46609400000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291925060009183169063f466094090602401600060405180830381865afa158015611037573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105f9190810190612f2c565b905060008989604051611073929190612e1e565b604051809103902090508160a001518051906020012081141580156110a357508160e00151805190602001208114155b156110e8576040517f053265f10000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b6b565b6040516bffffffffffffffffffffffff1960608d901b1660208201526034810189905260009060540160408051601f1981840301815291815281516020928301206000818152601f90935291205490915060ff161561115a5760405163f27b8ec960e01b815260040160405180910390fd5b6040517f7e18b5660000000000000000000000000000000000000000000000000000000081526001600160a01b03851690637e18b5669061119f908a906004016130dd565b602060405180830381865afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e0919061316f565b611216576040517f1979097700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61128c8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820182528e935091508c90600290839083908082843760009201919091525061127e91508c90506131db565b6112878b6132b3565b612463565b156113dc576000818152601f60205260408120805460ff191660011790556112b460086118c5565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131a9190612c7b565b9050866001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600883604051611358929190612e44565b60405180910390a2601e54601d54604051630bde081360e21b81526001600160a01b038a81166004830152602482019390935260448101919091526001606482015290831690632f78204c90608401600060405180830381600087803b1580156113c157600080fd5b505af11580156113d5573d6000803e3d6000fd5b5050505050505b505050505050505050505050565b60006113f582611e5f565b9050600061140360086118c5565b6040517fa0c3f2d20000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192509082169063a0c3f2d290602401602060405180830381865afa158015611466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148a919061316f565b6114b7576000356001600160e01b0319166008604051620f948f60ea1b8152600401610b6b929190612e62565b6040517f04d971ab0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301523360248301528216906304d971ab90604401602060405180830381865afa15801561151c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611540919061316f565b61156d576000356001600160e01b0319166004604051620f948f60ea1b8152600401610b6b929190612e62565b6040517f96585fc20000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260009182918416906396585fc290602401606060405180830381865afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f5919061330c565b925050915081611631576040517f6cd31b5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000836001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116959190612c7b565b6001600160a01b038616600090815260db6020908152604080832084845290915290205490915060ff16156116f6576040517f7674d6a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600090815260dc602052604081205460df5490919061171f9085613357565b90508082101561175b576040517f8c5cb26e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f15b5ebde0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018590528716906315b5ebde90604401600060405180830381600087803b1580156117be57600080fd5b505af11580156117d2573d6000803e3d6000fd5b505050506001600160a01b038716600090815260dc6020526040812080548392906117fe90849061336e565b90915550506001600160a01b038716600090815260a4602090815260408083208684529091528120556001600160a01b038716600081815260db60209081526040808320878452825291829020805460ff1916600117905581518681529081018490527f7ff9f7032d565c7e8919332964b2faa33c320b53604a65d9dd1f8112e12cd39d910160405180910390a25050505050505050565b600060dc60006118a584611e5f565b6001600160a01b0316815260208101919091526040016000205492915050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f8111156118fc576118fc612e2e565b60ff1681526020810191909152604001600020546001600160a01b031690508061195457816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610b6b9190613395565b919050565b606060006119998484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506124ec92505050565b9050805167ffffffffffffffff8111156119b5576119b5612be1565b6040519080825280602002602001820160405280156119de578160200160208202803683370190505b50915060005b8251811015611a515760dc6000838381518110611a0357611a03612bf7565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110611a3e57611a3e612bf7565b60209081029190910101526001016119e4565b505092915050565b60a3544311611a94576040517f557fd09100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4360a355334114611ac8576000356001600160e01b0319166002604051620f948f60ea1b8152600401610b6b929190612e62565b6000611ad382611e5f565b9050611adf8282612568565b611ae7575050565b6000611af360086118c5565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b599190612c7b565b6001600160a01b038416600090815260a460209081526040808320848452909152812080546001019081905560a85492935091611b979043906126c6565b905060a6548203611c6057846001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600285604051611bde929190612e44565b60405180910390a260a754604051630bde081360e21b81526001600160a01b0387811660048301526024820184905260448201929092526000606482015290851690632f78204c90608401600060405180830381600087803b158015611c4357600080fd5b505af1158015611c57573d6000803e3d6000fd5b50505050611df1565b60a5548203611df1576000611c75868561214e565b905080611d3557856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600186604051611cb8929190612e44565b60405180910390a2604051630bde081360e21b81526001600160a01b038781166004830152600060248301819052604483018190526064830152861690632f78204c90608401600060405180830381600087803b158015611d1857600080fd5b505af1158015611d2c573d6000803e3d6000fd5b50505050611def565b856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600786604051611d71929190612e44565b60405180910390a260a754604051630bde081360e21b81526001600160a01b0388811660048301526024820185905260448201929092526001606482015290861690632f78204c90608401600060405180830381600087803b158015611dd657600080fd5b505af1158015611dea573d6000803e3d6000fd5b505050505b505b50505050505b50565b611e03816118c5565b6001600160a01b0316336001600160a01b031614611df7576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610b6b939291906133a3565b6000611e6b600f6118c5565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa158015611ecc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906133d8565b6001600160a01b038216600090815260a460209081526040808320848452909152812054610c70565b6000818311611f29576000610c70565b610c70828461336e565b6000611f48611f4284866133f5565b836126e1565b949350505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314611faa576000356001600160e01b0319166001604051620f948f60ea1b8152600401610b6b929190612e62565b565b6040516000906067906001908390611fd0908a908a908a908a908a90602401613408565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7fc356770000000000000000000000000000000000000000000000000000000017905280519091506120356126f7565b602083016020828483895afa61204a57600094505b503d61205557600093505b8361208c576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159a9950505050505050505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f8111156120d3576120d3612e2e565b60ff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055811682600f81111561212157612121612e2e565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b038216600090815260db6020908152604080832084845290915281205460ff16610c70565b601d829055601e81905560408051838152602081018390527f381ec200df2ed0875638486318f9f8a84e3550bdc686bf1400c9371a18d087f09101610c50565b806001600160a01b03163b600003611df7576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610b6b565b60018390556002829055600381905560408051848152602081018490529081018290527f913da102149f952dde560cef3349db8e8002e9d580c41a7551d6d45329f4306b9060600160405180910390a1505050565b60a65460a55411156122aa576040517f87f6f0950000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b6b565b60a584905560a683905560a782905560a88190556040805185815260208101859052908101839052606081018290527f442862e6143ad95854e7c13ff4947ec6e43bc87160e3b193e7c1abaf6e3aaa9890608001610513565b8284111561233d576040517f112af4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710811115612379576040517fe0b2228c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60dd84905560de83905560df82905560e08190556040805185815260208101859052908101839052606081018290527fe1f9c6c73554b5fa140eead3cfd4ec3e6d4824f3ed26fb25e38376f65b95470b90608001610513565b60006123de600a6118c5565b6040517fd78392f80000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063d78392f890602401602060405180830381865afa15801561243f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190612c7b565b6040516000906069906001908390612487908a908a908a908a908a906024016134bb565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7b47d06b0000000000000000000000000000000000000000000000000000000017905280519091506120356126f7565b60606124f8600f6118c5565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b8152600401612523919061359e565b600060405180830381865afa158015612540573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261059f91908101906135eb565b6000336001600160a01b0384161480159061258c5750336001600160a01b03831614155b8015612622575061259d60086118c5565b6040517f65244ece0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291909116906365244ece90602401602060405180830381865afa1580156125fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612622919061316f565b8015610c70575061263360056118c5565b6040517f8d5b67590000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301524360248301529190911690638d5b675990604401602060405180830381865afa15801561269a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126be919061316f565b159392505050565b6000816000036126d7576000610c70565b610c7082846133f5565b60008183106126f05781610c70565b5090919050565b60405180602001604052806001906020820280368337509192915050565b60008083601f84011261272757600080fd5b50813567ffffffffffffffff81111561273f57600080fd5b6020830191508360208260051b850101111561275a57600080fd5b9250929050565b6000806020838503121561277457600080fd5b823567ffffffffffffffff81111561278b57600080fd5b61279785828601612715565b90969095509350505050565b6001600160a01b0381168114611df757600080fd5b6000602082840312156127ca57600080fd5b8135610c70816127a3565b6000806000604084860312156127ea57600080fd5b833567ffffffffffffffff81111561280157600080fd5b61280d86828701612715565b909790965060209590950135949350505050565b60008083601f84011261283357600080fd5b50813567ffffffffffffffff81111561284b57600080fd5b60208301915083602082850101111561275a57600080fd5b60008060008060006060868803121561287b57600080fd5b8535612886816127a3565b9450602086013567ffffffffffffffff808211156128a357600080fd5b6128af89838a01612821565b909650945060408801359150808211156128c857600080fd5b506128d588828901612821565b969995985093965092949392505050565b600080604083850312156128f957600080fd5b8235612904816127a3565b946020939093013593505050565b80356010811061195457600080fd5b6000806040838503121561293457600080fd5b61293d83612912565b9150602083013561294d816127a3565b809150509250929050565b806080810183101561059f57600080fd5b806040810183101561059f57600080fd5b60008060008060008060008060006102a08a8c03121561299957600080fd5b89356129a4816127a3565b985060208a01356129b4816127a3565b975060408a01356129c4816127a3565b965060608a01356129d4816127a3565b95506129e38b60808c01612958565b94506129f38b6101008c01612969565b93506101a08a018b811115612a0757600080fd5b6101408b019350612a188c82612958565b925050612a298b6102208c01612958565b90509295985092959850929598565b60008060408385031215612a4b57600080fd5b50508035926020909101359150565b60008060008060808587031215612a7057600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215612aa157600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215612ad357600080fd5b8735612ade816127a3565b9650602088013567ffffffffffffffff80821115612afb57600080fd5b612b078b838c01612821565b909850965060408a01359550869150612b238b60608c01612969565b945060a08a0135915080821115612b3957600080fd5b612b458b838c01612969565b935060c08a0135915080821115612b5b57600080fd5b50612b688a828b01612969565b91505092959891949750929550565b600060208284031215612b8957600080fd5b610c7082612912565b60008151808452602080850194506020840160005b83811015612bc357815187529582019590820190600101612ba7565b509495945050505050565b602081526000610c706020830184612b92565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8183526000602080850194508260005b85811015612bc3578135612c30816127a3565b6001600160a01b031687529582019590820190600101612c1d565b604081526000612c5f604083018587612c0d565b8281036020840152612c718185612b92565b9695505050505050565b600060208284031215612c8d57600080fd5b5051919050565b602081526000611f48602083018486612c0d565b604051610100810167ffffffffffffffff81118282101715612ccc57612ccc612be1565b60405290565b6040805190810167ffffffffffffffff81118282101715612ccc57612ccc612be1565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d1e57612d1e612be1565b604052919050565b600067ffffffffffffffff821115612d4057612d40612be1565b5060051b60200190565b8051801515811461195457600080fd5b60006020808385031215612d6d57600080fd5b825167ffffffffffffffff811115612d8457600080fd5b8301601f81018513612d9557600080fd5b8051612da8612da382612d26565b612cf5565b81815260059190911b82018301908381019087831115612dc757600080fd5b928401925b82841015612dec57612ddd84612d4a565b82529284019290840190612dcc565b979650505050505050565b606081526000612e0b606083018688612c0d565b6020830194909452506040015292915050565b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fd5b6040810160098410612e5857612e58612e2e565b9281526020015290565b6001600160e01b03198316815260408101600b8310612e8357612e83612e2e565b8260208301529392505050565b8051611954816127a3565b600067ffffffffffffffff821115612eb557612eb5612be1565b50601f01601f191660200190565b60005b83811015612ede578181015183820152602001612ec6565b50506000910152565b600082601f830112612ef857600080fd5b8151612f06612da382612e9b565b818152846020838601011115612f1b57600080fd5b611f48826020830160208701612ec3565b600060208284031215612f3e57600080fd5b815167ffffffffffffffff80821115612f5657600080fd5b908301906101008286031215612f6b57600080fd5b612f73612ca8565b612f7c83612e90565b8152612f8a60208401612e90565b6020820152612f9b60408401612e90565b6040820152612fac60608401612e90565b6060820152612fbd60808401612e90565b608082015260a083015182811115612fd457600080fd5b612fe087828601612ee7565b60a08301525060c083015160c082015260e08301518281111561300257600080fd5b61300e87828601612ee7565b60e08301525095945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000838385526020808601955060208560051b8301018460005b878110156130d057848303601f19018952813536889003601e1901811261308657600080fd5b8701848101903567ffffffffffffffff8111156130a257600080fd5b8036038213156130b157600080fd5b6130bc85828461301d565b9a86019a9450505090830190600101613060565b5090979650505050505050565b60208082526000906060830183820185845b600281101561316357868403601f19018352813536899003601e1901811261311657600080fd5b8801858101903567ffffffffffffffff81111561313257600080fd5b8060051b360382131561314457600080fd5b61314f868284613046565b9550505091840191908401906001016130ef565b50919695505050505050565b60006020828403121561318157600080fd5b610c7082612d4a565b600082601f83011261319b57600080fd5b81356131a9612da382612e9b565b8181528460208386010111156131be57600080fd5b816020850160208301376000918101602001919091529392505050565b60006131e5612cd2565b8060408401368111156131f757600080fd5b845b818110156132a957803567ffffffffffffffff8082111561321a5760008081fd5b9087019036601f83011261322e5760008081fd5b8135602061323e612da383612d26565b82815260059290921b8401810191818101903684111561325e5760008081fd5b8286015b848110156132965780358681111561327a5760008081fd5b6132883686838b010161318a565b845250918301918301613262565b50895250909601955050506020016131f9565b5090949350505050565b60006132bd612cd2565b8060408401368111156132cf57600080fd5b845b818110156132a957803567ffffffffffffffff8111156132f15760008081fd5b6132fd3682890161318a565b855250602093840193016132d1565b60008060006060848603121561332157600080fd5b61332a84612d4a565b925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761059f5761059f613341565b8181038181111561059f5761059f613341565b6010811061339157613391612e2e565b9052565b6020810161059f8284613381565b6001600160e01b031984168152606081016133c16020830185613381565b6001600160a01b0383166040830152949350505050565b6000602082840312156133ea57600080fd5b8151610c70816127a3565b8082018082111561059f5761059f613341565b6001600160a01b038616815260606020820152600061342b60608301868861301d565b828103604084015261343e81858761301d565b98975050505050505050565b60008151808452613462816020860160208601612ec3565b601f01601f19169290920160200192915050565b600082604081018360005b60028110156134b057838303875261349a83835161344a565b6020978801979093509190910190600101613481565b509095945050505050565b60c0815260006134ce60c083018861344a565b60208781850152604084018760005b60028110156134fa578151835291830191908301906001016134dd565b505050838203608085015281604081018760005b600281101561357b578583038452815180518085529086019086850190600581901b8601880160005b8281101561356557601f1988830301845261355382865161344a565b948a0194938a01939150600101613537565b509688019695505050918501915060010161350e565b505085810360a087015261358f8188613476565b9b9a5050505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156135df5783516001600160a01b0316835292840192918401916001016135ba565b50909695505050505050565b600060208083850312156135fe57600080fd5b825167ffffffffffffffff81111561361557600080fd5b8301601f8101851361362657600080fd5b8051613634612da382612d26565b81815260059190911b8201830190838101908783111561365357600080fd5b928401925b82841015612dec57835161366b816127a3565b8252928401929084019061365856fea2646970667358221220ed0a26977c8f4aac9d52dc1a0712d11178015308815a7a62153c9451385d8f4a64736f6c63430008160033",
  "chainId": 2021,
  "contractAbsolutePath": "SlashIndicator.sol",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c8063a345ecb2116100f9578063d3dd2bdf11610097578063e9bb166611610071578063e9bb1666146103d1578063f1001e78146103d8578063f562b3c4146103f8578063fd422cd01461040057600080fd5b8063d3dd2bdf14610387578063de981f1b1461039a578063df4b6ee0146103ad57600080fd5b8063cf39d13c116100d3578063cf39d13c1461033b578063d1737e271461034e578063d1cf434314610361578063d1f992f71461037457600080fd5b8063a345ecb214610304578063c6391fa214610317578063ccbb72ed1461032857600080fd5b80633101cfcb1161016657806362ffe6cb1161014057806362ffe6cb146102b05780637c2b55a0146102c3578063865e6fd3146102de57806399103f7b146102f157600080fd5b80633101cfcb146102555780633d48fd7d14610268578063487e00ea1461029557600080fd5b80631e90b2a0116101975780631e90b2a01461020c57806329b6eca91461021f57806329ddc3c01461023257600080fd5b806307c2d2f6146101be578063082e7420146101d3578063185368db146101f9575b600080fd5b6101d16101cc366004612761565b610413565b005b6101e66101e13660046127b8565b610521565b6040519081526020015b60405180910390f35b6101d16102073660046127d5565b6105a5565b6101d161021a366004612863565b6108bc565b6101d161022d3660046127b8565b610ae8565b6102456102403660046128e6565b610c5c565b60405190151581526020016101f0565b6101d16102633660046127b8565b610c77565b60a55460a65460a75460a8545b6040805194855260208501939093529183015260608201526080016101f0565b601d54601e54604080519283526020830191909152016101f0565b6101e66102be3660046128e6565b610d6b565b60675b6040516001600160a01b0390911681526020016101f0565b6101d16102ec366004612921565b610d7f565b6101d16102ff36600461297a565b610d9e565b6101d1610312366004612a38565b610f28565b60dd5460de5460df5460e054610275565b6101d1610336366004612a5a565b610f3a565b6101d1610349366004612a8c565b610f54565b6101d161035c366004612a5a565b610f6c565b6101d161036f366004612ab8565b610f80565b6101d16103823660046127b8565b6113ea565b6101e66103953660046127b8565b611896565b6102c66103a8366004612b77565b6118c5565b600154600254600354604080519384526020840192909252908201526060016101f0565b60696102c6565b6103eb6103e6366004612761565b611959565b6040516101f09190612bce565b60a3546101e6565b6101d161040e3660046127b8565b611a59565b600861041e81611dfa565b60008267ffffffffffffffff81111561043957610439612be1565b604051908082528060200260200182016040528015610462578160200160208202803683370190505b50905060005b838110156104df57600085858381811061048457610484612bf7565b905060200201602081019061049991906127b8565b6001600160a01b038116600090815260dc602052604081205583519091508390839081106104c9576104c9612bf7565b6000602091820292909201015250600101610468565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c2348084848360405161051393929190612c4b565b60405180910390a150505050565b600061059f61052f83611e5f565b61053960086118c5565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a9190612c7b565b611ef0565b92915050565b60086105b081611dfa565b60003390506000816001600160a01b031663297a8fca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190612c7b565b90506000826001600160a01b0316637e1dc16f88886040518363ffffffff1660e01b815260040161064b929190612c94565b600060405180830381865afa158015610668573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106909190810190612d5a565b9050600061069e60056118c5565b6001600160a01b0316638b042a72898986436040518563ffffffff1660e01b81526004016106cf9493929190612df7565b600060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107149190810190612d5a565b905060008767ffffffffffffffff81111561073157610731612be1565b60405190808252806020026020018201604052801561075a578160200160208202803683370190505b50905060005b888110156108755760008a8a8381811061077c5761077c612bf7565b905060200201602081019061079191906127b8565b9050600061079f828b611ef0565b905060008684815181106107b5576107b5612bf7565b6020026020010151905060008685815181106107d3576107d3612bf7565b60200260200101519050600082806107e85750815b6107fd576107f860dd5485611f19565b610800565b60005b6001600160a01b038616600090815260dc602052604090205460de5491925061082a918390611f33565b6001600160a01b038616600090815260dc60205260409020819055875188908890811061085957610859612bf7565b6020026020010181815250508560010195505050505050610760565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c234808989836040516108a993929190612c4b565b60405180910390a1505050505050505050565b6108c4611f50565b600084846040516108d6929190612e1e565b60405180910390209050600083836040516108f2929190612e1e565b604080519182900390912060008481526004602052919091205490915060ff168061092b575060008181526004602052604090205460ff165b156109495760405163f27b8ec960e01b815260040160405180910390fd5b600061095488611e5f565b90506001600160a01b0381166109675750865b6109748188888888611fac565b15610ade57600061098560086118c5565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190612c7b565b6000868152600460205260408082208054600160ff19918216811790925588845292829020805490931617909155519091506001600160a01b038416907f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d990610a58906003908590612e44565b60405180910390a260025460018054604051630bde081360e21b81526001600160a01b03878116600483015260248201949094526044810191909152606481019190915290831690632f78204c90608401600060405180830381600087803b158015610ac357600080fd5b505af1158015610ad7573d6000803e3d6000fd5b5050505050505b5050505050505050565b61011354600290610100900460ff16158015610b0c57506101135460ff8083169116105b610b745760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b610113805461ffff191660ff831617610100179055600054610ba1906008906001600160a01b031661209d565b606c54610bb9906005906001600160a01b031661209d565b610bc460048361209d565b603554610bdc90600a906001600160a01b031661209d565b6000805473ffffffffffffffffffffffffffffffffffffffff19908116909155606c8054821690556035805482169055603680549091169055610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6000610c70610c6a84611e5f565b8361214e565b9392505050565b61011354600390610100900460ff16158015610c9b57506101135460ff8083169116105b610cfe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b6b565b610113805461ffff191660ff831617610100179055610d1e600f8361209d565b610d2c60015460025461217a565b610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610c50565b6000610c70610d7984611e5f565b83611ef0565b610d87611f50565b610d90816121ba565b610d9a828261209d565b5050565b61011354610100900460ff1615808015610dc0575061011354600160ff909116105b80610ddb5750303b158015610ddb57506101135460ff166001145b610e3e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b6b565b610113805460ff191660011790558015610e6357610113805461ff0019166101001790555b610e6e60088b61209d565b610e7960058a61209d565b610e8460048861209d565b610e8f600a8961209d565b610ea3843560208601356040870135612209565b610ebc833560208501356040860135606087013561225e565b610ed58235602084013560408501356060860135612303565b8015610f1c57610113805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b610f30611f50565b610d9a828261217a565b610f42611f50565b610f4e84848484612303565b50505050565b610f5c611f50565b610f67838383612209565b505050565b610f74611f50565b610f4e8484848461225e565b610f89336123d2565b600003610fb9576000356001600160e01b0319166003604051620f948f60ea1b8152600401610b6b929190612e62565b6000610fc488611e5f565b90506000610fd2600f6118c5565b6040517ff46609400000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291925060009183169063f466094090602401600060405180830381865afa158015611037573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105f9190810190612f2c565b905060008989604051611073929190612e1e565b604051809103902090508160a001518051906020012081141580156110a357508160e00151805190602001208114155b156110e8576040517f053265f10000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b6b565b6040516bffffffffffffffffffffffff1960608d901b1660208201526034810189905260009060540160408051601f1981840301815291815281516020928301206000818152601f90935291205490915060ff161561115a5760405163f27b8ec960e01b815260040160405180910390fd5b6040517f7e18b5660000000000000000000000000000000000000000000000000000000081526001600160a01b03851690637e18b5669061119f908a906004016130dd565b602060405180830381865afa1580156111bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e0919061316f565b611216576040517f1979097700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61128c8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820182528e935091508c90600290839083908082843760009201919091525061127e91508c90506131db565b6112878b6132b3565b612463565b156113dc576000818152601f60205260408120805460ff191660011790556112b460086118c5565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131a9190612c7b565b9050866001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600883604051611358929190612e44565b60405180910390a2601e54601d54604051630bde081360e21b81526001600160a01b038a81166004830152602482019390935260448101919091526001606482015290831690632f78204c90608401600060405180830381600087803b1580156113c157600080fd5b505af11580156113d5573d6000803e3d6000fd5b5050505050505b505050505050505050505050565b60006113f582611e5f565b9050600061140360086118c5565b6040517fa0c3f2d20000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192509082169063a0c3f2d290602401602060405180830381865afa158015611466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148a919061316f565b6114b7576000356001600160e01b0319166008604051620f948f60ea1b8152600401610b6b929190612e62565b6040517f04d971ab0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301523360248301528216906304d971ab90604401602060405180830381865afa15801561151c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611540919061316f565b61156d576000356001600160e01b0319166004604051620f948f60ea1b8152600401610b6b929190612e62565b6040517f96585fc20000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260009182918416906396585fc290602401606060405180830381865afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f5919061330c565b925050915081611631576040517f6cd31b5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000836001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116959190612c7b565b6001600160a01b038616600090815260db6020908152604080832084845290915290205490915060ff16156116f6576040517f7674d6a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600090815260dc602052604081205460df5490919061171f9085613357565b90508082101561175b576040517f8c5cb26e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f15b5ebde0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018590528716906315b5ebde90604401600060405180830381600087803b1580156117be57600080fd5b505af11580156117d2573d6000803e3d6000fd5b505050506001600160a01b038716600090815260dc6020526040812080548392906117fe90849061336e565b90915550506001600160a01b038716600090815260a4602090815260408083208684529091528120556001600160a01b038716600081815260db60209081526040808320878452825291829020805460ff1916600117905581518681529081018490527f7ff9f7032d565c7e8919332964b2faa33c320b53604a65d9dd1f8112e12cd39d910160405180910390a25050505050505050565b600060dc60006118a584611e5f565b6001600160a01b0316815260208101919091526040016000205492915050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f8111156118fc576118fc612e2e565b60ff1681526020810191909152604001600020546001600160a01b031690508061195457816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610b6b9190613395565b919050565b606060006119998484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506124ec92505050565b9050805167ffffffffffffffff8111156119b5576119b5612be1565b6040519080825280602002602001820160405280156119de578160200160208202803683370190505b50915060005b8251811015611a515760dc6000838381518110611a0357611a03612bf7565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110611a3e57611a3e612bf7565b60209081029190910101526001016119e4565b505092915050565b60a3544311611a94576040517f557fd09100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4360a355334114611ac8576000356001600160e01b0319166002604051620f948f60ea1b8152600401610b6b929190612e62565b6000611ad382611e5f565b9050611adf8282612568565b611ae7575050565b6000611af360086118c5565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b599190612c7b565b6001600160a01b038416600090815260a460209081526040808320848452909152812080546001019081905560a85492935091611b979043906126c6565b905060a6548203611c6057846001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600285604051611bde929190612e44565b60405180910390a260a754604051630bde081360e21b81526001600160a01b0387811660048301526024820184905260448201929092526000606482015290851690632f78204c90608401600060405180830381600087803b158015611c4357600080fd5b505af1158015611c57573d6000803e3d6000fd5b50505050611df1565b60a5548203611df1576000611c75868561214e565b905080611d3557856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600186604051611cb8929190612e44565b60405180910390a2604051630bde081360e21b81526001600160a01b038781166004830152600060248301819052604483018190526064830152861690632f78204c90608401600060405180830381600087803b158015611d1857600080fd5b505af1158015611d2c573d6000803e3d6000fd5b50505050611def565b856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600786604051611d71929190612e44565b60405180910390a260a754604051630bde081360e21b81526001600160a01b0388811660048301526024820185905260448201929092526001606482015290861690632f78204c90608401600060405180830381600087803b158015611dd657600080fd5b505af1158015611dea573d6000803e3d6000fd5b505050505b505b50505050505b50565b611e03816118c5565b6001600160a01b0316336001600160a01b031614611df7576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610b6b939291906133a3565b6000611e6b600f6118c5565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa158015611ecc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906133d8565b6001600160a01b038216600090815260a460209081526040808320848452909152812054610c70565b6000818311611f29576000610c70565b610c70828461336e565b6000611f48611f4284866133f5565b836126e1565b949350505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314611faa576000356001600160e01b0319166001604051620f948f60ea1b8152600401610b6b929190612e62565b565b6040516000906067906001908390611fd0908a908a908a908a908a90602401613408565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7fc356770000000000000000000000000000000000000000000000000000000017905280519091506120356126f7565b602083016020828483895afa61204a57600094505b503d61205557600093505b8361208c576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159a9950505050505050505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f8111156120d3576120d3612e2e565b60ff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055811682600f81111561212157612121612e2e565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b038216600090815260db6020908152604080832084845290915281205460ff16610c70565b601d829055601e81905560408051838152602081018390527f381ec200df2ed0875638486318f9f8a84e3550bdc686bf1400c9371a18d087f09101610c50565b806001600160a01b03163b600003611df7576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610b6b565b60018390556002829055600381905560408051848152602081018490529081018290527f913da102149f952dde560cef3349db8e8002e9d580c41a7551d6d45329f4306b9060600160405180910390a1505050565b60a65460a55411156122aa576040517f87f6f0950000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b6b565b60a584905560a683905560a782905560a88190556040805185815260208101859052908101839052606081018290527f442862e6143ad95854e7c13ff4947ec6e43bc87160e3b193e7c1abaf6e3aaa9890608001610513565b8284111561233d576040517f112af4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710811115612379576040517fe0b2228c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60dd84905560de83905560df82905560e08190556040805185815260208101859052908101839052606081018290527fe1f9c6c73554b5fa140eead3cfd4ec3e6d4824f3ed26fb25e38376f65b95470b90608001610513565b60006123de600a6118c5565b6040517fd78392f80000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063d78392f890602401602060405180830381865afa15801561243f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190612c7b565b6040516000906069906001908390612487908a908a908a908a908a906024016134bb565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7b47d06b0000000000000000000000000000000000000000000000000000000017905280519091506120356126f7565b60606124f8600f6118c5565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b8152600401612523919061359e565b600060405180830381865afa158015612540573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261059f91908101906135eb565b6000336001600160a01b0384161480159061258c5750336001600160a01b03831614155b8015612622575061259d60086118c5565b6040517f65244ece0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291909116906365244ece90602401602060405180830381865afa1580156125fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612622919061316f565b8015610c70575061263360056118c5565b6040517f8d5b67590000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301524360248301529190911690638d5b675990604401602060405180830381865afa15801561269a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126be919061316f565b159392505050565b6000816000036126d7576000610c70565b610c7082846133f5565b60008183106126f05781610c70565b5090919050565b60405180602001604052806001906020820280368337509192915050565b60008083601f84011261272757600080fd5b50813567ffffffffffffffff81111561273f57600080fd5b6020830191508360208260051b850101111561275a57600080fd5b9250929050565b6000806020838503121561277457600080fd5b823567ffffffffffffffff81111561278b57600080fd5b61279785828601612715565b90969095509350505050565b6001600160a01b0381168114611df757600080fd5b6000602082840312156127ca57600080fd5b8135610c70816127a3565b6000806000604084860312156127ea57600080fd5b833567ffffffffffffffff81111561280157600080fd5b61280d86828701612715565b909790965060209590950135949350505050565b60008083601f84011261283357600080fd5b50813567ffffffffffffffff81111561284b57600080fd5b60208301915083602082850101111561275a57600080fd5b60008060008060006060868803121561287b57600080fd5b8535612886816127a3565b9450602086013567ffffffffffffffff808211156128a357600080fd5b6128af89838a01612821565b909650945060408801359150808211156128c857600080fd5b506128d588828901612821565b969995985093965092949392505050565b600080604083850312156128f957600080fd5b8235612904816127a3565b946020939093013593505050565b80356010811061195457600080fd5b6000806040838503121561293457600080fd5b61293d83612912565b9150602083013561294d816127a3565b809150509250929050565b806080810183101561059f57600080fd5b806040810183101561059f57600080fd5b60008060008060008060008060006102a08a8c03121561299957600080fd5b89356129a4816127a3565b985060208a01356129b4816127a3565b975060408a01356129c4816127a3565b965060608a01356129d4816127a3565b95506129e38b60808c01612958565b94506129f38b6101008c01612969565b93506101a08a018b811115612a0757600080fd5b6101408b019350612a188c82612958565b925050612a298b6102208c01612958565b90509295985092959850929598565b60008060408385031215612a4b57600080fd5b50508035926020909101359150565b60008060008060808587031215612a7057600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215612aa157600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215612ad357600080fd5b8735612ade816127a3565b9650602088013567ffffffffffffffff80821115612afb57600080fd5b612b078b838c01612821565b909850965060408a01359550869150612b238b60608c01612969565b945060a08a0135915080821115612b3957600080fd5b612b458b838c01612969565b935060c08a0135915080821115612b5b57600080fd5b50612b688a828b01612969565b91505092959891949750929550565b600060208284031215612b8957600080fd5b610c7082612912565b60008151808452602080850194506020840160005b83811015612bc357815187529582019590820190600101612ba7565b509495945050505050565b602081526000610c706020830184612b92565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8183526000602080850194508260005b85811015612bc3578135612c30816127a3565b6001600160a01b031687529582019590820190600101612c1d565b604081526000612c5f604083018587612c0d565b8281036020840152612c718185612b92565b9695505050505050565b600060208284031215612c8d57600080fd5b5051919050565b602081526000611f48602083018486612c0d565b604051610100810167ffffffffffffffff81118282101715612ccc57612ccc612be1565b60405290565b6040805190810167ffffffffffffffff81118282101715612ccc57612ccc612be1565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d1e57612d1e612be1565b604052919050565b600067ffffffffffffffff821115612d4057612d40612be1565b5060051b60200190565b8051801515811461195457600080fd5b60006020808385031215612d6d57600080fd5b825167ffffffffffffffff811115612d8457600080fd5b8301601f81018513612d9557600080fd5b8051612da8612da382612d26565b612cf5565b81815260059190911b82018301908381019087831115612dc757600080fd5b928401925b82841015612dec57612ddd84612d4a565b82529284019290840190612dcc565b979650505050505050565b606081526000612e0b606083018688612c0d565b6020830194909452506040015292915050565b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fd5b6040810160098410612e5857612e58612e2e565b9281526020015290565b6001600160e01b03198316815260408101600b8310612e8357612e83612e2e565b8260208301529392505050565b8051611954816127a3565b600067ffffffffffffffff821115612eb557612eb5612be1565b50601f01601f191660200190565b60005b83811015612ede578181015183820152602001612ec6565b50506000910152565b600082601f830112612ef857600080fd5b8151612f06612da382612e9b565b818152846020838601011115612f1b57600080fd5b611f48826020830160208701612ec3565b600060208284031215612f3e57600080fd5b815167ffffffffffffffff80821115612f5657600080fd5b908301906101008286031215612f6b57600080fd5b612f73612ca8565b612f7c83612e90565b8152612f8a60208401612e90565b6020820152612f9b60408401612e90565b6040820152612fac60608401612e90565b6060820152612fbd60808401612e90565b608082015260a083015182811115612fd457600080fd5b612fe087828601612ee7565b60a08301525060c083015160c082015260e08301518281111561300257600080fd5b61300e87828601612ee7565b60e08301525095945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000838385526020808601955060208560051b8301018460005b878110156130d057848303601f19018952813536889003601e1901811261308657600080fd5b8701848101903567ffffffffffffffff8111156130a257600080fd5b8036038213156130b157600080fd5b6130bc85828461301d565b9a86019a9450505090830190600101613060565b5090979650505050505050565b60208082526000906060830183820185845b600281101561316357868403601f19018352813536899003601e1901811261311657600080fd5b8801858101903567ffffffffffffffff81111561313257600080fd5b8060051b360382131561314457600080fd5b61314f868284613046565b9550505091840191908401906001016130ef565b50919695505050505050565b60006020828403121561318157600080fd5b610c7082612d4a565b600082601f83011261319b57600080fd5b81356131a9612da382612e9b565b8181528460208386010111156131be57600080fd5b816020850160208301376000918101602001919091529392505050565b60006131e5612cd2565b8060408401368111156131f757600080fd5b845b818110156132a957803567ffffffffffffffff8082111561321a5760008081fd5b9087019036601f83011261322e5760008081fd5b8135602061323e612da383612d26565b82815260059290921b8401810191818101903684111561325e5760008081fd5b8286015b848110156132965780358681111561327a5760008081fd5b6132883686838b010161318a565b845250918301918301613262565b50895250909601955050506020016131f9565b5090949350505050565b60006132bd612cd2565b8060408401368111156132cf57600080fd5b845b818110156132a957803567ffffffffffffffff8111156132f15760008081fd5b6132fd3682890161318a565b855250602093840193016132d1565b60008060006060848603121561332157600080fd5b61332a84612d4a565b925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761059f5761059f613341565b8181038181111561059f5761059f613341565b6010811061339157613391612e2e565b9052565b6020810161059f8284613381565b6001600160e01b031984168152606081016133c16020830185613381565b6001600160a01b0383166040830152949350505050565b6000602082840312156133ea57600080fd5b8151610c70816127a3565b8082018082111561059f5761059f613341565b6001600160a01b038616815260606020820152600061342b60608301868861301d565b828103604084015261343e81858761301d565b98975050505050505050565b60008151808452613462816020860160208601612ec3565b601f01601f19169290920160200192915050565b600082604081018360005b60028110156134b057838303875261349a83835161344a565b6020978801979093509190910190600101613481565b509095945050505050565b60c0815260006134ce60c083018861344a565b60208781850152604084018760005b60028110156134fa578151835291830191908301906001016134dd565b505050838203608085015281604081018760005b600281101561357b578583038452815180518085529086019086850190600581901b8601880160005b8281101561356557601f1988830301845261355382865161344a565b948a0194938a01939150600101613537565b509688019695505050918501915060010161350e565b505085810360a087015261358f8188613476565b9b9a5050505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156135df5783516001600160a01b0316835292840192918401916001016135ba565b50909695505050505050565b600060208083850312156135fe57600080fd5b825167ffffffffffffffff81111561361557600080fd5b8301601f8101851361362657600080fd5b8051613634612da382612d26565b81815260059190911b8201830190838101908783111561365357600080fd5b928401925b82841015612dec57835161366b816127a3565b8252928401929084019061365856fea2646970667358221220ed0a26977c8f4aac9d52dc1a0712d11178015308815a7a62153c9451385d8f4a64736f6c63430008160033",
  "deployer": "0x31762cdd4Aa65CD6f5F09D7a05a56211720A1168",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "bailOut(address)": {
        "details": "A slashed validator use this method to get out of jail. Requirements: - The `_consensusAddr` must be a validator. - Only validator's admin can call this method. Emits the event `BailedOut`."
      },
      "checkBailedOutAtPeriod(address,uint256)": {
        "details": "Returns the whether the `consensus` has been bailed out at the `period`."
      },
      "currentUnavailabilityIndicator(address)": {
        "details": "Returns the current unavailability indicator of a block producer."
      },
      "execResetCreditScores(address[])": {
        "details": "Resets the credit score for the revoked validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`."
      },
      "execUpdateCreditScores(address[],uint256)": {
        "details": "Updates the credit score for the validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getCreditScore(address)": {
        "details": "Returns the current credit score of the validator."
      },
      "getCreditScoreConfigs()": {
        "details": "Returns the configs related to credit score.",
        "returns": {
          "bailOutCostMultiplier_": "The number that will be multiplied with the remaining jailed time to get the cost of bailing out.",
          "cutOffPercentageAfterBailout_": "The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.",
          "gainCreditScore_": "The score to gain per period.",
          "maxCreditScore_": "The max number of credit score that a validator can hold."
        }
      },
      "getDoubleSignSlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "params": {
          "_doubleSigningOffsetLimitBlock": "The number of block that the current block is at most far from the double signing block."
        },
        "returns": {
          "doubleSigningJailUntilBlock_": "The block number that the punished validator will be jailed until, due to double signing.",
          "slashDoubleSignAmount_": "The amount of RON to slash double sign."
        }
      },
      "getFastFinalitySlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "returns": {
          "fastFinalityJailUntilBlock_": "The block number that the punished validator will be jailed until, due to malicious fast finality.",
          "slashFastFinalityAmount_": "The amount of RON to slash fast finality."
        }
      },
      "getManyCreditScores(address[])": {
        "details": "Returns the current credit score of a list of validators."
      },
      "getUnavailabilityIndicator(address,uint256)": {
        "details": "Returns the unavailability indicator in the period `period` of a block producer."
      },
      "getUnavailabilitySlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "returns": {
          "jailDurationForUnavailabilityTier2Threshold_": "The number of blocks to jail a block producer when (s)he is slashed with tier-2 or tier-3.",
          "slashAmountForUnavailabilityTier2Threshold_": "The amount of RON to deduct from self-staking of a block producer when (s)he is slashed with tier-2 or tier-3.",
          "unavailabilityTier1Threshold_": "The mining reward will be deprecated, if (s)he missed more than this threshold. This threshold is applied for tier-1 and tier-3 slash.",
          "unavailabilityTier2Threshold_": " The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash."
        }
      },
      "initialize(address,address,address,address,uint256[4],uint256[2],uint256[3],uint256[4],uint256[4])": {
        "details": "Initializes the contract storage."
      },
      "lastUnavailabilitySlashedBlock()": {
        "details": "Returns the last block that a block producer is slashed for unavailability."
      },
      "precompileValidateDoubleSignAddress()": {
        "details": "Gets the address of the precompile of validating double sign evidence"
      },
      "precompileValidateFastFinalityAddress()": {
        "details": "Gets the address of the precompile of validating double sign evidence"
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setCreditScoreConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to credit score. Requirements: - The method caller is admin. Emits the event `CreditScoreConfigsUpdated`.",
        "params": {
          "_bailOutMultiplier": "The number that will be multiplied with the remaining jailed time to get the cost of bailing out.",
          "_cutOffPercentage": "The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.",
          "_gainScore": "The score to gain per period.",
          "_maxScore": "The max number of credit score that a validator can hold."
        }
      },
      "setDoubleSignSlashingConfigs(uint256,uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `DoubleSignSlashingConfigsUpdated`.",
        "params": {
          "_doubleSigningOffsetLimitBlock": "The number of block that the current block is at most far from the double signing block.",
          "_jailUntilBlock": "The block number that the punished validator will be jailed until, due to double signing.",
          "_slashAmount": "The amount of RON to slash double sign."
        }
      },
      "setFastFinalitySlashingConfigs(uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `FastFinalitySlashingConfigsUpdated`.",
        "params": {
          "jailUntilBlock": "The block number that the punished validator will be jailed until, due to fast finality.",
          "slashAmount": "The amount of RON to slash fast finality."
        }
      },
      "setUnavailabilitySlashingConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.",
        "params": {
          "jailDurationForTier2Threshold": "The number of blocks to jail a block producer when (s)he is slashed tier-2.",
          "slashAmountForTier2Threshold": "The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.",
          "tier1Threshold": "The mining reward will be deprecated, if (s)he missed more than this threshold.",
          "tier2Threshold": "The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold."
        }
      },
      "slashDoubleSign(address,bytes,bytes)": {
        "details": "Slashes for double signing. Requirements: - The method caller is coinbase. Emits the event `Slashed` if the double signing evidence of the two headers valid."
      },
      "slashFastFinality(address,bytes,uint256,bytes32[2],bytes[][2],bytes[2])": {
        "details": "Slashes for fast finality. Requirements: - Only whitelisted addresses are allowed to call. Emits the event `Slashed` if the fast finality evidence of the two headers valid."
      },
      "slashUnavailability(address)": {
        "details": "Slashes for unavailability by increasing the counter of block producer `consensusAddr`. Requirements: - The method caller is coinbase. Emits the event `Slashed` when the threshold is reached."
      }
    },
    "events": {
      "BailedOut(address,uint256,uint256)": {
        "details": "Emitted when a validator bailed out of jail."
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "CreditScoreConfigsUpdated(uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details."
      },
      "CreditScoresUpdated(address[],uint256[])": {
        "details": "Emitted the credit score of validators is updated."
      },
      "DoubleSignSlashingConfigsUpdated(uint256,uint256,uint256)": {
        "details": "Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs` for param details."
      },
      "FastFinalitySlashingConfigsUpdated(uint256,uint256)": {
        "details": "Emitted when the configs to slash fast finality is updated. See the method `getFastFinalitySlashingConfigs` for param details."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Slashed(address,uint8,uint256)": {
        "details": "Emitted when the validator is slashed."
      },
      "UnavailabilitySlashingConfigsUpdated(uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs` for param details."
      }
    },
    "errors": {
      "ErrCallPrecompiled()": [
        {
          "details": "Error of call to precompile fails."
        }
      ],
      "ErrCallerMustBeJailedInTheCurrentPeriod()": [
        {
          "details": "Error thrown when the caller must be jailed in the current period."
        }
      ],
      "ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock()": [
        {
          "details": "Error thrown when attempting to slash a validator twice or slash more than one validator in one block."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrEvidenceAlreadySubmitted()": [
        {
          "details": "Error thrown when evidence has already been submitted."
        }
      ],
      "ErrInsufficientCreditScoreToBailOut()": [
        {
          "details": "Error thrown when the caller's credit score is insufficient to bail out a situation."
        }
      ],
      "ErrInvalidArguments(bytes4)": [
        {
          "details": "Error indicating that arguments are invalid."
        }
      ],
      "ErrInvalidCreditScoreConfig()": [
        {
          "details": "Error thrown when an invalid credit score configuration is provided."
        }
      ],
      "ErrInvalidCutOffPercentageConfig()": [
        {
          "details": "Error thrown when an invalid cut-off percentage configuration is provided."
        }
      ],
      "ErrInvalidThreshold(bytes4)": [
        {
          "details": "Error indicating that the provided threshold is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that the invalid threshold applies to."
          }
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrUnregisteredPublicKey()": [
        {
          "details": "Error thrown when public key in evidence is not registered."
        }
      ],
      "ErrValidatorHasBailedOutPreviously()": [
        {
          "details": "Error thrown when a validator has previously bailed out."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrCallPrecompiled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeJailedInTheCurrentPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEvidenceAlreadySubmitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientCreditScoreToBailOut\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidArguments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCreditScoreConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCutOffPercentageConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnregisteredPublicKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrValidatorHasBailedOutPreviously\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedCreditScore\",\"type\":\"uint256\"}],\"name\":\"BailedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gainCreditScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCreditScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailOutCostMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cutOffPercentageAfterBailout\",\"type\":\"uint256\"}],\"name\":\"CreditScoreConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"creditScores\",\"type\":\"uint256[]\"}],\"name\":\"CreditScoresUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashDoubleSignAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"doubleSigningJailUntilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"doubleSigningOffsetLimitBlock\",\"type\":\"uint256\"}],\"name\":\"DoubleSignSlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashFastFinalityAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastFinalityJailUntilBlock\",\"type\":\"uint256\"}],\"name\":\"FastFinalitySlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseSlash.SlashType\",\"name\":\"slashType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unavailabilityTier1Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unavailabilityTier2Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashAmountForUnavailabilityTier2Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailDurationForUnavailabilityTier2Threshold\",\"type\":\"uint256\"}],\"name\":\"UnavailabilitySlashingConfigsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"bailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"checkBailedOutAtPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"currentUnavailabilityIndicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validatorIds\",\"type\":\"address[]\"}],\"name\":\"execResetCreditScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validatorIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"execUpdateCreditScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"getCreditScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditScoreConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gainCreditScore_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCreditScore_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bailOutCostMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cutOffPercentageAfterBailout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDoubleSignSlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashDoubleSignAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"doubleSigningJailUntilBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"doubleSigningOffsetLimitBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFastFinalitySlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashFastFinalityAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fastFinalityJailUntilBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"getManyCreditScores\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"resultList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getUnavailabilityIndicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnavailabilitySlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unavailabilityTier1Threshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unavailabilityTier2Threshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashAmountForUnavailabilityTier2Threshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailDurationForUnavailabilityTier2Threshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninGovernanceAdminContract\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_doubleSignSlashingConfigs\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_unavailabilitySlashingConfigs\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_creditScoreConfigs\",\"type\":\"uint256[4]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roninGovernanceAdminContract\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profileContract\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUnavailabilitySlashedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileValidateDoubleSignAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileValidateFastFinalityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gainScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bailOutMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cutOffPercentage\",\"type\":\"uint256\"}],\"name\":\"setCreditScoreConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailUntilBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offsetLimitBlock\",\"type\":\"uint256\"}],\"name\":\"setDoubleSignSlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailUntilBlock\",\"type\":\"uint256\"}],\"name\":\"setFastFinalitySlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier1Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slashAmountForTier2Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailDurationForTier2Threshold\",\"type\":\"uint256\"}],\"name\":\"setUnavailabilitySlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"header1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"header2\",\"type\":\"bytes\"}],\"name\":\"slashDoubleSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"voterPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"targetBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"targetBlockHash\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes[][2]\",\"name\":\"listOfPublicKey\",\"type\":\"bytes[][2]\"},{\"internalType\":\"bytes[2]\",\"name\":\"aggregatedSignature\",\"type\":\"bytes[2]\"}],\"name\":\"slashFastFinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"slashUnavailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrCallPrecompiled()\":[{\"details\":\"Error of call to precompile fails.\"}],\"ErrCallerMustBeJailedInTheCurrentPeriod()\":[{\"details\":\"Error thrown when the caller must be jailed in the current period.\"}],\"ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock()\":[{\"details\":\"Error thrown when attempting to slash a validator twice or slash more than one validator in one block.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrEvidenceAlreadySubmitted()\":[{\"details\":\"Error thrown when evidence has already been submitted.\"}],\"ErrInsufficientCreditScoreToBailOut()\":[{\"details\":\"Error thrown when the caller's credit score is insufficient to bail out a situation.\"}],\"ErrInvalidArguments(bytes4)\":[{\"details\":\"Error indicating that arguments are invalid.\"}],\"ErrInvalidCreditScoreConfig()\":[{\"details\":\"Error thrown when an invalid credit score configuration is provided.\"}],\"ErrInvalidCutOffPercentageConfig()\":[{\"details\":\"Error thrown when an invalid cut-off percentage configuration is provided.\"}],\"ErrInvalidThreshold(bytes4)\":[{\"details\":\"Error indicating that the provided threshold is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the invalid threshold applies to.\"}}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrUnregisteredPublicKey()\":[{\"details\":\"Error thrown when public key in evidence is not registered.\"}],\"ErrValidatorHasBailedOutPreviously()\":[{\"details\":\"Error thrown when a validator has previously bailed out.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"BailedOut(address,uint256,uint256)\":{\"details\":\"Emitted when a validator bailed out of jail.\"},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"CreditScoreConfigsUpdated(uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\"},\"CreditScoresUpdated(address[],uint256[])\":{\"details\":\"Emitted the credit score of validators is updated.\"},\"DoubleSignSlashingConfigsUpdated(uint256,uint256,uint256)\":{\"details\":\"Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs` for param details.\"},\"FastFinalitySlashingConfigsUpdated(uint256,uint256)\":{\"details\":\"Emitted when the configs to slash fast finality is updated. See the method `getFastFinalitySlashingConfigs` for param details.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Slashed(address,uint8,uint256)\":{\"details\":\"Emitted when the validator is slashed.\"},\"UnavailabilitySlashingConfigsUpdated(uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs` for param details.\"}},\"kind\":\"dev\",\"methods\":{\"bailOut(address)\":{\"details\":\"A slashed validator use this method to get out of jail. Requirements: - The `_consensusAddr` must be a validator. - Only validator's admin can call this method. Emits the event `BailedOut`.\"},\"checkBailedOutAtPeriod(address,uint256)\":{\"details\":\"Returns the whether the `consensus` has been bailed out at the `period`.\"},\"currentUnavailabilityIndicator(address)\":{\"details\":\"Returns the current unavailability indicator of a block producer.\"},\"execResetCreditScores(address[])\":{\"details\":\"Resets the credit score for the revoked validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`.\"},\"execUpdateCreditScores(address[],uint256)\":{\"details\":\"Updates the credit score for the validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getCreditScore(address)\":{\"details\":\"Returns the current credit score of the validator.\"},\"getCreditScoreConfigs()\":{\"details\":\"Returns the configs related to credit score.\",\"returns\":{\"bailOutCostMultiplier_\":\"The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\",\"cutOffPercentageAfterBailout_\":\"The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\",\"gainCreditScore_\":\"The score to gain per period.\",\"maxCreditScore_\":\"The max number of credit score that a validator can hold.\"}},\"getDoubleSignSlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"params\":{\"_doubleSigningOffsetLimitBlock\":\"The number of block that the current block is at most far from the double signing block.\"},\"returns\":{\"doubleSigningJailUntilBlock_\":\"The block number that the punished validator will be jailed until, due to double signing.\",\"slashDoubleSignAmount_\":\"The amount of RON to slash double sign.\"}},\"getFastFinalitySlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"returns\":{\"fastFinalityJailUntilBlock_\":\"The block number that the punished validator will be jailed until, due to malicious fast finality.\",\"slashFastFinalityAmount_\":\"The amount of RON to slash fast finality.\"}},\"getManyCreditScores(address[])\":{\"details\":\"Returns the current credit score of a list of validators.\"},\"getUnavailabilityIndicator(address,uint256)\":{\"details\":\"Returns the unavailability indicator in the period `period` of a block producer.\"},\"getUnavailabilitySlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"returns\":{\"jailDurationForUnavailabilityTier2Threshold_\":\"The number of blocks to jail a block producer when (s)he is slashed with tier-2 or tier-3.\",\"slashAmountForUnavailabilityTier2Threshold_\":\"The amount of RON to deduct from self-staking of a block producer when (s)he is slashed with tier-2 or tier-3.\",\"unavailabilityTier1Threshold_\":\"The mining reward will be deprecated, if (s)he missed more than this threshold. This threshold is applied for tier-1 and tier-3 slash.\",\"unavailabilityTier2Threshold_\":\" The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\"}},\"initialize(address,address,address,address,uint256[4],uint256[2],uint256[3],uint256[4],uint256[4])\":{\"details\":\"Initializes the contract storage.\"},\"lastUnavailabilitySlashedBlock()\":{\"details\":\"Returns the last block that a block producer is slashed for unavailability.\"},\"precompileValidateDoubleSignAddress()\":{\"details\":\"Gets the address of the precompile of validating double sign evidence\"},\"precompileValidateFastFinalityAddress()\":{\"details\":\"Gets the address of the precompile of validating double sign evidence\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setCreditScoreConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to credit score. Requirements: - The method caller is admin. Emits the event `CreditScoreConfigsUpdated`.\",\"params\":{\"_bailOutMultiplier\":\"The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\",\"_cutOffPercentage\":\"The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\",\"_gainScore\":\"The score to gain per period.\",\"_maxScore\":\"The max number of credit score that a validator can hold.\"}},\"setDoubleSignSlashingConfigs(uint256,uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `DoubleSignSlashingConfigsUpdated`.\",\"params\":{\"_doubleSigningOffsetLimitBlock\":\"The number of block that the current block is at most far from the double signing block.\",\"_jailUntilBlock\":\"The block number that the punished validator will be jailed until, due to double signing.\",\"_slashAmount\":\"The amount of RON to slash double sign.\"}},\"setFastFinalitySlashingConfigs(uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `FastFinalitySlashingConfigsUpdated`.\",\"params\":{\"jailUntilBlock\":\"The block number that the punished validator will be jailed until, due to fast finality.\",\"slashAmount\":\"The amount of RON to slash fast finality.\"}},\"setUnavailabilitySlashingConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.\",\"params\":{\"jailDurationForTier2Threshold\":\"The number of blocks to jail a block producer when (s)he is slashed tier-2.\",\"slashAmountForTier2Threshold\":\"The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.\",\"tier1Threshold\":\"The mining reward will be deprecated, if (s)he missed more than this threshold.\",\"tier2Threshold\":\"The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold.\"}},\"slashDoubleSign(address,bytes,bytes)\":{\"details\":\"Slashes for double signing. Requirements: - The method caller is coinbase. Emits the event `Slashed` if the double signing evidence of the two headers valid.\"},\"slashFastFinality(address,bytes,uint256,bytes32[2],bytes[][2],bytes[2])\":{\"details\":\"Slashes for fast finality. Requirements: - Only whitelisted addresses are allowed to call. Emits the event `Slashed` if the fast finality evidence of the two headers valid.\"},\"slashUnavailability(address)\":{\"details\":\"Slashes for unavailability by increasing the counter of block producer `consensusAddr`. Requirements: - The method caller is coinbase. Emits the event `Slashed` when the threshold is reached.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/slash-indicator/SlashIndicator.sol\":\"SlashIndicator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../udvts/Types.sol\\\";\\n\\ninterface IMaintenance {\\n  /**\\n   * @dev Error thrown when attempting to schedule an already scheduled event.\\n   */\\n  error ErrAlreadyScheduled();\\n\\n  /**\\n   * @dev Error thrown when referring to a non-existent schedule.\\n   */\\n  error ErrUnexistedSchedule();\\n\\n  /**\\n   * @dev Error thrown when the end block of a schedule is out of range.\\n   */\\n  error ErrEndBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when the start block of a schedule is out of range.\\n   */\\n  error ErrStartBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when attempting to initiate maintenance while already in maintenance mode.\\n   */\\n  error ErrAlreadyOnMaintenance();\\n\\n  /**\\n   * @dev Error thrown when attempting an action before the cooldown period has ended.\\n   */\\n  error ErrCooldownTimeNotYetEnded();\\n\\n  /**\\n   * @dev Error thrown when the total number of schedules exceeds the limit.\\n   */\\n  error ErrTotalOfSchedulesExceeded();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration is specified.\\n   */\\n  error ErrInvalidMaintenanceDuration();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration configuration is provided.\\n   */\\n  error ErrInvalidMaintenanceDurationConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid offset is specified to start the schedule configurations.\\n   */\\n  error ErrInvalidOffsetToStartScheduleConfigs();\\n\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n    uint256 requestTimestamp;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed cid, Schedule);\\n  /// @dev Emitted when a schedule of maintenance is cancelled.\\n  event MaintenanceScheduleCancelled(address indexed cid);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules,\\n    uint256 cooldownSecsToMaintain\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(TConsensus consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator whose id `validatorId` maintained at the block number `_block`.\\n   */\\n  function checkMaintainedById(address validatorId, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    TConsensus consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `k` or not.\\n   */\\n  function checkManyMaintained(\\n    TConsensus[] calldata consensusAddrList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedById(\\n    address[] calldata candidateIdList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    TConsensus[] calldata _consensusAddrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedInBlockRangeById(\\n    address[] calldata idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has finished cooldown.\\n   */\\n  function checkCooldownEnded(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has schedule.\\n   */\\n  function checkScheduled(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `consensusAddr`.\\n   */\\n  function getSchedule(TConsensus consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedule() external view returns (uint256 count);\\n\\n  /**\\n   * @dev Returns the cooldown to maintain in seconds.\\n   */\\n  function cooldownSecsToMaintain() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedules_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `startedAtBlock` to `endedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - The candidate `consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(TConsensus consensusAddr, uint256 startedAtBlock, uint256 endedAtBlock) external;\\n\\n  /**\\n   * @dev Cancel the schedule of maintenance for the `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - A schedule for the `consensusAddr` must be existent and not executed yet.\\n   *\\n   * Emits the event `MaintenanceScheduleCancelled`.\\n   */\\n  function cancelSchedule(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x102d9129a1e6af05bd3a979347cfc1d07246317e09c749a2e4b196a93b0d62ab\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Pool admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Last public key change timestamp.\\n    uint256 pubkeyLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change public key because cooldown is not ended.\\n  error ErrPubkeyChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Add a new profile.\\n   *\\n   * @dev Requirements:\\n   * - The profile must not be existent before.\\n   * - Only contract admin can call this method.\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external;\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setPubkeyChangeCooldown(uint256 cooldown) external;\\n}\\n\",\"keccak256\":\"0x9bb73040b679f2c318bf995f81950004b6e306166080325eb0a177fc85d4603f\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x0b2a44131128f965e20cbea424987817cb504502e5d83d6523ae45ffeb5e53fe\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2,\\n    UNAVAILABILITY_TIER_3,\\n    FAST_FINALITY\\n  }\\n\\n  /// @dev Error thrown when evidence has already been submitted.\\n  error ErrEvidenceAlreadySubmitted();\\n\\n  /// @dev Error thrown when public key in evidence is not registered.\\n  error ErrUnregisteredPublicKey();\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed cid, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0x0b93777d4c17f0e849fbfb29ed3868c898f595ee96f468fcc9a6a82f71742d4b\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICreditScore {\\n  /**\\n   * @dev Error thrown when an invalid credit score configuration is provided.\\n   */\\n  error ErrInvalidCreditScoreConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid cut-off percentage configuration is provided.\\n   */\\n  error ErrInvalidCutOffPercentageConfig();\\n\\n  /**\\n   * @dev Error thrown when the caller's credit score is insufficient to bail out a situation.\\n   */\\n  error ErrInsufficientCreditScoreToBailOut();\\n\\n  /**\\n   * @dev Error thrown when a validator has previously bailed out.\\n   */\\n  error ErrValidatorHasBailedOutPreviously();\\n\\n  /**\\n   * @dev Error thrown when the caller must be jailed in the current period.\\n   */\\n  error ErrCallerMustBeJailedInTheCurrentPeriod();\\n\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore,\\n    uint256 maxCreditScore,\\n    uint256 bailOutCostMultiplier,\\n    uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated.\\n  event CreditScoresUpdated(address[] cids, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail.\\n  event BailedOut(address indexed cid, uint256 period, uint256 usedCreditScore);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execUpdateCreditScores(address[] calldata validatorIds, uint256 period) external;\\n\\n  /**\\n   * @dev Resets the credit score for the revoked validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execResetCreditScores(address[] calldata validatorIds) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainScore The score to gain per period.\\n   * @param _maxScore The max number of credit score that a validator can hold.\\n   * @param _bailOutMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentage The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The score to gain per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(TConsensus consensus) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getManyCreditScores(\\n    TConsensus[] calldata consensusAddrs\\n  ) external view returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `consensus` has been bailed out at the `period`.\\n   */\\n  function checkBailedOutAtPeriod(TConsensus consensus, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x42a60955c5093185bd9ce80545b1ecb10fa1dee2fb2b72c95f1289153b9f5307\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(\\n    uint256 slashDoubleSignAmount,\\n    uint256 doubleSigningJailUntilBlock,\\n    uint256 doubleSigningOffsetLimitBlock\\n  );\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(TConsensus _validatorAddr, bytes calldata _header1, bytes calldata _header2) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _slashDoubleSignAmount,\\n      uint256 _doubleSigningJailUntilBlock,\\n      uint256 _doubleSigningOffsetLimitBlock\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _doubleSigningOffsetLimitBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb9bcab2333ef220db67a51edc072afa9dae94e261177cfddb601da0c0be04bdd\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashFastFinality.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashFastFinality is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash fast finality is updated. See the method `getFastFinalitySlashingConfigs`\\n   * for param details.\\n   */\\n  event FastFinalitySlashingConfigsUpdated(uint256 slashFastFinalityAmount, uint256 fastFinalityJailUntilBlock);\\n\\n  /**\\n   * @dev Slashes for fast finality.\\n   *\\n   * Requirements:\\n   * - Only whitelisted addresses are allowed to call.\\n   *\\n   * Emits the event `Slashed` if the fast finality evidence of the two headers valid.\\n   */\\n  function slashFastFinality(\\n    TConsensus consensusAddr,\\n    bytes calldata voterPublicKey,\\n    uint256 targetBlockNumber,\\n    bytes32[2] calldata targetBlockHash,\\n    bytes[][2] calldata listOfPublicKey,\\n    bytes[2] calldata aggregatedSignature\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return slashFastFinalityAmount The amount of RON to slash fast finality.\\n   * @return fastFinalityJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * malicious fast finality.\\n   */\\n  function getFastFinalitySlashingConfigs()\\n    external\\n    view\\n    returns (uint256 slashFastFinalityAmount, uint256 fastFinalityJailUntilBlock);\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `FastFinalitySlashingConfigsUpdated`.\\n   *\\n   * @param slashAmount The amount of RON to slash fast finality.\\n   * @param jailUntilBlock The block number that the punished validator will be jailed until, due to fast finality.\\n   *\\n   */\\n  function setFastFinalitySlashingConfigs(uint256 slashAmount, uint256 jailUntilBlock) external;\\n}\\n\",\"keccak256\":\"0xaa45b7bdd92b68161124ac9db3ed0d3c87e2297f4b22eb42eee4abc2de5e6b14\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is\\n  ISlashDoubleSign,\\n  ISlashUnavailability,\\n  ICreditScore\\n{}\\n\",\"keccak256\":\"0x2908d4111459fda33a8bedb4c66cbcbe9ae5ab2aa9c0ae2ca05e9ba9a93d9e5e\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Error thrown when attempting to slash a validator twice or slash more than one validator in one block.\\n   */\\n  error ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock();\\n\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the unavailability indicator in the period `period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(TConsensus consensusAddr, uint256 period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold. This threshold is applied for tier-1 and tier-3 slash.\\n   * @return unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   * @return slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed with tier-2 or tier-3.\\n   * @return jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed with tier-2 or tier-3.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 unavailabilityTier1Threshold,\\n      uint256 unavailabilityTier2Threshold,\\n      uint256 slashAmountForUnavailabilityTier2Threshold,\\n      uint256 jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 tier1Threshold,\\n    uint256 tier2Threshold,\\n    uint256 slashAmountForTier2Threshold,\\n    uint256 jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1a30a9edd2eb5593e1da65210dcd712173b9702d6814f4fb31f800efb5f2098b\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x7943726a9ecd82a625d3f86c5f7ddbe02427368478b6c98d90fe93dc2f399ba4\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeAdminAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddress(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddress(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeTreasuryAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddress(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xfbe83dc9a4df46f4eb34b6d68c73041de663f188671264c7fe5315b8a0813511\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed cid,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] cids,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xabf7541c6acfef6db495585f74bc9be88a65c20b09850197bc06ab452f07d172\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0xaa2df8b56a83730a3a1b3876708570d70843802737ff7c776a5725c71d7ea8f7\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0xf4f96a624e7c77bbce044c67e3f4b406e65871debc19e7bfab663c1fcfcbc7b0\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x27afa712094804b997f55e8f8d320760e07d7260ab33aeb8fb61c39849f09bf3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xa6298427da3b2055724dc3a6457e653629ce760ef39abfb15dfdfdd5a809a261\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PCUValidateDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUValidateDoubleSign is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of validating double sign evidence\\n  function precompileValidateDoubleSignAddress() public view virtual returns (address) {\\n    return address(0x67);\\n  }\\n\\n  /**\\n   * @dev Validates the two submitted block header if they are produced by the same address\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcValidateEvidence(\\n    address _consensusAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) internal view virtual returns (bool _validEvidence) {\\n    address _smc = precompileValidateDoubleSignAddress();\\n    bool _success = true;\\n\\n    bytes memory _payload = abi.encodeWithSignature(\\n      \\\"validatingDoubleSignProof(address,bytes,bytes)\\\",\\n      _consensusAddr,\\n      _header1,\\n      _header2\\n    );\\n    uint _payloadLength = _payload.length;\\n    uint[1] memory _output;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _output, 0x20)) {\\n        _success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        _success := 0\\n      }\\n    }\\n\\n    if (!_success) revert ErrCallPrecompiled();\\n    return (_output[0] != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x9df5b8272e1cd963d776b94e29a69ba1139f0df7404b67c213b3c5ebe19e527b\",\"license\":\"MIT\"},\"contracts/precompile-usages/PCUValidateFastFinality.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUValidateFastFinality is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of validating double sign evidence\\n  function precompileValidateFastFinalityAddress() public view virtual returns (address) {\\n    return address(0x69);\\n  }\\n\\n  /**\\n   * @dev Validates the proof of malicious voting on fast finality\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcValidateFastFinalityEvidence(\\n    bytes memory voterPublicKey,\\n    uint256 targetBlockNumber,\\n    bytes32[2] memory targetBlockHash,\\n    bytes[][2] memory listOfPublicKey,\\n    bytes[2] memory aggregatedSignature\\n  ) internal view virtual returns (bool validEvidence) {\\n    address smc = precompileValidateFastFinalityAddress();\\n    bool success = true;\\n\\n    bytes memory payload = abi.encodeWithSignature(\\n      \\\"validateFinalityVoteProof(bytes,uint256,bytes32[2],bytes[][2],bytes[2])\\\",\\n      voterPublicKey,\\n      targetBlockNumber,\\n      targetBlockHash,\\n      listOfPublicKey,\\n      aggregatedSignature\\n    );\\n    uint payloadLength = payload.length;\\n    uint[1] memory output;\\n\\n    assembly {\\n      let payloadStart := add(payload, 0x20)\\n      if iszero(staticcall(gas(), smc, payloadStart, payloadLength, output, 0x20)) {\\n        success := 0\\n      }\\n\\n      if iszero(returndatasize()) {\\n        success := 0\\n      }\\n    }\\n\\n    if (!success) revert ErrCallPrecompiled();\\n    return (output[0] != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x99a8bb36a8b3fecd3865fdfdda61ecd5daf3e26dba78ff844a2349a8a07d1ace\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompiledUsage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PrecompiledUsage {\\n  /// @dev Error of call to precompile fails.\\n  error ErrCallPrecompiled();\\n}\\n\",\"keccak256\":\"0x76facc3f3a8dd573c826bbbfedaa5cd8ef30963fbabd8c163c0c72b6efea5551\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/CreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ICreditScore.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { HasValidatorDeprecated, HasMaintenanceDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport { ErrUnauthorized, RoleAccess } from \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract CreditScore is\\n  ICreditScore,\\n  HasContracts,\\n  HasValidatorDeprecated,\\n  HasMaintenanceDeprecated,\\n  PercentageConsumer\\n{\\n  /// @dev Mapping from validator id => period index => whether bailed out before\\n  mapping(address => mapping(uint256 => bool)) internal _checkBailedOutAtPeriod;\\n  /// @dev Mapping from validator address => credit score\\n  mapping(address => uint256) internal _creditScore;\\n\\n  /// @dev The max gained number of credit score per period.\\n  uint256 internal _gainCreditScore;\\n  /// @dev The max number of credit score that a validator can hold.\\n  uint256 internal _maxCreditScore;\\n  /// @dev The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n  uint256 internal _bailOutCostMultiplier;\\n  /// @dev The percentage of reward to be cut off from the validator in the rest of the period after bailed out.\\n  uint256 internal _cutOffPercentageAfterBailout;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function execUpdateCreditScores(\\n    address[] calldata validatorIds,\\n    uint256 period\\n  ) external override onlyContract(ContractType.VALIDATOR) {\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(msg.sender);\\n    uint256 periodStartAtBlock = validatorContract.currentPeriodStartAtBlock();\\n\\n    bool[] memory jaileds = validatorContract.checkManyJailedById(validatorIds);\\n    bool[] memory maintaineds = IMaintenance(getContract(ContractType.MAINTENANCE)).checkManyMaintainedInBlockRangeById(\\n      validatorIds,\\n      periodStartAtBlock,\\n      block.number\\n    );\\n    uint256[] memory updatedCreditScores = new uint256[](validatorIds.length);\\n\\n    for (uint i = 0; i < validatorIds.length; ) {\\n      address vId = validatorIds[i];\\n\\n      uint256 indicator = _getUnavailabilityIndicatorById(vId, period);\\n      bool isJailedInPeriod = jaileds[i];\\n      bool isMaintainingInPeriod = maintaineds[i];\\n\\n      uint256 _actualGain = (isJailedInPeriod || isMaintainingInPeriod)\\n        ? 0\\n        : Math.subNonNegative(_gainCreditScore, indicator);\\n\\n      _creditScore[vId] = Math.addWithUpperbound(_creditScore[vId], _actualGain, _maxCreditScore);\\n      updatedCreditScores[i] = _creditScore[vId];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit CreditScoresUpdated(validatorIds, updatedCreditScores);\\n  }\\n\\n  function execResetCreditScores(\\n    address[] calldata validatorIds\\n  ) external override onlyContract(ContractType.VALIDATOR) {\\n    uint256[] memory updatedCreditScores = new uint256[](validatorIds.length);\\n    for (uint i = 0; i < validatorIds.length; ) {\\n      address _validator = validatorIds[i];\\n      delete _creditScore[_validator];\\n      delete updatedCreditScores[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    emit CreditScoresUpdated(validatorIds, updatedCreditScores);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function bailOut(TConsensus consensusAddr) external override {\\n    address validatorId = __css2cid(consensusAddr);\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    if (!validatorContract.isValidatorCandidate(consensusAddr))\\n      revert ErrUnauthorized(msg.sig, RoleAccess.VALIDATOR_CANDIDATE);\\n\\n    if (!validatorContract.isCandidateAdmin(consensusAddr, msg.sender))\\n      revert ErrUnauthorized(msg.sig, RoleAccess.CANDIDATE_ADMIN);\\n\\n    (bool isJailed, , uint256 jailedEpochLeft) = validatorContract.getJailedTimeLeft(consensusAddr);\\n    if (!isJailed) revert ErrCallerMustBeJailedInTheCurrentPeriod();\\n\\n    uint256 period = validatorContract.currentPeriod();\\n    if (_checkBailedOutAtPeriod[validatorId][period]) revert ErrValidatorHasBailedOutPreviously();\\n\\n    uint256 score = _creditScore[validatorId];\\n    uint256 cost = jailedEpochLeft * _bailOutCostMultiplier;\\n    if (score < cost) revert ErrInsufficientCreditScoreToBailOut();\\n\\n    validatorContract.execBailOut(validatorId, period);\\n\\n    _creditScore[validatorId] -= cost;\\n    _setUnavailabilityIndicator(validatorId, period, 0);\\n    _checkBailedOutAtPeriod[validatorId][period] = true;\\n    emit BailedOut(validatorId, period, cost);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external override onlyAdmin {\\n    _setCreditScoreConfigs(_gainScore, _maxScore, _bailOutMultiplier, _cutOffPercentage);\\n  }\\n\\n  /**\\n   * @dev See `ISlashUnavailability`\\n   */\\n  function _getUnavailabilityIndicatorById(address validator, uint256 period) internal view virtual returns (uint256);\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 gainCreditScore_,\\n      uint256 maxCreditScore_,\\n      uint256 bailOutCostMultiplier_,\\n      uint256 cutOffPercentageAfterBailout_\\n    )\\n  {\\n    return (_gainCreditScore, _maxCreditScore, _bailOutCostMultiplier, _cutOffPercentageAfterBailout);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getCreditScore(TConsensus consensusAddr) external view override returns (uint256) {\\n    return _creditScore[__css2cid(consensusAddr)];\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getManyCreditScores(\\n    TConsensus[] calldata consensusAddrs\\n  ) public view override returns (uint256[] memory resultList) {\\n    address[] memory validatorIds = __css2cidBatch(consensusAddrs);\\n    resultList = new uint256[](validatorIds.length);\\n\\n    for (uint i = 0; i < resultList.length; ) {\\n      resultList[i] = _creditScore[validatorIds[i]];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function checkBailedOutAtPeriod(TConsensus consensus, uint256 period) external view override returns (bool) {\\n    return _checkBailedOutAtPeriodById(__css2cid(consensus), period);\\n  }\\n\\n  function _checkBailedOutAtPeriodById(address validatorId, uint256 period) internal view virtual returns (bool) {\\n    return _checkBailedOutAtPeriod[validatorId][period];\\n  }\\n\\n  /**\\n   * @dev See `SlashUnavailability`.\\n   */\\n  function _setUnavailabilityIndicator(address _validator, uint256 period, uint256 _indicator) internal virtual;\\n\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view virtual returns (address[] memory);\\n\\n  /**\\n   * @dev See `ICreditScore-setCreditScoreConfigs`.\\n   */\\n  function _setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) internal {\\n    if (_gainScore > _maxScore) revert ErrInvalidCreditScoreConfig();\\n    if (_cutOffPercentage > _MAX_PERCENTAGE) revert ErrInvalidCutOffPercentageConfig();\\n\\n    _gainCreditScore = _gainScore;\\n    _maxCreditScore = _maxScore;\\n    _bailOutCostMultiplier = _bailOutMultiplier;\\n    _cutOffPercentageAfterBailout = _cutOffPercentage;\\n    emit CreditScoreConfigsUpdated(_gainScore, _maxScore, _bailOutMultiplier, _cutOffPercentage);\\n  }\\n}\\n\",\"keccak256\":\"0x86e36c26e6e12c70256558508ad1e5070de5591e39dfdd491a9510cb8ec46d74\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/DeprecatedSlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../extensions/collections/HasProxyAdmin.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\n\\nabstract contract DeprecatedSlashBridgeOperator is\\n  HasProxyAdmin,\\n  HasContracts,\\n  HasValidatorDeprecated,\\n  PercentageConsumer\\n{\\n  /**\\n   * @dev The bridge operators will be deprecated reward if (s)he missed more than the ratio.\\n   * Values 0-10,000 map to 0%-100%.\\n   */\\n  uint256 private ____deprecatedMissingVotesRatioTier1;\\n  /**\\n   * @dev The bridge operators will be deprecated all rewards including bridge reward and mining reward if (s)he missed\\n   * more than the ratio. Values 0-10,000 map to 0%-100%.\\n   */\\n  uint256 private ____deprecatedMissingVotesRatioTier2;\\n  /// @dev The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.\\n  uint256 private ____deprecatedJailDurationForMissingVotesRatioTier2;\\n  /// @dev The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small.\\n  uint256 private ____deprecatedSkipBridgeOperatorSlashingThreshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xcc5150f7add2223bda2e22a13dd49dedff5bab71ba5bb251a7b22f484b2f493d\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/DeprecatedSlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { HasValidatorDeprecated, HasTrustedOrgDeprecated, HasGovernanceAdminDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\n\\n// TODO: remove this from slashing logic of consensus contract\\nabstract contract DeprecatedSlashBridgeVoting is\\n  HasContracts,\\n  HasValidatorDeprecated,\\n  HasTrustedOrgDeprecated,\\n  HasGovernanceAdminDeprecated\\n{\\n  /// @dev Mapping from validator address => period index => bridge voting slashed\\n  mapping(address => mapping(uint256 => bool)) private __deprecatedBridgeVotingSlashed;\\n  /// @dev The threshold to slash when a trusted organization does not vote for bridge operators.\\n  uint256 private __deprecatedBridgeVotingThreshold;\\n  /// @dev The amount of RON to slash bridge voting.\\n  uint256 private __deprecatedBridgeVotingSlashAmount;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x7ce98fae2a6b9505f4339d1dc81bdc1c4bb809ea7fbac503155a81f834f4bbe4\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/slash-indicator/ISlashDoubleSign.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../precompile-usages/PCUValidateDoubleSign.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\n\\nabstract contract SlashDoubleSign is ISlashDoubleSign, HasContracts, HasValidatorDeprecated, PCUValidateDoubleSign {\\n  /// @dev The amount of RON to slash double sign.\\n  uint256 internal _slashDoubleSignAmount;\\n  /// @dev The block number that the punished validator will be jailed until, due to double signing.\\n  uint256 internal _doubleSigningJailUntilBlock;\\n  /** @dev The offset from the submitted block to the current block, from which double signing will be invalidated.\\n   * This parameter is exposed for system transaction.\\n   **/\\n  uint256 internal _doubleSigningOffsetLimitBlock;\\n  /// @dev Recording of submitted proof to prevent relay attack.\\n  mapping(bytes32 => bool) _submittedEvidence;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[24] private ______gap;\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function slashDoubleSign(\\n    TConsensus consensusAddr,\\n    bytes calldata header1,\\n    bytes calldata header2\\n  ) external override onlyAdmin {\\n    bytes32 header1Checksum = keccak256(header1);\\n    bytes32 header2Checksum = keccak256(header2);\\n\\n    if (_submittedEvidence[header1Checksum] || _submittedEvidence[header2Checksum]) {\\n      revert ErrEvidenceAlreadySubmitted();\\n    }\\n\\n    address validatorId = __css2cid(consensusAddr);\\n\\n    // NOTE: Edge case: non-validator who never apply for the candidate role, nor have a profile.\\n    // Must be slashed by the consensus address, since the validatorId will be address(0).\\n    if (validatorId == address(0)) {\\n      validatorId = TConsensus.unwrap(consensusAddr);\\n    }\\n\\n    if (_pcValidateEvidence(validatorId, header1, header2)) {\\n      IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n      uint256 period = validatorContract.currentPeriod();\\n      _submittedEvidence[header1Checksum] = true;\\n      _submittedEvidence[header2Checksum] = true;\\n      emit Slashed(validatorId, SlashType.DOUBLE_SIGNING, period);\\n      validatorContract.execSlash(validatorId, _doubleSigningJailUntilBlock, _slashDoubleSignAmount, true);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 slashDoubleSignAmount_,\\n      uint256 doubleSigningJailUntilBlock_,\\n      uint256 doubleSigningOffsetLimitBlock_\\n    )\\n  {\\n    return (_slashDoubleSignAmount, _doubleSigningJailUntilBlock, _doubleSigningOffsetLimitBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _offsetLimitBlock\\n  ) external override onlyAdmin {\\n    _setDoubleSignSlashingConfigs(_slashAmount, _jailUntilBlock, _offsetLimitBlock);\\n  }\\n\\n  /**\\n   * @dev See `ISlashDoubleSign-setDoubleSignSlashingConfigs`.\\n   */\\n  function _setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _offsetLimitBlock\\n  ) internal {\\n    _slashDoubleSignAmount = _slashAmount;\\n    _doubleSigningJailUntilBlock = _jailUntilBlock;\\n    _doubleSigningOffsetLimitBlock = _offsetLimitBlock;\\n    emit DoubleSignSlashingConfigsUpdated(_slashAmount, _jailUntilBlock, _doubleSigningOffsetLimitBlock);\\n  }\\n\\n  /**\\n   * @dev Returns whether the account `_addr` should be slashed or not.\\n   */\\n  function _shouldSlash(TConsensus consensus, address validatorId) internal view virtual returns (bool);\\n\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x22c3b6343d7d03d0957546fbea9f204fe370713d95049b9f1b8cab140ad13f20\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashFastFinality.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/slash-indicator/ISlashFastFinality.sol\\\";\\nimport { IRoninValidatorSet } from \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport { IProfile } from \\\"../../interfaces/IProfile.sol\\\";\\nimport { IRoninTrustedOrganization } from \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../../precompile-usages/PCUValidateFastFinality.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract SlashFastFinality is ISlashFastFinality, HasContracts, PCUValidateFastFinality {\\n  /// @dev The amount of RON to slash fast finality.\\n  uint256 internal _slashFastFinalityAmount;\\n  /// @dev The block number that the punished validator will be jailed until, due to malicious fast finality.\\n  uint256 internal _fastFinalityJailUntilBlock;\\n  /// @dev Recording of submitted proof to prevent relay attack.\\n  mapping(bytes32 => bool) internal _processedEvidence;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[21] private ______gap;\\n\\n  modifier onlyGoverningValidator() {\\n    if (_getGovernorWeight(msg.sender) == 0) revert ErrUnauthorized(msg.sig, RoleAccess.GOVERNOR);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashFastFinality\\n   */\\n  function slashFastFinality(\\n    TConsensus consensusAddr,\\n    bytes calldata voterPublicKey,\\n    uint256 targetBlockNumber,\\n    bytes32[2] calldata targetBlockHash,\\n    bytes[][2] calldata listOfPublicKey,\\n    bytes[2] calldata aggregatedSignature\\n  ) external override onlyGoverningValidator {\\n    address validatorId = __css2cid(consensusAddr);\\n    IProfile profileContract = IProfile(getContract(ContractType.PROFILE));\\n\\n    IProfile.CandidateProfile memory profile = profileContract.getId2Profile(validatorId);\\n    bytes32 voterPublicKeyHash = keccak256(voterPublicKey);\\n    if (\\n      (voterPublicKeyHash != keccak256(profile.pubkey)) &&\\n      (voterPublicKeyHash != keccak256(profile.oldPubkey))\\n    ) {\\n      revert ErrInvalidArguments(msg.sig);\\n    }\\n\\n    bytes32 evidenceHash = keccak256(abi.encodePacked(consensusAddr, targetBlockNumber));\\n    if (_processedEvidence[evidenceHash]) revert ErrEvidenceAlreadySubmitted();\\n\\n    if (!profileContract.arePublicKeysRegistered(listOfPublicKey)) {\\n      revert ErrUnregisteredPublicKey();\\n    }\\n\\n    if (\\n      _pcValidateFastFinalityEvidence(\\n        voterPublicKey,\\n        targetBlockNumber,\\n        targetBlockHash,\\n        listOfPublicKey,\\n        aggregatedSignature\\n      )\\n    ) {\\n      _processedEvidence[evidenceHash] = true;\\n\\n      IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n      uint256 period = validatorContract.currentPeriod();\\n      emit Slashed(validatorId, SlashType.FAST_FINALITY, period);\\n      validatorContract.execSlash({\\n        cid: validatorId,\\n        newJailedUntil: _fastFinalityJailUntilBlock,\\n        slashAmount: _slashFastFinalityAmount,\\n        cannotBailout: true\\n      });\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashFastFinality\\n   */\\n  function getFastFinalitySlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (uint256 slashFastFinalityAmount_, uint256 fastFinalityJailUntilBlock_)\\n  {\\n    return (_slashFastFinalityAmount, _fastFinalityJailUntilBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashFastFinality\\n   */\\n  function setFastFinalitySlashingConfigs(uint256 slashAmount, uint256 jailUntilBlock) external override onlyAdmin {\\n    _setFastFinalitySlashingConfigs(slashAmount, jailUntilBlock);\\n  }\\n\\n  /**\\n   * @dev See `ISlashFastFinality-setFastFinalitySlashingConfigs`.\\n   */\\n  function _setFastFinalitySlashingConfigs(uint256 slashAmount, uint256 jailUntilBlock) internal {\\n    _slashFastFinalityAmount = slashAmount;\\n    _fastFinalityJailUntilBlock = jailUntilBlock;\\n    emit FastFinalitySlashingConfigsUpdated(slashAmount, jailUntilBlock);\\n  }\\n\\n  /**\\n   * @dev Get governor, i.e. governing validator's weight, of the `addr`.\\n   */\\n  function _getGovernorWeight(address addr) internal view returns (uint256) {\\n    return IRoninTrustedOrganization(getContract(ContractType.RONIN_TRUSTED_ORGANIZATION)).getGovernorWeight(addr);\\n  }\\n\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x82a6c9fb08c3735fdd335384fc35f0f7f4597891c2829a84f7e77bfd20547f57\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"./DeprecatedSlashBridgeOperator.sol\\\";\\nimport \\\"./DeprecatedSlashBridgeVoting.sol\\\";\\nimport \\\"./SlashDoubleSign.sol\\\";\\nimport \\\"./SlashFastFinality.sol\\\";\\nimport \\\"./SlashUnavailability.sol\\\";\\nimport \\\"./CreditScore.sol\\\";\\n\\ncontract SlashIndicator is\\n  ISlashIndicator,\\n  SlashDoubleSign,\\n  SlashFastFinality,\\n  DeprecatedSlashBridgeVoting,\\n  DeprecatedSlashBridgeOperator,\\n  SlashUnavailability,\\n  CreditScore,\\n  Initializable\\n{\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address __roninGovernanceAdminContract,\\n    uint256[4] calldata /* _bridgeOperatorSlashingConfigs */,\\n    uint256[2] calldata /* _bridgeVotingSlashingConfigs */,\\n    // _doubleSignSlashingConfigs[0]: _slashDoubleSignAmount\\n    // _doubleSignSlashingConfigs[1]: _doubleSigningJailUntilBlock\\n    // _doubleSignSlashingConfigs[2]: _doubleSigningOffsetLimitBlock\\n    uint256[3] calldata _doubleSignSlashingConfigs,\\n    // _unavailabilitySlashingConfigs[0]: _unavailabilityTier1Threshold\\n    // _unavailabilitySlashingConfigs[1]: _unavailabilityTier2Threshold\\n    // _unavailabilitySlashingConfigs[2]: _slashAmountForUnavailabilityTier2Threshold\\n    // _unavailabilitySlashingConfigs[3]: _jailDurationForUnavailabilityTier2Threshold\\n    uint256[4] calldata _unavailabilitySlashingConfigs,\\n    // _creditScoreConfigs[0]: _gainCreditScore\\n    // _creditScoreConfigs[1]: _maxCreditScore\\n    // _creditScoreConfigs[2]: _bailOutCostMultiplier\\n    // _creditScoreConfigs[3]: _cutOffPercentageAfterBailout\\n    uint256[4] calldata _creditScoreConfigs\\n  ) external initializer {\\n    _setContract(ContractType.VALIDATOR, __validatorContract);\\n    _setContract(ContractType.MAINTENANCE, __maintenanceContract);\\n    _setContract(ContractType.GOVERNANCE_ADMIN, __roninGovernanceAdminContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, __roninTrustedOrganizationContract);\\n\\n    _setDoubleSignSlashingConfigs(\\n      _doubleSignSlashingConfigs[0],\\n      _doubleSignSlashingConfigs[1],\\n      _doubleSignSlashingConfigs[2]\\n    );\\n    _setUnavailabilitySlashingConfigs(\\n      _unavailabilitySlashingConfigs[0],\\n      _unavailabilitySlashingConfigs[1],\\n      _unavailabilitySlashingConfigs[2],\\n      _unavailabilitySlashingConfigs[3]\\n    );\\n    _setCreditScoreConfigs(\\n      _creditScoreConfigs[0],\\n      _creditScoreConfigs[1],\\n      _creditScoreConfigs[2],\\n      _creditScoreConfigs[3]\\n    );\\n  }\\n\\n  function initializeV2(address roninGovernanceAdminContract) external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ______deprecatedValidator);\\n    _setContract(ContractType.MAINTENANCE, ______deprecatedMaintenance);\\n    _setContract(ContractType.GOVERNANCE_ADMIN, roninGovernanceAdminContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, ______deprecatedTrustedOrg);\\n\\n    delete ______deprecatedValidator;\\n    delete ______deprecatedMaintenance;\\n    delete ______deprecatedTrustedOrg;\\n    delete ______deprecatedGovernanceAdmin;\\n  }\\n\\n  function initializeV3(address profileContract) external reinitializer(3) {\\n    _setContract(ContractType.PROFILE, profileContract);\\n    _setFastFinalitySlashingConfigs(_slashDoubleSignAmount, _doubleSigningJailUntilBlock);\\n  }\\n\\n  /**\\n   * @dev Helper for CreditScore contract to reset the indicator of the validator after bailing out.\\n   */\\n  function _setUnavailabilityIndicator(\\n    address validator,\\n    uint256 period,\\n    uint256 indicator\\n  ) internal override(CreditScore, SlashUnavailability) {\\n    SlashUnavailability._setUnavailabilityIndicator(validator, period, indicator);\\n  }\\n\\n  /**\\n   * @dev Helper for CreditScore contract to query indicator of the validator.\\n   */\\n  function _getUnavailabilityIndicatorById(\\n    address validatorId,\\n    uint256 period\\n  ) internal view override(CreditScore, SlashUnavailability) returns (uint256) {\\n    return SlashUnavailability._getUnavailabilityIndicatorById(validatorId, period);\\n  }\\n\\n  function _checkBailedOutAtPeriodById(\\n    address cid,\\n    uint256 period\\n  ) internal view override(CreditScore, SlashUnavailability) returns (bool) {\\n    return CreditScore._checkBailedOutAtPeriodById(cid, period);\\n  }\\n\\n  /**\\n   * @dev Sanity check the address to be slashed\\n   */\\n  function _shouldSlash(\\n    TConsensus consensus,\\n    address validatorId\\n  ) internal view override(SlashDoubleSign, SlashUnavailability) returns (bool) {\\n    return\\n      (msg.sender != TConsensus.unwrap(consensus)) &&\\n      (msg.sender != validatorId) &&\\n      IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isBlockProducer(consensus) &&\\n      !IMaintenance(getContract(ContractType.MAINTENANCE)).checkMaintainedById(validatorId, block.number);\\n  }\\n\\n  function __css2cid(\\n    TConsensus consensusAddr\\n  ) internal view override(CreditScore, SlashDoubleSign, SlashUnavailability, SlashFastFinality) returns (address) {\\n    return IProfile(getContract(ContractType.PROFILE)).getConsensus2Id(consensusAddr);\\n  }\\n\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view override returns (address[] memory) {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyConsensus2Id(consensusAddrs);\\n  }\\n}\\n\",\"keccak256\":\"0x9c04173414424dde143a29cb727731c5428b5478ca583807de1c88ffbe42cbdb\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./CreditScore.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashUnavailability.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport { ErrInvalidThreshold } from \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract SlashUnavailability is ISlashUnavailability, HasContracts, HasValidatorDeprecated {\\n  /// @dev The last block that a validator is slashed for unavailability.\\n  uint256 internal _lastUnavailabilitySlashedBlock;\\n  /// @dev Mapping from validator address => period index => unavailability indicator.\\n  mapping(address => mapping(uint256 => uint256)) internal _unavailabilityIndicator;\\n\\n  /**\\n   * @dev The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * This threshold is applied for tier-1 and tier-3 of unavailability slash.\\n   */\\n  uint256 internal _unavailabilityTier1Threshold;\\n  /**\\n   * @dev The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   */\\n  uint256 internal _unavailabilityTier2Threshold;\\n  /**\\n   * @dev The amount of RON to deduct from self-staking of a block producer when (s)he is slashed with\\n   * tier-2 or tier-3.\\n   **/\\n  uint256 internal _slashAmountForUnavailabilityTier2Threshold;\\n  /// @dev The number of blocks to jail a block producer when (s)he is slashed with tier-2 or tier-3.\\n  uint256 internal _jailDurationForUnavailabilityTier2Threshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  modifier oncePerBlock() {\\n    if (block.number <= _lastUnavailabilitySlashedBlock) {\\n      revert ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock();\\n    }\\n\\n    _lastUnavailabilitySlashedBlock = block.number;\\n    _;\\n  }\\n\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256) {\\n    return _lastUnavailabilitySlashedBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function slashUnavailability(TConsensus consensusAddr) external override oncePerBlock {\\n    if (msg.sender != block.coinbase) revert ErrUnauthorized(msg.sig, RoleAccess.COINBASE);\\n\\n    address validatorId = __css2cid(consensusAddr);\\n    if (!_shouldSlash(consensusAddr, validatorId)) {\\n      // Should return instead of throwing error since this is a part of system transaction.\\n      return;\\n    }\\n\\n    IRoninValidatorSet _validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    uint256 period = _validatorContract.currentPeriod();\\n    uint256 count;\\n    unchecked {\\n      count = ++_unavailabilityIndicator[validatorId][period];\\n    }\\n    uint256 newJailedUntilBlock = Math.addIfNonZero(block.number, _jailDurationForUnavailabilityTier2Threshold);\\n\\n    if (count == _unavailabilityTier2Threshold) {\\n      emit Slashed(validatorId, SlashType.UNAVAILABILITY_TIER_2, period);\\n      _validatorContract.execSlash(\\n        validatorId,\\n        newJailedUntilBlock,\\n        _slashAmountForUnavailabilityTier2Threshold,\\n        false\\n      );\\n    } else if (count == _unavailabilityTier1Threshold) {\\n      bool tier1SecondTime = _checkBailedOutAtPeriodById(validatorId, period);\\n      if (!tier1SecondTime) {\\n        emit Slashed(validatorId, SlashType.UNAVAILABILITY_TIER_1, period);\\n        _validatorContract.execSlash(validatorId, 0, 0, false);\\n      } else {\\n        /// Handles tier-3\\n        emit Slashed(validatorId, SlashType.UNAVAILABILITY_TIER_3, period);\\n        _validatorContract.execSlash(\\n          validatorId,\\n          newJailedUntilBlock,\\n          _slashAmountForUnavailabilityTier2Threshold,\\n          true\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) external override onlyAdmin {\\n    _setUnavailabilitySlashingConfigs(\\n      _tier1Threshold,\\n      _tier2Threshold,\\n      _slashAmountForTier2Threshold,\\n      _jailDurationForTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 unavailabilityTier1Threshold_,\\n      uint256 unavailabilityTier2Threshold_,\\n      uint256 slashAmountForUnavailabilityTier2Threshold_,\\n      uint256 jailDurationForUnavailabilityTier2Threshold_\\n    )\\n  {\\n    return (\\n      _unavailabilityTier1Threshold,\\n      _unavailabilityTier2Threshold,\\n      _slashAmountForUnavailabilityTier2Threshold,\\n      _jailDurationForUnavailabilityTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function currentUnavailabilityIndicator(TConsensus consensus) external view override returns (uint256) {\\n    return\\n      _getUnavailabilityIndicatorById(\\n        __css2cid(consensus),\\n        IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod()\\n      );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function getUnavailabilityIndicator(\\n    TConsensus consensus,\\n    uint256 period\\n  ) external view virtual override returns (uint256) {\\n    return _getUnavailabilityIndicatorById(__css2cid(consensus), period);\\n  }\\n\\n  function _getUnavailabilityIndicatorById(\\n    address validatorId,\\n    uint256 period\\n  ) internal view virtual returns (uint256) {\\n    return _unavailabilityIndicator[validatorId][period];\\n  }\\n\\n  /**\\n   * @dev Sets the unavailability indicator of the `_validator` at `_period`.\\n   */\\n  function _setUnavailabilityIndicator(address _validator, uint256 _period, uint256 _indicator) internal virtual {\\n    _unavailabilityIndicator[_validator][_period] = _indicator;\\n  }\\n\\n  /**\\n   * @dev See `ISlashUnavailability-setUnavailabilitySlashingConfigs`.\\n   */\\n  function _setUnavailabilitySlashingConfigs(\\n    uint256 _tier1Threshold,\\n    uint256 _tier2Threshold,\\n    uint256 _slashAmountForTier2Threshold,\\n    uint256 _jailDurationForTier2Threshold\\n  ) internal {\\n    if (_unavailabilityTier1Threshold > _unavailabilityTier2Threshold) revert ErrInvalidThreshold(msg.sig);\\n\\n    _unavailabilityTier1Threshold = _tier1Threshold;\\n    _unavailabilityTier2Threshold = _tier2Threshold;\\n    _slashAmountForUnavailabilityTier2Threshold = _slashAmountForTier2Threshold;\\n    _jailDurationForUnavailabilityTier2Threshold = _jailDurationForTier2Threshold;\\n    emit UnavailabilitySlashingConfigsUpdated(\\n      _tier1Threshold,\\n      _tier2Threshold,\\n      _slashAmountForTier2Threshold,\\n      _jailDurationForTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether the account `_addr` should be slashed or not.\\n   */\\n  function _shouldSlash(TConsensus consensus, address validatorId) internal view virtual returns (bool);\\n\\n  /**\\n   * @dev See `ICreditScore-checkBailedOutAtPeriodById`\\n   */\\n  function _checkBailedOutAtPeriodById(address validatorId, uint256 period) internal view virtual returns (bool);\\n\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x9d982af0ef1472369d69bd5cda0a685de85228508ffb53e3a47387f6008ec53a\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 33,
  "numDeployments": 14,
  "storageLayout": {
    "storage": [
      {
        "astId": 38263,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 28524,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashDoubleSignAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 28527,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_doubleSigningJailUntilBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 28530,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_doubleSigningOffsetLimitBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 28535,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_submittedEvidence",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 28540,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)24_storage"
      },
      {
        "astId": 28758,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashFastFinalityAmount",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 28761,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_fastFinalityJailUntilBlock",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 28766,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_processedEvidence",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 28771,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_uint256)21_storage"
      },
      {
        "astId": 38275,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______deprecatedTrustedOrg",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 38279,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______deprecatedGovernanceAdmin",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 28493,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "__deprecatedBridgeVotingSlashed",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 28496,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "__deprecatedBridgeVotingThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 28499,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "__deprecatedBridgeVotingSlashAmount",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 28504,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 38271,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______deprecatedMaintenance",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      },
      {
        "astId": 28456,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "____deprecatedMissingVotesRatioTier1",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 28459,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "____deprecatedMissingVotesRatioTier2",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 28462,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "____deprecatedJailDurationForMissingVotesRatioTier2",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 28465,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "____deprecatedSkipBridgeOperatorSlashingThreshold",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 28470,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "113",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29408,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_lastUnavailabilitySlashedBlock",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 29415,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityIndicator",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 29418,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityTier1Threshold",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 29421,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityTier2Threshold",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 29424,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashAmountForUnavailabilityTier2Threshold",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 29427,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_jailDurationForUnavailabilityTier2Threshold",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 29432,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "169",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 27834,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_checkBailedOutAtPeriod",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 27839,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_creditScore",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27842,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_gainCreditScore",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 27845,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_maxCreditScore",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 27848,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bailOutCostMultiplier",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 27851,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_cutOffPercentageAfterBailout",
        "offset": 0,
        "slot": "224",
        "type": "t_uint256"
      },
      {
        "astId": 27856,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "225",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 150154,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_initialized",
        "offset": 0,
        "slot": "275",
        "type": "t_uint8"
      },
      {
        "astId": 150157,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_initializing",
        "offset": 1,
        "slot": "275",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)21_storage": {
        "encoding": "inplace",
        "label": "uint256[21]",
        "numberOfBytes": "672",
        "base": "t_uint256"
      },
      "t_array(t_uint256)24_storage": {
        "encoding": "inplace",
        "label": "uint256[24]",
        "numberOfBytes": "768",
        "base": "t_uint256"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1708420448,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}