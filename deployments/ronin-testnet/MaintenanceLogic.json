{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cancelSchedule",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "checkCooldownEnded",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMaintained",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "atBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMaintainedById",
      "inputs": [
        {
          "name": "candidateId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "atBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMaintainedInBlockRange",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "fromBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "toBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyMaintained",
      "inputs": [
        {
          "name": "addrList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        },
        {
          "name": "atBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyMaintainedById",
      "inputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "atBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyMaintainedInBlockRange",
      "inputs": [
        {
          "name": "addrList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        },
        {
          "name": "fromBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "toBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyMaintainedInBlockRangeById",
      "inputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "fromBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "toBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkScheduled",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "cooldownSecsToMaintain",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchedule",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IMaintenance.Schedule",
          "components": [
            {
              "name": "from",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "to",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "lastUpdatedBlock",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "requestTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "validatorContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "minMaintenanceDurationInBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxMaintenanceDurationInBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "minOffsetToStartSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxOffsetToStartSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cooldownSecsToMaintain_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "profileContract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "maxMaintenanceDurationInBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxOffsetToStartSchedule",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxSchedule",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "minMaintenanceDurationInBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "minOffsetToStartSchedule",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "schedule",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "startedAtBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "endedAtBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMaintenanceConfig",
      "inputs": [
        {
          "name": "minMaintenanceDurationInBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxMaintenanceDurationInBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "minOffsetToStartSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxOffsetToStartSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cooldownSecsToMaintain_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "totalSchedule",
      "inputs": [],
      "outputs": [
        {
          "name": "count",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaintenanceConfigUpdated",
      "inputs": [
        {
          "name": "minMaintenanceDurationInBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "maxMaintenanceDurationInBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "minOffsetToStartSchedule",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "maxOffsetToStartSchedule",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "maxSchedules",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "cooldownSecsToMaintain",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaintenanceScheduleCancelled",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaintenanceScheduled",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct IMaintenance.Schedule",
          "components": [
            {
              "name": "from",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "to",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "lastUpdatedBlock",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "requestTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyOnMaintenance",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAlreadyScheduled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrCooldownTimeNotYetEnded",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrEndBlockOutOfRange",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidMaintenanceDuration",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidMaintenanceDurationConfig",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidOffsetToStartScheduleConfigs",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrStartBlockOutOfRange",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrTotalOfSchedulesExceeded",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnexistedSchedule",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    }
  ],
  "address": "0xaad5541eb4e5de1f353bcc8eabd124fc42107507",
  "args": "0x",
  "ast": {
    "absolutePath": "contracts/ronin/Maintenance.sol",
    "id": 20075,
    "exportedSymbols": {
      "Address": [
        150935
      ],
      "ContractType": [
        38245
      ],
      "EnumFlags": [
        10971
      ],
      "ErrUnauthorized": [
        38094
      ],
      "ErrUnexpectedInternalCall": [
        38109
      ],
      "HasContracts": [
        3544
      ],
      "HasProxyAdmin": [
        3589
      ],
      "HasValidatorDeprecated": [
        38264
      ],
      "ICandidateManager": [
        9926
      ],
      "ICandidateManagerCallback": [
        10007
      ],
      "ICoinbaseExecution": [
        10175
      ],
      "ICommonInfo": [
        10394
      ],
      "IEmergencyExit": [
        10268
      ],
      "IHasContracts": [
        8655
      ],
      "IJailingInfo": [
        10486
      ],
      "IMaintenance": [
        7125
      ],
      "IProfile": [
        7346
      ],
      "IRoninValidatorSet": [
        10289
      ],
      "ISlashingExecution": [
        10339
      ],
      "ITimingInfo": [
        10545
      ],
      "IValidatorInfoV2": [
        10633
      ],
      "IdentityGuard": [
        38494
      ],
      "Initializable": [
        150298
      ],
      "Maintenance": [
        20074
      ],
      "Math": [
        11550
      ],
      "RoleAccess": [
        38508
      ],
      "TConsensus": [
        37964
      ],
      "TConsensusEq": [
        38016
      ],
      "TPoolId": [
        37962
      ],
      "TPoolIdEq": [
        37994
      ]
    },
    "nodeType": "SourceUnit",
    "src": "33:12452:109",
    "nodes": [
      {
        "id": 19064,
        "nodeType": "PragmaDirective",
        "src": "33:23:109",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 19065,
        "nodeType": "ImportDirective",
        "src": "58:63:109",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20075,
        "sourceUnit": 150299,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19066,
        "nodeType": "ImportDirective",
        "src": "122:40:109",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IMaintenance.sol",
        "file": "../interfaces/IMaintenance.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20075,
        "sourceUnit": 7126,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19067,
        "nodeType": "ImportDirective",
        "src": "163:36:109",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IProfile.sol",
        "file": "../interfaces/IProfile.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20075,
        "sourceUnit": 7347,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19068,
        "nodeType": "ImportDirective",
        "src": "200:56:109",
        "nodes": [],
        "absolutePath": "contracts/interfaces/validator/IRoninValidatorSet.sol",
        "file": "../interfaces/validator/IRoninValidatorSet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20075,
        "sourceUnit": 10290,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19069,
        "nodeType": "ImportDirective",
        "src": "257:52:109",
        "nodes": [],
        "absolutePath": "contracts/extensions/collections/HasContracts.sol",
        "file": "../extensions/collections/HasContracts.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20075,
        "sourceUnit": 3545,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19070,
        "nodeType": "ImportDirective",
        "src": "310:31:109",
        "nodes": [],
        "absolutePath": "contracts/libraries/Math.sol",
        "file": "../libraries/Math.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20075,
        "sourceUnit": 11551,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19072,
        "nodeType": "ImportDirective",
        "src": "342:70:109",
        "nodes": [],
        "absolutePath": "contracts/utils/DeprecatedSlots.sol",
        "file": "../utils/DeprecatedSlots.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20075,
        "sourceUnit": 38285,
        "symbolAliases": [
          {
            "foreign": {
              "id": 19071,
              "name": "HasValidatorDeprecated",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 38264,
              "src": "351:22:109",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 19075,
        "nodeType": "ImportDirective",
        "src": "413:72:109",
        "nodes": [],
        "absolutePath": "contracts/utils/CommonErrors.sol",
        "file": "../utils/CommonErrors.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20075,
        "sourceUnit": 38227,
        "symbolAliases": [
          {
            "foreign": {
              "id": 19073,
              "name": "ErrUnauthorized",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 38094,
              "src": "422:15:109",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 19074,
              "name": "RoleAccess",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 38508,
              "src": "439:10:109",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 20074,
        "nodeType": "ContractDefinition",
        "src": "487:11997:109",
        "nodes": [
          {
            "id": 19086,
            "nodeType": "UsingForDirective",
            "src": "581:23:109",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 19084,
              "name": "Math",
              "nameLocations": [
                "587:4:109"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 11550,
              "src": "587:4:109"
            },
            "typeName": {
              "id": 19085,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "596:7:109",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 19092,
            "nodeType": "VariableDeclaration",
            "src": "670:47:109",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19087,
              "nodeType": "StructuredDocumentation",
              "src": "608:59:109",
              "text": "@dev Mapping from candidate id => maintenance schedule."
            },
            "mutability": "mutable",
            "name": "_schedule",
            "nameLocation": "708:9:109",
            "scope": 20074,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Schedule_$6906_storage_$",
              "typeString": "mapping(address => struct IMaintenance.Schedule)"
            },
            "typeName": {
              "id": 19091,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 19088,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "678:7:109",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "670:28:109",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Schedule_$6906_storage_$",
                "typeString": "mapping(address => struct IMaintenance.Schedule)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 19090,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 19089,
                  "name": "Schedule",
                  "nameLocations": [
                    "689:8:109"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 6906,
                  "src": "689:8:109"
                },
                "referencedDeclaration": 6906,
                "src": "689:8:109",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                  "typeString": "struct IMaintenance.Schedule"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19095,
            "nodeType": "VariableDeclaration",
            "src": "776:47:109",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19093,
              "nodeType": "StructuredDocumentation",
              "src": "722:51:109",
              "text": "@dev The min duration to maintenance in blocks."
            },
            "mutability": "mutable",
            "name": "_minMaintenanceDurationInBlock",
            "nameLocation": "793:30:109",
            "scope": 20074,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 19094,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "776:7:109",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19098,
            "nodeType": "VariableDeclaration",
            "src": "881:47:109",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19096,
              "nodeType": "StructuredDocumentation",
              "src": "827:51:109",
              "text": "@dev The max duration to maintenance in blocks."
            },
            "mutability": "mutable",
            "name": "_maxMaintenanceDurationInBlock",
            "nameLocation": "898:30:109",
            "scope": 20074,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 19097,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "881:7:109",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19101,
            "nodeType": "VariableDeclaration",
            "src": "1007:42:109",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19099,
              "nodeType": "StructuredDocumentation",
              "src": "932:72:109",
              "text": "@dev The offset to the min block number that the schedule can start."
            },
            "mutability": "mutable",
            "name": "_minOffsetToStartSchedule",
            "nameLocation": "1024:25:109",
            "scope": 20074,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 19100,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1007:7:109",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19104,
            "nodeType": "VariableDeclaration",
            "src": "1128:42:109",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19102,
              "nodeType": "StructuredDocumentation",
              "src": "1053:72:109",
              "text": "@dev The offset to the max block number that the schedule can start."
            },
            "mutability": "mutable",
            "name": "_maxOffsetToStartSchedule",
            "nameLocation": "1145:25:109",
            "scope": 20074,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 19103,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1128:7:109",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19107,
            "nodeType": "VariableDeclaration",
            "src": "1227:29:109",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19105,
              "nodeType": "StructuredDocumentation",
              "src": "1174:50:109",
              "text": "@dev The max number of scheduled maintenances."
            },
            "mutability": "mutable",
            "name": "_maxSchedule",
            "nameLocation": "1244:12:109",
            "scope": 20074,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 19106,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1227:7:109",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19110,
            "nodeType": "VariableDeclaration",
            "src": "1314:40:109",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19108,
              "nodeType": "StructuredDocumentation",
              "src": "1260:51:109",
              "text": "@dev The cooldown time to request new schedule."
            },
            "mutability": "mutable",
            "name": "_cooldownSecsToMaintain",
            "nameLocation": "1331:23:109",
            "scope": 20074,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 19109,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1314:7:109",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19117,
            "nodeType": "FunctionDefinition",
            "src": "1359:47:109",
            "nodes": [],
            "body": {
              "id": 19116,
              "nodeType": "Block",
              "src": "1373:33:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 19113,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 150297,
                      "src": "1379:20:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 19114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1379:22:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19115,
                  "nodeType": "ExpressionStatement",
                  "src": "1379:22:109"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 19111,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1370:2:109"
            },
            "returnParameters": {
              "id": 19112,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1373:0:109"
            },
            "scope": 20074,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 19153,
            "nodeType": "FunctionDefinition",
            "src": "1466:597:109",
            "nodes": [],
            "body": {
              "id": 19152,
              "nodeType": "Block",
              "src": "1771:292:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 19138,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "1790:12:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 19139,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1803:9:109",
                        "memberName": "VALIDATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38237,
                        "src": "1790:22:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 19140,
                        "name": "validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19120,
                        "src": "1814:17:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19137,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1777:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 19141,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1777:55:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19142,
                  "nodeType": "ExpressionStatement",
                  "src": "1777:55:109"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19144,
                        "name": "minMaintenanceDurationInBlock_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19122,
                        "src": "1867:30:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19145,
                        "name": "maxMaintenanceDurationInBlock_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19124,
                        "src": "1905:30:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19146,
                        "name": "minOffsetToStartSchedule_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19126,
                        "src": "1943:25:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19147,
                        "name": "maxOffsetToStartSchedule_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19128,
                        "src": "1976:25:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19148,
                        "name": "maxSchedule_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19130,
                        "src": "2009:12:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19149,
                        "name": "cooldownSecsToMaintain_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19132,
                        "src": "2029:23:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19143,
                      "name": "_setMaintenanceConfig",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20003,
                      "src": "1838:21:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256,uint256,uint256,uint256,uint256)"
                      }
                    },
                    "id": 19150,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1838:220:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19151,
                  "nodeType": "ExpressionStatement",
                  "src": "1838:220:109"
                }
              ]
            },
            "documentation": {
              "id": 19118,
              "nodeType": "StructuredDocumentation",
              "src": "1410:53:109",
              "text": " @dev Initializes the contract storage."
            },
            "functionSelector": "8142951a",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 19135,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19134,
                  "name": "initializer",
                  "nameLocations": [
                    "1759:11:109"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150218,
                  "src": "1759:11:109"
                },
                "nodeType": "ModifierInvocation",
                "src": "1759:11:109"
              }
            ],
            "name": "initialize",
            "nameLocation": "1475:10:109",
            "parameters": {
              "id": 19133,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19120,
                  "mutability": "mutable",
                  "name": "validatorContract",
                  "nameLocation": "1499:17:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19153,
                  "src": "1491:25:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19119,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1491:7:109",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19122,
                  "mutability": "mutable",
                  "name": "minMaintenanceDurationInBlock_",
                  "nameLocation": "1530:30:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19153,
                  "src": "1522:38:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19121,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1522:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19124,
                  "mutability": "mutable",
                  "name": "maxMaintenanceDurationInBlock_",
                  "nameLocation": "1574:30:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19153,
                  "src": "1566:38:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19123,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1566:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19126,
                  "mutability": "mutable",
                  "name": "minOffsetToStartSchedule_",
                  "nameLocation": "1618:25:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19153,
                  "src": "1610:33:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19125,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1610:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19128,
                  "mutability": "mutable",
                  "name": "maxOffsetToStartSchedule_",
                  "nameLocation": "1657:25:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19153,
                  "src": "1649:33:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19127,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1649:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19130,
                  "mutability": "mutable",
                  "name": "maxSchedule_",
                  "nameLocation": "1696:12:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19153,
                  "src": "1688:20:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19129,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1688:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19132,
                  "mutability": "mutable",
                  "name": "cooldownSecsToMaintain_",
                  "nameLocation": "1722:23:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19153,
                  "src": "1714:31:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19131,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1714:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1485:264:109"
            },
            "returnParameters": {
              "id": 19136,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1771:0:109"
            },
            "scope": 20074,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19169,
            "nodeType": "FunctionDefinition",
            "src": "2067:162:109",
            "nodes": [],
            "body": {
              "id": 19168,
              "nodeType": "Block",
              "src": "2117:112:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 19160,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2136:12:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 19161,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2149:9:109",
                        "memberName": "VALIDATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38237,
                        "src": "2136:22:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 19162,
                        "name": "______deprecatedValidator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38263,
                        "src": "2160:25:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19159,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2123:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 19163,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2123:63:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19164,
                  "nodeType": "ExpressionStatement",
                  "src": "2123:63:109"
                },
                {
                  "expression": {
                    "id": 19166,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "2192:32:109",
                    "subExpression": {
                      "id": 19165,
                      "name": "______deprecatedValidator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38263,
                      "src": "2199:25:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19167,
                  "nodeType": "ExpressionStatement",
                  "src": "2192:32:109"
                }
              ]
            },
            "functionSelector": "5cd8a76b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 19156,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2114:1:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 19157,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19155,
                  "name": "reinitializer",
                  "nameLocations": [
                    "2100:13:109"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150251,
                  "src": "2100:13:109"
                },
                "nodeType": "ModifierInvocation",
                "src": "2100:16:109"
              }
            ],
            "name": "initializeV2",
            "nameLocation": "2076:12:109",
            "parameters": {
              "id": 19154,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2088:2:109"
            },
            "returnParameters": {
              "id": 19158,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2117:0:109"
            },
            "scope": 20074,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19184,
            "nodeType": "FunctionDefinition",
            "src": "2233:137:109",
            "nodes": [],
            "body": {
              "id": 19183,
              "nodeType": "Block",
              "src": "2307:63:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 19178,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38245,
                          "src": "2326:12:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 19179,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "2339:7:109",
                        "memberName": "PROFILE",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38244,
                        "src": "2326:20:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 19180,
                        "name": "profileContract_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19171,
                        "src": "2348:16:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38245",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19177,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "2313:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38245_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 19181,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2313:52:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19182,
                  "nodeType": "ExpressionStatement",
                  "src": "2313:52:109"
                }
              ]
            },
            "functionSelector": "3101cfcb",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "33",
                    "id": 19174,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2304:1:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3_by_1",
                      "typeString": "int_const 3"
                    },
                    "value": "3"
                  }
                ],
                "id": 19175,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19173,
                  "name": "reinitializer",
                  "nameLocations": [
                    "2290:13:109"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150251,
                  "src": "2290:13:109"
                },
                "nodeType": "ModifierInvocation",
                "src": "2290:16:109"
              }
            ],
            "name": "initializeV3",
            "nameLocation": "2242:12:109",
            "parameters": {
              "id": 19172,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19171,
                  "mutability": "mutable",
                  "name": "profileContract_",
                  "nameLocation": "2263:16:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19184,
                  "src": "2255:24:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19170,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2255:7:109",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2254:26:109"
            },
            "returnParameters": {
              "id": 19176,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2307:0:109"
            },
            "scope": 20074,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19193,
            "nodeType": "FunctionDefinition",
            "src": "2416:121:109",
            "nodes": [],
            "body": {
              "id": 19192,
              "nodeType": "Block",
              "src": "2489:48:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 19190,
                    "name": "_minMaintenanceDurationInBlock",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19095,
                    "src": "2502:30:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 19189,
                  "id": 19191,
                  "nodeType": "Return",
                  "src": "2495:37:109"
                }
              ]
            },
            "baseFunctions": [
              7082
            ],
            "documentation": {
              "id": 19185,
              "nodeType": "StructuredDocumentation",
              "src": "2374:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "09e34c38",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "minMaintenanceDurationInBlock",
            "nameLocation": "2425:29:109",
            "parameters": {
              "id": 19186,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2454:2:109"
            },
            "returnParameters": {
              "id": 19189,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19188,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19193,
                  "src": "2480:7:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19187,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2480:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2479:9:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19202,
            "nodeType": "FunctionDefinition",
            "src": "2583:121:109",
            "nodes": [],
            "body": {
              "id": 19201,
              "nodeType": "Block",
              "src": "2656:48:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 19199,
                    "name": "_maxMaintenanceDurationInBlock",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19098,
                    "src": "2669:30:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 19198,
                  "id": 19200,
                  "nodeType": "Return",
                  "src": "2662:37:109"
                }
              ]
            },
            "baseFunctions": [
              7088
            ],
            "documentation": {
              "id": 19194,
              "nodeType": "StructuredDocumentation",
              "src": "2541:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "bfa89b9b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "maxMaintenanceDurationInBlock",
            "nameLocation": "2592:29:109",
            "parameters": {
              "id": 19195,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2621:2:109"
            },
            "returnParameters": {
              "id": 19198,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19197,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19202,
                  "src": "2647:7:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19196,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2647:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2646:9:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19211,
            "nodeType": "FunctionDefinition",
            "src": "2750:111:109",
            "nodes": [],
            "body": {
              "id": 19210,
              "nodeType": "Block",
              "src": "2818:43:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 19208,
                    "name": "_minOffsetToStartSchedule",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19101,
                    "src": "2831:25:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 19207,
                  "id": 19209,
                  "nodeType": "Return",
                  "src": "2824:32:109"
                }
              ]
            },
            "baseFunctions": [
              7094
            ],
            "documentation": {
              "id": 19203,
              "nodeType": "StructuredDocumentation",
              "src": "2708:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "bc1710e9",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "minOffsetToStartSchedule",
            "nameLocation": "2759:24:109",
            "parameters": {
              "id": 19204,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2783:2:109"
            },
            "returnParameters": {
              "id": 19207,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19206,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19211,
                  "src": "2809:7:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19205,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2809:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2808:9:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19220,
            "nodeType": "FunctionDefinition",
            "src": "2907:111:109",
            "nodes": [],
            "body": {
              "id": 19219,
              "nodeType": "Block",
              "src": "2975:43:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 19217,
                    "name": "_maxOffsetToStartSchedule",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19104,
                    "src": "2988:25:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 19216,
                  "id": 19218,
                  "nodeType": "Return",
                  "src": "2981:32:109"
                }
              ]
            },
            "baseFunctions": [
              7100
            ],
            "documentation": {
              "id": 19212,
              "nodeType": "StructuredDocumentation",
              "src": "2865:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "7a50802d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "maxOffsetToStartSchedule",
            "nameLocation": "2916:24:109",
            "parameters": {
              "id": 19213,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2940:2:109"
            },
            "returnParameters": {
              "id": 19216,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19215,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19220,
                  "src": "2966:7:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19214,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2966:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2965:9:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19229,
            "nodeType": "FunctionDefinition",
            "src": "3064:85:109",
            "nodes": [],
            "body": {
              "id": 19228,
              "nodeType": "Block",
              "src": "3119:30:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 19226,
                    "name": "_maxSchedule",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19107,
                    "src": "3132:12:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 19225,
                  "id": 19227,
                  "nodeType": "Return",
                  "src": "3125:19:109"
                }
              ]
            },
            "baseFunctions": [
              7106
            ],
            "documentation": {
              "id": 19221,
              "nodeType": "StructuredDocumentation",
              "src": "3022:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "ba7e57bb",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "maxSchedule",
            "nameLocation": "3073:11:109",
            "parameters": {
              "id": 19222,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3084:2:109"
            },
            "returnParameters": {
              "id": 19225,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19224,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19229,
                  "src": "3110:7:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19223,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3110:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3109:9:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19238,
            "nodeType": "FunctionDefinition",
            "src": "3195:107:109",
            "nodes": [],
            "body": {
              "id": 19237,
              "nodeType": "Block",
              "src": "3261:41:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 19235,
                    "name": "_cooldownSecsToMaintain",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19110,
                    "src": "3274:23:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 19234,
                  "id": 19236,
                  "nodeType": "Return",
                  "src": "3267:30:109"
                }
              ]
            },
            "baseFunctions": [
              7060
            ],
            "documentation": {
              "id": 19230,
              "nodeType": "StructuredDocumentation",
              "src": "3153:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "dec36284",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "cooldownSecsToMaintain",
            "nameLocation": "3204:22:109",
            "parameters": {
              "id": 19231,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3226:2:109"
            },
            "returnParameters": {
              "id": 19234,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19233,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19238,
                  "src": "3252:7:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19232,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3252:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3251:9:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19266,
            "nodeType": "FunctionDefinition",
            "src": "3348:513:109",
            "nodes": [],
            "body": {
              "id": 19265,
              "nodeType": "Block",
              "src": "3630:231:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19257,
                        "name": "minMaintenanceDurationInBlock_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19241,
                        "src": "3665:30:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19258,
                        "name": "maxMaintenanceDurationInBlock_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19243,
                        "src": "3703:30:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19259,
                        "name": "minOffsetToStartSchedule_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19245,
                        "src": "3741:25:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19260,
                        "name": "maxOffsetToStartSchedule_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19247,
                        "src": "3774:25:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19261,
                        "name": "maxSchedule_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19249,
                        "src": "3807:12:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19262,
                        "name": "cooldownSecsToMaintain_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19251,
                        "src": "3827:23:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19256,
                      "name": "_setMaintenanceConfig",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20003,
                      "src": "3636:21:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256,uint256,uint256,uint256,uint256)"
                      }
                    },
                    "id": 19263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3636:220:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19264,
                  "nodeType": "ExpressionStatement",
                  "src": "3636:220:109"
                }
              ]
            },
            "baseFunctions": [
              7076
            ],
            "documentation": {
              "id": 19239,
              "nodeType": "StructuredDocumentation",
              "src": "3306:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "c09fe460",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 19254,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19253,
                  "name": "onlyAdmin",
                  "nameLocations": [
                    "3620:9:109"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3558,
                  "src": "3620:9:109"
                },
                "nodeType": "ModifierInvocation",
                "src": "3620:9:109"
              }
            ],
            "name": "setMaintenanceConfig",
            "nameLocation": "3357:20:109",
            "parameters": {
              "id": 19252,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19241,
                  "mutability": "mutable",
                  "name": "minMaintenanceDurationInBlock_",
                  "nameLocation": "3391:30:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19266,
                  "src": "3383:38:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19240,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3383:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19243,
                  "mutability": "mutable",
                  "name": "maxMaintenanceDurationInBlock_",
                  "nameLocation": "3435:30:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19266,
                  "src": "3427:38:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19242,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3427:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19245,
                  "mutability": "mutable",
                  "name": "minOffsetToStartSchedule_",
                  "nameLocation": "3479:25:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19266,
                  "src": "3471:33:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19244,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3471:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19247,
                  "mutability": "mutable",
                  "name": "maxOffsetToStartSchedule_",
                  "nameLocation": "3518:25:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19266,
                  "src": "3510:33:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19246,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3510:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19249,
                  "mutability": "mutable",
                  "name": "maxSchedule_",
                  "nameLocation": "3557:12:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19266,
                  "src": "3549:20:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19248,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3549:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19251,
                  "mutability": "mutable",
                  "name": "cooldownSecsToMaintain_",
                  "nameLocation": "3583:23:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19266,
                  "src": "3575:31:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19250,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3575:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3377:233:109"
            },
            "returnParameters": {
              "id": 19255,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3630:0:109"
            },
            "scope": 20074,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19447,
            "nodeType": "FunctionDefinition",
            "src": "3907:1693:109",
            "nodes": [],
            "body": {
              "id": 19446,
              "nodeType": "Block",
              "src": "4015:1585:109",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    19280
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19280,
                      "mutability": "mutable",
                      "name": "validatorContract",
                      "nameLocation": "4040:17:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19446,
                      "src": "4021:36:109",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                        "typeString": "contract IRoninValidatorSet"
                      },
                      "typeName": {
                        "id": 19279,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 19278,
                          "name": "IRoninValidatorSet",
                          "nameLocations": [
                            "4021:18:109"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 10289,
                          "src": "4021:18:109"
                        },
                        "referencedDeclaration": 10289,
                        "src": "4021:18:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19287,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 19283,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38245,
                              "src": "4091:12:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 19284,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "4104:9:109",
                            "memberName": "VALIDATOR",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38237,
                            "src": "4091:22:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$38245",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$38245",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 19282,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "4079:11:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 19285,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4079:35:109",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19281,
                      "name": "IRoninValidatorSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10289,
                      "src": "4060:18:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$10289_$",
                        "typeString": "type(contract IRoninValidatorSet)"
                      }
                    },
                    "id": 19286,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4060:55:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                      "typeString": "contract IRoninValidatorSet"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4021:94:109"
                },
                {
                  "assignments": [
                    19289
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19289,
                      "mutability": "mutable",
                      "name": "candidateId",
                      "nameLocation": "4129:11:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19446,
                      "src": "4121:19:109",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 19288,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4121:7:109",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19293,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 19291,
                        "name": "consensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19270,
                        "src": "4153:13:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      ],
                      "id": 19290,
                      "name": "__css2cid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20052,
                      "src": "4143:9:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                        "typeString": "function (TConsensus) view returns (address)"
                      }
                    },
                    "id": 19292,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4143:24:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4121:46:109"
                },
                {
                  "condition": {
                    "id": 19298,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "4178:49:109",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 19296,
                          "name": "consensusAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19270,
                          "src": "4213:13:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                            "typeString": "TConsensus"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                            "typeString": "TConsensus"
                          }
                        ],
                        "expression": {
                          "id": 19294,
                          "name": "validatorContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19280,
                          "src": "4179:17:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                            "typeString": "contract IRoninValidatorSet"
                          }
                        },
                        "id": 19295,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4197:15:109",
                        "memberName": "isBlockProducer",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10614,
                        "src": "4179:33:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_bool_$",
                          "typeString": "function (TConsensus) view external returns (bool)"
                        }
                      },
                      "id": 19297,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4179:48:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19306,
                  "nodeType": "IfStatement",
                  "src": "4174:113:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 19300,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4252:3:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 19301,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4256:3:109",
                          "memberName": "sig",
                          "nodeType": "MemberAccess",
                          "src": "4252:7:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        {
                          "expression": {
                            "id": 19302,
                            "name": "RoleAccess",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38508,
                            "src": "4261:10:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RoleAccess_$38508_$",
                              "typeString": "type(enum RoleAccess)"
                            }
                          },
                          "id": 19303,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "4272:14:109",
                          "memberName": "BLOCK_PRODUCER",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 38504,
                          "src": "4261:25:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RoleAccess_$38508",
                            "typeString": "enum RoleAccess"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          {
                            "typeIdentifier": "t_enum$_RoleAccess_$38508",
                            "typeString": "enum RoleAccess"
                          }
                        ],
                        "id": 19299,
                        "name": "ErrUnauthorized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38094,
                        "src": "4236:15:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_bytes4_$_t_enum$_RoleAccess_$38508_$returns$__$",
                          "typeString": "function (bytes4,enum RoleAccess) pure"
                        }
                      },
                      "id": 19304,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4236:51:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19305,
                    "nodeType": "RevertStatement",
                    "src": "4229:58:109"
                  }
                },
                {
                  "condition": {
                    "id": 19313,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "4297:62:109",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 19309,
                          "name": "consensusAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19270,
                          "src": "4333:13:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                            "typeString": "TConsensus"
                          }
                        },
                        {
                          "expression": {
                            "id": 19310,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4348:3:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 19311,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4352:6:109",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "4348:10:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                            "typeString": "TConsensus"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 19307,
                          "name": "validatorContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19280,
                          "src": "4298:17:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                            "typeString": "contract IRoninValidatorSet"
                          }
                        },
                        "id": 19308,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4316:16:109",
                        "memberName": "isCandidateAdmin",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 9915,
                        "src": "4298:34:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_userDefinedValueType$_TConsensus_$37964_$_t_address_$returns$_t_bool_$",
                          "typeString": "function (TConsensus,address) view external returns (bool)"
                        }
                      },
                      "id": 19312,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4298:61:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19321,
                  "nodeType": "IfStatement",
                  "src": "4293:133:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 19315,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4390:3:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 19316,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4394:3:109",
                          "memberName": "sig",
                          "nodeType": "MemberAccess",
                          "src": "4390:7:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        {
                          "expression": {
                            "id": 19317,
                            "name": "RoleAccess",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38508,
                            "src": "4399:10:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RoleAccess_$38508_$",
                              "typeString": "type(enum RoleAccess)"
                            }
                          },
                          "id": 19318,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "4410:15:109",
                          "memberName": "CANDIDATE_ADMIN",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 38501,
                          "src": "4399:26:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RoleAccess_$38508",
                            "typeString": "enum RoleAccess"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          {
                            "typeIdentifier": "t_enum$_RoleAccess_$38508",
                            "typeString": "enum RoleAccess"
                          }
                        ],
                        "id": 19314,
                        "name": "ErrUnauthorized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 38094,
                        "src": "4374:15:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_bytes4_$_t_enum$_RoleAccess_$38508_$returns$__$",
                          "typeString": "function (bytes4,enum RoleAccess) pure"
                        }
                      },
                      "id": 19319,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4374:52:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19320,
                    "nodeType": "RevertStatement",
                    "src": "4367:59:109"
                  }
                },
                {
                  "condition": {
                    "arguments": [
                      {
                        "id": 19323,
                        "name": "candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19289,
                        "src": "4456:11:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19322,
                      "name": "_checkScheduledById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19904,
                      "src": "4436:19:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 19324,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4436:32:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19328,
                  "nodeType": "IfStatement",
                  "src": "4432:66:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19325,
                        "name": "ErrAlreadyScheduled",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6870,
                        "src": "4477:19:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19326,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4477:21:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19327,
                    "nodeType": "RevertStatement",
                    "src": "4470:28:109"
                  }
                },
                {
                  "condition": {
                    "id": 19332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "4508:37:109",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 19330,
                          "name": "candidateId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19289,
                          "src": "4533:11:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 19329,
                        "name": "_checkCooldownEndedById",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19939,
                        "src": "4509:23:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                          "typeString": "function (address) view returns (bool)"
                        }
                      },
                      "id": 19331,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4509:36:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19336,
                  "nodeType": "IfStatement",
                  "src": "4504:78:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19333,
                        "name": "ErrCooldownTimeNotYetEnded",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6885,
                        "src": "4554:26:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19334,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4554:28:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19335,
                    "nodeType": "RevertStatement",
                    "src": "4547:35:109"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19340,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19337,
                        "name": "totalSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19785,
                        "src": "4592:13:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 19338,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4592:15:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "id": 19339,
                      "name": "_maxSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19107,
                      "src": "4611:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4592:31:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19344,
                  "nodeType": "IfStatement",
                  "src": "4588:73:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19341,
                        "name": "ErrTotalOfSchedulesExceeded",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6888,
                        "src": "4632:27:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19342,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4632:29:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19343,
                    "nodeType": "RevertStatement",
                    "src": "4625:36:109"
                  }
                },
                {
                  "condition": {
                    "id": 19356,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "4671:107:109",
                    "subExpression": {
                      "arguments": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 19350,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 19347,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "4695:5:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 19348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4701:6:109",
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "src": "4695:12:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 19349,
                            "name": "_minOffsetToStartSchedule",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19101,
                            "src": "4710:25:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4695:40:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 19354,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 19351,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "4737:5:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 19352,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4743:6:109",
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "src": "4737:12:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 19353,
                            "name": "_maxOffsetToStartSchedule",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19104,
                            "src": "4752:25:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4737:40:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 19345,
                          "name": "startedAtBlock",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19272,
                          "src": "4672:14:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 19346,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4687:7:109",
                        "memberName": "inRange",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11466,
                        "src": "4672:22:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$attached_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256,uint256) pure returns (bool)"
                        }
                      },
                      "id": 19355,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4672:106:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19361,
                  "nodeType": "IfStatement",
                  "src": "4667:160:109",
                  "trueBody": {
                    "id": 19360,
                    "nodeType": "Block",
                    "src": "4780:47:109",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 19357,
                            "name": "ErrStartBlockOutOfRange",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6879,
                            "src": "4795:23:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 19358,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4795:25:109",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 19359,
                        "nodeType": "RevertStatement",
                        "src": "4788:32:109"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19364,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 19362,
                      "name": "startedAtBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19272,
                      "src": "4836:14:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "id": 19363,
                      "name": "endedAtBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19274,
                      "src": "4854:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4836:30:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19368,
                  "nodeType": "IfStatement",
                  "src": "4832:68:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19365,
                        "name": "ErrStartBlockOutOfRange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6879,
                        "src": "4875:23:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19366,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4875:25:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19367,
                    "nodeType": "RevertStatement",
                    "src": "4868:32:109"
                  }
                },
                {
                  "assignments": [
                    19370
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19370,
                      "mutability": "mutable",
                      "name": "maintenanceElapsed",
                      "nameLocation": "4915:18:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19446,
                      "src": "4907:26:109",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 19369,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4907:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19376,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19375,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 19373,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 19371,
                        "name": "endedAtBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19274,
                        "src": "4936:12:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "id": 19372,
                        "name": "startedAtBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19272,
                        "src": "4951:14:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4936:29:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "hexValue": "31",
                      "id": 19374,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4968:1:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "4936:33:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4907:62:109"
                },
                {
                  "condition": {
                    "id": 19382,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "4980:91:109",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 19379,
                          "name": "_minMaintenanceDurationInBlock",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19095,
                          "src": "5008:30:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 19380,
                          "name": "_maxMaintenanceDurationInBlock",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19098,
                          "src": "5040:30:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 19377,
                          "name": "maintenanceElapsed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19370,
                          "src": "4981:18:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 19378,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5000:7:109",
                        "memberName": "inRange",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11466,
                        "src": "4981:26:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$attached_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256,uint256) pure returns (bool)"
                        }
                      },
                      "id": 19381,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4981:90:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19387,
                  "nodeType": "IfStatement",
                  "src": "4976:150:109",
                  "trueBody": {
                    "id": 19386,
                    "nodeType": "Block",
                    "src": "5073:53:109",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 19383,
                            "name": "ErrInvalidMaintenanceDuration",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6891,
                            "src": "5088:29:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 19384,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5088:31:109",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 19385,
                        "nodeType": "RevertStatement",
                        "src": "5081:38:109"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "id": 19394,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "5135:52:109",
                    "subExpression": {
                      "arguments": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 19392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 19390,
                            "name": "startedAtBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19272,
                            "src": "5168:14:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "hexValue": "31",
                            "id": 19391,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5185:1:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "5168:18:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 19388,
                          "name": "validatorContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19280,
                          "src": "5136:17:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                            "typeString": "contract IRoninValidatorSet"
                          }
                        },
                        "id": 19389,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5154:13:109",
                        "memberName": "epochEndingAt",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10516,
                        "src": "5136:31:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_bool_$",
                          "typeString": "function (uint256) view external returns (bool)"
                        }
                      },
                      "id": 19393,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5136:51:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19398,
                  "nodeType": "IfStatement",
                  "src": "5131:90:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19395,
                        "name": "ErrStartBlockOutOfRange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6879,
                        "src": "5196:23:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19396,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5196:25:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19397,
                    "nodeType": "RevertStatement",
                    "src": "5189:32:109"
                  }
                },
                {
                  "condition": {
                    "id": 19403,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "5231:46:109",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 19401,
                          "name": "endedAtBlock",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19274,
                          "src": "5264:12:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 19399,
                          "name": "validatorContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19280,
                          "src": "5232:17:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                            "typeString": "contract IRoninValidatorSet"
                          }
                        },
                        "id": 19400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5250:13:109",
                        "memberName": "epochEndingAt",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10516,
                        "src": "5232:31:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_bool_$",
                          "typeString": "function (uint256) view external returns (bool)"
                        }
                      },
                      "id": 19402,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5232:45:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19407,
                  "nodeType": "IfStatement",
                  "src": "5227:82:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19404,
                        "name": "ErrEndBlockOutOfRange",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6876,
                        "src": "5286:21:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19405,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5286:23:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19406,
                    "nodeType": "RevertStatement",
                    "src": "5279:30:109"
                  }
                },
                {
                  "assignments": [
                    19410
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19410,
                      "mutability": "mutable",
                      "name": "_sSchedule",
                      "nameLocation": "5333:10:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19446,
                      "src": "5316:27:109",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                        "typeString": "struct IMaintenance.Schedule"
                      },
                      "typeName": {
                        "id": 19409,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 19408,
                          "name": "Schedule",
                          "nameLocations": [
                            "5316:8:109"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6906,
                          "src": "5316:8:109"
                        },
                        "referencedDeclaration": 6906,
                        "src": "5316:8:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19414,
                  "initialValue": {
                    "baseExpression": {
                      "id": 19411,
                      "name": "_schedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19092,
                      "src": "5346:9:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Schedule_$6906_storage_$",
                        "typeString": "mapping(address => struct IMaintenance.Schedule storage ref)"
                      }
                    },
                    "id": 19413,
                    "indexExpression": {
                      "id": 19412,
                      "name": "candidateId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19289,
                      "src": "5356:11:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5346:22:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Schedule_$6906_storage",
                      "typeString": "struct IMaintenance.Schedule storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5316:52:109"
                },
                {
                  "expression": {
                    "id": 19419,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19415,
                        "name": "_sSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19410,
                        "src": "5374:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule storage pointer"
                        }
                      },
                      "id": 19417,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "5385:4:109",
                      "memberName": "from",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6899,
                      "src": "5374:15:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 19418,
                      "name": "startedAtBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19272,
                      "src": "5392:14:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5374:32:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19420,
                  "nodeType": "ExpressionStatement",
                  "src": "5374:32:109"
                },
                {
                  "expression": {
                    "id": 19425,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19421,
                        "name": "_sSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19410,
                        "src": "5412:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule storage pointer"
                        }
                      },
                      "id": 19423,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "5423:2:109",
                      "memberName": "to",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6901,
                      "src": "5412:13:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 19424,
                      "name": "endedAtBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19274,
                      "src": "5428:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5412:28:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19426,
                  "nodeType": "ExpressionStatement",
                  "src": "5412:28:109"
                },
                {
                  "expression": {
                    "id": 19432,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19427,
                        "name": "_sSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19410,
                        "src": "5446:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule storage pointer"
                        }
                      },
                      "id": 19429,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "5457:16:109",
                      "memberName": "lastUpdatedBlock",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6903,
                      "src": "5446:27:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 19430,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "5476:5:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 19431,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5482:6:109",
                      "memberName": "number",
                      "nodeType": "MemberAccess",
                      "src": "5476:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5446:42:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19433,
                  "nodeType": "ExpressionStatement",
                  "src": "5446:42:109"
                },
                {
                  "expression": {
                    "id": 19439,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19434,
                        "name": "_sSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19410,
                        "src": "5494:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule storage pointer"
                        }
                      },
                      "id": 19436,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "5505:16:109",
                      "memberName": "requestTimestamp",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6905,
                      "src": "5494:27:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 19437,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "5524:5:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 19438,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5530:9:109",
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "5524:15:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5494:45:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19440,
                  "nodeType": "ExpressionStatement",
                  "src": "5494:45:109"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 19442,
                        "name": "candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19289,
                        "src": "5571:11:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19443,
                        "name": "_sSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19410,
                        "src": "5584:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule storage pointer"
                        }
                      ],
                      "id": 19441,
                      "name": "MaintenanceScheduled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6914,
                      "src": "5550:20:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_struct$_Schedule_$6906_memory_ptr_$returns$__$",
                        "typeString": "function (address,struct IMaintenance.Schedule memory)"
                      }
                    },
                    "id": 19444,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5550:45:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19445,
                  "nodeType": "EmitStatement",
                  "src": "5545:50:109"
                }
              ]
            },
            "baseFunctions": [
              7117
            ],
            "documentation": {
              "id": 19267,
              "nodeType": "StructuredDocumentation",
              "src": "3865:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "2d538c2c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "schedule",
            "nameLocation": "3916:8:109",
            "overrides": {
              "id": 19276,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4006:8:109"
            },
            "parameters": {
              "id": 19275,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19270,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "3936:13:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19447,
                  "src": "3925:24:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 19269,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19268,
                      "name": "TConsensus",
                      "nameLocations": [
                        "3925:10:109"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "3925:10:109"
                    },
                    "referencedDeclaration": 37964,
                    "src": "3925:10:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19272,
                  "mutability": "mutable",
                  "name": "startedAtBlock",
                  "nameLocation": "3959:14:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19447,
                  "src": "3951:22:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19271,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3951:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19274,
                  "mutability": "mutable",
                  "name": "endedAtBlock",
                  "nameLocation": "3983:12:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19447,
                  "src": "3975:20:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19273,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3975:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3924:72:109"
            },
            "returnParameters": {
              "id": 19277,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4015:0:109"
            },
            "scope": 20074,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19526,
            "nodeType": "FunctionDefinition",
            "src": "5646:690:109",
            "nodes": [],
            "body": {
              "id": 19525,
              "nodeType": "Block",
              "src": "5714:622:109",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "id": 19466,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "5724:100:109",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 19462,
                          "name": "consensusAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19451,
                          "src": "5798:13:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                            "typeString": "TConsensus"
                          }
                        },
                        {
                          "expression": {
                            "id": 19463,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "5813:3:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 19464,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "5817:6:109",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "5813:10:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                            "typeString": "TConsensus"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 19457,
                                    "name": "ContractType",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 38245,
                                    "src": "5756:12:109",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                      "typeString": "type(enum ContractType)"
                                    }
                                  },
                                  "id": 19458,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberLocation": "5769:9:109",
                                  "memberName": "VALIDATOR",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 38237,
                                  "src": "5756:22:109",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_ContractType_$38245",
                                    "typeString": "enum ContractType"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_enum$_ContractType_$38245",
                                    "typeString": "enum ContractType"
                                  }
                                ],
                                "id": 19456,
                                "name": "getContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3484,
                                "src": "5744:11:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                  "typeString": "function (enum ContractType) view returns (address)"
                                }
                              },
                              "id": 19459,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5744:35:109",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 19455,
                            "name": "IRoninValidatorSet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10289,
                            "src": "5725:18:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$10289_$",
                              "typeString": "type(contract IRoninValidatorSet)"
                            }
                          },
                          "id": 19460,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5725:55:109",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                            "typeString": "contract IRoninValidatorSet"
                          }
                        },
                        "id": 19461,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5781:16:109",
                        "memberName": "isCandidateAdmin",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 9915,
                        "src": "5725:72:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_userDefinedValueType$_TConsensus_$37964_$_t_address_$returns$_t_bool_$",
                          "typeString": "function (TConsensus,address) view external returns (bool)"
                        }
                      },
                      "id": 19465,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5725:99:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19475,
                  "nodeType": "IfStatement",
                  "src": "5720:180:109",
                  "trueBody": {
                    "id": 19474,
                    "nodeType": "Block",
                    "src": "5826:74:109",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 19468,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "5857:3:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 19469,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5861:3:109",
                              "memberName": "sig",
                              "nodeType": "MemberAccess",
                              "src": "5857:7:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            {
                              "expression": {
                                "id": 19470,
                                "name": "RoleAccess",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 38508,
                                "src": "5866:10:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_RoleAccess_$38508_$",
                                  "typeString": "type(enum RoleAccess)"
                                }
                              },
                              "id": 19471,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "5877:15:109",
                              "memberName": "CANDIDATE_ADMIN",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 38501,
                              "src": "5866:26:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_RoleAccess_$38508",
                                "typeString": "enum RoleAccess"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              },
                              {
                                "typeIdentifier": "t_enum$_RoleAccess_$38508",
                                "typeString": "enum RoleAccess"
                              }
                            ],
                            "id": 19467,
                            "name": "ErrUnauthorized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38094,
                            "src": "5841:15:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_bytes4_$_t_enum$_RoleAccess_$38508_$returns$__$",
                              "typeString": "function (bytes4,enum RoleAccess) pure"
                            }
                          },
                          "id": 19472,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5841:52:109",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 19473,
                        "nodeType": "RevertStatement",
                        "src": "5834:59:109"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    19477
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19477,
                      "mutability": "mutable",
                      "name": "candidateId",
                      "nameLocation": "5914:11:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19525,
                      "src": "5906:19:109",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 19476,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5906:7:109",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19481,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 19479,
                        "name": "consensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19451,
                        "src": "5938:13:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      ],
                      "id": 19478,
                      "name": "__css2cid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20052,
                      "src": "5928:9:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                        "typeString": "function (TConsensus) view returns (address)"
                      }
                    },
                    "id": 19480,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5928:24:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5906:46:109"
                },
                {
                  "condition": {
                    "id": 19485,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "5963:33:109",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 19483,
                          "name": "candidateId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19477,
                          "src": "5984:11:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 19482,
                        "name": "_checkScheduledById",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19904,
                        "src": "5964:19:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                          "typeString": "function (address) view returns (bool)"
                        }
                      },
                      "id": 19484,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5964:32:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19489,
                  "nodeType": "IfStatement",
                  "src": "5959:68:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19486,
                        "name": "ErrUnexistedSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6873,
                        "src": "6005:20:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19487,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6005:22:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19488,
                    "nodeType": "RevertStatement",
                    "src": "5998:29:109"
                  }
                },
                {
                  "condition": {
                    "arguments": [
                      {
                        "id": 19491,
                        "name": "candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19477,
                        "src": "6058:11:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 19492,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "6071:5:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 19493,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "6077:6:109",
                        "memberName": "number",
                        "nodeType": "MemberAccess",
                        "src": "6071:12:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19490,
                      "name": "_checkMaintainedById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19848,
                      "src": "6037:20:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) view returns (bool)"
                      }
                    },
                    "id": 19494,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6037:47:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19498,
                  "nodeType": "IfStatement",
                  "src": "6033:85:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19495,
                        "name": "ErrAlreadyOnMaintenance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6882,
                        "src": "6093:23:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19496,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6093:25:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19497,
                    "nodeType": "RevertStatement",
                    "src": "6086:32:109"
                  }
                },
                {
                  "assignments": [
                    19501
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19501,
                      "mutability": "mutable",
                      "name": "_sSchedule",
                      "nameLocation": "6142:10:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19525,
                      "src": "6125:27:109",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                        "typeString": "struct IMaintenance.Schedule"
                      },
                      "typeName": {
                        "id": 19500,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 19499,
                          "name": "Schedule",
                          "nameLocations": [
                            "6125:8:109"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6906,
                          "src": "6125:8:109"
                        },
                        "referencedDeclaration": 6906,
                        "src": "6125:8:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19505,
                  "initialValue": {
                    "baseExpression": {
                      "id": 19502,
                      "name": "_schedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19092,
                      "src": "6155:9:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Schedule_$6906_storage_$",
                        "typeString": "mapping(address => struct IMaintenance.Schedule storage ref)"
                      }
                    },
                    "id": 19504,
                    "indexExpression": {
                      "id": 19503,
                      "name": "candidateId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19477,
                      "src": "6165:11:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6155:22:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Schedule_$6906_storage",
                      "typeString": "struct IMaintenance.Schedule storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6125:52:109"
                },
                {
                  "expression": {
                    "id": 19508,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "6183:22:109",
                    "subExpression": {
                      "expression": {
                        "id": 19506,
                        "name": "_sSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19501,
                        "src": "6190:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule storage pointer"
                        }
                      },
                      "id": 19507,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "6201:4:109",
                      "memberName": "from",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6899,
                      "src": "6190:15:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19509,
                  "nodeType": "ExpressionStatement",
                  "src": "6183:22:109"
                },
                {
                  "expression": {
                    "id": 19512,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "6211:20:109",
                    "subExpression": {
                      "expression": {
                        "id": 19510,
                        "name": "_sSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19501,
                        "src": "6218:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule storage pointer"
                        }
                      },
                      "id": 19511,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "6229:2:109",
                      "memberName": "to",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6901,
                      "src": "6218:13:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19513,
                  "nodeType": "ExpressionStatement",
                  "src": "6211:20:109"
                },
                {
                  "expression": {
                    "id": 19519,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19514,
                        "name": "_sSchedule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19501,
                        "src": "6237:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule storage pointer"
                        }
                      },
                      "id": 19516,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "6248:16:109",
                      "memberName": "lastUpdatedBlock",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6903,
                      "src": "6237:27:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 19517,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "6267:5:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 19518,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6273:6:109",
                      "memberName": "number",
                      "nodeType": "MemberAccess",
                      "src": "6267:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6237:42:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19520,
                  "nodeType": "ExpressionStatement",
                  "src": "6237:42:109"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 19522,
                        "name": "candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19477,
                        "src": "6319:11:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19521,
                      "name": "MaintenanceScheduleCancelled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6919,
                      "src": "6290:28:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 19523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6290:41:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19524,
                  "nodeType": "EmitStatement",
                  "src": "6285:46:109"
                }
              ]
            },
            "baseFunctions": [
              7124
            ],
            "documentation": {
              "id": 19448,
              "nodeType": "StructuredDocumentation",
              "src": "5604:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "f0caaafb",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "cancelSchedule",
            "nameLocation": "5655:14:109",
            "overrides": {
              "id": 19453,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5705:8:109"
            },
            "parameters": {
              "id": 19452,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19451,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "5681:13:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19526,
                  "src": "5670:24:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 19450,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19449,
                      "name": "TConsensus",
                      "nameLocations": [
                        "5670:10:109"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "5670:10:109"
                    },
                    "referencedDeclaration": 37964,
                    "src": "5670:10:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5669:26:109"
            },
            "returnParameters": {
              "id": 19454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5714:0:109"
            },
            "scope": 20074,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19544,
            "nodeType": "FunctionDefinition",
            "src": "6382:149:109",
            "nodes": [],
            "body": {
              "id": 19543,
              "nodeType": "Block",
              "src": "6478:53:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 19537,
                      "name": "_schedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19092,
                      "src": "6491:9:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Schedule_$6906_storage_$",
                        "typeString": "mapping(address => struct IMaintenance.Schedule storage ref)"
                      }
                    },
                    "id": 19541,
                    "indexExpression": {
                      "arguments": [
                        {
                          "id": 19539,
                          "name": "consensusAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19530,
                          "src": "6511:13:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                            "typeString": "TConsensus"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                            "typeString": "TConsensus"
                          }
                        ],
                        "id": 19538,
                        "name": "__css2cid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20052,
                        "src": "6501:9:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                          "typeString": "function (TConsensus) view returns (address)"
                        }
                      },
                      "id": 19540,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6501:24:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6491:35:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Schedule_$6906_storage",
                      "typeString": "struct IMaintenance.Schedule storage ref"
                    }
                  },
                  "functionReturnParameters": 19536,
                  "id": 19542,
                  "nodeType": "Return",
                  "src": "6484:42:109"
                }
              ]
            },
            "baseFunctions": [
              7048
            ],
            "documentation": {
              "id": 19527,
              "nodeType": "StructuredDocumentation",
              "src": "6340:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "d39fee34",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getSchedule",
            "nameLocation": "6391:11:109",
            "overrides": {
              "id": 19532,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "6443:8:109"
            },
            "parameters": {
              "id": 19531,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19530,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "6414:13:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19544,
                  "src": "6403:24:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 19529,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19528,
                      "name": "TConsensus",
                      "nameLocations": [
                        "6403:10:109"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "6403:10:109"
                    },
                    "referencedDeclaration": 37964,
                    "src": "6403:10:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6402:26:109"
            },
            "returnParameters": {
              "id": 19536,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19535,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19544,
                  "src": "6461:15:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Schedule_$6906_memory_ptr",
                    "typeString": "struct IMaintenance.Schedule"
                  },
                  "typeName": {
                    "id": 19534,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19533,
                      "name": "Schedule",
                      "nameLocations": [
                        "6461:8:109"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6906,
                      "src": "6461:8:109"
                    },
                    "referencedDeclaration": 6906,
                    "src": "6461:8:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                      "typeString": "struct IMaintenance.Schedule"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6460:17:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19573,
            "nodeType": "FunctionDefinition",
            "src": "6577:252:109",
            "nodes": [],
            "body": {
              "id": 19572,
              "nodeType": "Block",
              "src": "6714:115:109",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    19562
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19562,
                      "mutability": "mutable",
                      "name": "idList",
                      "nameLocation": "6737:6:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19572,
                      "src": "6720:23:109",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 19560,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6720:7:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 19561,
                        "nodeType": "ArrayTypeName",
                        "src": "6720:9:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19566,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 19564,
                        "name": "addrList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19549,
                        "src": "6761:8:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_calldata_ptr",
                          "typeString": "TConsensus[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_calldata_ptr",
                          "typeString": "TConsensus[] calldata"
                        }
                      ],
                      "id": 19563,
                      "name": "__css2cidBatch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20073,
                      "src": "6746:14:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                        "typeString": "function (TConsensus[] memory) view returns (address[] memory)"
                      }
                    },
                    "id": 19565,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6746:24:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6720:50:109"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19568,
                        "name": "idList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19562,
                        "src": "6808:6:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      {
                        "id": 19569,
                        "name": "atBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19551,
                        "src": "6816:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19567,
                      "name": "_checkManyMaintainedById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19637,
                      "src": "6783:24:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                        "typeString": "function (address[] memory,uint256) view returns (bool[] memory)"
                      }
                    },
                    "id": 19570,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6783:41:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                      "typeString": "bool[] memory"
                    }
                  },
                  "functionReturnParameters": 19557,
                  "id": 19571,
                  "nodeType": "Return",
                  "src": "6776:48:109"
                }
              ]
            },
            "baseFunctions": [
              6981
            ],
            "documentation": {
              "id": 19545,
              "nodeType": "StructuredDocumentation",
              "src": "6535:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "fdadda81",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkManyMaintained",
            "nameLocation": "6586:19:109",
            "overrides": {
              "id": 19553,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "6681:8:109"
            },
            "parameters": {
              "id": 19552,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19549,
                  "mutability": "mutable",
                  "name": "addrList",
                  "nameLocation": "6633:8:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19573,
                  "src": "6611:30:109",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_calldata_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19547,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 19546,
                        "name": "TConsensus",
                        "nameLocations": [
                          "6611:10:109"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 37964,
                        "src": "6611:10:109"
                      },
                      "referencedDeclaration": 37964,
                      "src": "6611:10:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 19548,
                    "nodeType": "ArrayTypeName",
                    "src": "6611:12:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19551,
                  "mutability": "mutable",
                  "name": "atBlock",
                  "nameLocation": "6655:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19573,
                  "src": "6647:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19550,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6647:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6605:61:109"
            },
            "returnParameters": {
              "id": 19557,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19556,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19573,
                  "src": "6699:13:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19554,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "6699:4:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 19555,
                    "nodeType": "ArrayTypeName",
                    "src": "6699:6:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6698:15:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19591,
            "nodeType": "FunctionDefinition",
            "src": "6833:195:109",
            "nodes": [],
            "body": {
              "id": 19590,
              "nodeType": "Block",
              "src": "6969:59:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19586,
                        "name": "idList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19576,
                        "src": "7007:6:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        }
                      },
                      {
                        "id": 19587,
                        "name": "atBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19578,
                        "src": "7015:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19585,
                      "name": "_checkManyMaintainedById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19637,
                      "src": "6982:24:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                        "typeString": "function (address[] memory,uint256) view returns (bool[] memory)"
                      }
                    },
                    "id": 19588,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6982:41:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                      "typeString": "bool[] memory"
                    }
                  },
                  "functionReturnParameters": 19584,
                  "id": 19589,
                  "nodeType": "Return",
                  "src": "6975:48:109"
                }
              ]
            },
            "baseFunctions": [
              6992
            ],
            "functionSelector": "ac57bd76",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkManyMaintainedById",
            "nameLocation": "6842:23:109",
            "overrides": {
              "id": 19580,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "6936:8:109"
            },
            "parameters": {
              "id": 19579,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19576,
                  "mutability": "mutable",
                  "name": "idList",
                  "nameLocation": "6890:6:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19591,
                  "src": "6871:25:109",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19574,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "6871:7:109",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 19575,
                    "nodeType": "ArrayTypeName",
                    "src": "6871:9:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19578,
                  "mutability": "mutable",
                  "name": "atBlock",
                  "nameLocation": "6910:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19591,
                  "src": "6902:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19577,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6902:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6865:56:109"
            },
            "returnParameters": {
              "id": 19584,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19583,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19591,
                  "src": "6954:13:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19581,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "6954:4:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 19582,
                    "nodeType": "ArrayTypeName",
                    "src": "6954:6:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6953:15:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19637,
            "nodeType": "FunctionDefinition",
            "src": "7032:331:109",
            "nodes": [],
            "body": {
              "id": 19636,
              "nodeType": "Block",
              "src": "7166:197:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 19609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 19602,
                      "name": "resList",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19600,
                      "src": "7172:7:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                        "typeString": "bool[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 19606,
                            "name": "idList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19594,
                            "src": "7193:6:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "id": 19607,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "7200:6:109",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7193:13:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 19605,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "7182:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (bool[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 19603,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "7186:4:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 19604,
                          "nodeType": "ArrayTypeName",
                          "src": "7186:6:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                            "typeString": "bool[]"
                          }
                        }
                      },
                      "id": 19608,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7182:25:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                        "typeString": "bool[] memory"
                      }
                    },
                    "src": "7172:35:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                      "typeString": "bool[] memory"
                    }
                  },
                  "id": 19610,
                  "nodeType": "ExpressionStatement",
                  "src": "7172:35:109"
                },
                {
                  "body": {
                    "id": 19634,
                    "nodeType": "Block",
                    "src": "7251:108:109",
                    "statements": [
                      {
                        "expression": {
                          "id": 19628,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 19619,
                              "name": "resList",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19600,
                              "src": "7259:7:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                "typeString": "bool[] memory"
                              }
                            },
                            "id": 19621,
                            "indexExpression": {
                              "id": 19620,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19612,
                              "src": "7267:1:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "7259:10:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 19623,
                                  "name": "idList",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 19594,
                                  "src": "7293:6:109",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                    "typeString": "address[] memory"
                                  }
                                },
                                "id": 19625,
                                "indexExpression": {
                                  "id": 19624,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 19612,
                                  "src": "7300:1:109",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7293:9:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 19626,
                                "name": "atBlock",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19596,
                                "src": "7304:7:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 19622,
                              "name": "_checkMaintainedById",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19848,
                              "src": "7272:20:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                                "typeString": "function (address,uint256) view returns (bool)"
                              }
                            },
                            "id": 19627,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7272:40:109",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "7259:53:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 19629,
                        "nodeType": "ExpressionStatement",
                        "src": "7259:53:109"
                      },
                      {
                        "id": 19633,
                        "nodeType": "UncheckedBlock",
                        "src": "7321:32:109",
                        "statements": [
                          {
                            "expression": {
                              "id": 19631,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "7341:3:109",
                              "subExpression": {
                                "id": 19630,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19612,
                                "src": "7343:1:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 19632,
                            "nodeType": "ExpressionStatement",
                            "src": "7341:3:109"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19618,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 19615,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19612,
                      "src": "7230:1:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 19616,
                        "name": "idList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19594,
                        "src": "7234:6:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 19617,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7241:6:109",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "7234:13:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7230:17:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19635,
                  "initializationExpression": {
                    "assignments": [
                      19612
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 19612,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "7223:1:109",
                        "nodeType": "VariableDeclaration",
                        "scope": 19635,
                        "src": "7218:6:109",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 19611,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7218:4:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 19614,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 19613,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7227:1:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "7218:10:109"
                  },
                  "isSimpleCounterLoop": false,
                  "nodeType": "ForStatement",
                  "src": "7213:146:109"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkManyMaintainedById",
            "nameLocation": "7041:24:109",
            "parameters": {
              "id": 19597,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19594,
                  "mutability": "mutable",
                  "name": "idList",
                  "nameLocation": "7088:6:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19637,
                  "src": "7071:23:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19592,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "7071:7:109",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 19593,
                    "nodeType": "ArrayTypeName",
                    "src": "7071:9:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19596,
                  "mutability": "mutable",
                  "name": "atBlock",
                  "nameLocation": "7108:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19637,
                  "src": "7100:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19595,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7100:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7065:54:109"
            },
            "returnParameters": {
              "id": 19601,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19600,
                  "mutability": "mutable",
                  "name": "resList",
                  "nameLocation": "7157:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19637,
                  "src": "7143:21:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19598,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "7143:4:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 19599,
                    "nodeType": "ArrayTypeName",
                    "src": "7143:6:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7142:23:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 19669,
            "nodeType": "FunctionDefinition",
            "src": "7409:310:109",
            "nodes": [],
            "body": {
              "id": 19668,
              "nodeType": "Block",
              "src": "7581:138:109",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    19657
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19657,
                      "mutability": "mutable",
                      "name": "idList",
                      "nameLocation": "7604:6:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19668,
                      "src": "7587:23:109",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 19655,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7587:7:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 19656,
                        "nodeType": "ArrayTypeName",
                        "src": "7587:9:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19661,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 19659,
                        "name": "addrList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19642,
                        "src": "7628:8:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_calldata_ptr",
                          "typeString": "TConsensus[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_calldata_ptr",
                          "typeString": "TConsensus[] calldata"
                        }
                      ],
                      "id": 19658,
                      "name": "__css2cidBatch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20073,
                      "src": "7613:14:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                        "typeString": "function (TConsensus[] memory) view returns (address[] memory)"
                      }
                    },
                    "id": 19660,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7613:24:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7587:50:109"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19663,
                        "name": "idList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19657,
                        "src": "7687:6:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      {
                        "id": 19664,
                        "name": "fromBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19644,
                        "src": "7695:9:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19665,
                        "name": "toBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19646,
                        "src": "7706:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19662,
                      "name": "_checkManyMaintainedInBlockRangeById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19739,
                      "src": "7650:36:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                        "typeString": "function (address[] memory,uint256,uint256) view returns (bool[] memory)"
                      }
                    },
                    "id": 19666,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7650:64:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                      "typeString": "bool[] memory"
                    }
                  },
                  "functionReturnParameters": 19652,
                  "id": 19667,
                  "nodeType": "Return",
                  "src": "7643:71:109"
                }
              ]
            },
            "baseFunctions": [
              7007
            ],
            "documentation": {
              "id": 19638,
              "nodeType": "StructuredDocumentation",
              "src": "7367:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "ba303755",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkManyMaintainedInBlockRange",
            "nameLocation": "7418:31:109",
            "overrides": {
              "id": 19648,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7548:8:109"
            },
            "parameters": {
              "id": 19647,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19642,
                  "mutability": "mutable",
                  "name": "addrList",
                  "nameLocation": "7477:8:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19669,
                  "src": "7455:30:109",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_calldata_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19640,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 19639,
                        "name": "TConsensus",
                        "nameLocations": [
                          "7455:10:109"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 37964,
                        "src": "7455:10:109"
                      },
                      "referencedDeclaration": 37964,
                      "src": "7455:10:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 19641,
                    "nodeType": "ArrayTypeName",
                    "src": "7455:12:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19644,
                  "mutability": "mutable",
                  "name": "fromBlock",
                  "nameLocation": "7499:9:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19669,
                  "src": "7491:17:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19643,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7491:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19646,
                  "mutability": "mutable",
                  "name": "toBlock",
                  "nameLocation": "7522:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19669,
                  "src": "7514:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19645,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7514:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7449:84:109"
            },
            "returnParameters": {
              "id": 19652,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19651,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19669,
                  "src": "7566:13:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19649,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "7566:4:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 19650,
                    "nodeType": "ArrayTypeName",
                    "src": "7566:6:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7565:15:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19690,
            "nodeType": "FunctionDefinition",
            "src": "7723:253:109",
            "nodes": [],
            "body": {
              "id": 19689,
              "nodeType": "Block",
              "src": "7894:82:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19684,
                        "name": "idList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19672,
                        "src": "7944:6:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        }
                      },
                      {
                        "id": 19685,
                        "name": "fromBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19674,
                        "src": "7952:9:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19686,
                        "name": "toBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19676,
                        "src": "7963:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19683,
                      "name": "_checkManyMaintainedInBlockRangeById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19739,
                      "src": "7907:36:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                        "typeString": "function (address[] memory,uint256,uint256) view returns (bool[] memory)"
                      }
                    },
                    "id": 19687,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7907:64:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                      "typeString": "bool[] memory"
                    }
                  },
                  "functionReturnParameters": 19682,
                  "id": 19688,
                  "nodeType": "Return",
                  "src": "7900:71:109"
                }
              ]
            },
            "baseFunctions": [
              7020
            ],
            "functionSelector": "8b042a72",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkManyMaintainedInBlockRangeById",
            "nameLocation": "7732:35:109",
            "overrides": {
              "id": 19678,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7861:8:109"
            },
            "parameters": {
              "id": 19677,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19672,
                  "mutability": "mutable",
                  "name": "idList",
                  "nameLocation": "7792:6:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19690,
                  "src": "7773:25:109",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19670,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "7773:7:109",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 19671,
                    "nodeType": "ArrayTypeName",
                    "src": "7773:9:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19674,
                  "mutability": "mutable",
                  "name": "fromBlock",
                  "nameLocation": "7812:9:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19690,
                  "src": "7804:17:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19673,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7804:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19676,
                  "mutability": "mutable",
                  "name": "toBlock",
                  "nameLocation": "7835:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19690,
                  "src": "7827:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19675,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7827:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7767:79:109"
            },
            "returnParameters": {
              "id": 19682,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19681,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19690,
                  "src": "7879:13:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19679,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "7879:4:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 19680,
                    "nodeType": "ArrayTypeName",
                    "src": "7879:6:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7878:15:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19739,
            "nodeType": "FunctionDefinition",
            "src": "7980:381:109",
            "nodes": [],
            "body": {
              "id": 19738,
              "nodeType": "Block",
              "src": "8149:212:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 19710,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 19703,
                      "name": "resList",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19701,
                      "src": "8155:7:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                        "typeString": "bool[] memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 19707,
                            "name": "idList",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19693,
                            "src": "8176:6:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "id": 19708,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8183:6:109",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "8176:13:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 19706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "8165:10:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                          "typeString": "function (uint256) pure returns (bool[] memory)"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 19704,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "8169:4:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 19705,
                          "nodeType": "ArrayTypeName",
                          "src": "8169:6:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                            "typeString": "bool[]"
                          }
                        }
                      },
                      "id": 19709,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8165:25:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                        "typeString": "bool[] memory"
                      }
                    },
                    "src": "8155:35:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                      "typeString": "bool[] memory"
                    }
                  },
                  "id": 19711,
                  "nodeType": "ExpressionStatement",
                  "src": "8155:35:109"
                },
                {
                  "body": {
                    "id": 19736,
                    "nodeType": "Block",
                    "src": "8234:123:109",
                    "statements": [
                      {
                        "expression": {
                          "id": 19730,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 19720,
                              "name": "resList",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19701,
                              "src": "8242:7:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                "typeString": "bool[] memory"
                              }
                            },
                            "id": 19722,
                            "indexExpression": {
                              "id": 19721,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19713,
                              "src": "8250:1:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "8242:10:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "baseExpression": {
                                  "id": 19724,
                                  "name": "idList",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 19693,
                                  "src": "8280:6:109",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                    "typeString": "address[] memory"
                                  }
                                },
                                "id": 19726,
                                "indexExpression": {
                                  "id": 19725,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 19713,
                                  "src": "8287:1:109",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8280:9:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 19727,
                                "name": "fromBlock",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19695,
                                "src": "8291:9:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 19728,
                                "name": "toBlock",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19697,
                                "src": "8302:7:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 19723,
                              "name": "_maintainingInBlockRange",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 20033,
                              "src": "8255:24:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                                "typeString": "function (address,uint256,uint256) view returns (bool)"
                              }
                            },
                            "id": 19729,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8255:55:109",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "8242:68:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 19731,
                        "nodeType": "ExpressionStatement",
                        "src": "8242:68:109"
                      },
                      {
                        "id": 19735,
                        "nodeType": "UncheckedBlock",
                        "src": "8319:32:109",
                        "statements": [
                          {
                            "expression": {
                              "id": 19733,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "8339:3:109",
                              "subExpression": {
                                "id": 19732,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19713,
                                "src": "8341:1:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 19734,
                            "nodeType": "ExpressionStatement",
                            "src": "8339:3:109"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19719,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 19716,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19713,
                      "src": "8213:1:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 19717,
                        "name": "idList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19693,
                        "src": "8217:6:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 19718,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8224:6:109",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "8217:13:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8213:17:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19737,
                  "initializationExpression": {
                    "assignments": [
                      19713
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 19713,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "8206:1:109",
                        "nodeType": "VariableDeclaration",
                        "scope": 19737,
                        "src": "8201:6:109",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 19712,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "8201:4:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 19715,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 19714,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8210:1:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "8201:10:109"
                  },
                  "isSimpleCounterLoop": false,
                  "nodeType": "ForStatement",
                  "src": "8196:161:109"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkManyMaintainedInBlockRangeById",
            "nameLocation": "7989:36:109",
            "parameters": {
              "id": 19698,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19693,
                  "mutability": "mutable",
                  "name": "idList",
                  "nameLocation": "8048:6:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19739,
                  "src": "8031:23:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19691,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8031:7:109",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 19692,
                    "nodeType": "ArrayTypeName",
                    "src": "8031:9:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19695,
                  "mutability": "mutable",
                  "name": "fromBlock",
                  "nameLocation": "8068:9:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19739,
                  "src": "8060:17:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19694,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8060:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19697,
                  "mutability": "mutable",
                  "name": "toBlock",
                  "nameLocation": "8091:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19739,
                  "src": "8083:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19696,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8083:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8025:77:109"
            },
            "returnParameters": {
              "id": 19702,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19701,
                  "mutability": "mutable",
                  "name": "resList",
                  "nameLocation": "8140:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19739,
                  "src": "8126:21:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19699,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "8126:4:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 19700,
                    "nodeType": "ArrayTypeName",
                    "src": "8126:6:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8125:23:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 19785,
            "nodeType": "FunctionDefinition",
            "src": "8407:352:109",
            "nodes": [],
            "body": {
              "id": 19784,
              "nodeType": "Block",
              "src": "8477:282:109",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    19750
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19750,
                      "mutability": "mutable",
                      "name": "validatorIds",
                      "nameLocation": "8500:12:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19784,
                      "src": "8483:29:109",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 19748,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8483:7:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 19749,
                        "nodeType": "ArrayTypeName",
                        "src": "8483:9:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19759,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 19753,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38245,
                                  "src": "8546:12:109",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 19754,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "8559:9:109",
                                "memberName": "VALIDATOR",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 38237,
                                "src": "8546:22:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 19752,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "8534:11:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 19755,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8534:35:109",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 19751,
                          "name": "IRoninValidatorSet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10289,
                          "src": "8515:18:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$10289_$",
                            "typeString": "type(contract IRoninValidatorSet)"
                          }
                        },
                        "id": 19756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8515:55:109",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$10289",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 19757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8571:15:109",
                      "memberName": "getValidatorIds",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10590,
                      "src": "8515:71:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                        "typeString": "function () view external returns (address[] memory)"
                      }
                    },
                    "id": 19758,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8515:73:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8483:105:109"
                },
                {
                  "id": 19783,
                  "nodeType": "UncheckedBlock",
                  "src": "8594:161:109",
                  "statements": [
                    {
                      "body": {
                        "id": 19781,
                        "nodeType": "Block",
                        "src": "8659:90:109",
                        "statements": [
                          {
                            "condition": {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "id": 19772,
                                    "name": "validatorIds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 19750,
                                    "src": "8693:12:109",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                      "typeString": "address[] memory"
                                    }
                                  },
                                  "id": 19774,
                                  "indexExpression": {
                                    "id": 19773,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 19761,
                                    "src": "8706:1:109",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "8693:15:109",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 19771,
                                "name": "_checkScheduledById",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19904,
                                "src": "8673:19:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 19775,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8673:36:109",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 19780,
                            "nodeType": "IfStatement",
                            "src": "8669:72:109",
                            "trueBody": {
                              "id": 19779,
                              "nodeType": "Block",
                              "src": "8711:30:109",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 19777,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "++",
                                    "prefix": false,
                                    "src": "8723:7:109",
                                    "subExpression": {
                                      "id": 19776,
                                      "name": "count",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 19744,
                                      "src": "8723:5:109",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 19778,
                                  "nodeType": "ExpressionStatement",
                                  "src": "8723:7:109"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 19767,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 19764,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19761,
                          "src": "8629:1:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "expression": {
                            "id": 19765,
                            "name": "validatorIds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19750,
                            "src": "8633:12:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "id": 19766,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8646:6:109",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "8633:19:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8629:23:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 19782,
                      "initializationExpression": {
                        "assignments": [
                          19761
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 19761,
                            "mutability": "mutable",
                            "name": "i",
                            "nameLocation": "8622:1:109",
                            "nodeType": "VariableDeclaration",
                            "scope": 19782,
                            "src": "8617:6:109",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 19760,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "8617:4:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 19763,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 19762,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8626:1:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8617:10:109"
                      },
                      "isSimpleCounterLoop": true,
                      "loopExpression": {
                        "expression": {
                          "id": 19769,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "8654:3:109",
                          "subExpression": {
                            "id": 19768,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19761,
                            "src": "8654:1:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 19770,
                        "nodeType": "ExpressionStatement",
                        "src": "8654:3:109"
                      },
                      "nodeType": "ForStatement",
                      "src": "8612:137:109"
                    }
                  ]
                }
              ]
            },
            "baseFunctions": [
              7054
            ],
            "documentation": {
              "id": 19740,
              "nodeType": "StructuredDocumentation",
              "src": "8365:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "84a9573b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSchedule",
            "nameLocation": "8416:13:109",
            "overrides": {
              "id": 19742,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8444:8:109"
            },
            "parameters": {
              "id": 19741,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8429:2:109"
            },
            "returnParameters": {
              "id": 19745,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19744,
                  "mutability": "mutable",
                  "name": "count",
                  "nameLocation": "8470:5:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19785,
                  "src": "8462:13:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19743,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8462:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8461:15:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 19805,
            "nodeType": "FunctionDefinition",
            "src": "8805:179:109",
            "nodes": [],
            "body": {
              "id": 19804,
              "nodeType": "Block",
              "src": "8911:73:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 19799,
                            "name": "consensusAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19789,
                            "src": "8955:13:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          ],
                          "id": 19798,
                          "name": "__css2cid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20052,
                          "src": "8945:9:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                            "typeString": "function (TConsensus) view returns (address)"
                          }
                        },
                        "id": 19800,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8945:24:109",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19801,
                        "name": "atBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19791,
                        "src": "8971:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19797,
                      "name": "_checkMaintainedById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19848,
                      "src": "8924:20:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) view returns (bool)"
                      }
                    },
                    "id": 19802,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8924:55:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 19796,
                  "id": 19803,
                  "nodeType": "Return",
                  "src": "8917:62:109"
                }
              ]
            },
            "baseFunctions": [
              6945
            ],
            "documentation": {
              "id": 19786,
              "nodeType": "StructuredDocumentation",
              "src": "8763:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "0fbeb37f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkMaintained",
            "nameLocation": "8814:15:109",
            "overrides": {
              "id": 19793,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8887:8:109"
            },
            "parameters": {
              "id": 19792,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19789,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "8841:13:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19805,
                  "src": "8830:24:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 19788,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19787,
                      "name": "TConsensus",
                      "nameLocations": [
                        "8830:10:109"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "8830:10:109"
                    },
                    "referencedDeclaration": 37964,
                    "src": "8830:10:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19791,
                  "mutability": "mutable",
                  "name": "atBlock",
                  "nameLocation": "8864:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19805,
                  "src": "8856:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19790,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8856:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8829:43:109"
            },
            "returnParameters": {
              "id": 19796,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19795,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19805,
                  "src": "8905:4:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19794,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8905:4:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8904:6:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19821,
            "nodeType": "FunctionDefinition",
            "src": "8988:165:109",
            "nodes": [],
            "body": {
              "id": 19820,
              "nodeType": "Block",
              "src": "9093:60:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19816,
                        "name": "candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19807,
                        "src": "9127:11:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19817,
                        "name": "atBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19809,
                        "src": "9140:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19815,
                      "name": "_checkMaintainedById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19848,
                      "src": "9106:20:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) view returns (bool)"
                      }
                    },
                    "id": 19818,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9106:42:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 19814,
                  "id": 19819,
                  "nodeType": "Return",
                  "src": "9099:49:109"
                }
              ]
            },
            "baseFunctions": [
              6955
            ],
            "functionSelector": "8d5b6759",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkMaintainedById",
            "nameLocation": "8997:19:109",
            "overrides": {
              "id": 19811,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9069:8:109"
            },
            "parameters": {
              "id": 19810,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19807,
                  "mutability": "mutable",
                  "name": "candidateId",
                  "nameLocation": "9025:11:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19821,
                  "src": "9017:19:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19806,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9017:7:109",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19809,
                  "mutability": "mutable",
                  "name": "atBlock",
                  "nameLocation": "9046:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19821,
                  "src": "9038:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19808,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9038:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9016:38:109"
            },
            "returnParameters": {
              "id": 19814,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19813,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19821,
                  "src": "9087:4:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19812,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9087:4:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9086:6:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19848,
            "nodeType": "FunctionDefinition",
            "src": "9157:203:109",
            "nodes": [],
            "body": {
              "id": 19847,
              "nodeType": "Block",
              "src": "9254:106:109",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    19832
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19832,
                      "mutability": "mutable",
                      "name": "_s",
                      "nameLocation": "9277:2:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 19847,
                      "src": "9260:19:109",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                        "typeString": "struct IMaintenance.Schedule"
                      },
                      "typeName": {
                        "id": 19831,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 19830,
                          "name": "Schedule",
                          "nameLocations": [
                            "9260:8:109"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6906,
                          "src": "9260:8:109"
                        },
                        "referencedDeclaration": 6906,
                        "src": "9260:8:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19836,
                  "initialValue": {
                    "baseExpression": {
                      "id": 19833,
                      "name": "_schedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19092,
                      "src": "9282:9:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Schedule_$6906_storage_$",
                        "typeString": "mapping(address => struct IMaintenance.Schedule storage ref)"
                      }
                    },
                    "id": 19835,
                    "indexExpression": {
                      "id": 19834,
                      "name": "candidateId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19823,
                      "src": "9292:11:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9282:22:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Schedule_$6906_storage",
                      "typeString": "struct IMaintenance.Schedule storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9260:44:109"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 19845,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 19840,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 19837,
                          "name": "_s",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19832,
                          "src": "9317:2:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                            "typeString": "struct IMaintenance.Schedule storage pointer"
                          }
                        },
                        "id": 19838,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "9320:4:109",
                        "memberName": "from",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6899,
                        "src": "9317:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "id": 19839,
                        "name": "atBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19825,
                        "src": "9328:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "9317:18:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 19844,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 19841,
                        "name": "atBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19825,
                        "src": "9339:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "expression": {
                          "id": 19842,
                          "name": "_s",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19832,
                          "src": "9350:2:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                            "typeString": "struct IMaintenance.Schedule storage pointer"
                          }
                        },
                        "id": 19843,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "9353:2:109",
                        "memberName": "to",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6901,
                        "src": "9350:5:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "9339:16:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "9317:38:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 19829,
                  "id": 19846,
                  "nodeType": "Return",
                  "src": "9310:45:109"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkMaintainedById",
            "nameLocation": "9166:20:109",
            "parameters": {
              "id": 19826,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19823,
                  "mutability": "mutable",
                  "name": "candidateId",
                  "nameLocation": "9195:11:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19848,
                  "src": "9187:19:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19822,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9187:7:109",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19825,
                  "mutability": "mutable",
                  "name": "atBlock",
                  "nameLocation": "9216:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19848,
                  "src": "9208:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19824,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9208:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9186:38:109"
            },
            "returnParameters": {
              "id": 19829,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19828,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19848,
                  "src": "9248:4:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19827,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9248:4:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9247:6:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 19871,
            "nodeType": "FunctionDefinition",
            "src": "9406:239:109",
            "nodes": [],
            "body": {
              "id": 19870,
              "nodeType": "Block",
              "src": "9557:88:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 19864,
                            "name": "consensusAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19852,
                            "src": "9605:13:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          ],
                          "id": 19863,
                          "name": "__css2cid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20052,
                          "src": "9595:9:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                            "typeString": "function (TConsensus) view returns (address)"
                          }
                        },
                        "id": 19865,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9595:24:109",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19866,
                        "name": "fromBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19854,
                        "src": "9621:9:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19867,
                        "name": "toBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19856,
                        "src": "9632:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19862,
                      "name": "_maintainingInBlockRange",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20033,
                      "src": "9570:24:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256,uint256) view returns (bool)"
                      }
                    },
                    "id": 19868,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9570:70:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 19861,
                  "id": 19869,
                  "nodeType": "Return",
                  "src": "9563:77:109"
                }
              ]
            },
            "baseFunctions": [
              6968
            ],
            "documentation": {
              "id": 19849,
              "nodeType": "StructuredDocumentation",
              "src": "9364:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "088e8de7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkMaintainedInBlockRange",
            "nameLocation": "9415:27:109",
            "overrides": {
              "id": 19858,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9533:8:109"
            },
            "parameters": {
              "id": 19857,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19852,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "9459:13:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19871,
                  "src": "9448:24:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 19851,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19850,
                      "name": "TConsensus",
                      "nameLocations": [
                        "9448:10:109"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "9448:10:109"
                    },
                    "referencedDeclaration": 37964,
                    "src": "9448:10:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19854,
                  "mutability": "mutable",
                  "name": "fromBlock",
                  "nameLocation": "9486:9:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19871,
                  "src": "9478:17:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19853,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9478:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19856,
                  "mutability": "mutable",
                  "name": "toBlock",
                  "nameLocation": "9509:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19871,
                  "src": "9501:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19855,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9501:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9442:78:109"
            },
            "returnParameters": {
              "id": 19861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19860,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19871,
                  "src": "9551:4:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19859,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9551:4:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9550:6:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 19888,
            "nodeType": "FunctionDefinition",
            "src": "9691:151:109",
            "nodes": [],
            "body": {
              "id": 19887,
              "nodeType": "Block",
              "src": "9779:63:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 19883,
                            "name": "consensusAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19875,
                            "src": "9822:13:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          ],
                          "id": 19882,
                          "name": "__css2cid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20052,
                          "src": "9812:9:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                            "typeString": "function (TConsensus) view returns (address)"
                          }
                        },
                        "id": 19884,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9812:24:109",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19881,
                      "name": "_checkScheduledById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19904,
                      "src": "9792:19:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 19885,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9792:45:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 19880,
                  "id": 19886,
                  "nodeType": "Return",
                  "src": "9785:52:109"
                }
              ]
            },
            "baseFunctions": [
              7038
            ],
            "documentation": {
              "id": 19872,
              "nodeType": "StructuredDocumentation",
              "src": "9649:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "2ddc08a2",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkScheduled",
            "nameLocation": "9700:14:109",
            "overrides": {
              "id": 19877,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9755:8:109"
            },
            "parameters": {
              "id": 19876,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19875,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "9726:13:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19888,
                  "src": "9715:24:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 19874,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19873,
                      "name": "TConsensus",
                      "nameLocations": [
                        "9715:10:109"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "9715:10:109"
                    },
                    "referencedDeclaration": 37964,
                    "src": "9715:10:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9714:26:109"
            },
            "returnParameters": {
              "id": 19880,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19879,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19888,
                  "src": "9773:4:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19878,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9773:4:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9772:6:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19904,
            "nodeType": "FunctionDefinition",
            "src": "9846:138:109",
            "nodes": [],
            "body": {
              "id": 19903,
              "nodeType": "Block",
              "src": "9925:59:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19901,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 19895,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "9938:5:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 19896,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9944:6:109",
                      "memberName": "number",
                      "nodeType": "MemberAccess",
                      "src": "9938:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<=",
                    "rightExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 19897,
                          "name": "_schedule",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19092,
                          "src": "9954:9:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Schedule_$6906_storage_$",
                            "typeString": "mapping(address => struct IMaintenance.Schedule storage ref)"
                          }
                        },
                        "id": 19899,
                        "indexExpression": {
                          "id": 19898,
                          "name": "candidateId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19890,
                          "src": "9964:11:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9954:22:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage",
                          "typeString": "struct IMaintenance.Schedule storage ref"
                        }
                      },
                      "id": 19900,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "9977:2:109",
                      "memberName": "to",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6901,
                      "src": "9954:25:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9938:41:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 19894,
                  "id": 19902,
                  "nodeType": "Return",
                  "src": "9931:48:109"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkScheduledById",
            "nameLocation": "9855:19:109",
            "parameters": {
              "id": 19891,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19890,
                  "mutability": "mutable",
                  "name": "candidateId",
                  "nameLocation": "9883:11:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19904,
                  "src": "9875:19:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19889,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9875:7:109",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9874:21:109"
            },
            "returnParameters": {
              "id": 19894,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19893,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19904,
                  "src": "9919:4:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19892,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9919:4:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9918:6:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 19921,
            "nodeType": "FunctionDefinition",
            "src": "10030:159:109",
            "nodes": [],
            "body": {
              "id": 19920,
              "nodeType": "Block",
              "src": "10122:67:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 19916,
                            "name": "consensusAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19908,
                            "src": "10169:13:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                              "typeString": "TConsensus"
                            }
                          ],
                          "id": 19915,
                          "name": "__css2cid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20052,
                          "src": "10159:9:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                            "typeString": "function (TConsensus) view returns (address)"
                          }
                        },
                        "id": 19917,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10159:24:109",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19914,
                      "name": "_checkCooldownEndedById",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19939,
                      "src": "10135:23:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 19918,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10135:49:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 19913,
                  "id": 19919,
                  "nodeType": "Return",
                  "src": "10128:56:109"
                }
              ]
            },
            "baseFunctions": [
              7029
            ],
            "documentation": {
              "id": 19905,
              "nodeType": "StructuredDocumentation",
              "src": "9988:39:109",
              "text": " @inheritdoc IMaintenance"
            },
            "functionSelector": "01b50209",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkCooldownEnded",
            "nameLocation": "10039:18:109",
            "overrides": {
              "id": 19910,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "10098:8:109"
            },
            "parameters": {
              "id": 19909,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19908,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "10069:13:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19921,
                  "src": "10058:24:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 19907,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19906,
                      "name": "TConsensus",
                      "nameLocations": [
                        "10058:10:109"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "10058:10:109"
                    },
                    "referencedDeclaration": 37964,
                    "src": "10058:10:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10057:26:109"
            },
            "returnParameters": {
              "id": 19913,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19912,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19921,
                  "src": "10116:4:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19911,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10116:4:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10115:6:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19939,
            "nodeType": "FunctionDefinition",
            "src": "10193:184:109",
            "nodes": [],
            "body": {
              "id": 19938,
              "nodeType": "Block",
              "src": "10276:101:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19936,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 19928,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "10289:5:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 19929,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "10295:9:109",
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "10289:15:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 19935,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "baseExpression": {
                            "id": 19930,
                            "name": "_schedule",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19092,
                            "src": "10307:9:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Schedule_$6906_storage_$",
                              "typeString": "mapping(address => struct IMaintenance.Schedule storage ref)"
                            }
                          },
                          "id": 19932,
                          "indexExpression": {
                            "id": 19931,
                            "name": "candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19923,
                            "src": "10317:11:109",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10307:22:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Schedule_$6906_storage",
                            "typeString": "struct IMaintenance.Schedule storage ref"
                          }
                        },
                        "id": 19933,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "10330:16:109",
                        "memberName": "requestTimestamp",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6905,
                        "src": "10307:39:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 19934,
                        "name": "_cooldownSecsToMaintain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19110,
                        "src": "10349:23:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "10307:65:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10289:83:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 19927,
                  "id": 19937,
                  "nodeType": "Return",
                  "src": "10282:90:109"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkCooldownEndedById",
            "nameLocation": "10202:23:109",
            "parameters": {
              "id": 19924,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19923,
                  "mutability": "mutable",
                  "name": "candidateId",
                  "nameLocation": "10234:11:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 19939,
                  "src": "10226:19:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19922,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10226:7:109",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10225:21:109"
            },
            "returnParameters": {
              "id": 19927,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19926,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19939,
                  "src": "10270:4:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19925,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10270:4:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10269:6:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 20003,
            "nodeType": "FunctionDefinition",
            "src": "10602:1090:109",
            "nodes": [],
            "body": {
              "id": 20002,
              "nodeType": "Block",
              "src": "10875:817:109",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19957,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 19955,
                      "name": "minMaintenanceDurationInBlock_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19942,
                      "src": "10885:30:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "id": 19956,
                      "name": "maxMaintenanceDurationInBlock_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19944,
                      "src": "10919:30:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10885:64:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19961,
                  "nodeType": "IfStatement",
                  "src": "10881:114:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19958,
                        "name": "ErrInvalidMaintenanceDurationConfig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6894,
                        "src": "10958:35:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19959,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10958:37:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19960,
                    "nodeType": "RevertStatement",
                    "src": "10951:44:109"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19964,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 19962,
                      "name": "minOffsetToStartSchedule_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19946,
                      "src": "11005:25:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "id": 19963,
                      "name": "maxOffsetToStartSchedule_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19948,
                      "src": "11034:25:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11005:54:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19968,
                  "nodeType": "IfStatement",
                  "src": "11001:107:109",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19965,
                        "name": "ErrInvalidOffsetToStartScheduleConfigs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6897,
                        "src": "11068:38:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19966,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "11068:40:109",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19967,
                    "nodeType": "RevertStatement",
                    "src": "11061:47:109"
                  }
                },
                {
                  "expression": {
                    "id": 19971,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 19969,
                      "name": "_minMaintenanceDurationInBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19095,
                      "src": "11115:30:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 19970,
                      "name": "minMaintenanceDurationInBlock_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19942,
                      "src": "11148:30:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11115:63:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19972,
                  "nodeType": "ExpressionStatement",
                  "src": "11115:63:109"
                },
                {
                  "expression": {
                    "id": 19975,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 19973,
                      "name": "_maxMaintenanceDurationInBlock",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19098,
                      "src": "11184:30:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 19974,
                      "name": "maxMaintenanceDurationInBlock_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19944,
                      "src": "11217:30:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11184:63:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19976,
                  "nodeType": "ExpressionStatement",
                  "src": "11184:63:109"
                },
                {
                  "expression": {
                    "id": 19979,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 19977,
                      "name": "_minOffsetToStartSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19101,
                      "src": "11253:25:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 19978,
                      "name": "minOffsetToStartSchedule_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19946,
                      "src": "11281:25:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11253:53:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19980,
                  "nodeType": "ExpressionStatement",
                  "src": "11253:53:109"
                },
                {
                  "expression": {
                    "id": 19983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 19981,
                      "name": "_maxOffsetToStartSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19104,
                      "src": "11312:25:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 19982,
                      "name": "maxOffsetToStartSchedule_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19948,
                      "src": "11340:25:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11312:53:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19984,
                  "nodeType": "ExpressionStatement",
                  "src": "11312:53:109"
                },
                {
                  "expression": {
                    "id": 19987,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 19985,
                      "name": "_maxSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19107,
                      "src": "11371:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 19986,
                      "name": "maxSchedule_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19950,
                      "src": "11386:12:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11371:27:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19988,
                  "nodeType": "ExpressionStatement",
                  "src": "11371:27:109"
                },
                {
                  "expression": {
                    "id": 19991,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 19989,
                      "name": "_cooldownSecsToMaintain",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19110,
                      "src": "11404:23:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 19990,
                      "name": "cooldownSecsToMaintain_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19952,
                      "src": "11430:23:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11404:49:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19992,
                  "nodeType": "ExpressionStatement",
                  "src": "11404:49:109"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 19994,
                        "name": "minMaintenanceDurationInBlock_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19942,
                        "src": "11496:30:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19995,
                        "name": "maxMaintenanceDurationInBlock_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19944,
                        "src": "11534:30:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19996,
                        "name": "minOffsetToStartSchedule_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19946,
                        "src": "11572:25:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19997,
                        "name": "maxOffsetToStartSchedule_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19948,
                        "src": "11605:25:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19998,
                        "name": "maxSchedule_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19950,
                        "src": "11638:12:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19999,
                        "name": "cooldownSecsToMaintain_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19952,
                        "src": "11658:23:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19993,
                      "name": "MaintenanceConfigUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6934,
                      "src": "11464:24:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256,uint256,uint256,uint256,uint256)"
                      }
                    },
                    "id": 20000,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11464:223:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 20001,
                  "nodeType": "EmitStatement",
                  "src": "11459:228:109"
                }
              ]
            },
            "documentation": {
              "id": 19940,
              "nodeType": "StructuredDocumentation",
              "src": "10381:218:109",
              "text": " @dev Sets the min block period and max block period to maintenance.\n Requirements:\n - The max period is larger than the min period.\n Emits the event `MaintenanceConfigUpdated`."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setMaintenanceConfig",
            "nameLocation": "10611:21:109",
            "parameters": {
              "id": 19953,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19942,
                  "mutability": "mutable",
                  "name": "minMaintenanceDurationInBlock_",
                  "nameLocation": "10646:30:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20003,
                  "src": "10638:38:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19941,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10638:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19944,
                  "mutability": "mutable",
                  "name": "maxMaintenanceDurationInBlock_",
                  "nameLocation": "10690:30:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20003,
                  "src": "10682:38:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19943,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10682:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19946,
                  "mutability": "mutable",
                  "name": "minOffsetToStartSchedule_",
                  "nameLocation": "10734:25:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20003,
                  "src": "10726:33:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19945,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10726:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19948,
                  "mutability": "mutable",
                  "name": "maxOffsetToStartSchedule_",
                  "nameLocation": "10773:25:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20003,
                  "src": "10765:33:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19947,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10765:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19950,
                  "mutability": "mutable",
                  "name": "maxSchedule_",
                  "nameLocation": "10812:12:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20003,
                  "src": "10804:20:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19949,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10804:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19952,
                  "mutability": "mutable",
                  "name": "cooldownSecsToMaintain_",
                  "nameLocation": "10838:23:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20003,
                  "src": "10830:31:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19951,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10830:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10632:233:109"
            },
            "returnParameters": {
              "id": 19954,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10875:0:109"
            },
            "scope": 20074,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 20033,
            "nodeType": "FunctionDefinition",
            "src": "11851:256:109",
            "nodes": [],
            "body": {
              "id": 20032,
              "nodeType": "Block",
              "src": "11986:121:109",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    20017
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 20017,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "12009:1:109",
                      "nodeType": "VariableDeclaration",
                      "scope": 20032,
                      "src": "11992:18:109",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                        "typeString": "struct IMaintenance.Schedule"
                      },
                      "typeName": {
                        "id": 20016,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 20015,
                          "name": "Schedule",
                          "nameLocations": [
                            "11992:8:109"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6906,
                          "src": "11992:8:109"
                        },
                        "referencedDeclaration": 6906,
                        "src": "11992:8:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                          "typeString": "struct IMaintenance.Schedule"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 20021,
                  "initialValue": {
                    "baseExpression": {
                      "id": 20018,
                      "name": "_schedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19092,
                      "src": "12013:9:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Schedule_$6906_storage_$",
                        "typeString": "mapping(address => struct IMaintenance.Schedule storage ref)"
                      }
                    },
                    "id": 20020,
                    "indexExpression": {
                      "id": 20019,
                      "name": "candidateId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20006,
                      "src": "12023:11:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "12013:22:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Schedule_$6906_storage",
                      "typeString": "struct IMaintenance.Schedule storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11992:43:109"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 20024,
                        "name": "fromBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20008,
                        "src": "12069:9:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 20025,
                        "name": "toBlock",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20010,
                        "src": "12080:7:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 20026,
                          "name": "s",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20017,
                          "src": "12089:1:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                            "typeString": "struct IMaintenance.Schedule storage pointer"
                          }
                        },
                        "id": 20027,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "12091:4:109",
                        "memberName": "from",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6899,
                        "src": "12089:6:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 20028,
                          "name": "s",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20017,
                          "src": "12097:1:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Schedule_$6906_storage_ptr",
                            "typeString": "struct IMaintenance.Schedule storage pointer"
                          }
                        },
                        "id": 20029,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "12099:2:109",
                        "memberName": "to",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6901,
                        "src": "12097:4:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 20022,
                        "name": "Math",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11550,
                        "src": "12048:4:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Math_$11550_$",
                          "typeString": "type(library Math)"
                        }
                      },
                      "id": 20023,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "12053:15:109",
                      "memberName": "twoRangeOverlap",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11489,
                      "src": "12048:20:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256,uint256,uint256,uint256) pure returns (bool)"
                      }
                    },
                    "id": 20030,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12048:54:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 20014,
                  "id": 20031,
                  "nodeType": "Return",
                  "src": "12041:61:109"
                }
              ]
            },
            "documentation": {
              "id": 20004,
              "nodeType": "StructuredDocumentation",
              "src": "11696:152:109",
              "text": " @dev Check if the validator was maintaining in the current period.\n Note: This method should be called at the end of the period."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_maintainingInBlockRange",
            "nameLocation": "11860:24:109",
            "parameters": {
              "id": 20011,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20006,
                  "mutability": "mutable",
                  "name": "candidateId",
                  "nameLocation": "11898:11:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20033,
                  "src": "11890:19:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20005,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11890:7:109",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 20008,
                  "mutability": "mutable",
                  "name": "fromBlock",
                  "nameLocation": "11923:9:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20033,
                  "src": "11915:17:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 20007,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11915:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 20010,
                  "mutability": "mutable",
                  "name": "toBlock",
                  "nameLocation": "11946:7:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20033,
                  "src": "11938:15:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 20009,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11938:7:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11884:73:109"
            },
            "returnParameters": {
              "id": 20014,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20013,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 20033,
                  "src": "11980:4:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 20012,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11980:4:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11979:6:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "private"
          },
          {
            "id": 20052,
            "nodeType": "FunctionDefinition",
            "src": "12111:169:109",
            "nodes": [],
            "body": {
              "id": 20051,
              "nodeType": "Block",
              "src": "12188:92:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 20048,
                        "name": "consensusAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20036,
                        "src": "12261:13:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                          "typeString": "TConsensus"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 20043,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38245,
                                  "src": "12222:12:109",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 20044,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "12235:7:109",
                                "memberName": "PROFILE",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 38244,
                                "src": "12222:20:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 20042,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "12210:11:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 20045,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12210:33:109",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 20041,
                          "name": "IProfile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7346,
                          "src": "12201:8:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IProfile_$7346_$",
                            "typeString": "type(contract IProfile)"
                          }
                        },
                        "id": 20046,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12201:43:109",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProfile_$7346",
                          "typeString": "contract IProfile"
                        }
                      },
                      "id": 20047,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "12245:15:109",
                      "memberName": "getConsensus2Id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7261,
                      "src": "12201:59:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_userDefinedValueType$_TConsensus_$37964_$returns$_t_address_$",
                        "typeString": "function (TConsensus) view external returns (address)"
                      }
                    },
                    "id": 20049,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12201:74:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 20040,
                  "id": 20050,
                  "nodeType": "Return",
                  "src": "12194:81:109"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__css2cid",
            "nameLocation": "12120:9:109",
            "parameters": {
              "id": 20037,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20036,
                  "mutability": "mutable",
                  "name": "consensusAddr",
                  "nameLocation": "12141:13:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20052,
                  "src": "12130:24:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                    "typeString": "TConsensus"
                  },
                  "typeName": {
                    "id": 20035,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 20034,
                      "name": "TConsensus",
                      "nameLocations": [
                        "12130:10:109"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 37964,
                      "src": "12130:10:109"
                    },
                    "referencedDeclaration": 37964,
                    "src": "12130:10:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                      "typeString": "TConsensus"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12129:26:109"
            },
            "returnParameters": {
              "id": 20040,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20039,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 20052,
                  "src": "12179:7:109",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20038,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12179:7:109",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12178:9:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 20073,
            "nodeType": "FunctionDefinition",
            "src": "12284:198:109",
            "nodes": [],
            "body": {
              "id": 20072,
              "nodeType": "Block",
              "src": "12385:97:109",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 20069,
                        "name": "consensusAddrs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20056,
                        "src": "12462:14:109",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                          "typeString": "TConsensus[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                          "typeString": "TConsensus[] memory"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 20064,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 38245,
                                  "src": "12419:12:109",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$38245_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 20065,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "12432:7:109",
                                "memberName": "PROFILE",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 38244,
                                "src": "12419:20:109",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$38245",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 20063,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "12407:11:109",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38245_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 20066,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12407:33:109",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 20062,
                          "name": "IProfile",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7346,
                          "src": "12398:8:109",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IProfile_$7346_$",
                            "typeString": "type(contract IProfile)"
                          }
                        },
                        "id": 20067,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12398:43:109",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IProfile_$7346",
                          "typeString": "contract IProfile"
                        }
                      },
                      "id": 20068,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "12442:19:109",
                      "memberName": "getManyConsensus2Id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7272,
                      "src": "12398:63:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                        "typeString": "function (TConsensus[] memory) view external returns (address[] memory)"
                      }
                    },
                    "id": 20070,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12398:79:109",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "functionReturnParameters": 20061,
                  "id": 20071,
                  "nodeType": "Return",
                  "src": "12391:86:109"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "__css2cidBatch",
            "nameLocation": "12293:14:109",
            "parameters": {
              "id": 20057,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20056,
                  "mutability": "mutable",
                  "name": "consensusAddrs",
                  "nameLocation": "12328:14:109",
                  "nodeType": "VariableDeclaration",
                  "scope": 20073,
                  "src": "12308:34:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_memory_ptr",
                    "typeString": "TConsensus[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 20054,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 20053,
                        "name": "TConsensus",
                        "nameLocations": [
                          "12308:10:109"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 37964,
                        "src": "12308:10:109"
                      },
                      "referencedDeclaration": 37964,
                      "src": "12308:10:109",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_TConsensus_$37964",
                        "typeString": "TConsensus"
                      }
                    },
                    "id": 20055,
                    "nodeType": "ArrayTypeName",
                    "src": "12308:12:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_TConsensus_$37964_$dyn_storage_ptr",
                      "typeString": "TConsensus[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12307:36:109"
            },
            "returnParameters": {
              "id": 20061,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20060,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 20073,
                  "src": "12367:16:109",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 20058,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "12367:7:109",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 20059,
                    "nodeType": "ArrayTypeName",
                    "src": "12367:9:109",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12366:18:109"
            },
            "scope": 20074,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 19076,
              "name": "IMaintenance",
              "nameLocations": [
                "511:12:109"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7125,
              "src": "511:12:109"
            },
            "id": 19077,
            "nodeType": "InheritanceSpecifier",
            "src": "511:12:109"
          },
          {
            "baseName": {
              "id": 19078,
              "name": "HasContracts",
              "nameLocations": [
                "525:12:109"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3544,
              "src": "525:12:109"
            },
            "id": 19079,
            "nodeType": "InheritanceSpecifier",
            "src": "525:12:109"
          },
          {
            "baseName": {
              "id": 19080,
              "name": "HasValidatorDeprecated",
              "nameLocations": [
                "539:22:109"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 38264,
              "src": "539:22:109"
            },
            "id": 19081,
            "nodeType": "InheritanceSpecifier",
            "src": "539:22:109"
          },
          {
            "baseName": {
              "id": 19082,
              "name": "Initializable",
              "nameLocations": [
                "563:13:109"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 150298,
              "src": "563:13:109"
            },
            "id": 19083,
            "nodeType": "InheritanceSpecifier",
            "src": "563:13:109"
          }
        ],
        "canonicalName": "Maintenance",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          20074,
          150298,
          38264,
          3544,
          38494,
          8655,
          3589,
          7125
        ],
        "name": "Maintenance",
        "nameLocation": "496:11:109",
        "scope": 20075,
        "usedErrors": [
          6870,
          6873,
          6876,
          6879,
          6882,
          6885,
          6888,
          6891,
          6894,
          6897,
          8628,
          38066,
          38094
        ],
        "usedEvents": [
          6914,
          6919,
          6934,
          8636,
          150162
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 24102399,
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100eb565b600054600160a81b900460ff161561008c5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff600160a01b909104811610156100e9576000805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611c3c806100fa6000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638b042a72116100ee578063bfa89b9b11610097578063de981f1b11610071578063de981f1b1461034b578063dec3628414610376578063f0caaafb1461037e578063fdadda811461039157600080fd5b8063bfa89b9b146102ea578063c09fe460146102f2578063d39fee341461030557600080fd5b8063ba303755116100c8578063ba303755146102c7578063ba7e57bb146102da578063bc1710e9146102e257600080fd5b80638b042a72146102815780638d5b6759146102a1578063ac57bd76146102b457600080fd5b80633101cfcb116101505780638142951a1161012a5780638142951a1461025357806384a9573b14610266578063865e6fd31461026e57600080fd5b80633101cfcb146102305780635cd8a76b146102435780637a50802d1461024b57600080fd5b80630fbeb37f116101815780630fbeb37f146101f55780632d538c2c146102085780632ddc08a21461021d57600080fd5b806301b50209146101a8578063088e8de7146101d057806309e34c38146101e3575b600080fd5b6101bb6101b636600461174a565b6103a4565b60405190151581526020015b60405180910390f35b6101bb6101de366004611767565b6103bd565b6002545b6040519081526020016101c7565b6101bb61020336600461179c565b6103da565b61021b610216366004611767565b6103f5565b005b6101bb61022b36600461174a565b6108db565b61021b61023e36600461174a565b61090b565b61021b610a13565b6005546101e7565b61021b6102613660046117c8565b610b41565b6101e7610ca0565b61021b61027c36600461182c565b610d78565b61029461028f3660046118af565b610d97565b6040516101c79190611900565b6101bb6102af36600461179c565b610de2565b6102946102c2366004611946565b610dee565b6102946102d53660046118af565b610e2e565b6006546101e7565b6004546101e7565b6003546101e7565b61021b610300366004611992565b610e85565b61031861031336600461174a565b610ea3565b6040516101c791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61035e6103593660046119d5565b610f35565b6040516001600160a01b0390911681526020016101c7565b6007546101e7565b61021b61038c36600461174a565b610fc9565b61029461039f366004611946565b611172565b60006103b76103b2836111be565b61124f565b92915050565b60006103d26103cb856111be565b8484611281565b949350505050565b60006103ee6103e8846111be565b836112b0565b9392505050565b60006104016008610f35565b9050600061040e856111be565b6040517f65244ece0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152919250908316906365244ece90602401602060405180830381865afa158015610471573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049591906119f0565b6104cb576000356001600160e01b0319166007604051620f948f60ea1b81526004016104c2929190611a28565b60405180910390fd5b6040516304d971ab60e01b81526001600160a01b0386811660048301523360248301528316906304d971ab90604401602060405180830381865afa158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b91906119f0565b610568576000356001600160e01b0319166004604051620f948f60ea1b81526004016104c2929190611a28565b6001600160a01b0381166000908152600160208190526040909120015443116105bd576040517fb194497700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105c68161124f565b6105fc576040517f40fbfaee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654610607610ca0565b1061063e576040517f437494d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106646004544361064f9190611a6c565b60055461065c9043611a6c565b8691906112e2565b610681576040516301f19fb760e61b815260040160405180910390fd5b8284106106a1576040516301f19fb760e61b815260040160405180910390fd5b60006106ad8585611a7f565b6106b8906001611a6c565b90506106d3600254600354836112e29092919063ffffffff16565b610709576040517fa1f1aaf500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038316637593ff71610723600188611a7f565b6040518263ffffffff1660e01b815260040161074191815260200190565b602060405180830381865afa15801561075e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078291906119f0565b61079f576040516301f19fb760e61b815260040160405180910390fd5b6040517f7593ff71000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b03841690637593ff7190602401602060405180830381865afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906119f0565b610857576040517fec67bbc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166000818152600160208181526040928390208981559182018890554360028301819055426003840181905584518b81529283018a905293820152606081019290925291907f48e8b2f7348b1ec693bbb999258a8d6bd514732a19c6057b6e2a56a4c405253b9060800160405180910390a250505050505050565b60006103b76108e9836111be565b6001600160a01b03166000908152600160208190526040909120015443111590565b600054600390600160a81b900460ff16158015610936575060005460ff808316600160a01b90920416105b6109995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c2565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b1790556109cc600f836112f9565b6000805460ff60a81b1916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054600290600160a81b900460ff16158015610a3e575060005460ff808316600160a01b90920416105b610aa15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c2565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b1790819055610ae0906008906001600160a01b03166112f9565b600080547fffffffffffffffffffff00ff000000000000000000000000000000000000000016905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600054600160a81b900460ff1615808015610b6957506000546001600160a01b90910460ff16105b80610b8a5750303b158015610b8a5750600054600160a01b900460ff166001145b610bed5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c2565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790558015610c35576000805460ff60a81b1916600160a81b1790555b610c406008896112f9565b610c4e8787878787876113b5565b8015610c96576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600080610cad6008610f35565b6001600160a01b0316639a57bd936040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d129190810190611ab3565b905060005b8151811015610d7357610d5f828281518110610d3557610d35611b78565b60200260200101516001600160a01b03166000908152600160208190526040909120015443111590565b15610d6b576001909201915b600101610d17565b505090565b610d806114a3565b610d89816114ff565b610d9382826112f9565b5050565b6060610dd98585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792508691506115519050565b95945050505050565b60006103ee83836112b0565b60606103d28484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508692506115fb915050565b60606000610e6e8686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506116a392505050565b9050610e7b818585611551565b9695505050505050565b610e8d6114a3565b610e9b8686868686866113b5565b505050505050565b610ece6040518060800160405280600081526020016000815260200160008152602001600081525090565b60016000610edb846111be565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610f6c57610f6c611a12565b60ff1681526020810191909152604001600020546001600160a01b0316905080610fc457816040517f812281be0000000000000000000000000000000000000000000000000000000081526004016104c29190611b8e565b919050565b610fd36008610f35565b6040516304d971ab60e01b81526001600160a01b03838116600483015233602483015291909116906304d971ab90604401602060405180830381865afa158015611021573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104591906119f0565b611072576000356001600160e01b0319166004604051620f948f60ea1b81526004016104c2929190611a28565b600061107d826111be565b90506110a5816001600160a01b03166000908152600160208190526040909120015443111590565b6110db576040517ff7050bef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110e581436112b0565b1561111c576040517f070dff8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000818152600160208190526040808320838155918201839055436002830155519092917f72720a31deb222f77bbf95b88a540154648466770e5f41328ee1e25e5050737791a2505050565b606060006111b28585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506116a392505050565b9050610dd981846115fb565b60006111ca600f610f35565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190611ba8565b6007546001600160a01b038216600090815260016020526040812060030154909161127991611a6c565b421192915050565b6001600160a01b038316600090815260016020819052604082208054918101549091610dd9918691869161171f565b6001600160a01b0382166000908152600160205260408120805483108015906103d25750600101549091111592915050565b60008383111580156103d257505090911115919050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561132f5761132f611a12565b60ff168152602081019190915260400160002080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03928316179055811682600f81111561138857611388611a12565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b8486106113ee576040517f71e80c4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828410611427576040517fb63e3f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002869055600385905560048490556005839055600682905560078190556040805187815260208101879052908101859052606081018490526080810183905260a081018290527f4edb6adef66a4b8e1ffbc8c67640d4f244ce904193fd65e5cc316bbb74b2e59b9060c00160405180910390a1505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146114fd576000356001600160e01b0319166001604051620f948f60ea1b81526004016104c2929190611a28565b565b806001600160a01b03163b60000361154e576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016104c2565b50565b6060835167ffffffffffffffff81111561156d5761156d611a92565b604051908082528060200260200182016040528015611596578160200160208202803683370190505b50905060005b84518110156115f3576115c98582815181106115ba576115ba611b78565b60200260200101518585611281565b8282815181106115db576115db611b78565b9115156020928302919091019091015260010161159c565b509392505050565b6060825167ffffffffffffffff81111561161757611617611a92565b604051908082528060200260200182016040528015611640578160200160208202803683370190505b50905060005b835181101561169c5761167284828151811061166457611664611b78565b6020026020010151846112b0565b82828151811061168457611684611b78565b91151560209283029190910190910152600101611646565b5092915050565b60606116af600f610f35565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b81526004016116da9190611bc5565b600060405180830381865afa1580156116f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103b79190810190611ab3565b6000818511158015610dd9575050501115919050565b6001600160a01b038116811461154e57600080fd5b60006020828403121561175c57600080fd5b81356103ee81611735565b60008060006060848603121561177c57600080fd5b833561178781611735565b95602085013595506040909401359392505050565b600080604083850312156117af57600080fd5b82356117ba81611735565b946020939093013593505050565b600080600080600080600060e0888a0312156117e357600080fd5b87356117ee81611735565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b803560108110610fc457600080fd5b6000806040838503121561183f57600080fd5b6118488361181d565b9150602083013561185881611735565b809150509250929050565b60008083601f84011261187557600080fd5b50813567ffffffffffffffff81111561188d57600080fd5b6020830191508360208260051b85010111156118a857600080fd5b9250929050565b600080600080606085870312156118c557600080fd5b843567ffffffffffffffff8111156118dc57600080fd5b6118e887828801611863565b90989097506020870135966040013595509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561193a57835115158352928401929184019160010161191c565b50909695505050505050565b60008060006040848603121561195b57600080fd5b833567ffffffffffffffff81111561197257600080fd5b61197e86828701611863565b909790965060209590950135949350505050565b60008060008060008060c087890312156119ab57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000602082840312156119e757600080fd5b6103ee8261181d565b600060208284031215611a0257600080fd5b815180151581146103ee57600080fd5b634e487b7160e01b600052602160045260246000fd5b6001600160e01b03198316815260408101600b8310611a4957611a49611a12565b8260208301529392505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103b7576103b7611a56565b818103818111156103b7576103b7611a56565b634e487b7160e01b600052604160045260246000fd5b8051610fc481611735565b60006020808385031215611ac657600080fd5b825167ffffffffffffffff80821115611ade57600080fd5b818501915085601f830112611af257600080fd5b815181811115611b0457611b04611a92565b8060051b604051601f19603f83011681018181108582111715611b2957611b29611a92565b604052918252848201925083810185019188831115611b4757600080fd5b938501935b82851015611b6c57611b5d85611aa8565b84529385019392850192611b4c565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6020810160108310611ba257611ba2611a12565b91905290565b600060208284031215611bba57600080fd5b81516103ee81611735565b6020808252825182820181905260009190848201906040850190845b8181101561193a5783516001600160a01b031683529284019291840191600101611be156fea264697066735822122036efd0019a9d9995e5f731ff234c8d711e1a59c3508e371073778a67955a23f064736f6c63430008160033",
  "chainId": 2021,
  "contractAbsolutePath": "Maintenance.sol",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c80638b042a72116100ee578063bfa89b9b11610097578063de981f1b11610071578063de981f1b1461034b578063dec3628414610376578063f0caaafb1461037e578063fdadda811461039157600080fd5b8063bfa89b9b146102ea578063c09fe460146102f2578063d39fee341461030557600080fd5b8063ba303755116100c8578063ba303755146102c7578063ba7e57bb146102da578063bc1710e9146102e257600080fd5b80638b042a72146102815780638d5b6759146102a1578063ac57bd76146102b457600080fd5b80633101cfcb116101505780638142951a1161012a5780638142951a1461025357806384a9573b14610266578063865e6fd31461026e57600080fd5b80633101cfcb146102305780635cd8a76b146102435780637a50802d1461024b57600080fd5b80630fbeb37f116101815780630fbeb37f146101f55780632d538c2c146102085780632ddc08a21461021d57600080fd5b806301b50209146101a8578063088e8de7146101d057806309e34c38146101e3575b600080fd5b6101bb6101b636600461174a565b6103a4565b60405190151581526020015b60405180910390f35b6101bb6101de366004611767565b6103bd565b6002545b6040519081526020016101c7565b6101bb61020336600461179c565b6103da565b61021b610216366004611767565b6103f5565b005b6101bb61022b36600461174a565b6108db565b61021b61023e36600461174a565b61090b565b61021b610a13565b6005546101e7565b61021b6102613660046117c8565b610b41565b6101e7610ca0565b61021b61027c36600461182c565b610d78565b61029461028f3660046118af565b610d97565b6040516101c79190611900565b6101bb6102af36600461179c565b610de2565b6102946102c2366004611946565b610dee565b6102946102d53660046118af565b610e2e565b6006546101e7565b6004546101e7565b6003546101e7565b61021b610300366004611992565b610e85565b61031861031336600461174a565b610ea3565b6040516101c791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61035e6103593660046119d5565b610f35565b6040516001600160a01b0390911681526020016101c7565b6007546101e7565b61021b61038c36600461174a565b610fc9565b61029461039f366004611946565b611172565b60006103b76103b2836111be565b61124f565b92915050565b60006103d26103cb856111be565b8484611281565b949350505050565b60006103ee6103e8846111be565b836112b0565b9392505050565b60006104016008610f35565b9050600061040e856111be565b6040517f65244ece0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152919250908316906365244ece90602401602060405180830381865afa158015610471573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049591906119f0565b6104cb576000356001600160e01b0319166007604051620f948f60ea1b81526004016104c2929190611a28565b60405180910390fd5b6040516304d971ab60e01b81526001600160a01b0386811660048301523360248301528316906304d971ab90604401602060405180830381865afa158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b91906119f0565b610568576000356001600160e01b0319166004604051620f948f60ea1b81526004016104c2929190611a28565b6001600160a01b0381166000908152600160208190526040909120015443116105bd576040517fb194497700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105c68161124f565b6105fc576040517f40fbfaee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654610607610ca0565b1061063e576040517f437494d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106646004544361064f9190611a6c565b60055461065c9043611a6c565b8691906112e2565b610681576040516301f19fb760e61b815260040160405180910390fd5b8284106106a1576040516301f19fb760e61b815260040160405180910390fd5b60006106ad8585611a7f565b6106b8906001611a6c565b90506106d3600254600354836112e29092919063ffffffff16565b610709576040517fa1f1aaf500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038316637593ff71610723600188611a7f565b6040518263ffffffff1660e01b815260040161074191815260200190565b602060405180830381865afa15801561075e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078291906119f0565b61079f576040516301f19fb760e61b815260040160405180910390fd5b6040517f7593ff71000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b03841690637593ff7190602401602060405180830381865afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906119f0565b610857576040517fec67bbc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166000818152600160208181526040928390208981559182018890554360028301819055426003840181905584518b81529283018a905293820152606081019290925291907f48e8b2f7348b1ec693bbb999258a8d6bd514732a19c6057b6e2a56a4c405253b9060800160405180910390a250505050505050565b60006103b76108e9836111be565b6001600160a01b03166000908152600160208190526040909120015443111590565b600054600390600160a81b900460ff16158015610936575060005460ff808316600160a01b90920416105b6109995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c2565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b1790556109cc600f836112f9565b6000805460ff60a81b1916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054600290600160a81b900460ff16158015610a3e575060005460ff808316600160a01b90920416105b610aa15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c2565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b1790819055610ae0906008906001600160a01b03166112f9565b600080547fffffffffffffffffffff00ff000000000000000000000000000000000000000016905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600054600160a81b900460ff1615808015610b6957506000546001600160a01b90910460ff16105b80610b8a5750303b158015610b8a5750600054600160a01b900460ff166001145b610bed5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104c2565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790558015610c35576000805460ff60a81b1916600160a81b1790555b610c406008896112f9565b610c4e8787878787876113b5565b8015610c96576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600080610cad6008610f35565b6001600160a01b0316639a57bd936040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d129190810190611ab3565b905060005b8151811015610d7357610d5f828281518110610d3557610d35611b78565b60200260200101516001600160a01b03166000908152600160208190526040909120015443111590565b15610d6b576001909201915b600101610d17565b505090565b610d806114a3565b610d89816114ff565b610d9382826112f9565b5050565b6060610dd98585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792508691506115519050565b95945050505050565b60006103ee83836112b0565b60606103d28484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508692506115fb915050565b60606000610e6e8686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506116a392505050565b9050610e7b818585611551565b9695505050505050565b610e8d6114a3565b610e9b8686868686866113b5565b505050505050565b610ece6040518060800160405280600081526020016000815260200160008152602001600081525090565b60016000610edb846111be565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610f6c57610f6c611a12565b60ff1681526020810191909152604001600020546001600160a01b0316905080610fc457816040517f812281be0000000000000000000000000000000000000000000000000000000081526004016104c29190611b8e565b919050565b610fd36008610f35565b6040516304d971ab60e01b81526001600160a01b03838116600483015233602483015291909116906304d971ab90604401602060405180830381865afa158015611021573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104591906119f0565b611072576000356001600160e01b0319166004604051620f948f60ea1b81526004016104c2929190611a28565b600061107d826111be565b90506110a5816001600160a01b03166000908152600160208190526040909120015443111590565b6110db576040517ff7050bef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110e581436112b0565b1561111c576040517f070dff8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000818152600160208190526040808320838155918201839055436002830155519092917f72720a31deb222f77bbf95b88a540154648466770e5f41328ee1e25e5050737791a2505050565b606060006111b28585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506116a392505050565b9050610dd981846115fb565b60006111ca600f610f35565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa15801561122b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190611ba8565b6007546001600160a01b038216600090815260016020526040812060030154909161127991611a6c565b421192915050565b6001600160a01b038316600090815260016020819052604082208054918101549091610dd9918691869161171f565b6001600160a01b0382166000908152600160205260408120805483108015906103d25750600101549091111592915050565b60008383111580156103d257505090911115919050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f81111561132f5761132f611a12565b60ff168152602081019190915260400160002080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03928316179055811682600f81111561138857611388611a12565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b8486106113ee576040517f71e80c4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828410611427576040517fb63e3f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002869055600385905560048490556005839055600682905560078190556040805187815260208101879052908101859052606081018490526080810183905260a081018290527f4edb6adef66a4b8e1ffbc8c67640d4f244ce904193fd65e5cc316bbb74b2e59b9060c00160405180910390a1505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146114fd576000356001600160e01b0319166001604051620f948f60ea1b81526004016104c2929190611a28565b565b806001600160a01b03163b60000361154e576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024016104c2565b50565b6060835167ffffffffffffffff81111561156d5761156d611a92565b604051908082528060200260200182016040528015611596578160200160208202803683370190505b50905060005b84518110156115f3576115c98582815181106115ba576115ba611b78565b60200260200101518585611281565b8282815181106115db576115db611b78565b9115156020928302919091019091015260010161159c565b509392505050565b6060825167ffffffffffffffff81111561161757611617611a92565b604051908082528060200260200182016040528015611640578160200160208202803683370190505b50905060005b835181101561169c5761167284828151811061166457611664611b78565b6020026020010151846112b0565b82828151811061168457611684611b78565b91151560209283029190910190910152600101611646565b5092915050565b60606116af600f610f35565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b81526004016116da9190611bc5565b600060405180830381865afa1580156116f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103b79190810190611ab3565b6000818511158015610dd9575050501115919050565b6001600160a01b038116811461154e57600080fd5b60006020828403121561175c57600080fd5b81356103ee81611735565b60008060006060848603121561177c57600080fd5b833561178781611735565b95602085013595506040909401359392505050565b600080604083850312156117af57600080fd5b82356117ba81611735565b946020939093013593505050565b600080600080600080600060e0888a0312156117e357600080fd5b87356117ee81611735565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b803560108110610fc457600080fd5b6000806040838503121561183f57600080fd5b6118488361181d565b9150602083013561185881611735565b809150509250929050565b60008083601f84011261187557600080fd5b50813567ffffffffffffffff81111561188d57600080fd5b6020830191508360208260051b85010111156118a857600080fd5b9250929050565b600080600080606085870312156118c557600080fd5b843567ffffffffffffffff8111156118dc57600080fd5b6118e887828801611863565b90989097506020870135966040013595509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561193a57835115158352928401929184019160010161191c565b50909695505050505050565b60008060006040848603121561195b57600080fd5b833567ffffffffffffffff81111561197257600080fd5b61197e86828701611863565b909790965060209590950135949350505050565b60008060008060008060c087890312156119ab57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000602082840312156119e757600080fd5b6103ee8261181d565b600060208284031215611a0257600080fd5b815180151581146103ee57600080fd5b634e487b7160e01b600052602160045260246000fd5b6001600160e01b03198316815260408101600b8310611a4957611a49611a12565b8260208301529392505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103b7576103b7611a56565b818103818111156103b7576103b7611a56565b634e487b7160e01b600052604160045260246000fd5b8051610fc481611735565b60006020808385031215611ac657600080fd5b825167ffffffffffffffff80821115611ade57600080fd5b818501915085601f830112611af257600080fd5b815181811115611b0457611b04611a92565b8060051b604051601f19603f83011681018181108582111715611b2957611b29611a92565b604052918252848201925083810185019188831115611b4757600080fd5b938501935b82851015611b6c57611b5d85611aa8565b84529385019392850192611b4c565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6020810160108310611ba257611ba2611a12565b91905290565b600060208284031215611bba57600080fd5b81516103ee81611735565b6020808252825182820181905260009190848201906040850190845b8181101561193a5783516001600160a01b031683529284019291840191600101611be156fea264697066735822122036efd0019a9d9995e5f731ff234c8d711e1a59c3508e371073778a67955a23f064736f6c63430008160033",
  "deployer": "0x31762cdd4Aa65CD6f5F09D7a05a56211720A1168",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "cancelSchedule(address)": {
        "details": "Cancel the schedule of maintenance for the `consensusAddr`. Requirements: - The candidate `consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `consensusAddr`. - A schedule for the `consensusAddr` must be existent and not executed yet. Emits the event `MaintenanceScheduleCancelled`."
      },
      "checkCooldownEnded(address)": {
        "details": "Returns whether the validator `consensusAddr` has finished cooldown."
      },
      "checkMaintained(address,uint256)": {
        "details": "Returns whether the validator `consensusAddr` maintained at the block number `_block`."
      },
      "checkMaintainedInBlockRange(address,uint256,uint256)": {
        "details": "Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks."
      },
      "checkManyMaintained(address[],uint256)": {
        "details": "Returns the bool array indicating the validators maintained at block number `k` or not."
      },
      "checkManyMaintainedInBlockRange(address[],uint256,uint256)": {
        "details": "Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not."
      },
      "checkScheduled(address)": {
        "details": "Returns whether the validator `consensusAddr` has schedule."
      },
      "cooldownSecsToMaintain()": {
        "details": "Returns the cooldown to maintain in seconds."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getSchedule(address)": {
        "details": "Returns the detailed schedule of the validator `consensusAddr`."
      },
      "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "maxMaintenanceDurationInBlock()": {
        "details": "Returns the max duration for maintenance in block."
      },
      "maxOffsetToStartSchedule()": {
        "details": "The offset to the max block number that the schedule can start"
      },
      "maxSchedule()": {
        "details": "Returns the max number of scheduled maintenances."
      },
      "minMaintenanceDurationInBlock()": {
        "details": "Returns the min duration for maintenance in block."
      },
      "minOffsetToStartSchedule()": {
        "details": "The offset to the min block number that the schedule can start"
      },
      "schedule(address,uint256,uint256)": {
        "details": "Schedules for maintenance from `startedAtBlock` to `endedAtBlock`. Requirements: - The candidate `consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `consensusAddr`. - The candidate `consensusAddr` has no schedule yet or the previous is done. - The total number of schedules is not larger than `maxSchedules()`. - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block. - The end block is larger than the start block. - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`. - The start block is at the start of an epoch. - The end block is at the end of an epoch. Emits the event `MaintenanceScheduled`."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setMaintenanceConfig(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Sets the duration restriction, start time restriction, and max allowed for maintenance. Requirements: - The method caller is admin. - The max duration is larger than the min duration. - The max offset is larger than the min offset. Emits the event `MaintenanceConfigUpdated`."
      },
      "totalSchedule()": {
        "details": "Returns the total of current schedules."
      }
    },
    "events": {
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaintenanceConfigUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the maintenance config is updated."
      },
      "MaintenanceScheduleCancelled(address)": {
        "details": "Emitted when a schedule of maintenance is cancelled."
      },
      "MaintenanceScheduled(address,(uint256,uint256,uint256,uint256))": {
        "details": "Emitted when a maintenance is scheduled."
      }
    },
    "errors": {
      "ErrAlreadyOnMaintenance()": [
        {
          "details": "Error thrown when attempting to initiate maintenance while already in maintenance mode."
        }
      ],
      "ErrAlreadyScheduled()": [
        {
          "details": "Error thrown when attempting to schedule an already scheduled event."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrCooldownTimeNotYetEnded()": [
        {
          "details": "Error thrown when attempting an action before the cooldown period has ended."
        }
      ],
      "ErrEndBlockOutOfRange()": [
        {
          "details": "Error thrown when the end block of a schedule is out of range."
        }
      ],
      "ErrInvalidMaintenanceDuration()": [
        {
          "details": "Error thrown when an invalid maintenance duration is specified."
        }
      ],
      "ErrInvalidMaintenanceDurationConfig()": [
        {
          "details": "Error thrown when an invalid maintenance duration configuration is provided."
        }
      ],
      "ErrInvalidOffsetToStartScheduleConfigs()": [
        {
          "details": "Error thrown when an invalid offset is specified to start the schedule configurations."
        }
      ],
      "ErrStartBlockOutOfRange()": [
        {
          "details": "Error thrown when the start block of a schedule is out of range."
        }
      ],
      "ErrTotalOfSchedulesExceeded()": [
        {
          "details": "Error thrown when the total number of schedules exceeds the limit."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexistedSchedule()": [
        {
          "details": "Error thrown when referring to a non-existent schedule."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrAlreadyOnMaintenance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyScheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCooldownTimeNotYetEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEndBlockOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMaintenanceDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMaintenanceDurationConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidOffsetToStartScheduleConfigs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrStartBlockOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrTotalOfSchedulesExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnexistedSchedule\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOffsetToStartSchedule\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxOffsetToStartSchedule\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSchedules\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cooldownSecsToMaintain\",\"type\":\"uint256\"}],\"name\":\"MaintenanceConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"MaintenanceScheduleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMaintenance.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"MaintenanceScheduled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"cancelSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"checkCooldownEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"checkMaintained\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"checkMaintainedById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"}],\"name\":\"checkMaintainedInBlockRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"checkManyMaintained\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"checkManyMaintainedById\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"}],\"name\":\"checkManyMaintainedInBlockRange\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"}],\"name\":\"checkManyMaintainedInBlockRangeById\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"checkScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSecsToMaintain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IMaintenance.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceDurationInBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMaintenanceDurationInBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOffsetToStartSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOffsetToStartSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSecsToMaintain_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profileContract_\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMaintenanceDurationInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOffsetToStartSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMaintenanceDurationInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOffsetToStartSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAtBlock\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minMaintenanceDurationInBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMaintenanceDurationInBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOffsetToStartSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOffsetToStartSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSecsToMaintain_\",\"type\":\"uint256\"}],\"name\":\"setMaintenanceConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyOnMaintenance()\":[{\"details\":\"Error thrown when attempting to initiate maintenance while already in maintenance mode.\"}],\"ErrAlreadyScheduled()\":[{\"details\":\"Error thrown when attempting to schedule an already scheduled event.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrCooldownTimeNotYetEnded()\":[{\"details\":\"Error thrown when attempting an action before the cooldown period has ended.\"}],\"ErrEndBlockOutOfRange()\":[{\"details\":\"Error thrown when the end block of a schedule is out of range.\"}],\"ErrInvalidMaintenanceDuration()\":[{\"details\":\"Error thrown when an invalid maintenance duration is specified.\"}],\"ErrInvalidMaintenanceDurationConfig()\":[{\"details\":\"Error thrown when an invalid maintenance duration configuration is provided.\"}],\"ErrInvalidOffsetToStartScheduleConfigs()\":[{\"details\":\"Error thrown when an invalid offset is specified to start the schedule configurations.\"}],\"ErrStartBlockOutOfRange()\":[{\"details\":\"Error thrown when the start block of a schedule is out of range.\"}],\"ErrTotalOfSchedulesExceeded()\":[{\"details\":\"Error thrown when the total number of schedules exceeds the limit.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexistedSchedule()\":[{\"details\":\"Error thrown when referring to a non-existent schedule.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MaintenanceConfigUpdated(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the maintenance config is updated.\"},\"MaintenanceScheduleCancelled(address)\":{\"details\":\"Emitted when a schedule of maintenance is cancelled.\"},\"MaintenanceScheduled(address,(uint256,uint256,uint256,uint256))\":{\"details\":\"Emitted when a maintenance is scheduled.\"}},\"kind\":\"dev\",\"methods\":{\"cancelSchedule(address)\":{\"details\":\"Cancel the schedule of maintenance for the `consensusAddr`. Requirements: - The candidate `consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `consensusAddr`. - A schedule for the `consensusAddr` must be existent and not executed yet. Emits the event `MaintenanceScheduleCancelled`.\"},\"checkCooldownEnded(address)\":{\"details\":\"Returns whether the validator `consensusAddr` has finished cooldown.\"},\"checkMaintained(address,uint256)\":{\"details\":\"Returns whether the validator `consensusAddr` maintained at the block number `_block`.\"},\"checkMaintainedInBlockRange(address,uint256,uint256)\":{\"details\":\"Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\"},\"checkManyMaintained(address[],uint256)\":{\"details\":\"Returns the bool array indicating the validators maintained at block number `k` or not.\"},\"checkManyMaintainedInBlockRange(address[],uint256,uint256)\":{\"details\":\"Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\"},\"checkScheduled(address)\":{\"details\":\"Returns whether the validator `consensusAddr` has schedule.\"},\"cooldownSecsToMaintain()\":{\"details\":\"Returns the cooldown to maintain in seconds.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getSchedule(address)\":{\"details\":\"Returns the detailed schedule of the validator `consensusAddr`.\"},\"initialize(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"maxMaintenanceDurationInBlock()\":{\"details\":\"Returns the max duration for maintenance in block.\"},\"maxOffsetToStartSchedule()\":{\"details\":\"The offset to the max block number that the schedule can start\"},\"maxSchedule()\":{\"details\":\"Returns the max number of scheduled maintenances.\"},\"minMaintenanceDurationInBlock()\":{\"details\":\"Returns the min duration for maintenance in block.\"},\"minOffsetToStartSchedule()\":{\"details\":\"The offset to the min block number that the schedule can start\"},\"schedule(address,uint256,uint256)\":{\"details\":\"Schedules for maintenance from `startedAtBlock` to `endedAtBlock`. Requirements: - The candidate `consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `consensusAddr`. - The candidate `consensusAddr` has no schedule yet or the previous is done. - The total number of schedules is not larger than `maxSchedules()`. - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block. - The end block is larger than the start block. - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`. - The start block is at the start of an epoch. - The end block is at the end of an epoch. Emits the event `MaintenanceScheduled`.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setMaintenanceConfig(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the duration restriction, start time restriction, and max allowed for maintenance. Requirements: - The method caller is admin. - The max duration is larger than the min duration. - The max offset is larger than the min offset. Emits the event `MaintenanceConfigUpdated`.\"},\"totalSchedule()\":{\"details\":\"Returns the total of current schedules.\"}},\"stateVariables\":{\"_cooldownSecsToMaintain\":{\"details\":\"The cooldown time to request new schedule.\"},\"_maxMaintenanceDurationInBlock\":{\"details\":\"The max duration to maintenance in blocks.\"},\"_maxOffsetToStartSchedule\":{\"details\":\"The offset to the max block number that the schedule can start.\"},\"_maxSchedule\":{\"details\":\"The max number of scheduled maintenances.\"},\"_minMaintenanceDurationInBlock\":{\"details\":\"The min duration to maintenance in blocks.\"},\"_minOffsetToStartSchedule\":{\"details\":\"The offset to the min block number that the schedule can start.\"},\"_schedule\":{\"details\":\"Mapping from candidate id => maintenance schedule.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/Maintenance.sol\":\"Maintenance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../udvts/Types.sol\\\";\\n\\ninterface IMaintenance {\\n  /**\\n   * @dev Error thrown when attempting to schedule an already scheduled event.\\n   */\\n  error ErrAlreadyScheduled();\\n\\n  /**\\n   * @dev Error thrown when referring to a non-existent schedule.\\n   */\\n  error ErrUnexistedSchedule();\\n\\n  /**\\n   * @dev Error thrown when the end block of a schedule is out of range.\\n   */\\n  error ErrEndBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when the start block of a schedule is out of range.\\n   */\\n  error ErrStartBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when attempting to initiate maintenance while already in maintenance mode.\\n   */\\n  error ErrAlreadyOnMaintenance();\\n\\n  /**\\n   * @dev Error thrown when attempting an action before the cooldown period has ended.\\n   */\\n  error ErrCooldownTimeNotYetEnded();\\n\\n  /**\\n   * @dev Error thrown when the total number of schedules exceeds the limit.\\n   */\\n  error ErrTotalOfSchedulesExceeded();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration is specified.\\n   */\\n  error ErrInvalidMaintenanceDuration();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration configuration is provided.\\n   */\\n  error ErrInvalidMaintenanceDurationConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid offset is specified to start the schedule configurations.\\n   */\\n  error ErrInvalidOffsetToStartScheduleConfigs();\\n\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n    uint256 requestTimestamp;\\n  }\\n\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed cid, Schedule);\\n  /// @dev Emitted when a schedule of maintenance is cancelled.\\n  event MaintenanceScheduleCancelled(address indexed cid);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules,\\n    uint256 cooldownSecsToMaintain\\n  );\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(TConsensus consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator whose id `validatorId` maintained at the block number `_block`.\\n   */\\n  function checkMaintainedById(address validatorId, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    TConsensus consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `k` or not.\\n   */\\n  function checkManyMaintained(\\n    TConsensus[] calldata consensusAddrList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedById(\\n    address[] calldata candidateIdList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    TConsensus[] calldata _consensusAddrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedInBlockRangeById(\\n    address[] calldata idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has finished cooldown.\\n   */\\n  function checkCooldownEnded(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has schedule.\\n   */\\n  function checkScheduled(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `consensusAddr`.\\n   */\\n  function getSchedule(TConsensus consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedule() external view returns (uint256 count);\\n\\n  /**\\n   * @dev Returns the cooldown to maintain in seconds.\\n   */\\n  function cooldownSecsToMaintain() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedules_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `startedAtBlock` to `endedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - The candidate `consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(TConsensus consensusAddr, uint256 startedAtBlock, uint256 endedAtBlock) external;\\n\\n  /**\\n   * @dev Cancel the schedule of maintenance for the `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - A schedule for the `consensusAddr` must be existent and not executed yet.\\n   *\\n   * Emits the event `MaintenanceScheduleCancelled`.\\n   */\\n  function cancelSchedule(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x102d9129a1e6af05bd3a979347cfc1d07246317e09c749a2e4b196a93b0d62ab\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Pool admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Last public key change timestamp.\\n    uint256 pubkeyLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change public key because cooldown is not ended.\\n  error ErrPubkeyChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Add a new profile.\\n   *\\n   * @dev Requirements:\\n   * - The profile must not be existent before.\\n   * - Only contract admin can call this method.\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external;\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setPubkeyChangeCooldown(uint256 cooldown) external;\\n}\\n\",\"keccak256\":\"0x9bb73040b679f2c318bf995f81950004b6e306166080325eb0a177fc85d4603f\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x7943726a9ecd82a625d3f86c5f7ddbe02427368478b6c98d90fe93dc2f399ba4\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeAdminAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddress(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddress(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeTreasuryAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddress(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xfbe83dc9a4df46f4eb34b6d68c73041de663f188671264c7fe5315b8a0813511\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed cid,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] cids,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xabf7541c6acfef6db495585f74bc9be88a65c20b09850197bc06ab452f07d172\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0xaa2df8b56a83730a3a1b3876708570d70843802737ff7c776a5725c71d7ea8f7\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0xf4f96a624e7c77bbce044c67e3f4b406e65871debc19e7bfab663c1fcfcbc7b0\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x27afa712094804b997f55e8f8d320760e07d7260ab33aeb8fb61c39849f09bf3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xa6298427da3b2055724dc3a6457e653629ce760ef39abfb15dfdfdd5a809a261\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/ronin/Maintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IMaintenance.sol\\\";\\nimport \\\"../interfaces/IProfile.sol\\\";\\nimport \\\"../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../utils/DeprecatedSlots.sol\\\";\\nimport { ErrUnauthorized, RoleAccess } from \\\"../utils/CommonErrors.sol\\\";\\n\\ncontract Maintenance is IMaintenance, HasContracts, HasValidatorDeprecated, Initializable {\\n  using Math for uint256;\\n\\n  /// @dev Mapping from candidate id => maintenance schedule.\\n  mapping(address => Schedule) internal _schedule;\\n\\n  /// @dev The min duration to maintenance in blocks.\\n  uint256 internal _minMaintenanceDurationInBlock;\\n  /// @dev The max duration to maintenance in blocks.\\n  uint256 internal _maxMaintenanceDurationInBlock;\\n  /// @dev The offset to the min block number that the schedule can start.\\n  uint256 internal _minOffsetToStartSchedule;\\n  /// @dev The offset to the max block number that the schedule can start.\\n  uint256 internal _maxOffsetToStartSchedule;\\n  /// @dev The max number of scheduled maintenances.\\n  uint256 internal _maxSchedule;\\n  /// @dev The cooldown time to request new schedule.\\n  uint256 internal _cooldownSecsToMaintain;\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address validatorContract,\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedule_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external initializer {\\n    _setContract(ContractType.VALIDATOR, validatorContract);\\n    _setMaintenanceConfig(\\n      minMaintenanceDurationInBlock_,\\n      maxMaintenanceDurationInBlock_,\\n      minOffsetToStartSchedule_,\\n      maxOffsetToStartSchedule_,\\n      maxSchedule_,\\n      cooldownSecsToMaintain_\\n    );\\n  }\\n\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ______deprecatedValidator);\\n    delete ______deprecatedValidator;\\n  }\\n\\n  function initializeV3(address profileContract_) external reinitializer(3) {\\n    _setContract(ContractType.PROFILE, profileContract_);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256) {\\n    return _minMaintenanceDurationInBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256) {\\n    return _maxMaintenanceDurationInBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256) {\\n    return _minOffsetToStartSchedule;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256) {\\n    return _maxOffsetToStartSchedule;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function maxSchedule() external view returns (uint256) {\\n    return _maxSchedule;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function cooldownSecsToMaintain() external view returns (uint256) {\\n    return _cooldownSecsToMaintain;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedule_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external onlyAdmin {\\n    _setMaintenanceConfig(\\n      minMaintenanceDurationInBlock_,\\n      maxMaintenanceDurationInBlock_,\\n      minOffsetToStartSchedule_,\\n      maxOffsetToStartSchedule_,\\n      maxSchedule_,\\n      cooldownSecsToMaintain_\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function schedule(TConsensus consensusAddr, uint256 startedAtBlock, uint256 endedAtBlock) external override {\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    address candidateId = __css2cid(consensusAddr);\\n\\n    if (!validatorContract.isBlockProducer(consensusAddr)) revert ErrUnauthorized(msg.sig, RoleAccess.BLOCK_PRODUCER);\\n    if (!validatorContract.isCandidateAdmin(consensusAddr, msg.sender))\\n      revert ErrUnauthorized(msg.sig, RoleAccess.CANDIDATE_ADMIN);\\n    if (_checkScheduledById(candidateId)) revert ErrAlreadyScheduled();\\n    if (!_checkCooldownEndedById(candidateId)) revert ErrCooldownTimeNotYetEnded();\\n    if (totalSchedule() >= _maxSchedule) revert ErrTotalOfSchedulesExceeded();\\n    if (!startedAtBlock.inRange(block.number + _minOffsetToStartSchedule, block.number + _maxOffsetToStartSchedule)) {\\n      revert ErrStartBlockOutOfRange();\\n    }\\n    if (startedAtBlock >= endedAtBlock) revert ErrStartBlockOutOfRange();\\n\\n    uint256 maintenanceElapsed = endedAtBlock - startedAtBlock + 1;\\n\\n    if (!maintenanceElapsed.inRange(_minMaintenanceDurationInBlock, _maxMaintenanceDurationInBlock)) {\\n      revert ErrInvalidMaintenanceDuration();\\n    }\\n    if (!validatorContract.epochEndingAt(startedAtBlock - 1)) revert ErrStartBlockOutOfRange();\\n    if (!validatorContract.epochEndingAt(endedAtBlock)) revert ErrEndBlockOutOfRange();\\n\\n    Schedule storage _sSchedule = _schedule[candidateId];\\n    _sSchedule.from = startedAtBlock;\\n    _sSchedule.to = endedAtBlock;\\n    _sSchedule.lastUpdatedBlock = block.number;\\n    _sSchedule.requestTimestamp = block.timestamp;\\n    emit MaintenanceScheduled(candidateId, _sSchedule);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function cancelSchedule(TConsensus consensusAddr) external override {\\n    if (!IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isCandidateAdmin(consensusAddr, msg.sender)) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.CANDIDATE_ADMIN);\\n    }\\n\\n    address candidateId = __css2cid(consensusAddr);\\n\\n    if (!_checkScheduledById(candidateId)) revert ErrUnexistedSchedule();\\n    if (_checkMaintainedById(candidateId, block.number)) revert ErrAlreadyOnMaintenance();\\n\\n    Schedule storage _sSchedule = _schedule[candidateId];\\n    delete _sSchedule.from;\\n    delete _sSchedule.to;\\n    _sSchedule.lastUpdatedBlock = block.number;\\n    emit MaintenanceScheduleCancelled(candidateId);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function getSchedule(TConsensus consensusAddr) external view override returns (Schedule memory) {\\n    return _schedule[__css2cid(consensusAddr)];\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkManyMaintained(\\n    TConsensus[] calldata addrList,\\n    uint256 atBlock\\n  ) external view override returns (bool[] memory) {\\n    address[] memory idList = __css2cidBatch(addrList);\\n    return _checkManyMaintainedById(idList, atBlock);\\n  }\\n\\n  function checkManyMaintainedById(\\n    address[] calldata idList,\\n    uint256 atBlock\\n  ) external view override returns (bool[] memory) {\\n    return _checkManyMaintainedById(idList, atBlock);\\n  }\\n\\n  function _checkManyMaintainedById(\\n    address[] memory idList,\\n    uint256 atBlock\\n  ) internal view returns (bool[] memory resList) {\\n    resList = new bool[](idList.length);\\n    for (uint i = 0; i < idList.length; ) {\\n      resList[i] = _checkMaintainedById(idList[i], atBlock);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    TConsensus[] calldata addrList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view override returns (bool[] memory) {\\n    address[] memory idList = __css2cidBatch(addrList);\\n    return _checkManyMaintainedInBlockRangeById(idList, fromBlock, toBlock);\\n  }\\n\\n  function checkManyMaintainedInBlockRangeById(\\n    address[] calldata idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view override returns (bool[] memory) {\\n    return _checkManyMaintainedInBlockRangeById(idList, fromBlock, toBlock);\\n  }\\n\\n  function _checkManyMaintainedInBlockRangeById(\\n    address[] memory idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) internal view returns (bool[] memory resList) {\\n    resList = new bool[](idList.length);\\n    for (uint i = 0; i < idList.length; ) {\\n      resList[i] = _maintainingInBlockRange(idList[i], fromBlock, toBlock);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function totalSchedule() public view override returns (uint256 count) {\\n    address[] memory validatorIds = IRoninValidatorSet(getContract(ContractType.VALIDATOR)).getValidatorIds();\\n    unchecked {\\n      for (uint i = 0; i < validatorIds.length; i++) {\\n        if (_checkScheduledById(validatorIds[i])) {\\n          count++;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkMaintained(TConsensus consensusAddr, uint256 atBlock) external view override returns (bool) {\\n    return _checkMaintainedById(__css2cid(consensusAddr), atBlock);\\n  }\\n\\n  function checkMaintainedById(address candidateId, uint256 atBlock) external view override returns (bool) {\\n    return _checkMaintainedById(candidateId, atBlock);\\n  }\\n\\n  function _checkMaintainedById(address candidateId, uint256 atBlock) internal view returns (bool) {\\n    Schedule storage _s = _schedule[candidateId];\\n    return _s.from <= atBlock && atBlock <= _s.to;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkMaintainedInBlockRange(\\n    TConsensus consensusAddr,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) public view override returns (bool) {\\n    return _maintainingInBlockRange(__css2cid(consensusAddr), fromBlock, toBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkScheduled(TConsensus consensusAddr) external view override returns (bool) {\\n    return _checkScheduledById(__css2cid(consensusAddr));\\n  }\\n\\n  function _checkScheduledById(address candidateId) internal view returns (bool) {\\n    return block.number <= _schedule[candidateId].to;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkCooldownEnded(TConsensus consensusAddr) external view override returns (bool) {\\n    return _checkCooldownEndedById(__css2cid(consensusAddr));\\n  }\\n\\n  function _checkCooldownEndedById(address candidateId) internal view returns (bool) {\\n    return block.timestamp > _schedule[candidateId].requestTimestamp + _cooldownSecsToMaintain;\\n  }\\n\\n  /**\\n   * @dev Sets the min block period and max block period to maintenance.\\n   *\\n   * Requirements:\\n   * - The max period is larger than the min period.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function _setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedule_,\\n    uint256 cooldownSecsToMaintain_\\n  ) internal {\\n    if (minMaintenanceDurationInBlock_ >= maxMaintenanceDurationInBlock_) revert ErrInvalidMaintenanceDurationConfig();\\n    if (minOffsetToStartSchedule_ >= maxOffsetToStartSchedule_) revert ErrInvalidOffsetToStartScheduleConfigs();\\n\\n    _minMaintenanceDurationInBlock = minMaintenanceDurationInBlock_;\\n    _maxMaintenanceDurationInBlock = maxMaintenanceDurationInBlock_;\\n    _minOffsetToStartSchedule = minOffsetToStartSchedule_;\\n    _maxOffsetToStartSchedule = maxOffsetToStartSchedule_;\\n    _maxSchedule = maxSchedule_;\\n    _cooldownSecsToMaintain = cooldownSecsToMaintain_;\\n    emit MaintenanceConfigUpdated(\\n      minMaintenanceDurationInBlock_,\\n      maxMaintenanceDurationInBlock_,\\n      minOffsetToStartSchedule_,\\n      maxOffsetToStartSchedule_,\\n      maxSchedule_,\\n      cooldownSecsToMaintain_\\n    );\\n  }\\n\\n  /**\\n   * @dev Check if the validator was maintaining in the current period.\\n   *\\n   * Note: This method should be called at the end of the period.\\n   */\\n  function _maintainingInBlockRange(\\n    address candidateId,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) private view returns (bool) {\\n    Schedule storage s = _schedule[candidateId];\\n    return Math.twoRangeOverlap(fromBlock, toBlock, s.from, s.to);\\n  }\\n\\n  function __css2cid(TConsensus consensusAddr) internal view returns (address) {\\n    return IProfile(getContract(ContractType.PROFILE)).getConsensus2Id(consensusAddr);\\n  }\\n\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view returns (address[] memory) {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyConsensus2Id(consensusAddrs);\\n  }\\n}\\n\",\"keccak256\":\"0xce42635e58deede4acd2bda7fe5517b74ae9dfbfe3d7c0c25430cfc9b67cd7f5\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 28,
  "numDeployments": 11,
  "storageLayout": {
    "storage": [
      {
        "astId": 38263,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 150154,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 150157,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 19092,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_schedule",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Schedule)6906_storage)"
      },
      {
        "astId": 19095,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_minMaintenanceDurationInBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 19098,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_maxMaintenanceDurationInBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 19101,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_minOffsetToStartSchedule",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 19104,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_maxOffsetToStartSchedule",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 19107,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_maxSchedule",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 19110,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_cooldownSecsToMaintain",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Schedule)6906_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMaintenance.Schedule)",
        "numberOfBytes": "32",
        "value": "t_struct(Schedule)6906_storage"
      },
      "t_struct(Schedule)6906_storage": {
        "encoding": "inplace",
        "label": "struct IMaintenance.Schedule",
        "numberOfBytes": "128",
        "members": [
          {
            "astId": 6899,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6901,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6903,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "lastUpdatedBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6905,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "requestTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1708420448,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}