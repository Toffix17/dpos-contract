{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADMIN_ROLE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "SENTRY_ROLE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "changeTarget",
      "inputs": [
        {
          "name": "_target",
          "type": "address",
          "internalType": "contract IPauseTarget"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "emergency",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleAdmin",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleMember",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleMemberCount",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "grantRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "grantSentry",
      "inputs": [
        {
          "name": "_sentry",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "hasRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "_target",
          "type": "address",
          "internalType": "contract IPauseTarget"
        },
        {
          "name": "_admin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_sentries",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "renounceRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revokeRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revokeSentry",
      "inputs": [
        {
          "name": "_sentry",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "target",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "contract IPauseTarget"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "triggerPause",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "triggerUnpause",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "EmergencyPaused",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyUnpaused",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleAdminChanged",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "previousAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "newAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleGranted",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleRevoked",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TargetChanged",
      "inputs": [
        {
          "name": "target",
          "type": "address",
          "indexed": false,
          "internalType": "contract IPauseTarget"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrNotOnEmergencyPause",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrTargetIsNotOnPaused",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrTargetIsOnPaused",
      "inputs": []
    }
  ],
  "address": "0x579f7b862f8ad848968e0cd673ff7bf91b2aafe8",
  "args": "0x",
  "ast": {
    "absolutePath": "contracts/ronin/gateway/PauseEnforcer.sol",
    "id": 25866,
    "exportedSymbols": {
      "AccessControl": [
        150793
      ],
      "AccessControlEnumerable": [
        150918
      ],
      "Address": [
        153456
      ],
      "Context": [
        153478
      ],
      "ERC165": [
        154176
      ],
      "EnumerableSet": [
        154787
      ],
      "IAccessControl": [
        150991
      ],
      "IAccessControlEnumerable": [
        151016
      ],
      "IERC165": [
        154188
      ],
      "IPauseTarget": [
        7342
      ],
      "Initializable": [
        151991
      ],
      "PauseEnforcer": [
        25865
      ],
      "Strings": [
        153764
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:3522:135",
    "nodes": [
      {
        "id": 25625,
        "nodeType": "PragmaDirective",
        "src": "32:23:135",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 25626,
        "nodeType": "ImportDirective",
        "src": "57:68:135",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol",
        "file": "@openzeppelin/contracts/access/AccessControlEnumerable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 25866,
        "sourceUnit": 150919,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 25627,
        "nodeType": "ImportDirective",
        "src": "126:63:135",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 25866,
        "sourceUnit": 151992,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 25628,
        "nodeType": "ImportDirective",
        "src": "190:43:135",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IPauseTarget.sol",
        "file": "../../interfaces/IPauseTarget.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 25866,
        "sourceUnit": 7343,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 25865,
        "nodeType": "ContractDefinition",
        "src": "235:3318:135",
        "nodes": [
          {
            "id": 25635,
            "nodeType": "ErrorDefinition",
            "src": "383:28:135",
            "nodes": [],
            "documentation": {
              "id": 25633,
              "nodeType": "StructuredDocumentation",
              "src": "304:76:135",
              "text": " @dev Error thrown when the target is already on paused state."
            },
            "errorSelector": "f43dabd8",
            "name": "ErrTargetIsOnPaused",
            "nameLocation": "389:19:135",
            "parameters": {
              "id": 25634,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "408:2:135"
            }
          },
          {
            "id": 25638,
            "nodeType": "ErrorDefinition",
            "src": "490:31:135",
            "nodes": [],
            "documentation": {
              "id": 25636,
              "nodeType": "StructuredDocumentation",
              "src": "415:72:135",
              "text": " @dev Error thrown when the target is not on paused state."
            },
            "errorSelector": "200cfeea",
            "name": "ErrTargetIsNotOnPaused",
            "nameLocation": "496:22:135",
            "parameters": {
              "id": 25637,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "518:2:135"
            }
          },
          {
            "id": 25641,
            "nodeType": "ErrorDefinition",
            "src": "605:31:135",
            "nodes": [],
            "documentation": {
              "id": 25639,
              "nodeType": "StructuredDocumentation",
              "src": "525:77:135",
              "text": " @dev Error thrown when the contract is not on emergency pause."
            },
            "errorSelector": "d97ea9f8",
            "name": "ErrNotOnEmergencyPause",
            "nameLocation": "611:22:135",
            "parameters": {
              "id": 25640,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "633:2:135"
            }
          },
          {
            "id": 25646,
            "nodeType": "VariableDeclaration",
            "src": "640:62:135",
            "nodes": [],
            "constant": true,
            "functionSelector": "7a9ad019",
            "mutability": "constant",
            "name": "SENTRY_ROLE",
            "nameLocation": "664:11:135",
            "scope": 25865,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 25642,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "640:7:135",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "53454e5452595f524f4c45",
                  "id": 25644,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "688:13:135",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_5bea60102f2a7acc9e82b1af0e3bd4069661102bb5dd143a6051cd1980dded1c",
                    "typeString": "literal_string \"SENTRY_ROLE\""
                  },
                  "value": "SENTRY_ROLE"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_5bea60102f2a7acc9e82b1af0e3bd4069661102bb5dd143a6051cd1980dded1c",
                    "typeString": "literal_string \"SENTRY_ROLE\""
                  }
                ],
                "id": 25643,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "678:9:135",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 25645,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "678:24:135",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 25650,
            "nodeType": "VariableDeclaration",
            "src": "782:26:135",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 25647,
              "nodeType": "StructuredDocumentation",
              "src": "707:72:135",
              "text": "@dev The contract that can be paused or unpaused by the SENTRY_ROLE."
            },
            "functionSelector": "d4b83992",
            "mutability": "mutable",
            "name": "target",
            "nameLocation": "802:6:135",
            "scope": 25865,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IPauseTarget_$7342",
              "typeString": "contract IPauseTarget"
            },
            "typeName": {
              "id": 25649,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 25648,
                "name": "IPauseTarget",
                "nameLocations": [
                  "782:12:135"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 7342,
                "src": "782:12:135"
              },
              "referencedDeclaration": 7342,
              "src": "782:12:135",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                "typeString": "contract IPauseTarget"
              }
            },
            "visibility": "public"
          },
          {
            "id": 25653,
            "nodeType": "VariableDeclaration",
            "src": "898:21:135",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 25651,
              "nodeType": "StructuredDocumentation",
              "src": "812:83:135",
              "text": "@dev Indicating whether or not the target contract is paused in emergency mode."
            },
            "functionSelector": "caa6fea4",
            "mutability": "mutable",
            "name": "emergency",
            "nameLocation": "910:9:135",
            "scope": 25865,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 25652,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "898:4:135",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "id": 25658,
            "nodeType": "EventDefinition",
            "src": "996:39:135",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 25654,
              "nodeType": "StructuredDocumentation",
              "src": "924:69:135",
              "text": "@dev Emitted when the emergency ppause is triggered by `account`."
            },
            "eventSelector": "b8fad2fa0ed7a383e747c309ef2c4391d7b65592a48893e57ccc1fab70791456",
            "name": "EmergencyPaused",
            "nameLocation": "1002:15:135",
            "parameters": {
              "id": 25657,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25656,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "1026:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25658,
                  "src": "1018:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25655,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1018:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1017:17:135"
            }
          },
          {
            "id": 25663,
            "nodeType": "EventDefinition",
            "src": "1111:41:135",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 25659,
              "nodeType": "StructuredDocumentation",
              "src": "1038:70:135",
              "text": "@dev Emitted when the emergency unpause is triggered by `account`."
            },
            "eventSelector": "f5cbf596165cc457b2cd92e8d8450827ee314968160a5696402d75766fc52caf",
            "name": "EmergencyUnpaused",
            "nameLocation": "1117:17:135",
            "parameters": {
              "id": 25662,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25661,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "1143:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25663,
                  "src": "1135:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25660,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1135:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1134:17:135"
            }
          },
          {
            "id": 25669,
            "nodeType": "EventDefinition",
            "src": "1202:41:135",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 25664,
              "nodeType": "StructuredDocumentation",
              "src": "1155:44:135",
              "text": "@dev Emitted when the target is changed."
            },
            "eventSelector": "7f8cffd58ac96898bdd25ab64868bd933141d15ad1cd4a0df228fd3fcba2a26d",
            "name": "TargetChanged",
            "nameLocation": "1208:13:135",
            "parameters": {
              "id": 25668,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25667,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "1235:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25669,
                  "src": "1222:19:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                    "typeString": "contract IPauseTarget"
                  },
                  "typeName": {
                    "id": 25666,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 25665,
                      "name": "IPauseTarget",
                      "nameLocations": [
                        "1222:12:135"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 7342,
                      "src": "1222:12:135"
                    },
                    "referencedDeclaration": 7342,
                    "src": "1222:12:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                      "typeString": "contract IPauseTarget"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1221:21:135"
            }
          },
          {
            "id": 25679,
            "nodeType": "ModifierDefinition",
            "src": "1247:89:135",
            "nodes": [],
            "body": {
              "id": 25678,
              "nodeType": "Block",
              "src": "1270:66:135",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "id": 25672,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1280:10:135",
                    "subExpression": {
                      "id": 25671,
                      "name": "emergency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25653,
                      "src": "1281:9:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 25676,
                  "nodeType": "IfStatement",
                  "src": "1276:47:135",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 25673,
                        "name": "ErrNotOnEmergencyPause",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25641,
                        "src": "1299:22:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 25674,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1299:24:135",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 25675,
                    "nodeType": "RevertStatement",
                    "src": "1292:31:135"
                  }
                },
                {
                  "id": 25677,
                  "nodeType": "PlaceholderStatement",
                  "src": "1330:1:135"
                }
              ]
            },
            "name": "onEmergency",
            "nameLocation": "1256:11:135",
            "parameters": {
              "id": 25670,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1267:2:135"
            },
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 25691,
            "nodeType": "ModifierDefinition",
            "src": "1340:93:135",
            "nodes": [],
            "body": {
              "id": 25690,
              "nodeType": "Block",
              "src": "1364:69:135",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "id": 25684,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1374:16:135",
                    "subExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "id": 25681,
                          "name": "target",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 25650,
                          "src": "1375:6:135",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                            "typeString": "contract IPauseTarget"
                          }
                        },
                        "id": 25682,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1382:6:135",
                        "memberName": "paused",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 7341,
                        "src": "1375:13:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$__$returns$_t_bool_$",
                          "typeString": "function () external returns (bool)"
                        }
                      },
                      "id": 25683,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1375:15:135",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 25688,
                  "nodeType": "IfStatement",
                  "src": "1370:50:135",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 25685,
                        "name": "ErrTargetIsOnPaused",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25635,
                        "src": "1399:19:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 25686,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1399:21:135",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 25687,
                    "nodeType": "RevertStatement",
                    "src": "1392:28:135"
                  }
                },
                {
                  "id": 25689,
                  "nodeType": "PlaceholderStatement",
                  "src": "1427:1:135"
                }
              ]
            },
            "name": "targetPaused",
            "nameLocation": "1349:12:135",
            "parameters": {
              "id": 25680,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1361:2:135"
            },
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 25702,
            "nodeType": "ModifierDefinition",
            "src": "1437:98:135",
            "nodes": [],
            "body": {
              "id": 25701,
              "nodeType": "Block",
              "src": "1464:71:135",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 25693,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25650,
                        "src": "1474:6:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                          "typeString": "contract IPauseTarget"
                        }
                      },
                      "id": 25694,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1481:6:135",
                      "memberName": "paused",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7341,
                      "src": "1474:13:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$__$returns$_t_bool_$",
                        "typeString": "function () external returns (bool)"
                      }
                    },
                    "id": 25695,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1474:15:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 25699,
                  "nodeType": "IfStatement",
                  "src": "1470:52:135",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 25696,
                        "name": "ErrTargetIsNotOnPaused",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25638,
                        "src": "1498:22:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 25697,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1498:24:135",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 25698,
                    "nodeType": "RevertStatement",
                    "src": "1491:31:135"
                  }
                },
                {
                  "id": 25700,
                  "nodeType": "PlaceholderStatement",
                  "src": "1529:1:135"
                }
              ]
            },
            "name": "targetNotPaused",
            "nameLocation": "1446:15:135",
            "parameters": {
              "id": 25692,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1461:2:135"
            },
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 25709,
            "nodeType": "FunctionDefinition",
            "src": "1539:47:135",
            "nodes": [],
            "body": {
              "id": 25708,
              "nodeType": "Block",
              "src": "1553:33:135",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 25705,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 151990,
                      "src": "1559:20:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 25706,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1559:22:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25707,
                  "nodeType": "ExpressionStatement",
                  "src": "1559:22:135"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 25703,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1550:2:135"
            },
            "returnParameters": {
              "id": 25704,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1553:0:135"
            },
            "scope": 25865,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 25753,
            "nodeType": "FunctionDefinition",
            "src": "1646:322:135",
            "nodes": [],
            "body": {
              "id": 25752,
              "nodeType": "Block",
              "src": "1753:215:135",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 25724,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25713,
                        "src": "1773:7:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                          "typeString": "contract IPauseTarget"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                          "typeString": "contract IPauseTarget"
                        }
                      ],
                      "id": 25723,
                      "name": "_changeTarget",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25864,
                      "src": "1759:13:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IPauseTarget_$7342_$returns$__$",
                        "typeString": "function (contract IPauseTarget)"
                      }
                    },
                    "id": 25725,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1759:22:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25726,
                  "nodeType": "ExpressionStatement",
                  "src": "1759:22:135"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 25728,
                        "name": "DEFAULT_ADMIN_ROLE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 150501,
                        "src": "1798:18:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 25729,
                        "name": "_admin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25715,
                        "src": "1818:6:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 25727,
                      "name": "_setupRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 150701,
                      "src": "1787:10:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 25730,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1787:38:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25731,
                  "nodeType": "ExpressionStatement",
                  "src": "1787:38:135"
                },
                {
                  "body": {
                    "id": 25750,
                    "nodeType": "Block",
                    "src": "1870:94:135",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 25740,
                              "name": "SENTRY_ROLE",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25646,
                              "src": "1889:11:135",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 25741,
                                "name": "_sentries",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 25718,
                                "src": "1902:9:135",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                  "typeString": "address[] memory"
                                }
                              },
                              "id": 25743,
                              "indexExpression": {
                                "id": 25742,
                                "name": "_i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 25733,
                                "src": "1912:2:135",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1902:13:135",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 25739,
                            "name": "_grantRole",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              150893
                            ],
                            "referencedDeclaration": 150893,
                            "src": "1878:10:135",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                              "typeString": "function (bytes32,address)"
                            }
                          },
                          "id": 25744,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1878:38:135",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 25745,
                        "nodeType": "ExpressionStatement",
                        "src": "1878:38:135"
                      },
                      {
                        "id": 25749,
                        "nodeType": "UncheckedBlock",
                        "src": "1925:33:135",
                        "statements": [
                          {
                            "expression": {
                              "id": 25747,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": true,
                              "src": "1945:4:135",
                              "subExpression": {
                                "id": 25746,
                                "name": "_i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 25733,
                                "src": "1947:2:135",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 25748,
                            "nodeType": "ExpressionStatement",
                            "src": "1945:4:135"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 25738,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 25735,
                      "name": "_i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25733,
                      "src": "1845:2:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 25736,
                        "name": "_sentries",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25718,
                        "src": "1850:9:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 25737,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1860:6:135",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1850:16:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1845:21:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 25751,
                  "initializationExpression": {
                    "assignments": [
                      25733
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 25733,
                        "mutability": "mutable",
                        "name": "_i",
                        "nameLocation": "1841:2:135",
                        "nodeType": "VariableDeclaration",
                        "scope": 25751,
                        "src": "1836:7:135",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 25732,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1836:4:135",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 25734,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1836:7:135"
                  },
                  "isSimpleCounterLoop": false,
                  "nodeType": "ForStatement",
                  "src": "1831:133:135"
                }
              ]
            },
            "documentation": {
              "id": 25710,
              "nodeType": "StructuredDocumentation",
              "src": "1590:53:135",
              "text": " @dev Initializes the contract storage."
            },
            "functionSelector": "77a24f36",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 25721,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 25720,
                  "name": "initializer",
                  "nameLocations": [
                    "1741:11:135"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 151911,
                  "src": "1741:11:135"
                },
                "nodeType": "ModifierInvocation",
                "src": "1741:11:135"
              }
            ],
            "name": "initialize",
            "nameLocation": "1655:10:135",
            "parameters": {
              "id": 25719,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25713,
                  "mutability": "mutable",
                  "name": "_target",
                  "nameLocation": "1679:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25753,
                  "src": "1666:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                    "typeString": "contract IPauseTarget"
                  },
                  "typeName": {
                    "id": 25712,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 25711,
                      "name": "IPauseTarget",
                      "nameLocations": [
                        "1666:12:135"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 7342,
                      "src": "1666:12:135"
                    },
                    "referencedDeclaration": 7342,
                    "src": "1666:12:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                      "typeString": "contract IPauseTarget"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25715,
                  "mutability": "mutable",
                  "name": "_admin",
                  "nameLocation": "1696:6:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25753,
                  "src": "1688:14:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25714,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1688:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25718,
                  "mutability": "mutable",
                  "name": "_sentries",
                  "nameLocation": "1721:9:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25753,
                  "src": "1704:26:135",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 25716,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1704:7:135",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 25717,
                    "nodeType": "ArrayTypeName",
                    "src": "1704:9:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1665:66:135"
            },
            "returnParameters": {
              "id": 25722,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1753:0:135"
            },
            "scope": 25865,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 25768,
            "nodeType": "FunctionDefinition",
            "src": "2043:119:135",
            "nodes": [],
            "body": {
              "id": 25767,
              "nodeType": "Block",
              "src": "2119:43:135",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 25763,
                        "name": "SENTRY_ROLE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25646,
                        "src": "2136:11:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 25764,
                        "name": "_sentry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25756,
                        "src": "2149:7:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 25762,
                      "name": "_grantRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        150893
                      ],
                      "referencedDeclaration": 150893,
                      "src": "2125:10:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 25765,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2125:32:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25766,
                  "nodeType": "ExpressionStatement",
                  "src": "2125:32:135"
                }
              ]
            },
            "documentation": {
              "id": 25754,
              "nodeType": "StructuredDocumentation",
              "src": "1972:68:135",
              "text": " @dev Grants the SENTRY_ROLE to the specified address."
            },
            "functionSelector": "7d4f7fc9",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 25759,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 150501,
                    "src": "2099:18:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 25760,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 25758,
                  "name": "onlyRole",
                  "nameLocations": [
                    "2090:8:135"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150512,
                  "src": "2090:8:135"
                },
                "nodeType": "ModifierInvocation",
                "src": "2090:28:135"
              }
            ],
            "name": "grantSentry",
            "nameLocation": "2052:11:135",
            "parameters": {
              "id": 25757,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25756,
                  "mutability": "mutable",
                  "name": "_sentry",
                  "nameLocation": "2072:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25768,
                  "src": "2064:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25755,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2064:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2063:17:135"
            },
            "returnParameters": {
              "id": 25761,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2119:0:135"
            },
            "scope": 25865,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 25783,
            "nodeType": "FunctionDefinition",
            "src": "2240:121:135",
            "nodes": [],
            "body": {
              "id": 25782,
              "nodeType": "Block",
              "src": "2317:44:135",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 25778,
                        "name": "SENTRY_ROLE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25646,
                        "src": "2335:11:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 25779,
                        "name": "_sentry",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25771,
                        "src": "2348:7:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 25777,
                      "name": "_revokeRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        150917
                      ],
                      "referencedDeclaration": 150917,
                      "src": "2323:11:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 25780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2323:33:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25781,
                  "nodeType": "ExpressionStatement",
                  "src": "2323:33:135"
                }
              ]
            },
            "documentation": {
              "id": 25769,
              "nodeType": "StructuredDocumentation",
              "src": "2166:71:135",
              "text": " @dev Revokes the SENTRY_ROLE from the specified address."
            },
            "functionSelector": "f82ec70b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 25774,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 150501,
                    "src": "2297:18:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 25775,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 25773,
                  "name": "onlyRole",
                  "nameLocations": [
                    "2288:8:135"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150512,
                  "src": "2288:8:135"
                },
                "nodeType": "ModifierInvocation",
                "src": "2288:28:135"
              }
            ],
            "name": "revokeSentry",
            "nameLocation": "2249:12:135",
            "parameters": {
              "id": 25772,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25771,
                  "mutability": "mutable",
                  "name": "_sentry",
                  "nameLocation": "2270:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25783,
                  "src": "2262:15:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25770,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2262:7:135",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2261:17:135"
            },
            "returnParameters": {
              "id": 25776,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2317:0:135"
            },
            "scope": 25865,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 25807,
            "nodeType": "FunctionDefinition",
            "src": "2558:156:135",
            "nodes": [],
            "body": {
              "id": 25806,
              "nodeType": "Block",
              "src": "2629:85:135",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 25794,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 25792,
                      "name": "emergency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25653,
                      "src": "2635:9:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 25793,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2647:4:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2635:16:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 25795,
                  "nodeType": "ExpressionStatement",
                  "src": "2635:16:135"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 25796,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25650,
                        "src": "2657:6:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                          "typeString": "contract IPauseTarget"
                        }
                      },
                      "id": 25798,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2664:5:135",
                      "memberName": "pause",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7333,
                      "src": "2657:12:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                        "typeString": "function () external"
                      }
                    },
                    "id": 25799,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2657:14:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25800,
                  "nodeType": "ExpressionStatement",
                  "src": "2657:14:135"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 25802,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2698:3:135",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 25803,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2702:6:135",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2698:10:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 25801,
                      "name": "EmergencyPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25658,
                      "src": "2682:15:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 25804,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2682:27:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25805,
                  "nodeType": "EmitStatement",
                  "src": "2677:32:135"
                }
              ]
            },
            "documentation": {
              "id": 25784,
              "nodeType": "StructuredDocumentation",
              "src": "2365:190:135",
              "text": " @dev Triggers a pause on the target contract.\n Requirements:\n - Only be called by accounts with the SENTRY_ROLE,\n - The target contract is not already paused."
            },
            "functionSelector": "6833f60d",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 25787,
                    "name": "SENTRY_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25646,
                    "src": "2600:11:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 25788,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 25786,
                  "name": "onlyRole",
                  "nameLocations": [
                    "2591:8:135"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150512,
                  "src": "2591:8:135"
                },
                "nodeType": "ModifierInvocation",
                "src": "2591:21:135"
              },
              {
                "id": 25790,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 25789,
                  "name": "targetNotPaused",
                  "nameLocations": [
                    "2613:15:135"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25702,
                  "src": "2613:15:135"
                },
                "nodeType": "ModifierInvocation",
                "src": "2613:15:135"
              }
            ],
            "name": "triggerPause",
            "nameLocation": "2567:12:135",
            "parameters": {
              "id": 25785,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2579:2:135"
            },
            "returnParameters": {
              "id": 25791,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2629:0:135"
            },
            "scope": 25865,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 25833,
            "nodeType": "FunctionDefinition",
            "src": "2966:172:135",
            "nodes": [],
            "body": {
              "id": 25832,
              "nodeType": "Block",
              "src": "3048:90:135",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 25820,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 25818,
                      "name": "emergency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25653,
                      "src": "3054:9:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 25819,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3066:5:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3054:17:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 25821,
                  "nodeType": "ExpressionStatement",
                  "src": "3054:17:135"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 25822,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25650,
                        "src": "3077:6:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                          "typeString": "contract IPauseTarget"
                        }
                      },
                      "id": 25824,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3084:7:135",
                      "memberName": "unpause",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7336,
                      "src": "3077:14:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                        "typeString": "function () external"
                      }
                    },
                    "id": 25825,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3077:16:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25826,
                  "nodeType": "ExpressionStatement",
                  "src": "3077:16:135"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 25828,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3122:3:135",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 25829,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3126:6:135",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3122:10:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 25827,
                      "name": "EmergencyUnpaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25663,
                      "src": "3104:17:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 25830,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3104:29:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25831,
                  "nodeType": "EmitStatement",
                  "src": "3099:34:135"
                }
              ]
            },
            "documentation": {
              "id": 25808,
              "nodeType": "StructuredDocumentation",
              "src": "2718:245:135",
              "text": " @dev Triggers an unpause on the target contract.\n Requirements:\n - Only be called by accounts with the SENTRY_ROLE,\n - The target contract is already paused.\n - The target contract is paused in emergency mode."
            },
            "functionSelector": "b9f3163b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 25811,
                    "name": "SENTRY_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25646,
                    "src": "3010:11:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 25812,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 25810,
                  "name": "onlyRole",
                  "nameLocations": [
                    "3001:8:135"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150512,
                  "src": "3001:8:135"
                },
                "nodeType": "ModifierInvocation",
                "src": "3001:21:135"
              },
              {
                "id": 25814,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 25813,
                  "name": "onEmergency",
                  "nameLocations": [
                    "3023:11:135"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25679,
                  "src": "3023:11:135"
                },
                "nodeType": "ModifierInvocation",
                "src": "3023:11:135"
              },
              {
                "id": 25816,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 25815,
                  "name": "targetPaused",
                  "nameLocations": [
                    "3035:12:135"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25691,
                  "src": "3035:12:135"
                },
                "nodeType": "ModifierInvocation",
                "src": "3035:12:135"
              }
            ],
            "name": "triggerUnpause",
            "nameLocation": "2975:14:135",
            "parameters": {
              "id": 25809,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2989:2:135"
            },
            "returnParameters": {
              "id": 25817,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3048:0:135"
            },
            "scope": 25865,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 25848,
            "nodeType": "FunctionDefinition",
            "src": "3249:115:135",
            "nodes": [],
            "body": {
              "id": 25847,
              "nodeType": "Block",
              "src": "3331:33:135",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 25844,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25837,
                        "src": "3351:7:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                          "typeString": "contract IPauseTarget"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                          "typeString": "contract IPauseTarget"
                        }
                      ],
                      "id": 25843,
                      "name": "_changeTarget",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25864,
                      "src": "3337:13:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IPauseTarget_$7342_$returns$__$",
                        "typeString": "function (contract IPauseTarget)"
                      }
                    },
                    "id": 25845,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3337:22:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25846,
                  "nodeType": "ExpressionStatement",
                  "src": "3337:22:135"
                }
              ]
            },
            "documentation": {
              "id": 25834,
              "nodeType": "StructuredDocumentation",
              "src": "3142:104:135",
              "text": " @dev Setter for `target`.\n Requirements:\n - Only admin can call this method."
            },
            "functionSelector": "dcf7bb5c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 25840,
                    "name": "DEFAULT_ADMIN_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 150501,
                    "src": "3311:18:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 25841,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 25839,
                  "name": "onlyRole",
                  "nameLocations": [
                    "3302:8:135"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150512,
                  "src": "3302:8:135"
                },
                "nodeType": "ModifierInvocation",
                "src": "3302:28:135"
              }
            ],
            "name": "changeTarget",
            "nameLocation": "3258:12:135",
            "parameters": {
              "id": 25838,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25837,
                  "mutability": "mutable",
                  "name": "_target",
                  "nameLocation": "3284:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25848,
                  "src": "3271:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                    "typeString": "contract IPauseTarget"
                  },
                  "typeName": {
                    "id": 25836,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 25835,
                      "name": "IPauseTarget",
                      "nameLocations": [
                        "3271:12:135"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 7342,
                      "src": "3271:12:135"
                    },
                    "referencedDeclaration": 7342,
                    "src": "3271:12:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                      "typeString": "contract IPauseTarget"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3270:22:135"
            },
            "returnParameters": {
              "id": 25842,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3331:0:135"
            },
            "scope": 25865,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 25864,
            "nodeType": "FunctionDefinition",
            "src": "3437:114:135",
            "nodes": [],
            "body": {
              "id": 25863,
              "nodeType": "Block",
              "src": "3491:60:135",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 25857,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 25855,
                      "name": "target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25650,
                      "src": "3497:6:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                        "typeString": "contract IPauseTarget"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 25856,
                      "name": "_target",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25852,
                      "src": "3506:7:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                        "typeString": "contract IPauseTarget"
                      }
                    },
                    "src": "3497:16:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                      "typeString": "contract IPauseTarget"
                    }
                  },
                  "id": 25858,
                  "nodeType": "ExpressionStatement",
                  "src": "3497:16:135"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 25860,
                        "name": "_target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25852,
                        "src": "3538:7:135",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                          "typeString": "contract IPauseTarget"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                          "typeString": "contract IPauseTarget"
                        }
                      ],
                      "id": 25859,
                      "name": "TargetChanged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25669,
                      "src": "3524:13:135",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_contract$_IPauseTarget_$7342_$returns$__$",
                        "typeString": "function (contract IPauseTarget)"
                      }
                    },
                    "id": 25861,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3524:22:135",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25862,
                  "nodeType": "EmitStatement",
                  "src": "3519:27:135"
                }
              ]
            },
            "documentation": {
              "id": 25849,
              "nodeType": "StructuredDocumentation",
              "src": "3368:66:135",
              "text": " @dev Internal helper for setting value to `target`."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_changeTarget",
            "nameLocation": "3446:13:135",
            "parameters": {
              "id": 25853,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25852,
                  "mutability": "mutable",
                  "name": "_target",
                  "nameLocation": "3473:7:135",
                  "nodeType": "VariableDeclaration",
                  "scope": 25864,
                  "src": "3460:20:135",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                    "typeString": "contract IPauseTarget"
                  },
                  "typeName": {
                    "id": 25851,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 25850,
                      "name": "IPauseTarget",
                      "nameLocations": [
                        "3460:12:135"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 7342,
                      "src": "3460:12:135"
                    },
                    "referencedDeclaration": 7342,
                    "src": "3460:12:135",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IPauseTarget_$7342",
                      "typeString": "contract IPauseTarget"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3459:22:135"
            },
            "returnParameters": {
              "id": 25854,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3491:0:135"
            },
            "scope": 25865,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 25629,
              "name": "AccessControlEnumerable",
              "nameLocations": [
                "261:23:135"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 150918,
              "src": "261:23:135"
            },
            "id": 25630,
            "nodeType": "InheritanceSpecifier",
            "src": "261:23:135"
          },
          {
            "baseName": {
              "id": 25631,
              "name": "Initializable",
              "nameLocations": [
                "286:13:135"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 151991,
              "src": "286:13:135"
            },
            "id": 25632,
            "nodeType": "InheritanceSpecifier",
            "src": "286:13:135"
          }
        ],
        "canonicalName": "PauseEnforcer",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          25865,
          151991,
          150918,
          150793,
          154176,
          154188,
          151016,
          150991,
          153478
        ],
        "name": "PauseEnforcer",
        "nameLocation": "244:13:135",
        "scope": 25866,
        "usedErrors": [
          25635,
          25638,
          25641
        ],
        "usedEvents": [
          25658,
          25663,
          25669,
          150930,
          150939,
          150948,
          151855
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 24102399,
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600254610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60025460ff90811610156100dc576002805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6113c5806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806391d14854116100b2578063caa6fea411610081578063d547741f11610066578063d547741f146102c3578063dcf7bb5c146102d6578063f82ec70b146102e957600080fd5b8063caa6fea414610296578063d4b83992146102aa57600080fd5b806391d148541461023c578063a217fddf14610273578063b9f3163b1461027b578063ca15c8731461028357600080fd5b80636833f60d116101095780637a9ad019116100ee5780637a9ad019146101d75780637d4f7fc9146101fe5780639010d07c1461021157600080fd5b80636833f60d146101bc57806377a24f36146101c457600080fd5b806301ffc9a71461013b578063248a9ca3146101635780632f2ff15d1461019457806336568abe146101a9575b600080fd5b61014e610149366004611026565b6102fc565b60405190151581526020015b60405180910390f35b610186610171366004611050565b60009081526020819052604090206001015490565b60405190815260200161015a565b6101a76101a236600461108e565b610340565b005b6101a76101b736600461108e565b61036a565b6101a76103fb565b6101a76101d23660046110d4565b61059b565b6101867f5bea60102f2a7acc9e82b1af0e3bd4069661102bb5dd143a6051cd1980dded1c81565b6101a761020c3660046111c0565b610722565b61022461021f3660046111dd565b610757565b6040516001600160a01b03909116815260200161015a565b61014e61024a36600461108e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610186600081565b6101a7610776565b610186610291366004611050565b610949565b60025461014e90600160b01b900460ff1681565b600254610224906201000090046001600160a01b031681565b6101a76102d136600461108e565b610960565b6101a76102e43660046111c0565b610985565b6101a76102f73660046111c0565b610999565b60006001600160e01b031982167f5a05180f00000000000000000000000000000000000000000000000000000000148061033a575061033a826109ce565b92915050565b60008281526020819052604090206001015461035b81610a35565b6103658383610a42565b505050565b6001600160a01b03811633146103ed5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6103f78282610a64565b5050565b7f5bea60102f2a7acc9e82b1af0e3bd4069661102bb5dd143a6051cd1980dded1c61042581610a35565b60028054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c91906111ff565b156104d3576040517f200cfeea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028054600160b01b60ff60b01b199091161790819055604080517f8456cb590000000000000000000000000000000000000000000000000000000081529051620100009092046001600160a01b031691638456cb599160048082019260009290919082900301818387803b15801561054b57600080fd5b505af115801561055f573d6000803e3d6000fd5b50506040513381527fb8fad2fa0ed7a383e747c309ef2c4391d7b65592a48893e57ccc1fab70791456925060200190505b60405180910390a150565b600254610100900460ff16158080156105bb5750600254600160ff909116105b806105d55750303b1580156105d5575060025460ff166001145b6106475760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103e4565b6002805460ff19166001179055801561066a576002805461ff0019166101001790555b61067384610a86565b61067e600084610af4565b60005b82518110156106d5576106cd7f5bea60102f2a7acc9e82b1af0e3bd4069661102bb5dd143a6051cd1980dded1c8483815181106106c0576106c0611221565b6020026020010151610a42565b600101610681565b50801561071c576002805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600061072d81610a35565b6103f77f5bea60102f2a7acc9e82b1af0e3bd4069661102bb5dd143a6051cd1980dded1c83610a42565b600082815260016020526040812061076f9083610afe565b9392505050565b7f5bea60102f2a7acc9e82b1af0e3bd4069661102bb5dd143a6051cd1980dded1c6107a081610a35565b600254600160b01b900460ff166107e3576040517fd97ea9f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a91906111ff565b610890576040517ff43dabd800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805460ff60b01b191690819055604080517f3f4ba83a0000000000000000000000000000000000000000000000000000000081529051620100009092046001600160a01b031691633f4ba83a9160048082019260009290919082900301818387803b15801561090057600080fd5b505af1158015610914573d6000803e3d6000fd5b50506040513381527ff5cbf596165cc457b2cd92e8d8450827ee314968160a5696402d75766fc52caf92506020019050610590565b600081815260016020526040812061033a90610b0a565b60008281526020819052604090206001015461097b81610a35565b6103658383610a64565b600061099081610a35565b6103f782610a86565b60006109a481610a35565b6103f77f5bea60102f2a7acc9e82b1af0e3bd4069661102bb5dd143a6051cd1980dded1c83610a64565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061033a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461033a565b610a3f8133610b14565b50565b610a4c8282610b92565b60008281526001602052604090206103659082610c30565b610a6e8282610c45565b60008281526001602052604090206103659082610cc4565b600280547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038416908102919091179091556040519081527f7f8cffd58ac96898bdd25ab64868bd933141d15ad1cd4a0df228fd3fcba2a26d90602001610590565b6103f78282610a42565b600061076f8383610cd9565b600061033a825490565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103f757610b50816001600160a01b03166014610d03565b610b5b836020610d03565b604051602001610b6c92919061125b565b60408051601f198184030181529082905262461bcd60e51b82526103e4916004016112dc565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103f7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610bec3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061076f836001600160a01b038416610ee4565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156103f7576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061076f836001600160a01b038416610f33565b6000826000018281548110610cf057610cf0611221565b9060005260206000200154905092915050565b60606000610d12836002611325565b610d1d90600261133c565b67ffffffffffffffff811115610d3557610d356110be565b6040519080825280601f01601f191660200182016040528015610d5f576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610d9657610d96611221565b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610de157610de1611221565b60200101906001600160f81b031916908160001a9053506000610e05846002611325565b610e1090600161133c565b90505b6001811115610e95577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610e5157610e51611221565b1a60f81b828281518110610e6757610e67611221565b60200101906001600160f81b031916908160001a90535060049490941c93610e8e8161134f565b9050610e13565b50831561076f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103e4565b6000818152600183016020526040812054610f2b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561033a565b50600061033a565b6000818152600183016020526040812054801561101c576000610f57600183611366565b8554909150600090610f6b90600190611366565b9050818114610fd0576000866000018281548110610f8b57610f8b611221565b9060005260206000200154905080876000018481548110610fae57610fae611221565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610fe157610fe1611379565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061033a565b600091505061033a565b60006020828403121561103857600080fd5b81356001600160e01b03198116811461076f57600080fd5b60006020828403121561106257600080fd5b5035919050565b6001600160a01b0381168114610a3f57600080fd5b803561108981611069565b919050565b600080604083850312156110a157600080fd5b8235915060208301356110b381611069565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156110e957600080fd5b83356110f481611069565b925060208481013561110581611069565b9250604085013567ffffffffffffffff8082111561112257600080fd5b818701915087601f83011261113657600080fd5b813581811115611148576111486110be565b8060051b604051601f19603f8301168101818110858211171561116d5761116d6110be565b60405291825284820192508381018501918a83111561118b57600080fd5b938501935b828510156111b0576111a18561107e565b84529385019392850192611190565b8096505050505050509250925092565b6000602082840312156111d257600080fd5b813561076f81611069565b600080604083850312156111f057600080fd5b50508035926020909101359150565b60006020828403121561121157600080fd5b8151801515811461076f57600080fd5b634e487b7160e01b600052603260045260246000fd5b60005b8381101561125257818101518382015260200161123a565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611293816017850160208801611237565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516112d0816028840160208801611237565b01602801949350505050565b60208152600082518060208401526112fb816040850160208701611237565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761033a5761033a61130f565b8082018082111561033a5761033a61130f565b60008161135e5761135e61130f565b506000190190565b8181038181111561033a5761033a61130f565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207931e863b1d585b0a51d30fbd83fb090f7acde36d16f2d5160190e9930a57e7464736f6c63430008160033",
  "chainId": 2021,
  "contractAbsolutePath": "PauseEnforcer.sol",
  "deployedBytecode": "",
  "deployer": "0x31762cdd4Aa65CD6f5F09D7a05a56211720A1168",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "changeTarget(address)": {
        "details": "Setter for `target`. Requirements: - Only admin can call this method."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "grantSentry(address)": {
        "details": "Grants the SENTRY_ROLE to the specified address."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address[])": {
        "details": "Initializes the contract storage."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "revokeSentry(address)": {
        "details": "Revokes the SENTRY_ROLE from the specified address."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "triggerPause()": {
        "details": "Triggers a pause on the target contract. Requirements: - Only be called by accounts with the SENTRY_ROLE, - The target contract is not already paused."
      },
      "triggerUnpause()": {
        "details": "Triggers an unpause on the target contract. Requirements: - Only be called by accounts with the SENTRY_ROLE, - The target contract is already paused. - The target contract is paused in emergency mode."
      }
    },
    "events": {
      "EmergencyPaused(address)": {
        "details": "Emitted when the emergency ppause is triggered by `account`."
      },
      "EmergencyUnpaused(address)": {
        "details": "Emitted when the emergency unpause is triggered by `account`."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TargetChanged(address)": {
        "details": "Emitted when the target is changed."
      }
    },
    "errors": {
      "ErrNotOnEmergencyPause()": [
        {
          "details": "Error thrown when the contract is not on emergency pause."
        }
      ],
      "ErrTargetIsNotOnPaused()": [
        {
          "details": "Error thrown when the target is not on paused state."
        }
      ],
      "ErrTargetIsOnPaused()": [
        {
          "details": "Error thrown when the target is already on paused state."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrNotOnEmergencyPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrTargetIsNotOnPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrTargetIsOnPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"EmergencyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"EmergencyUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPauseTarget\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SENTRY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPauseTarget\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"changeTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sentry\",\"type\":\"address\"}],\"name\":\"grantSentry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPauseTarget\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_sentries\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sentry\",\"type\":\"address\"}],\"name\":\"revokeSentry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"contract IPauseTarget\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrNotOnEmergencyPause()\":[{\"details\":\"Error thrown when the contract is not on emergency pause.\"}],\"ErrTargetIsNotOnPaused()\":[{\"details\":\"Error thrown when the target is not on paused state.\"}],\"ErrTargetIsOnPaused()\":[{\"details\":\"Error thrown when the target is already on paused state.\"}]},\"events\":{\"EmergencyPaused(address)\":{\"details\":\"Emitted when the emergency ppause is triggered by `account`.\"},\"EmergencyUnpaused(address)\":{\"details\":\"Emitted when the emergency unpause is triggered by `account`.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TargetChanged(address)\":{\"details\":\"Emitted when the target is changed.\"}},\"kind\":\"dev\",\"methods\":{\"changeTarget(address)\":{\"details\":\"Setter for `target`. Requirements: - Only admin can call this method.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"grantSentry(address)\":{\"details\":\"Grants the SENTRY_ROLE to the specified address.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address[])\":{\"details\":\"Initializes the contract storage.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"revokeSentry(address)\":{\"details\":\"Revokes the SENTRY_ROLE from the specified address.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"triggerPause()\":{\"details\":\"Triggers a pause on the target contract. Requirements: - Only be called by accounts with the SENTRY_ROLE, - The target contract is not already paused.\"},\"triggerUnpause()\":{\"details\":\"Triggers an unpause on the target contract. Requirements: - Only be called by accounts with the SENTRY_ROLE, - The target contract is already paused. - The target contract is paused in emergency mode.\"}},\"stateVariables\":{\"emergency\":{\"details\":\"Indicating whether or not the target contract is paused in emergency mode.\"},\"target\":{\"details\":\"The contract that can be paused or unpaused by the SENTRY_ROLE.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/gateway/PauseEnforcer.sol\":\"PauseEnforcer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"contracts/interfaces/IPauseTarget.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPauseTarget {\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function paused() external returns (bool);\\n}\\n\",\"keccak256\":\"0xc91073e61da572de0087b41018fd30b03661d58e0c5061e7b9d1c9235cd7c1c3\",\"license\":\"MIT\"},\"contracts/ronin/gateway/PauseEnforcer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/IPauseTarget.sol\\\";\\n\\ncontract PauseEnforcer is AccessControlEnumerable, Initializable {\\n  /**\\n   * @dev Error thrown when the target is already on paused state.\\n   */\\n  error ErrTargetIsOnPaused();\\n\\n  /**\\n   * @dev Error thrown when the target is not on paused state.\\n   */\\n  error ErrTargetIsNotOnPaused();\\n\\n  /**\\n   * @dev Error thrown when the contract is not on emergency pause.\\n   */\\n  error ErrNotOnEmergencyPause();\\n\\n  bytes32 public constant SENTRY_ROLE = keccak256(\\\"SENTRY_ROLE\\\");\\n\\n  /// @dev The contract that can be paused or unpaused by the SENTRY_ROLE.\\n  IPauseTarget public target;\\n  /// @dev Indicating whether or not the target contract is paused in emergency mode.\\n  bool public emergency;\\n\\n  /// @dev Emitted when the emergency ppause is triggered by `account`.\\n  event EmergencyPaused(address account);\\n  /// @dev Emitted when the emergency unpause is triggered by `account`.\\n  event EmergencyUnpaused(address account);\\n  /// @dev Emitted when the target is changed.\\n  event TargetChanged(IPauseTarget target);\\n\\n  modifier onEmergency() {\\n    if (!emergency) revert ErrNotOnEmergencyPause();\\n\\n    _;\\n  }\\n\\n  modifier targetPaused() {\\n    if (!target.paused()) revert ErrTargetIsOnPaused();\\n\\n    _;\\n  }\\n\\n  modifier targetNotPaused() {\\n    if (target.paused()) revert ErrTargetIsNotOnPaused();\\n\\n    _;\\n  }\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(IPauseTarget _target, address _admin, address[] memory _sentries) external initializer {\\n    _changeTarget(_target);\\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n    for (uint _i; _i < _sentries.length; ) {\\n      _grantRole(SENTRY_ROLE, _sentries[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Grants the SENTRY_ROLE to the specified address.\\n   */\\n  function grantSentry(address _sentry) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _grantRole(SENTRY_ROLE, _sentry);\\n  }\\n\\n  /**\\n   * @dev Revokes the SENTRY_ROLE from the specified address.\\n   */\\n  function revokeSentry(address _sentry) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _revokeRole(SENTRY_ROLE, _sentry);\\n  }\\n\\n  /**\\n   * @dev Triggers a pause on the target contract.\\n   *\\n   * Requirements:\\n   * - Only be called by accounts with the SENTRY_ROLE,\\n   * - The target contract is not already paused.\\n   */\\n  function triggerPause() external onlyRole(SENTRY_ROLE) targetNotPaused {\\n    emergency = true;\\n    target.pause();\\n    emit EmergencyPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Triggers an unpause on the target contract.\\n   *\\n   * Requirements:\\n   * - Only be called by accounts with the SENTRY_ROLE,\\n   * - The target contract is already paused.\\n   * - The target contract is paused in emergency mode.\\n   */\\n  function triggerUnpause() external onlyRole(SENTRY_ROLE) onEmergency targetPaused {\\n    emergency = false;\\n    target.unpause();\\n    emit EmergencyUnpaused(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Setter for `target`.\\n   *\\n   * Requirements:\\n   * - Only admin can call this method.\\n   */\\n  function changeTarget(IPauseTarget _target) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _changeTarget(_target);\\n  }\\n\\n  /**\\n   * @dev Internal helper for setting value to `target`.\\n   */\\n  function _changeTarget(IPauseTarget _target) internal {\\n    target = _target;\\n    emit TargetChanged(_target);\\n  }\\n}\\n\",\"keccak256\":\"0x22412c51c9877e24696d4bf2e0ce86c2cd2a27c6dbd2633e6e9843f720d960e1\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 30,
  "numDeployments": 4,
  "storageLayout": {
    "storage": [
      {
        "astId": 150498,
        "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)150493_storage)"
      },
      {
        "astId": 150812,
        "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)154500_storage)"
      },
      {
        "astId": 151847,
        "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 151850,
        "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 25650,
        "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
        "label": "target",
        "offset": 2,
        "slot": "2",
        "type": "t_contract(IPauseTarget)7342"
      },
      {
        "astId": 25653,
        "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
        "label": "emergency",
        "offset": 22,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPauseTarget)7342": {
        "encoding": "inplace",
        "label": "contract IPauseTarget",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)154500_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)154500_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)150493_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)150493_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)154500_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 154499,
            "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)154199_storage"
          }
        ]
      },
      "t_struct(RoleData)150493_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 150490,
            "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 150492,
            "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)154199_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 154194,
            "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 154198,
            "contract": "contracts/ronin/gateway/PauseEnforcer.sol:PauseEnforcer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1708420448,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}