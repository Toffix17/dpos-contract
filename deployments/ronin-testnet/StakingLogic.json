{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "fallback",
      "stateMutability": "payable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADDITION_GAS",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADMIN_ROLE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "MIGRATOR_ROLE",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "PERIOD_DURATION",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "applyValidatorCandidate",
      "inputs": [
        {
          "name": "candidateAdmin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "treasuryAddr",
          "type": "address",
          "internalType": "address payable"
        },
        {
          "name": "commissionRate",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "pubkey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "proofOfPossession",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "bulkUndelegate",
      "inputs": [
        {
          "name": "consensusAddrs",
          "type": "address[]",
          "internalType": "TConsensus[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "claimRewards",
      "inputs": [
        {
          "name": "consensusAddrList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cooldownSecsToUndelegate",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "delegate",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "delegateRewards",
      "inputs": [
        {
          "name": "consensusAddrList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        },
        {
          "name": "consensusAddrDst",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execChangeAdminAddress",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "currAdminAddr",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newAdminAddr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execDeductStakingAmount",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "actualDeductingAmount_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execDeprecatePools",
      "inputs": [
        {
          "name": "poolIds",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "newPeriod",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execRecordRewards",
      "inputs": [
        {
          "name": "poolIds",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "rewards",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "getCommissionRateRange",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManySelfStakings",
      "inputs": [
        {
          "name": "consensusAddrs",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "selfStakings_",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManySelfStakingsById",
      "inputs": [
        {
          "name": "poolIds",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "selfStakings_",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyStakingAmounts",
      "inputs": [
        {
          "name": "consensusAddrs",
          "type": "address[]",
          "internalType": "TConsensus[]"
        },
        {
          "name": "userList",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "stakingAmounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyStakingAmountsById",
      "inputs": [
        {
          "name": "poolIds",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "userList",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "stakingAmounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyStakingTotals",
      "inputs": [
        {
          "name": "consensusAddrs",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "stakingAmounts_",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyStakingTotalsById",
      "inputs": [
        {
          "name": "poolIds",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "stakingAmounts_",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getPoolAddressOf",
      "inputs": [
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getPoolDetail",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "stakingAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "stakingTotal",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getPoolDetailById",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "stakingAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "stakingTotal",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getReward",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "user",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRewards",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "consensusAddrs",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "rewards_",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleAdmin",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleMember",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRoleMemberCount",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getStakingAmount",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "user",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getStakingTotal",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "grantRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "hasRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "__validatorContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__minValidatorStakingAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__maxCommissionRate",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__cooldownSecsToUndelegate",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__waitingSecsToRevoke",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "__profileContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV4",
      "inputs": [
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "migrator",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "isAdminOfActivePool",
      "inputs": [
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "migrateWasAdmin",
      "inputs": [
        {
          "name": "poolIds",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "admins",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "flags",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "minValidatorStakingAmount",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "redelegate",
      "inputs": [
        {
          "name": "consensusAddrSrc",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "consensusAddrDst",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "renounceRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestEmergencyExit",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestRenounce",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestUpdateCommissionRate",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "effectiveDaysOnwards",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "commissionRate",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revokeRole",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCommissionRateRange",
      "inputs": [
        {
          "name": "minRate",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxRate",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCooldownSecsToUndelegate",
      "inputs": [
        {
          "name": "cooldownSecs",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMinValidatorStakingAmount",
      "inputs": [
        {
          "name": "threshold",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setWaitingSecsToRevoke",
      "inputs": [
        {
          "name": "secs",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "stake",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "undelegate",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "unstake",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "waitingSecsToRevoke",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "CommissionRateRangeUpdated",
      "inputs": [
        {
          "name": "minRate",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "maxRate",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CooldownSecsToUndelegateUpdated",
      "inputs": [
        {
          "name": "minSecs",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Delegated",
      "inputs": [
        {
          "name": "delegator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MigrateWasAdminFinished",
      "inputs": [],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MinValidatorStakingAmountUpdated",
      "inputs": [
        {
          "name": "threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PoolApproved",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "admin",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PoolSharesUpdated",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "shares",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PoolsDeprecated",
      "inputs": [
        {
          "name": "poolIds",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PoolsUpdateConflicted",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "poolIds",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PoolsUpdateFailed",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "poolIds",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "rewards",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PoolsUpdated",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "poolIds",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "aRps",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        },
        {
          "name": "shares",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RewardClaimed",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleAdminChanged",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "previousAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "newAdminRole",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleGranted",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RoleRevoked",
      "inputs": [
        {
          "name": "role",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "account",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "sender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Staked",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "StakeholderChanged",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "oldAdmin",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "newAdmin",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "StakingAmountDeductFailed",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "StakingAmountTransferFailed",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "admin",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Undelegated",
      "inputs": [
        {
          "name": "delegator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Unstaked",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "UserRewardUpdated",
      "inputs": [
        {
          "name": "poolId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "debited",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "WaitingSecsToRevokeUpdated",
      "inputs": [
        {
          "name": "secs",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAdminOfAnyActivePoolForbidden",
      "inputs": [
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrCannotInitTransferRON",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "extraInfo",
          "type": "string",
          "internalType": "string"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrCannotTransferRON",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrDuplicated",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInactivePool",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "poolId",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInsufficientBalance",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "currentBalance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "sendAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInsufficientDelegatingAmount",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInsufficientStakingAmount",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidArguments",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidArrays",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidCommissionRate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidPoolShare",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrOnlyPoolAdminAllowed",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrPoolAdminForbidden",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrRecipientRevert",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrStakingAmountLeft",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrThreeInteractionAddrsNotEqual",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUndelegateTooEarly",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUndelegateZeroAmount",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnstakeTooEarly",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnstakeZeroAmount",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroValue",
      "inputs": []
    }
  ],
  "address": "0x161d9211BE5C82A1887DDef1bd13b3B2FA4702B9",
  "args": "0x",
  "ast": {
    "absolutePath": "contracts/ronin/staking/Staking.sol",
    "id": 35145,
    "exportedSymbols": {
      "AccessControl": [
        149120
      ],
      "AccessControlEnumerable": [
        149245
      ],
      "Address": [
        151783
      ],
      "AddressArrayUtils": [
        11083
      ],
      "BaseStaking": [
        32583
      ],
      "CandidateStaking": [
        33484
      ],
      "Context": [
        151805
      ],
      "ContractType": [
        40311
      ],
      "DelegatorStaking": [
        34082
      ],
      "ERC165": [
        152503
      ],
      "EnumFlags": [
        11332
      ],
      "EnumerableSet": [
        153114
      ],
      "ErrAddressIsNotCreatedEOA": [
        40106
      ],
      "ErrAlreadyVoted": [
        40229
      ],
      "ErrBridgeOperatorAlreadyExisted": [
        40111
      ],
      "ErrBridgeOperatorUpdateFailed": [
        40099
      ],
      "ErrCallPrecompiled": [
        40195
      ],
      "ErrCallerMustBeCoinbase": [
        40292
      ],
      "ErrEmptyArray": [
        40178
      ],
      "ErrInvalidArguments": [
        40137
      ],
      "ErrInvalidChainId": [
        40214
      ],
      "ErrInvalidOrder": [
        40205
      ],
      "ErrInvalidProposalNonce": [
        40224
      ],
      "ErrInvalidReceipt": [
        40262
      ],
      "ErrInvalidReceiptKind": [
        40259
      ],
      "ErrInvalidRequest": [
        40250
      ],
      "ErrInvalidReturnData": [
        40127
      ],
      "ErrInvalidSignatures": [
        40234
      ],
      "ErrInvalidThreshold": [
        40147
      ],
      "ErrInvalidTokenStandard": [
        40253
      ],
      "ErrInvalidVoteHash": [
        40277
      ],
      "ErrInvalidVoteWeight": [
        40244
      ],
      "ErrLengthMismatch": [
        40183
      ],
      "ErrNativeTransferFailed": [
        40200
      ],
      "ErrNonpayableAddress": [
        40267
      ],
      "ErrOncePerBlock": [
        40289
      ],
      "ErrOnlySelfCall": [
        40152
      ],
      "ErrPeriodAlreadyProcessed": [
        40274
      ],
      "ErrProxyCallFailed": [
        40190
      ],
      "ErrQueryForEmptyVote": [
        40280
      ],
      "ErrQueryForExpiredVote": [
        40283
      ],
      "ErrQueryForNonExistentVote": [
        40286
      ],
      "ErrQueryForOutdatedBridgeOperatorSet": [
        40247
      ],
      "ErrRelayFailed": [
        40239
      ],
      "ErrSyncTooFarPeriod": [
        40094
      ],
      "ErrUnauthorized": [
        40160
      ],
      "ErrUnauthorizedCall": [
        40165
      ],
      "ErrUnexpectedInternalCall": [
        40175
      ],
      "ErrUnsupportedInterface": [
        40118
      ],
      "ErrUnsupportedToken": [
        40256
      ],
      "ErrUnsupportedVoteType": [
        40219
      ],
      "ErrZeroAddress": [
        40142
      ],
      "ErrZeroCodeContract": [
        40132
      ],
      "GlobalConfigConsumer": [
        3600
      ],
      "HasContracts": [
        3544
      ],
      "HasProxyAdmin": [
        3589
      ],
      "HasValidatorDeprecated": [
        40330
      ],
      "IAccessControl": [
        149318
      ],
      "IAccessControlEnumerable": [
        149343
      ],
      "IBaseStaking": [
        9451
      ],
      "ICandidateManager": [
        10182
      ],
      "ICandidateManagerCallback": [
        10263
      ],
      "ICandidateStaking": [
        9649
      ],
      "ICoinbaseExecution": [
        10431
      ],
      "ICommonInfo": [
        10650
      ],
      "IDelegatorStaking": [
        9757
      ],
      "IERC165": [
        152515
      ],
      "IEmergencyExit": [
        10524
      ],
      "IHasContracts": [
        8893
      ],
      "IJailingInfo": [
        10742
      ],
      "IProfile": [
        7584
      ],
      "IRewardPool": [
        9922
      ],
      "IRoninValidatorSet": [
        10545
      ],
      "ISlashingExecution": [
        10595
      ],
      "IStaking": [
        9964
      ],
      "IStakingCallback": [
        9979
      ],
      "ITimingInfo": [
        10801
      ],
      "IValidatorInfoV2": [
        10897
      ],
      "IdentityGuard": [
        40560
      ],
      "Initializable": [
        150318
      ],
      "Math": [
        11911
      ],
      "PercentageConsumer": [
        3606
      ],
      "PeriodWrapperConsumer": [
        8917
      ],
      "RONTransferHelper": [
        791
      ],
      "ReentrancyGuard": [
        150466
      ],
      "RewardCalculation": [
        34799
      ],
      "RoleAccess": [
        40574
      ],
      "Staking": [
        35144
      ],
      "StakingCallback": [
        35216
      ],
      "Strings": [
        152091
      ],
      "TConsensus": [
        40030
      ],
      "TConsensusEq": [
        40082
      ],
      "TPoolId": [
        40028
      ],
      "TPoolIdEq": [
        40060
      ]
    },
    "nodeType": "SourceUnit",
    "src": "33:3983:155",
    "nodes": [
      {
        "id": 34801,
        "nodeType": "PragmaDirective",
        "src": "33:23:155",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 34802,
        "nodeType": "ImportDirective",
        "src": "58:63:155",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 35145,
        "sourceUnit": 150319,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 34803,
        "nodeType": "ImportDirective",
        "src": "122:68:155",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol",
        "file": "@openzeppelin/contracts/access/AccessControlEnumerable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 35145,
        "sourceUnit": 149246,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 34804,
        "nodeType": "ImportDirective",
        "src": "191:34:155",
        "nodes": [],
        "absolutePath": "contracts/libraries/Math.sol",
        "file": "../../libraries/Math.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 35145,
        "sourceUnit": 11912,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 34805,
        "nodeType": "ImportDirective",
        "src": "226:47:155",
        "nodes": [],
        "absolutePath": "contracts/interfaces/staking/IStaking.sol",
        "file": "../../interfaces/staking/IStaking.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 35145,
        "sourceUnit": 9965,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 34806,
        "nodeType": "ImportDirective",
        "src": "274:59:155",
        "nodes": [],
        "absolutePath": "contracts/interfaces/validator/IRoninValidatorSet.sol",
        "file": "../../interfaces/validator/IRoninValidatorSet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 35145,
        "sourceUnit": 10546,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 34807,
        "nodeType": "ImportDirective",
        "src": "334:38:155",
        "nodes": [],
        "absolutePath": "contracts/utils/CommonErrors.sol",
        "file": "../../utils/CommonErrors.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 35145,
        "sourceUnit": 40293,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 34808,
        "nodeType": "ImportDirective",
        "src": "373:31:155",
        "nodes": [],
        "absolutePath": "contracts/ronin/staking/StakingCallback.sol",
        "file": "./StakingCallback.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 35145,
        "sourceUnit": 35217,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 35144,
        "nodeType": "ContractDefinition",
        "src": "406:3609:155",
        "nodes": [
          {
            "id": 34821,
            "nodeType": "VariableDeclaration",
            "src": "496:66:155",
            "nodes": [],
            "constant": true,
            "functionSelector": "6fae2e15",
            "mutability": "constant",
            "name": "MIGRATOR_ROLE",
            "nameLocation": "520:13:155",
            "scope": 35144,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 34817,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "496:7:155",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "4d49475241544f525f524f4c45",
                  "id": 34819,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "546:15:155",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_600e5f1c60beb469a3fa6dd3814a4ae211cc6259a6d033bae218a742f2af01d3",
                    "typeString": "literal_string \"MIGRATOR_ROLE\""
                  },
                  "value": "MIGRATOR_ROLE"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_600e5f1c60beb469a3fa6dd3814a4ae211cc6259a6d033bae218a742f2af01d3",
                    "typeString": "literal_string \"MIGRATOR_ROLE\""
                  }
                ],
                "id": 34818,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "536:9:155",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 34820,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "536:26:155",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 34828,
            "nodeType": "FunctionDefinition",
            "src": "567:47:155",
            "nodes": [],
            "body": {
              "id": 34827,
              "nodeType": "Block",
              "src": "581:33:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 34824,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 150317,
                      "src": "587:20:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 34825,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "587:22:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34826,
                  "nodeType": "ExpressionStatement",
                  "src": "587:22:155"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 34822,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "578:2:155"
            },
            "returnParameters": {
              "id": 34823,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "581:0:155"
            },
            "scope": 35144,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 34836,
            "nodeType": "FunctionDefinition",
            "src": "618:66:155",
            "nodes": [],
            "body": {
              "id": 34835,
              "nodeType": "Block",
              "src": "682:2:155",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "receive",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 34831,
                      "name": "ContractType",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40311,
                      "src": "658:12:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                        "typeString": "type(enum ContractType)"
                      }
                    },
                    "id": 34832,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "671:9:155",
                    "memberName": "VALIDATOR",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 40303,
                    "src": "658:22:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ContractType_$40311",
                      "typeString": "enum ContractType"
                    }
                  }
                ],
                "id": 34833,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34830,
                  "name": "onlyContract",
                  "nameLocations": [
                    "645:12:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3432,
                  "src": "645:12:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "645:36:155"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 34829,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "625:2:155"
            },
            "returnParameters": {
              "id": 34834,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "682:0:155"
            },
            "scope": 35144,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 34844,
            "nodeType": "FunctionDefinition",
            "src": "688:67:155",
            "nodes": [],
            "body": {
              "id": 34843,
              "nodeType": "Block",
              "src": "753:2:155",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "fallback",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 34839,
                      "name": "ContractType",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40311,
                      "src": "729:12:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                        "typeString": "type(enum ContractType)"
                      }
                    },
                    "id": 34840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "742:9:155",
                    "memberName": "VALIDATOR",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 40303,
                    "src": "729:22:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ContractType_$40311",
                      "typeString": "enum ContractType"
                    }
                  }
                ],
                "id": 34841,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34838,
                  "name": "onlyContract",
                  "nameLocations": [
                    "716:12:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3432,
                  "src": "716:12:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "716:36:155"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 34837,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "696:2:155"
            },
            "returnParameters": {
              "id": 34842,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "753:0:155"
            },
            "scope": 35144,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 34884,
            "nodeType": "FunctionDefinition",
            "src": "815:526:155",
            "nodes": [],
            "body": {
              "id": 34883,
              "nodeType": "Block",
              "src": "1042:299:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 34861,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40311,
                          "src": "1061:12:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 34862,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1074:9:155",
                        "memberName": "VALIDATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 40303,
                        "src": "1061:22:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 34863,
                        "name": "__validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34847,
                        "src": "1085:19:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 34860,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1048:12:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$40311_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 34864,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1048:57:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34865,
                  "nodeType": "ExpressionStatement",
                  "src": "1048:57:155"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 34867,
                        "name": "__minValidatorStakingAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34849,
                        "src": "1141:27:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 34866,
                      "name": "_setMinValidatorStakingAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33450,
                      "src": "1111:29:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 34868,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1111:58:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34869,
                  "nodeType": "ExpressionStatement",
                  "src": "1111:58:155"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "30",
                        "id": 34871,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1199:1:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "id": 34872,
                        "name": "__maxCommissionRate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34851,
                        "src": "1202:19:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 34870,
                      "name": "_setCommissionRateRange",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33483,
                      "src": "1175:23:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 34873,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1175:47:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34874,
                  "nodeType": "ExpressionStatement",
                  "src": "1175:47:155"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 34876,
                        "name": "__cooldownSecsToUndelegate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34853,
                        "src": "1257:26:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 34875,
                      "name": "_setCooldownSecsToUndelegate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32532,
                      "src": "1228:28:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 34877,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1228:56:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34878,
                  "nodeType": "ExpressionStatement",
                  "src": "1228:56:155"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 34880,
                        "name": "__waitingSecsToRevoke",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34855,
                        "src": "1314:21:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 34879,
                      "name": "_setWaitingSecsToRevoke",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32547,
                      "src": "1290:23:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 34881,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1290:46:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34882,
                  "nodeType": "ExpressionStatement",
                  "src": "1290:46:155"
                }
              ]
            },
            "documentation": {
              "id": 34845,
              "nodeType": "StructuredDocumentation",
              "src": "759:53:155",
              "text": " @dev Initializes the contract storage."
            },
            "functionSelector": "f92ad219",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 34858,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34857,
                  "name": "initializer",
                  "nameLocations": [
                    "1030:11:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150238,
                  "src": "1030:11:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "1030:11:155"
              }
            ],
            "name": "initialize",
            "nameLocation": "824:10:155",
            "parameters": {
              "id": 34856,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34847,
                  "mutability": "mutable",
                  "name": "__validatorContract",
                  "nameLocation": "848:19:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 34884,
                  "src": "840:27:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 34846,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "840:7:155",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34849,
                  "mutability": "mutable",
                  "name": "__minValidatorStakingAmount",
                  "nameLocation": "881:27:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 34884,
                  "src": "873:35:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 34848,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "873:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34851,
                  "mutability": "mutable",
                  "name": "__maxCommissionRate",
                  "nameLocation": "922:19:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 34884,
                  "src": "914:27:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 34850,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "914:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34853,
                  "mutability": "mutable",
                  "name": "__cooldownSecsToUndelegate",
                  "nameLocation": "955:26:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 34884,
                  "src": "947:34:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 34852,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "947:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34855,
                  "mutability": "mutable",
                  "name": "__waitingSecsToRevoke",
                  "nameLocation": "995:21:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 34884,
                  "src": "987:29:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 34854,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "987:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "834:186:155"
            },
            "returnParameters": {
              "id": 34859,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1042:0:155"
            },
            "scope": 35144,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 34901,
            "nodeType": "FunctionDefinition",
            "src": "1404:162:155",
            "nodes": [],
            "body": {
              "id": 34900,
              "nodeType": "Block",
              "src": "1454:112:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 34892,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40311,
                          "src": "1473:12:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 34893,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1486:9:155",
                        "memberName": "VALIDATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 40303,
                        "src": "1473:22:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 34894,
                        "name": "______deprecatedValidator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40329,
                        "src": "1497:25:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 34891,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1460:12:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$40311_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 34895,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1460:63:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34896,
                  "nodeType": "ExpressionStatement",
                  "src": "1460:63:155"
                },
                {
                  "expression": {
                    "id": 34898,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "1529:32:155",
                    "subExpression": {
                      "id": 34897,
                      "name": "______deprecatedValidator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40329,
                      "src": "1536:25:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34899,
                  "nodeType": "ExpressionStatement",
                  "src": "1529:32:155"
                }
              ]
            },
            "documentation": {
              "id": 34885,
              "nodeType": "StructuredDocumentation",
              "src": "1345:56:155",
              "text": " @dev Initializes the contract storage V2."
            },
            "functionSelector": "5cd8a76b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 34888,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1451:1:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 34889,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34887,
                  "name": "reinitializer",
                  "nameLocations": [
                    "1437:13:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150271,
                  "src": "1437:13:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "1437:16:155"
              }
            ],
            "name": "initializeV2",
            "nameLocation": "1413:12:155",
            "parameters": {
              "id": 34886,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1425:2:155"
            },
            "returnParameters": {
              "id": 34890,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1454:0:155"
            },
            "scope": 35144,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 34917,
            "nodeType": "FunctionDefinition",
            "src": "1629:139:155",
            "nodes": [],
            "body": {
              "id": 34916,
              "nodeType": "Block",
              "src": "1704:64:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 34911,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40311,
                          "src": "1723:12:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 34912,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1736:7:155",
                        "memberName": "PROFILE",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 40310,
                        "src": "1723:20:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 34913,
                        "name": "__profileContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34904,
                        "src": "1745:17:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$40311",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 34910,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1710:12:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$40311_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 34914,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1710:53:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34915,
                  "nodeType": "ExpressionStatement",
                  "src": "1710:53:155"
                }
              ]
            },
            "documentation": {
              "id": 34902,
              "nodeType": "StructuredDocumentation",
              "src": "1570:56:155",
              "text": " @dev Initializes the contract storage V3."
            },
            "functionSelector": "3101cfcb",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "33",
                    "id": 34907,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1701:1:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3_by_1",
                      "typeString": "int_const 3"
                    },
                    "value": "3"
                  }
                ],
                "id": 34908,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34906,
                  "name": "reinitializer",
                  "nameLocations": [
                    "1687:13:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150271,
                  "src": "1687:13:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "1687:16:155"
              }
            ],
            "name": "initializeV3",
            "nameLocation": "1638:12:155",
            "parameters": {
              "id": 34905,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34904,
                  "mutability": "mutable",
                  "name": "__profileContract",
                  "nameLocation": "1659:17:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 34917,
                  "src": "1651:25:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 34903,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1651:7:155",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1650:27:155"
            },
            "returnParameters": {
              "id": 34909,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1704:0:155"
            },
            "scope": 35144,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 34938,
            "nodeType": "FunctionDefinition",
            "src": "1772:170:155",
            "nodes": [],
            "body": {
              "id": 34937,
              "nodeType": "Block",
              "src": "1853:89:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 34928,
                        "name": "DEFAULT_ADMIN_ROLE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 148828,
                        "src": "1870:18:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 34929,
                        "name": "admin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34919,
                        "src": "1890:5:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 34927,
                      "name": "_grantRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        149220
                      ],
                      "referencedDeclaration": 149220,
                      "src": "1859:10:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 34930,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1859:37:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34931,
                  "nodeType": "ExpressionStatement",
                  "src": "1859:37:155"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 34933,
                        "name": "MIGRATOR_ROLE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34821,
                        "src": "1913:13:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 34934,
                        "name": "migrator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34921,
                        "src": "1928:8:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 34932,
                      "name": "_grantRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        149220
                      ],
                      "referencedDeclaration": 149220,
                      "src": "1902:10:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 34935,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1902:35:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34936,
                  "nodeType": "ExpressionStatement",
                  "src": "1902:35:155"
                }
              ]
            },
            "functionSelector": "3a3ec5b0",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "34",
                    "id": 34924,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1850:1:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_4_by_1",
                      "typeString": "int_const 4"
                    },
                    "value": "4"
                  }
                ],
                "id": 34925,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34923,
                  "name": "reinitializer",
                  "nameLocations": [
                    "1836:13:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 150271,
                  "src": "1836:13:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "1836:16:155"
              }
            ],
            "name": "initializeV4",
            "nameLocation": "1781:12:155",
            "parameters": {
              "id": 34922,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34919,
                  "mutability": "mutable",
                  "name": "admin",
                  "nameLocation": "1802:5:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 34938,
                  "src": "1794:13:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 34918,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1794:7:155",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34921,
                  "mutability": "mutable",
                  "name": "migrator",
                  "nameLocation": "1817:8:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 34938,
                  "src": "1809:16:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 34920,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1809:7:155",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1793:33:155"
            },
            "returnParameters": {
              "id": 34926,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1853:0:155"
            },
            "scope": 35144,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 35003,
            "nodeType": "FunctionDefinition",
            "src": "1982:433:155",
            "nodes": [],
            "body": {
              "id": 35002,
              "nodeType": "Block",
              "src": "2134:281:155",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 34964,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 34958,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 34954,
                          "name": "poolIds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34942,
                          "src": "2144:7:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                            "typeString": "address[] calldata"
                          }
                        },
                        "id": 34955,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2152:6:155",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "2144:14:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "expression": {
                          "id": 34956,
                          "name": "admins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34945,
                          "src": "2162:6:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                            "typeString": "address[] calldata"
                          }
                        },
                        "id": 34957,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2169:6:155",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "2162:13:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "2144:31:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 34963,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 34959,
                          "name": "poolIds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34942,
                          "src": "2179:7:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                            "typeString": "address[] calldata"
                          }
                        },
                        "id": 34960,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2187:6:155",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "2179:14:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "!=",
                      "rightExpression": {
                        "expression": {
                          "id": 34961,
                          "name": "flags",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34948,
                          "src": "2197:5:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                            "typeString": "bool[] calldata"
                          }
                        },
                        "id": 34962,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2203:6:155",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "2197:12:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "2179:30:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2144:65:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 34971,
                  "nodeType": "IfStatement",
                  "src": "2140:121:155",
                  "trueBody": {
                    "id": 34970,
                    "nodeType": "Block",
                    "src": "2211:50:155",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 34966,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "2246:3:155",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 34967,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2250:3:155",
                              "memberName": "sig",
                              "nodeType": "MemberAccess",
                              "src": "2246:7:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            ],
                            "id": 34965,
                            "name": "ErrInvalidArguments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40137,
                            "src": "2226:19:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_bytes4_$returns$__$",
                              "typeString": "function (bytes4) pure"
                            }
                          },
                          "id": 34968,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2226:28:155",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 34969,
                        "nodeType": "RevertStatement",
                        "src": "2219:35:155"
                      }
                    ]
                  }
                },
                {
                  "body": {
                    "id": 34997,
                    "nodeType": "Block",
                    "src": "2305:69:155",
                    "statements": [
                      {
                        "expression": {
                          "id": 34995,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 34982,
                                  "name": "_poolDetail",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 31844,
                                  "src": "2313:11:155",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_PoolDetail_$9327_storage_$",
                                    "typeString": "mapping(address => struct IBaseStaking.PoolDetail storage ref)"
                                  }
                                },
                                "id": 34986,
                                "indexExpression": {
                                  "baseExpression": {
                                    "id": 34983,
                                    "name": "poolIds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 34942,
                                    "src": "2325:7:155",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                      "typeString": "address[] calldata"
                                    }
                                  },
                                  "id": 34985,
                                  "indexExpression": {
                                    "id": 34984,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 34973,
                                    "src": "2333:1:155",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2325:10:155",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2313:23:155",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolDetail_$9327_storage",
                                  "typeString": "struct IBaseStaking.PoolDetail storage ref"
                                }
                              },
                              "id": 34987,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2337:8:155",
                              "memberName": "wasAdmin",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 9326,
                              "src": "2313:32:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 34991,
                            "indexExpression": {
                              "baseExpression": {
                                "id": 34988,
                                "name": "admins",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34945,
                                "src": "2346:6:155",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                  "typeString": "address[] calldata"
                                }
                              },
                              "id": 34990,
                              "indexExpression": {
                                "id": 34989,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34973,
                                "src": "2353:1:155",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2346:9:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2313:43:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 34992,
                              "name": "flags",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 34948,
                              "src": "2359:5:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                                "typeString": "bool[] calldata"
                              }
                            },
                            "id": 34994,
                            "indexExpression": {
                              "id": 34993,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 34973,
                              "src": "2365:1:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2359:8:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "2313:54:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 34996,
                        "nodeType": "ExpressionStatement",
                        "src": "2313:54:155"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 34978,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 34975,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34973,
                      "src": "2280:1:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 34976,
                        "name": "poolIds",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34942,
                        "src": "2284:7:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        }
                      },
                      "id": 34977,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2292:6:155",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2284:14:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2280:18:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 34998,
                  "initializationExpression": {
                    "assignments": [
                      34973
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 34973,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2277:1:155",
                        "nodeType": "VariableDeclaration",
                        "scope": 34998,
                        "src": "2272:6:155",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 34972,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2272:4:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 34974,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2272:6:155"
                  },
                  "isSimpleCounterLoop": true,
                  "loopExpression": {
                    "expression": {
                      "id": 34980,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "2300:3:155",
                      "subExpression": {
                        "id": 34979,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34973,
                        "src": "2302:1:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 34981,
                    "nodeType": "ExpressionStatement",
                    "src": "2300:3:155"
                  },
                  "nodeType": "ForStatement",
                  "src": "2267:107:155"
                },
                {
                  "eventCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 34999,
                      "name": "MigrateWasAdminFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9941,
                      "src": "2385:23:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 35000,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2385:25:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35001,
                  "nodeType": "EmitStatement",
                  "src": "2380:30:155"
                }
              ]
            },
            "documentation": {
              "id": 34939,
              "nodeType": "StructuredDocumentation",
              "src": "1946:33:155",
              "text": " @dev Migrate REP-4"
            },
            "functionSelector": "e15a7c9c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 34951,
                    "name": "MIGRATOR_ROLE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 34821,
                    "src": "2119:13:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  }
                ],
                "id": 34952,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34950,
                  "name": "onlyRole",
                  "nameLocations": [
                    "2110:8:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 148839,
                  "src": "2110:8:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "2110:23:155"
              }
            ],
            "name": "migrateWasAdmin",
            "nameLocation": "1991:15:155",
            "parameters": {
              "id": 34949,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34942,
                  "mutability": "mutable",
                  "name": "poolIds",
                  "nameLocation": "2031:7:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35003,
                  "src": "2012:26:155",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 34940,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2012:7:155",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 34941,
                    "nodeType": "ArrayTypeName",
                    "src": "2012:9:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34945,
                  "mutability": "mutable",
                  "name": "admins",
                  "nameLocation": "2063:6:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35003,
                  "src": "2044:25:155",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 34943,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2044:7:155",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 34944,
                    "nodeType": "ArrayTypeName",
                    "src": "2044:9:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34948,
                  "mutability": "mutable",
                  "name": "flags",
                  "nameLocation": "2091:5:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35003,
                  "src": "2075:21:155",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 34946,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "2075:4:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 34947,
                    "nodeType": "ArrayTypeName",
                    "src": "2075:6:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2006:94:155"
            },
            "returnParameters": {
              "id": 34953,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2134:0:155"
            },
            "scope": 35144,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 35027,
            "nodeType": "FunctionDefinition",
            "src": "2457:229:155",
            "nodes": [],
            "body": {
              "id": 35026,
              "nodeType": "Block",
              "src": "2635:51:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 35021,
                        "name": "poolIds",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35007,
                        "src": "2656:7:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        }
                      },
                      {
                        "id": 35022,
                        "name": "rewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35010,
                        "src": "2665:7:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "id": 35023,
                        "name": "period",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35012,
                        "src": "2674:6:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 35020,
                      "name": "_recordRewards",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34784,
                      "src": "2641:14:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address[] memory,uint256[] calldata,uint256)"
                      }
                    },
                    "id": 35024,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2641:40:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35025,
                  "nodeType": "ExpressionStatement",
                  "src": "2641:40:155"
                }
              ]
            },
            "baseFunctions": [
              9953
            ],
            "documentation": {
              "id": 35004,
              "nodeType": "StructuredDocumentation",
              "src": "2419:35:155",
              "text": " @inheritdoc IStaking"
            },
            "functionSelector": "acd79c46",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 35016,
                      "name": "ContractType",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40311,
                      "src": "2611:12:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                        "typeString": "type(enum ContractType)"
                      }
                    },
                    "id": 35017,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "2624:9:155",
                    "memberName": "VALIDATOR",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 40303,
                    "src": "2611:22:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ContractType_$40311",
                      "typeString": "enum ContractType"
                    }
                  }
                ],
                "id": 35018,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 35015,
                  "name": "onlyContract",
                  "nameLocations": [
                    "2598:12:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3432,
                  "src": "2598:12:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "2598:36:155"
              }
            ],
            "name": "execRecordRewards",
            "nameLocation": "2466:17:155",
            "overrides": {
              "id": 35014,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2589:8:155"
            },
            "parameters": {
              "id": 35013,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35007,
                  "mutability": "mutable",
                  "name": "poolIds",
                  "nameLocation": "2508:7:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35027,
                  "src": "2489:26:155",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 35005,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2489:7:155",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 35006,
                    "nodeType": "ArrayTypeName",
                    "src": "2489:9:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35010,
                  "mutability": "mutable",
                  "name": "rewards",
                  "nameLocation": "2540:7:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35027,
                  "src": "2521:26:155",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 35008,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2521:7:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 35009,
                    "nodeType": "ArrayTypeName",
                    "src": "2521:9:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35012,
                  "mutability": "mutable",
                  "name": "period",
                  "nameLocation": "2561:6:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35027,
                  "src": "2553:14:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35011,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2553:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2483:88:155"
            },
            "returnParameters": {
              "id": 35019,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2635:0:155"
            },
            "scope": 35144,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 35078,
            "nodeType": "FunctionDefinition",
            "src": "2728:519:155",
            "nodes": [],
            "body": {
              "id": 35077,
              "nodeType": "Block",
              "src": "2901:346:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 35049,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 35042,
                      "name": "actualDeductingAmount_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35040,
                      "src": "2907:22:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "baseExpression": {
                            "id": 35044,
                            "name": "_poolDetail",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 31844,
                            "src": "2953:11:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_PoolDetail_$9327_storage_$",
                              "typeString": "mapping(address => struct IBaseStaking.PoolDetail storage ref)"
                            }
                          },
                          "id": 35046,
                          "indexExpression": {
                            "id": 35045,
                            "name": "poolId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 35030,
                            "src": "2965:6:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2953:19:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolDetail_$9327_storage",
                            "typeString": "struct IBaseStaking.PoolDetail storage ref"
                          }
                        },
                        {
                          "id": 35047,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35032,
                          "src": "2974:6:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_PoolDetail_$9327_storage",
                            "typeString": "struct IBaseStaking.PoolDetail storage ref"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 35043,
                        "name": "_deductStakingAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          35143
                        ],
                        "referencedDeclaration": 35143,
                        "src": "2932:20:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PoolDetail_$9327_storage_ptr_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (struct IBaseStaking.PoolDetail storage pointer,uint256) returns (uint256)"
                        }
                      },
                      "id": 35048,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2932:49:155",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2907:74:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 35050,
                  "nodeType": "ExpressionStatement",
                  "src": "2907:74:155"
                },
                {
                  "assignments": [
                    35052
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 35052,
                      "mutability": "mutable",
                      "name": "validatorContractAddr",
                      "nameLocation": "3003:21:155",
                      "nodeType": "VariableDeclaration",
                      "scope": 35077,
                      "src": "2987:37:155",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 35051,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2987:15:155",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 35058,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 35055,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3035:3:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 35056,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3039:6:155",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3035:10:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 35054,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3027:8:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_payable_$",
                        "typeString": "type(address payable)"
                      },
                      "typeName": {
                        "id": 35053,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3027:8:155",
                        "stateMutability": "payable",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 35057,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3027:19:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2987:59:155"
                },
                {
                  "condition": {
                    "id": 35063,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "3056:62:155",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 35060,
                          "name": "validatorContractAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35052,
                          "src": "3072:21:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        {
                          "id": 35061,
                          "name": "actualDeductingAmount_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35040,
                          "src": "3095:22:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 35059,
                        "name": "_unsafeSendRON",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 757,
                        "src": "3057:14:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$_t_bool_$",
                          "typeString": "function (address payable,uint256) returns (bool)"
                        }
                      },
                      "id": 35062,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3057:61:155",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 35076,
                  "nodeType": "IfStatement",
                  "src": "3052:191:155",
                  "trueBody": {
                    "id": 35075,
                    "nodeType": "Block",
                    "src": "3120:123:155",
                    "statements": [
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 35065,
                              "name": "poolId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35030,
                              "src": "3159:6:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 35066,
                              "name": "validatorContractAddr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35052,
                              "src": "3167:21:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 35067,
                              "name": "actualDeductingAmount_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35040,
                              "src": "3190:22:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 35070,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "3222:4:155",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_Staking_$35144",
                                      "typeString": "contract Staking"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_Staking_$35144",
                                      "typeString": "contract Staking"
                                    }
                                  ],
                                  "id": 35069,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3214:7:155",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 35068,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3214:7:155",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 35071,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3214:13:155",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 35072,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3228:7:155",
                              "memberName": "balance",
                              "nodeType": "MemberAccess",
                              "src": "3214:21:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 35064,
                            "name": "StakingAmountDeductFailed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9528,
                            "src": "3133:25:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256)"
                            }
                          },
                          "id": 35073,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3133:103:155",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 35074,
                        "nodeType": "EmitStatement",
                        "src": "3128:108:155"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              9963
            ],
            "documentation": {
              "id": 35028,
              "nodeType": "StructuredDocumentation",
              "src": "2690:35:155",
              "text": " @inheritdoc IStaking"
            },
            "functionSelector": "2715805e",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 35036,
                      "name": "ContractType",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40311,
                      "src": "2836:12:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                        "typeString": "type(enum ContractType)"
                      }
                    },
                    "id": 35037,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "2849:9:155",
                    "memberName": "VALIDATOR",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 40303,
                    "src": "2836:22:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ContractType_$40311",
                      "typeString": "enum ContractType"
                    }
                  }
                ],
                "id": 35038,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 35035,
                  "name": "onlyContract",
                  "nameLocations": [
                    "2823:12:155"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3432,
                  "src": "2823:12:155"
                },
                "nodeType": "ModifierInvocation",
                "src": "2823:36:155"
              }
            ],
            "name": "execDeductStakingAmount",
            "nameLocation": "2737:23:155",
            "overrides": {
              "id": 35034,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2814:8:155"
            },
            "parameters": {
              "id": 35033,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35030,
                  "mutability": "mutable",
                  "name": "poolId",
                  "nameLocation": "2774:6:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35078,
                  "src": "2766:14:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 35029,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2766:7:155",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35032,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2794:6:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35078,
                  "src": "2786:14:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35031,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2786:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2760:44:155"
            },
            "returnParameters": {
              "id": 35041,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35040,
                  "mutability": "mutable",
                  "name": "actualDeductingAmount_",
                  "nameLocation": "2877:22:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35078,
                  "src": "2869:30:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35039,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2869:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2868:32:155"
            },
            "scope": 35144,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 35095,
            "nodeType": "FunctionDefinition",
            "src": "3298:164:155",
            "nodes": [],
            "body": {
              "id": 35094,
              "nodeType": "Block",
              "src": "3373:89:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 35087,
                                  "name": "ContractType",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 40311,
                                  "src": "3417:12:155",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_ContractType_$40311_$",
                                    "typeString": "type(enum ContractType)"
                                  }
                                },
                                "id": 35088,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "3430:9:155",
                                "memberName": "VALIDATOR",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 40303,
                                "src": "3417:22:155",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_ContractType_$40311",
                                  "typeString": "enum ContractType"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_enum$_ContractType_$40311",
                                  "typeString": "enum ContractType"
                                }
                              ],
                              "id": 35086,
                              "name": "getContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3484,
                              "src": "3405:11:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$40311_$returns$_t_address_$",
                                "typeString": "function (enum ContractType) view returns (address)"
                              }
                            },
                            "id": 35089,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3405:35:155",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 35085,
                          "name": "IRoninValidatorSet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10545,
                          "src": "3386:18:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IRoninValidatorSet_$10545_$",
                            "typeString": "type(contract IRoninValidatorSet)"
                          }
                        },
                        "id": 35090,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3386:55:155",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRoninValidatorSet_$10545",
                          "typeString": "contract IRoninValidatorSet"
                        }
                      },
                      "id": 35091,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3442:13:155",
                      "memberName": "currentPeriod",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10794,
                      "src": "3386:69:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                        "typeString": "function () view external returns (uint256)"
                      }
                    },
                    "id": 35092,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3386:71:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 35084,
                  "id": 35093,
                  "nodeType": "Return",
                  "src": "3379:78:155"
                }
              ]
            },
            "baseFunctions": [
              34790
            ],
            "documentation": {
              "id": 35079,
              "nodeType": "StructuredDocumentation",
              "src": "3251:44:155",
              "text": " @inheritdoc RewardCalculation"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_currentPeriod",
            "nameLocation": "3307:14:155",
            "overrides": {
              "id": 35081,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3346:8:155"
            },
            "parameters": {
              "id": 35080,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3321:2:155"
            },
            "returnParameters": {
              "id": 35084,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35083,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 35095,
                  "src": "3364:7:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35082,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3364:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3363:9:155"
            },
            "scope": 35144,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 35143,
            "nodeType": "FunctionDefinition",
            "src": "3512:501:155",
            "nodes": [],
            "body": {
              "id": 35142,
              "nodeType": "Block",
              "src": "3655:358:155",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 35114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 35107,
                      "name": "actualDeductingAmount_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35105,
                      "src": "3661:22:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 35110,
                            "name": "_pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 35099,
                            "src": "3695:5:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                              "typeString": "struct IBaseStaking.PoolDetail storage pointer"
                            }
                          },
                          "id": 35111,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3701:13:155",
                          "memberName": "stakingAmount",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 9308,
                          "src": "3695:19:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 35112,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35101,
                          "src": "3716:6:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 35108,
                          "name": "Math",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11911,
                          "src": "3686:4:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_Math_$11911_$",
                            "typeString": "type(library Math)"
                          }
                        },
                        "id": 35109,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3691:3:155",
                        "memberName": "min",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 11806,
                        "src": "3686:8:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 35113,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3686:37:155",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3661:62:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 35115,
                  "nodeType": "ExpressionStatement",
                  "src": "3661:62:155"
                },
                {
                  "expression": {
                    "id": 35120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 35116,
                        "name": "_pool",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35099,
                        "src": "3730:5:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                          "typeString": "struct IBaseStaking.PoolDetail storage pointer"
                        }
                      },
                      "id": 35118,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "3736:13:155",
                      "memberName": "stakingAmount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9308,
                      "src": "3730:19:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 35119,
                      "name": "actualDeductingAmount_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35105,
                      "src": "3753:22:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3730:45:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 35121,
                  "nodeType": "ExpressionStatement",
                  "src": "3730:45:155"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 35123,
                        "name": "_pool",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35099,
                        "src": "3812:5:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                          "typeString": "struct IBaseStaking.PoolDetail storage pointer"
                        }
                      },
                      {
                        "expression": {
                          "id": 35124,
                          "name": "_pool",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35099,
                          "src": "3825:5:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                            "typeString": "struct IBaseStaking.PoolDetail storage pointer"
                          }
                        },
                        "id": 35125,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3831:19:155",
                        "memberName": "__shadowedPoolAdmin",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 9305,
                        "src": "3825:25:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 35126,
                          "name": "_pool",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35099,
                          "src": "3858:5:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                            "typeString": "struct IBaseStaking.PoolDetail storage pointer"
                          }
                        },
                        "id": 35127,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3864:13:155",
                        "memberName": "stakingAmount",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 9308,
                        "src": "3858:19:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 35130,
                              "name": "_pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35099,
                              "src": "3905:5:155",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                                "typeString": "struct IBaseStaking.PoolDetail storage pointer"
                              }
                            },
                            "id": 35131,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3911:12:155",
                            "memberName": "stakingTotal",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 9311,
                            "src": "3905:18:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 35132,
                            "name": "actualDeductingAmount_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 35105,
                            "src": "3925:22:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 35128,
                            "name": "Math",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11911,
                            "src": "3885:4:155",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_Math_$11911_$",
                              "typeString": "type(library Math)"
                            }
                          },
                          "id": 35129,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3890:14:155",
                          "memberName": "subNonNegative",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 11890,
                          "src": "3885:19:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 35133,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3885:63:155",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                          "typeString": "struct IBaseStaking.PoolDetail storage pointer"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 35122,
                      "name": "_changeDelegatingAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32582,
                      "src": "3781:23:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PoolDetail_$9327_storage_ptr_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (struct IBaseStaking.PoolDetail storage pointer,address,uint256,uint256)"
                      }
                    },
                    "id": 35134,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3781:173:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35135,
                  "nodeType": "ExpressionStatement",
                  "src": "3781:173:155"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 35137,
                          "name": "_pool",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35099,
                          "src": "3974:5:155",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                            "typeString": "struct IBaseStaking.PoolDetail storage pointer"
                          }
                        },
                        "id": 35138,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3980:3:155",
                        "memberName": "pid",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 9302,
                        "src": "3974:9:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 35139,
                        "name": "actualDeductingAmount_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35105,
                        "src": "3985:22:155",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 35136,
                      "name": "Unstaked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9482,
                      "src": "3965:8:155",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 35140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3965:43:155",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35141,
                  "nodeType": "EmitStatement",
                  "src": "3960:48:155"
                }
              ]
            },
            "baseFunctions": [
              33435
            ],
            "documentation": {
              "id": 35096,
              "nodeType": "StructuredDocumentation",
              "src": "3466:43:155",
              "text": " @inheritdoc CandidateStaking"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_deductStakingAmount",
            "nameLocation": "3521:20:155",
            "overrides": {
              "id": 35103,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3605:8:155"
            },
            "parameters": {
              "id": 35102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35099,
                  "mutability": "mutable",
                  "name": "_pool",
                  "nameLocation": "3566:5:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35143,
                  "src": "3547:24:155",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                    "typeString": "struct IBaseStaking.PoolDetail"
                  },
                  "typeName": {
                    "id": 35098,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 35097,
                      "name": "PoolDetail",
                      "nameLocations": [
                        "3547:10:155"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 9327,
                      "src": "3547:10:155"
                    },
                    "referencedDeclaration": 9327,
                    "src": "3547:10:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PoolDetail_$9327_storage_ptr",
                      "typeString": "struct IBaseStaking.PoolDetail"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35101,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3585:6:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35143,
                  "src": "3577:14:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35100,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3577:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3541:54:155"
            },
            "returnParameters": {
              "id": 35106,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35105,
                  "mutability": "mutable",
                  "name": "actualDeductingAmount_",
                  "nameLocation": "3631:22:155",
                  "nodeType": "VariableDeclaration",
                  "scope": 35143,
                  "src": "3623:30:155",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 35104,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3623:7:155",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3622:32:155"
            },
            "scope": 35144,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 34809,
              "name": "IStaking",
              "nameLocations": [
                "426:8:155"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 9964,
              "src": "426:8:155"
            },
            "id": 34810,
            "nodeType": "InheritanceSpecifier",
            "src": "426:8:155"
          },
          {
            "baseName": {
              "id": 34811,
              "name": "StakingCallback",
              "nameLocations": [
                "436:15:155"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 35216,
              "src": "436:15:155"
            },
            "id": 34812,
            "nodeType": "InheritanceSpecifier",
            "src": "436:15:155"
          },
          {
            "baseName": {
              "id": 34813,
              "name": "Initializable",
              "nameLocations": [
                "453:13:155"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 150318,
              "src": "453:13:155"
            },
            "id": 34814,
            "nodeType": "InheritanceSpecifier",
            "src": "453:13:155"
          },
          {
            "baseName": {
              "id": 34815,
              "name": "AccessControlEnumerable",
              "nameLocations": [
                "468:23:155"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 149245,
              "src": "468:23:155"
            },
            "id": 34816,
            "nodeType": "InheritanceSpecifier",
            "src": "468:23:155"
          }
        ],
        "canonicalName": "Staking",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          35144,
          149245,
          149120,
          152503,
          152515,
          149343,
          149318,
          151805,
          150318,
          35216,
          9964,
          9979,
          34082,
          9757,
          33484,
          3606,
          3600,
          9649,
          32583,
          40330,
          9451,
          3544,
          40560,
          8893,
          3589,
          34799,
          9922,
          8917,
          150466,
          791
        ],
        "name": "Staking",
        "nameLocation": "415:7:155",
        "scope": 35145,
        "usedErrors": [
          676,
          681,
          8866,
          9340,
          9343,
          9346,
          9349,
          9354,
          9362,
          9365,
          9535,
          9538,
          9541,
          9544,
          9547,
          9550,
          9553,
          9675,
          9678,
          9681,
          9843,
          10928,
          40132,
          40137,
          40160,
          40175
        ],
        "usedEvents": [
          8874,
          9332,
          9337,
          9461,
          9468,
          9475,
          9482,
          9493,
          9500,
          9506,
          9517,
          9528,
          9663,
          9672,
          9789,
          9798,
          9807,
          9821,
          9832,
          9840,
          9941,
          149257,
          149266,
          149275,
          150182
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 24874524,
  "bytecode": "0x60806040523480156200001157600080fd5b5060016000556200002162000027565b620000e9565b60d154610100900460ff1615620000945760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60d15460ff9081161015620000e75760d1805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61574c80620000f96000396000f3fe60806040526004361061037a5760003560e01c80636bd8f804116101d1578063a217fddf11610102578063d01b8eed116100a0578063e22d1c9d1161006f578063e22d1c9d14610aac578063ef9aa66514610acc578063f92ad21914610aec578063f9f031df14610b0c5761038c565b8063d01b8eed14610a07578063d547741f14610a4c578063de981f1b14610a6c578063e15a7c9c14610a8c5761038c565b8063af245429116100dc578063af24542914610979578063c2a672e01461098e578063c5087003146109ae578063ca15c873146109e75761038c565b8063a217fddf14610931578063aa15a6fd14610946578063acd79c46146109665761038c565b8063909791dd1161016f578063924f081e11610149578063924f081e146108b15780639488e4e9146108d1578063969ffc14146108f15780639ee3c3f8146109115761038c565b8063909791dd1461083657806391d148541461084b57806391f8723f146108915761038c565b8063865e6fd3116101ab578063865e6fd31461079e578063888b9ae9146107be578063895ab742146107de5780639010d07c146107fe5761038c565b80636bd8f8041461072a5780636fae2e151461074a57806376664b651461077e5761038c565b80633d8e846e116102ab57806357473447116102495780635cd8a76b116102235780635cd8a76b146106be5780636558954f146106d3578063679a6e43146106ea5780636b0916951461070a5761038c565b8063574734471461066b5780635a2ac0731461068b5780635c19a95c146106ab5761038c565b8063435628ba11610285578063435628ba146105e3578063446850a1146106035780634530d202146106235780634d99dd161461064b5761038c565b80633d8e846e1461056857806342e0c4081461058857806342ef3c34146105c35761038c565b8063248a9ca3116103185780632f2ff15d116102f25780632f2ff15d146104e85780633101cfcb1461050857806336568abe146105285780633a3ec5b0146105485761038c565b8063248a9ca31461048557806326476204146104b55780632715805e146104c85761038c565b8063095f647511610354578063095f647514610405578063097e4a9d146104325780630a9313bc146104525780631658c86e146104655761038c565b806301ffc9a71461039757806303827884146103cc5780630682e8fa146103f05761038c565b3661038c57600861038a81610b2c565b005b600861038a81610b2c565b3480156103a357600080fd5b506103b76103b2366004614a53565b610b9d565b60405190151581526020015b60405180910390f35b3480156103d857600080fd5b506103e26104b081565b6040519081526020016103c3565b3480156103fc57600080fd5b506038546103e2565b34801561041157600080fd5b50610425610420366004614ac9565b610be1565b6040516103c39190614b71565b34801561043e57600080fd5b506103e261044d366004614b99565b610c6c565b61038a610460366004614c32565b610d70565b34801561047157600080fd5b5061038a610480366004614ce3565b610f8f565b34801561049157600080fd5b506103e26104a0366004614d00565b600090815260d2602052604090206001015490565b61038a6104c3366004614ce3565b611059565b3480156104d457600080fd5b506103e26104e3366004614d19565b6110a1565b3480156104f457600080fd5b5061038a610503366004614d45565b611132565b34801561051457600080fd5b5061038a610523366004614ce3565b611157565b34801561053457600080fd5b5061038a610543366004614d45565b611241565b34801561055457600080fd5b5061038a610563366004614d75565b6112cd565b34801561057457600080fd5b50610425610583366004614da3565b6113e1565b34801561059457600080fd5b506103b76105a3366004614ce3565b6001600160a01b039081166000908152603a602052604090205416151590565b3480156105cf57600080fd5b506104256105de366004614df8565b61156f565b3480156105ef57600080fd5b506104256105fe366004614ac9565b6115ba565b34801561060f57600080fd5b5061042561061e366004614df8565b611632565b34801561062f57600080fd5b50606e54606d54604080519283526020830191909152016103c3565b34801561065757600080fd5b5061038a610666366004614d19565b611677565b34801561067757600080fd5b5061038a610686366004614e3a565b61173c565b34801561069757600080fd5b506104256106a6366004614df8565b61174e565b61038a6106b9366004614ce3565b61178c565b3480156106ca57600080fd5b5061038a61180e565b3480156106df57600080fd5b506103e26201518081565b3480156106f657600080fd5b5061038a610705366004614d00565b611914565b34801561071657600080fd5b506103e2610725366004614d75565b611925565b34801561073657600080fd5b5061038a610745366004614e5c565b61196f565b34801561075657600080fd5b506103e27f600e5f1c60beb469a3fa6dd3814a4ae211cc6259a6d033bae218a742f2af01d381565b34801561078a57600080fd5b506103e2610799366004614d75565b611a4c565b3480156107aa57600080fd5b5061038a6107b9366004614eac565b611a8a565b3480156107ca57600080fd5b5061038a6107d9366004614d00565b611aa5565b3480156107ea57600080fd5b506103e26107f9366004614ce3565b611ab6565b34801561080a57600080fd5b5061081e610819366004614e3a565b611ae6565b6040516001600160a01b0390911681526020016103c3565b34801561084257600080fd5b50606c546103e2565b34801561085757600080fd5b506103b7610866366004614d45565b600091825260d2602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561089d57600080fd5b506104256108ac366004614df8565b611afe565b3480156108bd57600080fd5b5061038a6108cc366004614ec8565b611b49565b3480156108dd57600080fd5b5061038a6108ec366004614ac9565b611c4a565b3480156108fd57600080fd5b5061038a61090c366004614d00565b611e09565b34801561091d57600080fd5b5061038a61092c366004614efd565b611e1a565b34801561093d57600080fd5b506103e2600081565b34801561095257600080fd5b5061038a610961366004614ce3565b611ebb565b61038a610974366004614f3d565b611f1e565b34801561098557600080fd5b506039546103e2565b34801561099a57600080fd5b5061038a6109a9366004614d19565b611f72565b3480156109ba57600080fd5b5061081e6109c9366004614ce3565b6001600160a01b039081166000908152603a60205260409020541690565b3480156109f357600080fd5b506103e2610a02366004614d00565b61209b565b348015610a1357600080fd5b50610a27610a22366004614ce3565b6120b2565b604080516001600160a01b0390941684526020840192909252908201526060016103c3565b348015610a5857600080fd5b5061038a610a67366004614d45565b6120f9565b348015610a7857600080fd5b5061081e610a87366004614fb1565b61211e565b348015610a9857600080fd5b5061038a610aa7366004614fcc565b6121b2565b348015610ab857600080fd5b5061038a610ac7366004615066565b61233c565b348015610ad857600080fd5b50610a27610ae7366004614ce3565b6124d7565b348015610af857600080fd5b5061038a610b073660046150b2565b61251e565b348015610b1857600080fd5b506103e2610b27366004614df8565b61265c565b610b358161211e565b6001600160a01b0316336001600160a01b031614610b9a576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610b9193929190615120565b60405180910390fd5b50565b60006001600160e01b031982167f5a05180f000000000000000000000000000000000000000000000000000000001480610bdb5750610bdb82612714565b92915050565b60606000610c2186868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b9050610c60818585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506127f792505050565b9150505b949350505050565b6000600260005403610cc05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b600260005581610ccf816128ff565b336000908152603a60205260409020546001600160a01b031615610d0857604051632fc6bfb160e21b8152336004820152602401610b91565b6000610d4686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b90506000610d53856129c8565b9050610d60338383612a59565b6001600055979650505050505050565b600260005403610dc25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b60026000908155338152603a60205260409020546001600160a01b031615610dff57604051632fc6bfb160e21b8152336004820152602401610b91565b606d54851180610e105750606e5485105b15610e2e57604051631b8454a360e21b815260040160405180910390fd5b600034905060003390506000899050610ec4828c838c8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c9081908401838280828437600081840152601f19601f820116905080830192505050505050508e8a612a8b565b6001600160a01b03808216600081815260376020818152604080842060018082018054988b166001600160a01b0319998a16811790915582548916881783558652603a845282862080549098168717909755600681018352908420805460ff1916909617909555929091529052610f3c818486612dfa565b826001600160a01b0316826001600160a01b03167ffc1f1e73948cbc47c5b7f90e5601b7daccd9ad7173218486ccc74bdd051d05e860405160405180910390a35050600160005550505050505050505050565b80610f99816128ff565b60376000610fa6846129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002033610fd18282612ea5565b610fdb600861211e565b6001600160a01b031663dd716ad3610ff2866129c8565b6039546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561103b57600080fd5b505af115801561104f573d6000803e3d6000fd5b5050505050505050565b611061612eee565b8061106b816128ff565b6000611076836129c8565b6001600160a01b038116600090815260376020526040902090915061109c903334612dfa565b505050565b600060086110ae81610b2c565b6001600160a01b03841660009081526037602052604090206110d09084612f2a565b9150336110dd8184612fc7565b61112a57604080518481524760208201526001600160a01b0380841692908816917f63701cd972aa3c7f87898aab145c972e52185beab07d6e39380a998d334cf6c8910160405180910390a35b505092915050565b600082815260d2602052604090206001015461114d81613023565b61109c838361302d565b60d154600390610100900460ff16158015611179575060d15460ff8083169116105b6111dc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b60d1805461ffff191660ff8316176101001790556111fb600f8361304f565b60d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6001600160a01b03811633146112bf5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610b91565b6112c982826130f3565b5050565b60d154600490610100900460ff161580156112ef575060d15460ff8083169116105b6113525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b60d1805461ffff191660ff83161761010017905561137160008461302d565b61139b7f600e5f1c60beb469a3fa6dd3814a4ae211cc6259a6d033bae218a742f2af01d38361302d565b60d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b606060006113ef600861211e565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561142c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114509190615155565b90508267ffffffffffffffff81111561146b5761146b61516e565b604051908082528060200260200182016040528015611494578160200160208202803683370190505b50915060006114d585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b905060005b848110156115655760008282815181106114f6576114f6615184565b6020026020010151905061153f81898661153a858d6001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b613115565b85838151811061155157611551615184565b6020908102919091010152506001016114da565b5050509392505050565b606060006115af84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b9050610c6481613211565b6060611629858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506127f792505050565b95945050505050565b606061167083838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061321192505050565b9392505050565b6002600054036116c95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b60026000908155339061170b9084906037906116e4836129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002083856132d2565b611715818361356b565b61173257604051635ff7115760e11b815260040160405180910390fd5b5050600160005550565b6117446135cc565b6112c98282613640565b60606116708383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506136ad92505050565b611794612eee565b8061179e816128ff565b336000908152603a60205260409020546001600160a01b0316156117d757604051632fc6bfb160e21b8152336004820152602401610b91565b6112c9603760006117e7856129c8565b6001600160a01b03166001600160a01b031681526020019081526020016000203334613761565b60d154600290610100900460ff16158015611830575060d15460ff8083169116105b6118935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b60d1805461ffff191660ff8316176101001790556036546118bf906008906001600160a01b031661304f565b603680546001600160a01b031916905560d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b61191c6135cc565b610b9a81613810565b600080611931846129c8565b9050610c648184611940613845565b6001600160a01b038086166000908152603760209081526040808320938b168352600490930190522054613115565b6002600054036119c15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b6002600055816119d0816128ff565b33611a0985603760006119e2836129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002083866132d2565b611a4060376000611a19876129c8565b6001600160a01b03166001600160a01b031681526020019081526020016000208285613761565b50506001600055505050565b600080611a58846129c8565b6001600160a01b0380821660009081526037602090815260408083209388168352600490930190522054909150610c64565b611a926135cc565b611a9b816138b7565b6112c9828261304f565b611aad6135cc565b610b9a81613906565b600080611ac2836129c8565b9050611670816001600160a01b031660009081526037602052604090206003015490565b600082815260d360205260408120611670908361393b565b60606000611b3e84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b9050610c64816136ad565b82611b53816128ff565b60376000611b60866129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002033611b8b8282612ea5565b606d54841180611b9c5750606e5484105b15611bba57604051631b8454a360e21b815260040160405180910390fd5b611bc4600861211e565b6001600160a01b031663e5125a1d611bdb886129c8565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810188905260448101879052606401600060405180830381600087803b158015611c2a57600080fd5b505af1158015611c3e573d6000803e3d6000fd5b50505050505050505050565b600260005403611c9c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b6002600055821580611cae5750828114155b15611ccc576040516376081a7b60e11b815260040160405180910390fd5b6000339050600080611d1087878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b905060005b8151811015611dd357858582818110611d3057611d30615184565b9050602002013583611d4291906151b0565b9250611dcb888883818110611d5957611d59615184565b9050602002016020810190611d6e9190614ce3565b60376000858581518110611d8457611d84615184565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002086898986818110611dbf57611dbf615184565b905060200201356132d2565b600101611d15565b50611dde838361356b565b611dfb57604051635ff7115760e11b815260040160405180910390fd5b505060016000555050505050565b611e116135cc565b610b9a81613947565b600f611e2581610b2c565b6001600160a01b0380851660009081526037602090815260408083209386168352600684019091529020805460ff19166001179055611e6581858561397c565b60010180546001600160a01b039081166000908152603a602052604080822080546001600160a01b0319908116909155845496841696811687179094559481529390932080549590931694169390931790555050565b80611ec5816128ff565b60376000611ed2846129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002033611efd8282612ea5565b611f07600861211e565b6001600160a01b031663cdaa4e81610ff2866129c8565b6008611f2981610b2c565b611f6a868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250879150869050613a17565b505050505050565b600260005403611fc45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b600260005581611fd3816128ff565b8160000361200d576040517f31d9f7d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000612019856129c8565b6001600160a01b03811660009081526037602052604081206002810154929350916120459087906151c3565b9050606c54811015612083576040517fef0a995700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61208e828588613e3e565b611dde84876104b0613f43565b600081815260d360205260408120610bdb90613fb8565b6000806000806120c1856129c8565b6001600160a01b0390811660009081526037602052604090206001810154600282015460039092015492169790965090945092505050565b600082815260d2602052604090206001015461211481613023565b61109c83836130f3565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115612155576121556150f6565b60ff1681526020810191909152604001600020546001600160a01b03169050806121ad57816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610b9191906151d6565b919050565b7f600e5f1c60beb469a3fa6dd3814a4ae211cc6259a6d033bae218a742f2af01d36121dc81613023565b85841415806121eb5750858214155b15612230576040517f053265f10000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b91565b60005b868110156123095783838281811061224d5761224d615184565b905060200201602081019061226291906151f2565b603760008a8a8581811061227857612278615184565b905060200201602081019061228d9190614ce3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060060160008888858181106122c4576122c4615184565b90506020020160208101906122d99190614ce3565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101612233565b506040517f52ba1d8b6046f97286cc5eef5dc8215b0f411bdb3785cc8870260793dbf9d2c390600090a150505050505050565b600861234781610b2c565b82156124d15760005b8381101561249657600085858381811061236c5761236c615184565b90506020020160208101906123819190614ce3565b6001600160a01b03808216600090815260376020908152604080832060018101549094168352603a909152902080546001600160a01b03191690556002810154919250908015612445576123d58282612f2a565b5060018201546123f1906001600160a01b0316826104b0613f43565b6124455760018201548254604080518481524760208201526001600160a01b0393841693909216917f7dc5115a5aba081f5a174f56a3d02eea582824783322a4ac03f7bd388f444194910160405180910390a35b60018201546000906124629085906001600160a01b031689613fc2565b90508015612487576001830154612485906001600160a01b0316826104b0613f43565b505b84600101945050505050612350565b507f4f257d3ba23679d338f1d94296086bba5724af341b7fa31aa0ff297bfcdc62d884846040516124c892919061520f565b60405180910390a15b50505050565b6000806000612511846001600160a01b03808216600090815260376020526040902060018101546002820154600390920154921693909250565b9250925092509193909250565b60d154610100900460ff161580801561253e575060d154600160ff909116105b806125585750303b158015612558575060d15460ff166001145b6125bb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b60d1805460ff1916600117905580156125de5760d1805461ff0019166101001790555b6125e960088761304f565b6125f285613810565b6125fd600085613640565b61260683613906565b61260f82613947565b8015611f6a5760d1805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b60006002600054036126b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b60026000819055506126fd336126f885858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b6140f1565b90506127093382614142565b600160005592915050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610bdb57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610bdb565b6060612787600f61211e565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b81526004016127b2919061525d565b600060405180830381865afa1580156127cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bdb91908101906152db565b6060815183511461281b576040516376081a7b60e11b815260040160405180910390fd5b825167ffffffffffffffff8111156128355761283561516e565b60405190808252806020026020018201604052801561285e578160200160208202803683370190505b50905060005b81518110156128f8576128d384828151811061288257612882615184565b602002602001015184838151811061289c5761289c615184565b60200260200101516001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b8282815181106128e5576128e5615184565b6020908102919091010152600101612864565b5092915050565b612909600861211e565b604051635061f96960e11b81526001600160a01b038381166004830152919091169063a0c3f2d290602401602060405180830381865afa158015612951573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612975919061538d565b610b9a5780612983826129c8565b6040517f2533fce20000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015291166024820152604401610b91565b60006129d4600f61211e565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa158015612a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb91906153aa565b6000612a6584846140f1565b6001600160a01b0383166000908152603760205260409020909150611670908583613761565b612a998860006104b0613f43565b612af7576040805163338f030160e01b81526001600160a01b038a1660048201526024810191909152600a60448201527f706f6f6c2061646d696e000000000000000000000000000000000000000000006064820152608401610b91565b612b058560006104b0613f43565b612b63576040805163338f030160e01b81526001600160a01b03871660048201526024810191909152600860448201527f74726561737572790000000000000000000000000000000000000000000000006064820152608401610b91565b606c54811015612b8657604051630a8d7fa760e21b815260040160405180910390fd5b866001600160a01b0316886001600160a01b0316141580612bb95750846001600160a01b0316876001600160a01b031614155b15612bf0576040517fdc1d04ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051600380825260808201909252600091602082016060803683370190505090508881600081518110612c2757612c27615184565b60200260200101906001600160a01b031690816001600160a01b0316815250508681600181518110612c5b57612c5b615184565b60200260200101906001600160a01b031690816001600160a01b031681525050612c8481614190565b15612cc9576040517f1ad2fb620000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b91565b50612cd4600861211e565b6040517ff883afaf0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528881166024830152878116604483015260648201859052919091169063f883afaf90608401600060405180830381600087803b158015612d4957600080fd5b505af1158015612d5d573d6000803e3d6000fd5b505050506000612d6d600f61211e565b6040517fb5017aef0000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063b5017aef90612dbd908b908b908b908b908b90600401615417565b600060405180830381600087803b158015612dd757600080fd5b505af1158015612deb573d6000803e3d6000fd5b50505050505050505050505050565b8282612e068282612ea5565b82856002016000828254612e1a91906151b0565b92505081905550612e4085858760020154868960030154612e3b91906151b0565b61422f565b6001600160a01b03808516600090815260058701602052604090819020429055865490519116907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90612e969086815260200190565b60405180910390a25050505050565b60018201546001600160a01b038281169116146112c9576040517ff78cb7ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600003612f28576040517fdbf97bca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612f3a83600201548361426a565b905080836002016000828254612f5091906151c3565b9091555050600183015460028401546003850154612f809286926001600160a01b0390911691612e3b9086614280565b82546040518281526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a292915050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613014576040519150601f19603f3d011682016040523d82523d6000602084013e613019565b606091505b5090949350505050565b610b9a813361429a565b613037828261431a565b600082815260d36020526040902061109c90826143bc565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f811115613085576130856150f6565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156130c6576130c66150f6565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6130fd82826143d1565b600082815260d36020526040902061109c9082614454565b6001600160a01b0380851660009081526002602090815260408083209387168352929052908120600381015484900361315057549050610c64565b6001600160a01b0386166000908152600360208181526040808420600180845282862094870154865293909252832091820154839290156131b5578054600186015490945061319f90856151c3565b85600201546131ae919061545d565b92506131bd565b846001015493505b81546000906131cd9086906151c3565b6131d7908961545d565b9050670de0b6b3a76400006131ec82866151b0565b6131f69190615474565b865461320291906151b0565b9b9a5050505050505050505050565b6060815167ffffffffffffffff81111561322d5761322d61516e565b604051908082528060200260200182016040528015613256578160200160208202803683370190505b50905060005b82518110156132cc576037600084838151811061327b5761327b615184565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600201548282815181106132b9576132b9615184565b602090810291909101015260010161325c565b50919050565b82826132de8282614469565b82600003613318576040517ff5618d5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416600090815260048601602052604090205483111561336c576040517f34aa9a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613378600861211e565b604051635061f96960e11b81526001600160a01b0389811660048301529192509082169063a0c3f2d290602401602060405180830381865afa1580156133c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e6919061538d565b801561347657506040517f28bde1e10000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528216906328bde1e19060240160e060405180830381865afa15801561344c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134709190615496565b60a00151155b80156134a957506038546001600160a01b038616600090815260058801602052604090205442916134a6916151b0565b10155b156134e0576040517ff19f52bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600090815260048701602052604090205461351e908790879061350e9088906151c3565b878a60030154612e3b91906151c3565b85546040518581526001600160a01b03918216918716907f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c9060200160405180910390a350505050505050565b6000814710156135c2576040517f98c713c00000000000000000000000000000000000000000000000000000000081526001600160e01b031960003516600482015247602482015260448101839052606401610b91565b6116708383612fc7565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314612f28576000356001600160e01b03191660016040517f3e523c00000000000000000000000000000000000000000000000000000000008152600401610b9192919061553e565b61271081118061364f57508082115b1561366d57604051631b8454a360e21b815260040160405180910390fd5b606d819055606e82905560408051838152602081018390527f677752f5bf9541b14288833909e5ec5a478103131c1ec08c4638943be5826c149101611235565b6060815167ffffffffffffffff8111156136c9576136c961516e565b6040519080825280602002602001820160405280156136f2578160200160208202803683370190505b50905060005b82518110156132cc5761373c83828151811061371657613716615184565b60200260200101516001600160a01b031660009081526037602052604090206003015490565b82828151811061374e5761374e615184565b60209081029190910101526001016136f8565b828261376d8282614469565b6001600160a01b03841660009081526004860160205260409020546137ab908690869061379b9087906151b0565b868960030154612e3b91906151b0565b6001600160a01b03808516600081815260058801602052604090819020429055875490519216917fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b906138019087815260200190565b60405180910390a35050505050565b606c8190556040518181527f372bbdb8d72373b0012f84ee5a11671e5fb72b8bea902ebca93a19cb45d32be290602001611909565b6000613851600861211e565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561388e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b29190615155565b905090565b806001600160a01b03163b600003610b9a576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610b91565b60388190556040518181527f4956b65267b8f1e642284bcb5037116c69a9c78d9ca576beeae0974737a4872a90602001611909565b600061167083836144be565b60398190556040518181527f02be0b73b597f2c0f138aebee162b3b0e25d5b5a26854c15dcf79176e9a1c67890602001611909565b82826139888282612ea5565b6000856002015490506139a886866000848a60030154612e3b91906151c3565b6139be868583848a60030154612e3b91906151b0565b8554604080516001600160a01b03888116825287811660208301529181018490529116907f41440fd419d77ac181f12df5a1bc7a60bb55e828544cbc93b506a64b93ac35e69060600160405180910390a2505050505050565b83518214613a6057807fae52c603227f64e4c6101dde593aa9790a16b3ac77546bd746d758511e9560a5858585604051613a53939291906155a6565b60405180910390a26124d1565b6000806000806000885167ffffffffffffffff811115613a8257613a8261516e565b604051908082528060200260200182016040528015613aab578160200160208202803683370190505b5090506000895167ffffffffffffffff811115613aca57613aca61516e565b604051908082528060200260200182016040528015613af3578160200160208202803683370190505b50905060008a5167ffffffffffffffff811115613b1257613b1261516e565b604051908082528060200260200182016040528015613b3b578160200160208202803683370190505b50905060005b8b51811015613da4578b8181518110613b5c57613b5c615184565b6020908102919091018101516001600160a01b038116600090815260038084526040808320603790955290912001549097506001600160a01b03881660009081526001602081815260408084208f855290915290912001549096508a9003613bfd57868389806001019a5081518110613bd757613bd7615184565b60200260200101906001600160a01b031690816001600160a01b03168152505050613d9c565b60028101548a1115613c2b57604080518082019091528681526020018a905260018101869055600281018a90555b600181015415613c755760018101548c8c84818110613c4c57613c4c615184565b90506020020135670de0b6b3a7640000613c66919061545d565b613c709190615474565b613c78565b60005b985088816000016000828254613c8e91906151b0565b9182905550905085613ca08a856151c3565b81518110613cb057613cb0615184565b6020026020010181815250506040518060400160405280826000015481526020018b81525060016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008201518160000155602082015181600101559050508581600101600001819055508060010160000154848984613d4391906151c3565b81518110613d5357613d53615184565b6020908102919091010152868d613d6a8a856151c3565b81518110613d7a57613d7a615184565b60200260200101906001600160a01b031690816001600160a01b031681525050505b600101613b41565b508515613ded57858152858b51038b52877fee74f10cc50bf4b7e57fd36be7d46288795f3a9151dae97505b718b392ba14a382604051613de49190615609565b60405180910390a25b8a5115613e3157877f0e54e0485f70f0f63bc25889ddbf01ce1269ad6f07fdb2df573a0fbdb4d66f888c8585604051613e289392919061561c565b60405180910390a25b5050505050505050505050565b8282613e4a8282612ea5565b8460020154831115613e6f57604051630a8d7fa760e21b815260040160405180910390fd5b6038546001600160a01b03851660009081526005870160205260409020544291613e98916151b0565b1115613ed0576040517f07b6105200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82856002016000828254613ee491906151c3565b92505081905550613f0585858760020154868960030154612e3b91906151c3565b84546040518481526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590602001612e96565b600082600003613f5c57613f596108fc836151b0565b91505b6040516001600160a01b03851690839085906000818181858888f193505050503d8060008114613fa8576040519150601f19603f3d011682016040523d82523d6000602084013e613fad565b606091505b509095945050505050565b6000610bdb825490565b6001600160a01b03808416600090815260376020908152604080832093861683526004909301905290812054613ffa85858584613115565b9150836001600160a01b0316856001600160a01b03167f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b78460405161404191815260200190565b60405180910390a36001600160a01b0380861660008181526002602090815260408083209489168352938152838220828155928252600390529190912061408b90828685806144e8565b60038181018590556001600160a01b03878116600081815260209384526040808220546001870155519081529188169290917faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad910160405180910390a350509392505050565b6000806140fc613845565b905060005b835181101561112a5761412e84828151811061411f5761411f615184565b60200260200101518684613fc2565b61413890846151b0565b9250600101614101565b61414c828261356b565b6112c9576040517f3b97b7700000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b91565b600081516000036141a357506000919050565b60005b600183510381101561422657600181015b835181101561421d578381815181106141d2576141d2615184565b60200260200101516001600160a01b03168483815181106141f5576141f5615184565b60200260200101516001600160a01b031603614215575060019392505050565b6001016141b7565b506001016141a6565b50600092915050565b8354614245906001600160a01b03168484614593565b60038401556001600160a01b0390911660009081526004909201602052604090912055565b60008183106142795781611670565b5090919050565b6000818311614290576000611670565b61167082846151c3565b600082815260d2602090815260408083206001600160a01b038516845290915290205460ff166112c9576142d8816001600160a01b03166014614730565b6142e3836020614730565b6040516020016142f4929190615655565b60408051601f198184030181529082905262461bcd60e51b8252610b91916004016156d6565b600082815260d2602090815260408083206001600160a01b038516845290915290205460ff166112c957600082815260d2602090815260408083206001600160a01b03851684529091529020805460ff191660011790556143783390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611670836001600160a01b038416614911565b600082815260d2602090815260408083206001600160a01b038516845290915290205460ff16156112c957600082815260d2602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611670836001600160a01b038416614960565b6001600160a01b038116600090815260068301602052604090205460ff16156112c9576040517f9feb934700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260000182815481106144d5576144d5615184565b9060005260206000200154905092915050565b82846003015410156144fc57600284018190555b600061450c85600201548461426a565b9050600081866002015461452091906151c3565b9050801561458a5760028601829055600187015481111561456d576040517fa5ca437e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8087600101600001600082825461458491906151c3565b90915550505b50505050505050565b600061459d613845565b6001600160a01b03851660009081526003602052604090206001810154600282015492935090918311156146115760405180604001604052806145f8886001600160a01b031660009081526037602052604090206003015490565b8152602090810185905281516001850155015160028301555b6001600160a01b038681166000818152600260209081526040808320948a16808452948252808320938352603782528083209483526004909401905291822054909161465f89898885613115565b835490915081146146b1578083556040518181526001600160a01b0389811691908b16907faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad9060200160405180910390a35b6146be8584888a866144e8565b845460018085019190915560038401879055850154841461472557886001600160a01b0316867f81faf50e2aaf52eaba2ab841071efb9f6f0850a3e7d008b1336e6001d3d4963c876001016000015460405161471c91815260200190565b60405180910390a35b505050505050505050565b6060600061473f83600261545d565b61474a9060026151b0565b67ffffffffffffffff8111156147625761476261516e565b6040519080825280601f01601f19166020018201604052801561478c576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106147c3576147c3615184565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061480e5761480e615184565b60200101906001600160f81b031916908160001a905350600061483284600261545d565b61483d9060016151b0565b90505b60018111156148c2577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061487e5761487e615184565b1a60f81b82828151811061489457614894615184565b60200101906001600160f81b031916908160001a90535060049490941c936148bb816156e9565b9050614840565b5083156116705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b91565b600081815260018301602052604081205461495857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bdb565b506000610bdb565b60008181526001830160205260408120548015614a495760006149846001836151c3565b8554909150600090614998906001906151c3565b90508181146149fd5760008660000182815481106149b8576149b8615184565b90600052602060002001549050808760000184815481106149db576149db615184565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614a0e57614a0e615700565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610bdb565b6000915050610bdb565b600060208284031215614a6557600080fd5b81356001600160e01b03198116811461167057600080fd5b60008083601f840112614a8f57600080fd5b50813567ffffffffffffffff811115614aa757600080fd5b6020830191508360208260051b8501011115614ac257600080fd5b9250929050565b60008060008060408587031215614adf57600080fd5b843567ffffffffffffffff80821115614af757600080fd5b614b0388838901614a7d565b90965094506020870135915080821115614b1c57600080fd5b50614b2987828801614a7d565b95989497509550505050565b60008151808452602080850194506020840160005b83811015614b6657815187529582019590820190600101614b4a565b509495945050505050565b6020815260006116706020830184614b35565b6001600160a01b0381168114610b9a57600080fd5b600080600060408486031215614bae57600080fd5b833567ffffffffffffffff811115614bc557600080fd5b614bd186828701614a7d565b9094509250506020840135614be581614b84565b809150509250925092565b60008083601f840112614c0257600080fd5b50813567ffffffffffffffff811115614c1a57600080fd5b602083019150836020828501011115614ac257600080fd5b60008060008060008060008060c0898b031215614c4e57600080fd5b8835614c5981614b84565b97506020890135614c6981614b84565b96506040890135614c7981614b84565b955060608901359450608089013567ffffffffffffffff80821115614c9d57600080fd5b614ca98c838d01614bf0565b909650945060a08b0135915080821115614cc257600080fd5b50614ccf8b828c01614bf0565b999c989b5096995094979396929594505050565b600060208284031215614cf557600080fd5b813561167081614b84565b600060208284031215614d1257600080fd5b5035919050565b60008060408385031215614d2c57600080fd5b8235614d3781614b84565b946020939093013593505050565b60008060408385031215614d5857600080fd5b823591506020830135614d6a81614b84565b809150509250929050565b60008060408385031215614d8857600080fd5b8235614d9381614b84565b91506020830135614d6a81614b84565b600080600060408486031215614db857600080fd5b8335614dc381614b84565b9250602084013567ffffffffffffffff811115614ddf57600080fd5b614deb86828701614a7d565b9497909650939450505050565b60008060208385031215614e0b57600080fd5b823567ffffffffffffffff811115614e2257600080fd5b614e2e85828601614a7d565b90969095509350505050565b60008060408385031215614e4d57600080fd5b50508035926020909101359150565b600080600060608486031215614e7157600080fd5b8335614e7c81614b84565b92506020840135614e8c81614b84565b929592945050506040919091013590565b8035601081106121ad57600080fd5b60008060408385031215614ebf57600080fd5b614d9383614e9d565b600080600060608486031215614edd57600080fd5b8335614ee881614b84565b95602085013595506040909401359392505050565b600080600060608486031215614f1257600080fd5b8335614f1d81614b84565b92506020840135614f2d81614b84565b91506040840135614be581614b84565b600080600080600060608688031215614f5557600080fd5b853567ffffffffffffffff80821115614f6d57600080fd5b614f7989838a01614a7d565b90975095506020880135915080821115614f9257600080fd5b50614f9f88828901614a7d565b96999598509660400135949350505050565b600060208284031215614fc357600080fd5b61167082614e9d565b60008060008060008060608789031215614fe557600080fd5b863567ffffffffffffffff80821115614ffd57600080fd5b6150098a838b01614a7d565b9098509650602089013591508082111561502257600080fd5b61502e8a838b01614a7d565b9096509450604089013591508082111561504757600080fd5b5061505489828a01614a7d565b979a9699509497509295939492505050565b60008060006040848603121561507b57600080fd5b833567ffffffffffffffff81111561509257600080fd5b61509e86828701614a7d565b909790965060209590950135949350505050565b600080600080600060a086880312156150ca57600080fd5b85356150d581614b84565b97602087013597506040870135966060810135965060800135945092505050565b634e487b7160e01b600052602160045260246000fd5b6010811061511c5761511c6150f6565b9052565b6001600160e01b0319841681526060810161513e602083018561510c565b6001600160a01b0383166040830152949350505050565b60006020828403121561516757600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610bdb57610bdb61519a565b81810381811115610bdb57610bdb61519a565b60208101610bdb828461510c565b8015158114610b9a57600080fd5b60006020828403121561520457600080fd5b8135611670816151e4565b60208082528181018390526000908460408401835b8681101561525257823561523781614b84565b6001600160a01b031682529183019190830190600101615224565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561529e5783516001600160a01b031683529284019291840191600101615279565b50909695505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156152d3576152d361516e565b604052919050565b600060208083850312156152ee57600080fd5b825167ffffffffffffffff8082111561530657600080fd5b818501915085601f83011261531a57600080fd5b81518181111561532c5761532c61516e565b8060051b915061533d8483016152aa565b818152918301840191848101908884111561535757600080fd5b938501935b83851015615381578451925061537183614b84565b828252938501939085019061535c565b98975050505050505050565b60006020828403121561539f57600080fd5b8151611670816151e4565b6000602082840312156153bc57600080fd5b815161167081614b84565b60005b838110156153e25781810151838201526020016153ca565b50506000910152565b600081518084526154038160208601602086016153c7565b601f01601f19169290920160200192915050565b60006001600160a01b038088168352808716602084015280861660408401525060a0606083015261544b60a08301856153eb565b828103608084015261538181856153eb565b8082028115828204841417610bdb57610bdb61519a565b60008261549157634e487b7160e01b600052601260045260246000fd5b500490565b600060e082840312156154a857600080fd5b60405160e0810181811067ffffffffffffffff821117156154cb576154cb61516e565b60405282516154d981614b84565b815260208301516154e981614b84565b602082015260408301516154fc81614b84565b6040820152606083015161550f81614b84565b806060830152506080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b6001600160e01b03198316815260408101600b831061555f5761555f6150f6565b8260208301529392505050565b60008151808452602080850194506020840160005b83811015614b665781516001600160a01b031687529582019590820190600101615581565b6040815260006155b9604083018661556c565b82810360208401528381527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8411156155f157600080fd5b8360051b808660208401370160200195945050505050565b602081526000611670602083018461556c565b60608152600061562f606083018661556c565b82810360208401526156418186614b35565b90508281036040840152610c608185614b35565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161568d8160178501602088016153c7565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516156ca8160288401602088016153c7565b01602801949350505050565b60208152600061167060208301846153eb565b6000816156f8576156f861519a565b506000190190565b634e487b7160e01b600052603160045260246000fdfea264697066735822122062e75b43e635b9432538b81bc9ca3e8c3cdeabfeb4c7813bbb2ea8e357754d6164736f6c63430008160033",
  "chainId": 2021,
  "contractAbsolutePath": "Staking.sol",
  "deployedBytecode": "0x60806040526004361061037a5760003560e01c80636bd8f804116101d1578063a217fddf11610102578063d01b8eed116100a0578063e22d1c9d1161006f578063e22d1c9d14610aac578063ef9aa66514610acc578063f92ad21914610aec578063f9f031df14610b0c5761038c565b8063d01b8eed14610a07578063d547741f14610a4c578063de981f1b14610a6c578063e15a7c9c14610a8c5761038c565b8063af245429116100dc578063af24542914610979578063c2a672e01461098e578063c5087003146109ae578063ca15c873146109e75761038c565b8063a217fddf14610931578063aa15a6fd14610946578063acd79c46146109665761038c565b8063909791dd1161016f578063924f081e11610149578063924f081e146108b15780639488e4e9146108d1578063969ffc14146108f15780639ee3c3f8146109115761038c565b8063909791dd1461083657806391d148541461084b57806391f8723f146108915761038c565b8063865e6fd3116101ab578063865e6fd31461079e578063888b9ae9146107be578063895ab742146107de5780639010d07c146107fe5761038c565b80636bd8f8041461072a5780636fae2e151461074a57806376664b651461077e5761038c565b80633d8e846e116102ab57806357473447116102495780635cd8a76b116102235780635cd8a76b146106be5780636558954f146106d3578063679a6e43146106ea5780636b0916951461070a5761038c565b8063574734471461066b5780635a2ac0731461068b5780635c19a95c146106ab5761038c565b8063435628ba11610285578063435628ba146105e3578063446850a1146106035780634530d202146106235780634d99dd161461064b5761038c565b80633d8e846e1461056857806342e0c4081461058857806342ef3c34146105c35761038c565b8063248a9ca3116103185780632f2ff15d116102f25780632f2ff15d146104e85780633101cfcb1461050857806336568abe146105285780633a3ec5b0146105485761038c565b8063248a9ca31461048557806326476204146104b55780632715805e146104c85761038c565b8063095f647511610354578063095f647514610405578063097e4a9d146104325780630a9313bc146104525780631658c86e146104655761038c565b806301ffc9a71461039757806303827884146103cc5780630682e8fa146103f05761038c565b3661038c57600861038a81610b2c565b005b600861038a81610b2c565b3480156103a357600080fd5b506103b76103b2366004614a53565b610b9d565b60405190151581526020015b60405180910390f35b3480156103d857600080fd5b506103e26104b081565b6040519081526020016103c3565b3480156103fc57600080fd5b506038546103e2565b34801561041157600080fd5b50610425610420366004614ac9565b610be1565b6040516103c39190614b71565b34801561043e57600080fd5b506103e261044d366004614b99565b610c6c565b61038a610460366004614c32565b610d70565b34801561047157600080fd5b5061038a610480366004614ce3565b610f8f565b34801561049157600080fd5b506103e26104a0366004614d00565b600090815260d2602052604090206001015490565b61038a6104c3366004614ce3565b611059565b3480156104d457600080fd5b506103e26104e3366004614d19565b6110a1565b3480156104f457600080fd5b5061038a610503366004614d45565b611132565b34801561051457600080fd5b5061038a610523366004614ce3565b611157565b34801561053457600080fd5b5061038a610543366004614d45565b611241565b34801561055457600080fd5b5061038a610563366004614d75565b6112cd565b34801561057457600080fd5b50610425610583366004614da3565b6113e1565b34801561059457600080fd5b506103b76105a3366004614ce3565b6001600160a01b039081166000908152603a602052604090205416151590565b3480156105cf57600080fd5b506104256105de366004614df8565b61156f565b3480156105ef57600080fd5b506104256105fe366004614ac9565b6115ba565b34801561060f57600080fd5b5061042561061e366004614df8565b611632565b34801561062f57600080fd5b50606e54606d54604080519283526020830191909152016103c3565b34801561065757600080fd5b5061038a610666366004614d19565b611677565b34801561067757600080fd5b5061038a610686366004614e3a565b61173c565b34801561069757600080fd5b506104256106a6366004614df8565b61174e565b61038a6106b9366004614ce3565b61178c565b3480156106ca57600080fd5b5061038a61180e565b3480156106df57600080fd5b506103e26201518081565b3480156106f657600080fd5b5061038a610705366004614d00565b611914565b34801561071657600080fd5b506103e2610725366004614d75565b611925565b34801561073657600080fd5b5061038a610745366004614e5c565b61196f565b34801561075657600080fd5b506103e27f600e5f1c60beb469a3fa6dd3814a4ae211cc6259a6d033bae218a742f2af01d381565b34801561078a57600080fd5b506103e2610799366004614d75565b611a4c565b3480156107aa57600080fd5b5061038a6107b9366004614eac565b611a8a565b3480156107ca57600080fd5b5061038a6107d9366004614d00565b611aa5565b3480156107ea57600080fd5b506103e26107f9366004614ce3565b611ab6565b34801561080a57600080fd5b5061081e610819366004614e3a565b611ae6565b6040516001600160a01b0390911681526020016103c3565b34801561084257600080fd5b50606c546103e2565b34801561085757600080fd5b506103b7610866366004614d45565b600091825260d2602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561089d57600080fd5b506104256108ac366004614df8565b611afe565b3480156108bd57600080fd5b5061038a6108cc366004614ec8565b611b49565b3480156108dd57600080fd5b5061038a6108ec366004614ac9565b611c4a565b3480156108fd57600080fd5b5061038a61090c366004614d00565b611e09565b34801561091d57600080fd5b5061038a61092c366004614efd565b611e1a565b34801561093d57600080fd5b506103e2600081565b34801561095257600080fd5b5061038a610961366004614ce3565b611ebb565b61038a610974366004614f3d565b611f1e565b34801561098557600080fd5b506039546103e2565b34801561099a57600080fd5b5061038a6109a9366004614d19565b611f72565b3480156109ba57600080fd5b5061081e6109c9366004614ce3565b6001600160a01b039081166000908152603a60205260409020541690565b3480156109f357600080fd5b506103e2610a02366004614d00565b61209b565b348015610a1357600080fd5b50610a27610a22366004614ce3565b6120b2565b604080516001600160a01b0390941684526020840192909252908201526060016103c3565b348015610a5857600080fd5b5061038a610a67366004614d45565b6120f9565b348015610a7857600080fd5b5061081e610a87366004614fb1565b61211e565b348015610a9857600080fd5b5061038a610aa7366004614fcc565b6121b2565b348015610ab857600080fd5b5061038a610ac7366004615066565b61233c565b348015610ad857600080fd5b50610a27610ae7366004614ce3565b6124d7565b348015610af857600080fd5b5061038a610b073660046150b2565b61251e565b348015610b1857600080fd5b506103e2610b27366004614df8565b61265c565b610b358161211e565b6001600160a01b0316336001600160a01b031614610b9a576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610b9193929190615120565b60405180910390fd5b50565b60006001600160e01b031982167f5a05180f000000000000000000000000000000000000000000000000000000001480610bdb5750610bdb82612714565b92915050565b60606000610c2186868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b9050610c60818585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506127f792505050565b9150505b949350505050565b6000600260005403610cc05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b600260005581610ccf816128ff565b336000908152603a60205260409020546001600160a01b031615610d0857604051632fc6bfb160e21b8152336004820152602401610b91565b6000610d4686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b90506000610d53856129c8565b9050610d60338383612a59565b6001600055979650505050505050565b600260005403610dc25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b60026000908155338152603a60205260409020546001600160a01b031615610dff57604051632fc6bfb160e21b8152336004820152602401610b91565b606d54851180610e105750606e5485105b15610e2e57604051631b8454a360e21b815260040160405180910390fd5b600034905060003390506000899050610ec4828c838c8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c9081908401838280828437600081840152601f19601f820116905080830192505050505050508e8a612a8b565b6001600160a01b03808216600081815260376020818152604080842060018082018054988b166001600160a01b0319998a16811790915582548916881783558652603a845282862080549098168717909755600681018352908420805460ff1916909617909555929091529052610f3c818486612dfa565b826001600160a01b0316826001600160a01b03167ffc1f1e73948cbc47c5b7f90e5601b7daccd9ad7173218486ccc74bdd051d05e860405160405180910390a35050600160005550505050505050505050565b80610f99816128ff565b60376000610fa6846129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002033610fd18282612ea5565b610fdb600861211e565b6001600160a01b031663dd716ad3610ff2866129c8565b6039546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561103b57600080fd5b505af115801561104f573d6000803e3d6000fd5b5050505050505050565b611061612eee565b8061106b816128ff565b6000611076836129c8565b6001600160a01b038116600090815260376020526040902090915061109c903334612dfa565b505050565b600060086110ae81610b2c565b6001600160a01b03841660009081526037602052604090206110d09084612f2a565b9150336110dd8184612fc7565b61112a57604080518481524760208201526001600160a01b0380841692908816917f63701cd972aa3c7f87898aab145c972e52185beab07d6e39380a998d334cf6c8910160405180910390a35b505092915050565b600082815260d2602052604090206001015461114d81613023565b61109c838361302d565b60d154600390610100900460ff16158015611179575060d15460ff8083169116105b6111dc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b60d1805461ffff191660ff8316176101001790556111fb600f8361304f565b60d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6001600160a01b03811633146112bf5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610b91565b6112c982826130f3565b5050565b60d154600490610100900460ff161580156112ef575060d15460ff8083169116105b6113525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b60d1805461ffff191660ff83161761010017905561137160008461302d565b61139b7f600e5f1c60beb469a3fa6dd3814a4ae211cc6259a6d033bae218a742f2af01d38361302d565b60d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b606060006113ef600861211e565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561142c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114509190615155565b90508267ffffffffffffffff81111561146b5761146b61516e565b604051908082528060200260200182016040528015611494578160200160208202803683370190505b50915060006114d585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b905060005b848110156115655760008282815181106114f6576114f6615184565b6020026020010151905061153f81898661153a858d6001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b613115565b85838151811061155157611551615184565b6020908102919091010152506001016114da565b5050509392505050565b606060006115af84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b9050610c6481613211565b6060611629858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920191909152506127f792505050565b95945050505050565b606061167083838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061321192505050565b9392505050565b6002600054036116c95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b60026000908155339061170b9084906037906116e4836129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002083856132d2565b611715818361356b565b61173257604051635ff7115760e11b815260040160405180910390fd5b5050600160005550565b6117446135cc565b6112c98282613640565b60606116708383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506136ad92505050565b611794612eee565b8061179e816128ff565b336000908152603a60205260409020546001600160a01b0316156117d757604051632fc6bfb160e21b8152336004820152602401610b91565b6112c9603760006117e7856129c8565b6001600160a01b03166001600160a01b031681526020019081526020016000203334613761565b60d154600290610100900460ff16158015611830575060d15460ff8083169116105b6118935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b60d1805461ffff191660ff8316176101001790556036546118bf906008906001600160a01b031661304f565b603680546001600160a01b031916905560d1805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b61191c6135cc565b610b9a81613810565b600080611931846129c8565b9050610c648184611940613845565b6001600160a01b038086166000908152603760209081526040808320938b168352600490930190522054613115565b6002600054036119c15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b6002600055816119d0816128ff565b33611a0985603760006119e2836129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002083866132d2565b611a4060376000611a19876129c8565b6001600160a01b03166001600160a01b031681526020019081526020016000208285613761565b50506001600055505050565b600080611a58846129c8565b6001600160a01b0380821660009081526037602090815260408083209388168352600490930190522054909150610c64565b611a926135cc565b611a9b816138b7565b6112c9828261304f565b611aad6135cc565b610b9a81613906565b600080611ac2836129c8565b9050611670816001600160a01b031660009081526037602052604090206003015490565b600082815260d360205260408120611670908361393b565b60606000611b3e84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b9050610c64816136ad565b82611b53816128ff565b60376000611b60866129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002033611b8b8282612ea5565b606d54841180611b9c5750606e5484105b15611bba57604051631b8454a360e21b815260040160405180910390fd5b611bc4600861211e565b6001600160a01b031663e5125a1d611bdb886129c8565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810188905260448101879052606401600060405180830381600087803b158015611c2a57600080fd5b505af1158015611c3e573d6000803e3d6000fd5b50505050505050505050565b600260005403611c9c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b6002600055821580611cae5750828114155b15611ccc576040516376081a7b60e11b815260040160405180910390fd5b6000339050600080611d1087878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b905060005b8151811015611dd357858582818110611d3057611d30615184565b9050602002013583611d4291906151b0565b9250611dcb888883818110611d5957611d59615184565b9050602002016020810190611d6e9190614ce3565b60376000858581518110611d8457611d84615184565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002086898986818110611dbf57611dbf615184565b905060200201356132d2565b600101611d15565b50611dde838361356b565b611dfb57604051635ff7115760e11b815260040160405180910390fd5b505060016000555050505050565b611e116135cc565b610b9a81613947565b600f611e2581610b2c565b6001600160a01b0380851660009081526037602090815260408083209386168352600684019091529020805460ff19166001179055611e6581858561397c565b60010180546001600160a01b039081166000908152603a602052604080822080546001600160a01b0319908116909155845496841696811687179094559481529390932080549590931694169390931790555050565b80611ec5816128ff565b60376000611ed2846129c8565b6001600160a01b03166001600160a01b0316815260200190815260200160002033611efd8282612ea5565b611f07600861211e565b6001600160a01b031663cdaa4e81610ff2866129c8565b6008611f2981610b2c565b611f6a868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250879150869050613a17565b505050505050565b600260005403611fc45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b600260005581611fd3816128ff565b8160000361200d576040517f31d9f7d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000612019856129c8565b6001600160a01b03811660009081526037602052604081206002810154929350916120459087906151c3565b9050606c54811015612083576040517fef0a995700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61208e828588613e3e565b611dde84876104b0613f43565b600081815260d360205260408120610bdb90613fb8565b6000806000806120c1856129c8565b6001600160a01b0390811660009081526037602052604090206001810154600282015460039092015492169790965090945092505050565b600082815260d2602052604090206001015461211481613023565b61109c83836130f3565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115612155576121556150f6565b60ff1681526020810191909152604001600020546001600160a01b03169050806121ad57816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610b9191906151d6565b919050565b7f600e5f1c60beb469a3fa6dd3814a4ae211cc6259a6d033bae218a742f2af01d36121dc81613023565b85841415806121eb5750858214155b15612230576040517f053265f10000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b91565b60005b868110156123095783838281811061224d5761224d615184565b905060200201602081019061226291906151f2565b603760008a8a8581811061227857612278615184565b905060200201602081019061228d9190614ce3565b6001600160a01b03166001600160a01b0316815260200190815260200160002060060160008888858181106122c4576122c4615184565b90506020020160208101906122d99190614ce3565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101612233565b506040517f52ba1d8b6046f97286cc5eef5dc8215b0f411bdb3785cc8870260793dbf9d2c390600090a150505050505050565b600861234781610b2c565b82156124d15760005b8381101561249657600085858381811061236c5761236c615184565b90506020020160208101906123819190614ce3565b6001600160a01b03808216600090815260376020908152604080832060018101549094168352603a909152902080546001600160a01b03191690556002810154919250908015612445576123d58282612f2a565b5060018201546123f1906001600160a01b0316826104b0613f43565b6124455760018201548254604080518481524760208201526001600160a01b0393841693909216917f7dc5115a5aba081f5a174f56a3d02eea582824783322a4ac03f7bd388f444194910160405180910390a35b60018201546000906124629085906001600160a01b031689613fc2565b90508015612487576001830154612485906001600160a01b0316826104b0613f43565b505b84600101945050505050612350565b507f4f257d3ba23679d338f1d94296086bba5724af341b7fa31aa0ff297bfcdc62d884846040516124c892919061520f565b60405180910390a15b50505050565b6000806000612511846001600160a01b03808216600090815260376020526040902060018101546002820154600390920154921693909250565b9250925092509193909250565b60d154610100900460ff161580801561253e575060d154600160ff909116105b806125585750303b158015612558575060d15460ff166001145b6125bb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b91565b60d1805460ff1916600117905580156125de5760d1805461ff0019166101001790555b6125e960088761304f565b6125f285613810565b6125fd600085613640565b61260683613906565b61260f82613947565b8015611f6a5760d1805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b60006002600054036126b05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b91565b60026000819055506126fd336126f885858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061277b92505050565b6140f1565b90506127093382614142565b600160005592915050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610bdb57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610bdb565b6060612787600f61211e565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b81526004016127b2919061525d565b600060405180830381865afa1580156127cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bdb91908101906152db565b6060815183511461281b576040516376081a7b60e11b815260040160405180910390fd5b825167ffffffffffffffff8111156128355761283561516e565b60405190808252806020026020018201604052801561285e578160200160208202803683370190505b50905060005b81518110156128f8576128d384828151811061288257612882615184565b602002602001015184838151811061289c5761289c615184565b60200260200101516001600160a01b0391821660009081526037602090815260408083209390941682526004909201909152205490565b8282815181106128e5576128e5615184565b6020908102919091010152600101612864565b5092915050565b612909600861211e565b604051635061f96960e11b81526001600160a01b038381166004830152919091169063a0c3f2d290602401602060405180830381865afa158015612951573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612975919061538d565b610b9a5780612983826129c8565b6040517f2533fce20000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015291166024820152604401610b91565b60006129d4600f61211e565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa158015612a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb91906153aa565b6000612a6584846140f1565b6001600160a01b0383166000908152603760205260409020909150611670908583613761565b612a998860006104b0613f43565b612af7576040805163338f030160e01b81526001600160a01b038a1660048201526024810191909152600a60448201527f706f6f6c2061646d696e000000000000000000000000000000000000000000006064820152608401610b91565b612b058560006104b0613f43565b612b63576040805163338f030160e01b81526001600160a01b03871660048201526024810191909152600860448201527f74726561737572790000000000000000000000000000000000000000000000006064820152608401610b91565b606c54811015612b8657604051630a8d7fa760e21b815260040160405180910390fd5b866001600160a01b0316886001600160a01b0316141580612bb95750846001600160a01b0316876001600160a01b031614155b15612bf0576040517fdc1d04ff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051600380825260808201909252600091602082016060803683370190505090508881600081518110612c2757612c27615184565b60200260200101906001600160a01b031690816001600160a01b0316815250508681600181518110612c5b57612c5b615184565b60200260200101906001600160a01b031690816001600160a01b031681525050612c8481614190565b15612cc9576040517f1ad2fb620000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b91565b50612cd4600861211e565b6040517ff883afaf0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528881166024830152878116604483015260648201859052919091169063f883afaf90608401600060405180830381600087803b158015612d4957600080fd5b505af1158015612d5d573d6000803e3d6000fd5b505050506000612d6d600f61211e565b6040517fb5017aef0000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063b5017aef90612dbd908b908b908b908b908b90600401615417565b600060405180830381600087803b158015612dd757600080fd5b505af1158015612deb573d6000803e3d6000fd5b50505050505050505050505050565b8282612e068282612ea5565b82856002016000828254612e1a91906151b0565b92505081905550612e4085858760020154868960030154612e3b91906151b0565b61422f565b6001600160a01b03808516600090815260058701602052604090819020429055865490519116907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90612e969086815260200190565b60405180910390a25050505050565b60018201546001600160a01b038281169116146112c9576040517ff78cb7ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600003612f28576040517fdbf97bca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612f3a83600201548361426a565b905080836002016000828254612f5091906151c3565b9091555050600183015460028401546003850154612f809286926001600160a01b0390911691612e3b9086614280565b82546040518281526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a292915050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613014576040519150601f19603f3d011682016040523d82523d6000602084013e613019565b606091505b5090949350505050565b610b9a813361429a565b613037828261431a565b600082815260d36020526040902061109c90826143bc565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f811115613085576130856150f6565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f8111156130c6576130c66150f6565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6130fd82826143d1565b600082815260d36020526040902061109c9082614454565b6001600160a01b0380851660009081526002602090815260408083209387168352929052908120600381015484900361315057549050610c64565b6001600160a01b0386166000908152600360208181526040808420600180845282862094870154865293909252832091820154839290156131b5578054600186015490945061319f90856151c3565b85600201546131ae919061545d565b92506131bd565b846001015493505b81546000906131cd9086906151c3565b6131d7908961545d565b9050670de0b6b3a76400006131ec82866151b0565b6131f69190615474565b865461320291906151b0565b9b9a5050505050505050505050565b6060815167ffffffffffffffff81111561322d5761322d61516e565b604051908082528060200260200182016040528015613256578160200160208202803683370190505b50905060005b82518110156132cc576037600084838151811061327b5761327b615184565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600201548282815181106132b9576132b9615184565b602090810291909101015260010161325c565b50919050565b82826132de8282614469565b82600003613318576040517ff5618d5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038416600090815260048601602052604090205483111561336c576040517f34aa9a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613378600861211e565b604051635061f96960e11b81526001600160a01b0389811660048301529192509082169063a0c3f2d290602401602060405180830381865afa1580156133c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e6919061538d565b801561347657506040517f28bde1e10000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528216906328bde1e19060240160e060405180830381865afa15801561344c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134709190615496565b60a00151155b80156134a957506038546001600160a01b038616600090815260058801602052604090205442916134a6916151b0565b10155b156134e0576040517ff19f52bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600090815260048701602052604090205461351e908790879061350e9088906151c3565b878a60030154612e3b91906151c3565b85546040518581526001600160a01b03918216918716907f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c9060200160405180910390a350505050505050565b6000814710156135c2576040517f98c713c00000000000000000000000000000000000000000000000000000000081526001600160e01b031960003516600482015247602482015260448101839052606401610b91565b6116708383612fc7565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314612f28576000356001600160e01b03191660016040517f3e523c00000000000000000000000000000000000000000000000000000000008152600401610b9192919061553e565b61271081118061364f57508082115b1561366d57604051631b8454a360e21b815260040160405180910390fd5b606d819055606e82905560408051838152602081018390527f677752f5bf9541b14288833909e5ec5a478103131c1ec08c4638943be5826c149101611235565b6060815167ffffffffffffffff8111156136c9576136c961516e565b6040519080825280602002602001820160405280156136f2578160200160208202803683370190505b50905060005b82518110156132cc5761373c83828151811061371657613716615184565b60200260200101516001600160a01b031660009081526037602052604090206003015490565b82828151811061374e5761374e615184565b60209081029190910101526001016136f8565b828261376d8282614469565b6001600160a01b03841660009081526004860160205260409020546137ab908690869061379b9087906151b0565b868960030154612e3b91906151b0565b6001600160a01b03808516600081815260058801602052604090819020429055875490519216917fe5541a6b6103d4fa7e021ed54fad39c66f27a76bd13d374cf6240ae6bd0bb72b906138019087815260200190565b60405180910390a35050505050565b606c8190556040518181527f372bbdb8d72373b0012f84ee5a11671e5fb72b8bea902ebca93a19cb45d32be290602001611909565b6000613851600861211e565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561388e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b29190615155565b905090565b806001600160a01b03163b600003610b9a576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610b91565b60388190556040518181527f4956b65267b8f1e642284bcb5037116c69a9c78d9ca576beeae0974737a4872a90602001611909565b600061167083836144be565b60398190556040518181527f02be0b73b597f2c0f138aebee162b3b0e25d5b5a26854c15dcf79176e9a1c67890602001611909565b82826139888282612ea5565b6000856002015490506139a886866000848a60030154612e3b91906151c3565b6139be868583848a60030154612e3b91906151b0565b8554604080516001600160a01b03888116825287811660208301529181018490529116907f41440fd419d77ac181f12df5a1bc7a60bb55e828544cbc93b506a64b93ac35e69060600160405180910390a2505050505050565b83518214613a6057807fae52c603227f64e4c6101dde593aa9790a16b3ac77546bd746d758511e9560a5858585604051613a53939291906155a6565b60405180910390a26124d1565b6000806000806000885167ffffffffffffffff811115613a8257613a8261516e565b604051908082528060200260200182016040528015613aab578160200160208202803683370190505b5090506000895167ffffffffffffffff811115613aca57613aca61516e565b604051908082528060200260200182016040528015613af3578160200160208202803683370190505b50905060008a5167ffffffffffffffff811115613b1257613b1261516e565b604051908082528060200260200182016040528015613b3b578160200160208202803683370190505b50905060005b8b51811015613da4578b8181518110613b5c57613b5c615184565b6020908102919091018101516001600160a01b038116600090815260038084526040808320603790955290912001549097506001600160a01b03881660009081526001602081815260408084208f855290915290912001549096508a9003613bfd57868389806001019a5081518110613bd757613bd7615184565b60200260200101906001600160a01b031690816001600160a01b03168152505050613d9c565b60028101548a1115613c2b57604080518082019091528681526020018a905260018101869055600281018a90555b600181015415613c755760018101548c8c84818110613c4c57613c4c615184565b90506020020135670de0b6b3a7640000613c66919061545d565b613c709190615474565b613c78565b60005b985088816000016000828254613c8e91906151b0565b9182905550905085613ca08a856151c3565b81518110613cb057613cb0615184565b6020026020010181815250506040518060400160405280826000015481526020018b81525060016000896001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008201518160000155602082015181600101559050508581600101600001819055508060010160000154848984613d4391906151c3565b81518110613d5357613d53615184565b6020908102919091010152868d613d6a8a856151c3565b81518110613d7a57613d7a615184565b60200260200101906001600160a01b031690816001600160a01b031681525050505b600101613b41565b508515613ded57858152858b51038b52877fee74f10cc50bf4b7e57fd36be7d46288795f3a9151dae97505b718b392ba14a382604051613de49190615609565b60405180910390a25b8a5115613e3157877f0e54e0485f70f0f63bc25889ddbf01ce1269ad6f07fdb2df573a0fbdb4d66f888c8585604051613e289392919061561c565b60405180910390a25b5050505050505050505050565b8282613e4a8282612ea5565b8460020154831115613e6f57604051630a8d7fa760e21b815260040160405180910390fd5b6038546001600160a01b03851660009081526005870160205260409020544291613e98916151b0565b1115613ed0576040517f07b6105200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82856002016000828254613ee491906151c3565b92505081905550613f0585858760020154868960030154612e3b91906151c3565b84546040518481526001600160a01b03909116907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590602001612e96565b600082600003613f5c57613f596108fc836151b0565b91505b6040516001600160a01b03851690839085906000818181858888f193505050503d8060008114613fa8576040519150601f19603f3d011682016040523d82523d6000602084013e613fad565b606091505b509095945050505050565b6000610bdb825490565b6001600160a01b03808416600090815260376020908152604080832093861683526004909301905290812054613ffa85858584613115565b9150836001600160a01b0316856001600160a01b03167f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b78460405161404191815260200190565b60405180910390a36001600160a01b0380861660008181526002602090815260408083209489168352938152838220828155928252600390529190912061408b90828685806144e8565b60038181018590556001600160a01b03878116600081815260209384526040808220546001870155519081529188169290917faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad910160405180910390a350509392505050565b6000806140fc613845565b905060005b835181101561112a5761412e84828151811061411f5761411f615184565b60200260200101518684613fc2565b61413890846151b0565b9250600101614101565b61414c828261356b565b6112c9576040517f3b97b7700000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610b91565b600081516000036141a357506000919050565b60005b600183510381101561422657600181015b835181101561421d578381815181106141d2576141d2615184565b60200260200101516001600160a01b03168483815181106141f5576141f5615184565b60200260200101516001600160a01b031603614215575060019392505050565b6001016141b7565b506001016141a6565b50600092915050565b8354614245906001600160a01b03168484614593565b60038401556001600160a01b0390911660009081526004909201602052604090912055565b60008183106142795781611670565b5090919050565b6000818311614290576000611670565b61167082846151c3565b600082815260d2602090815260408083206001600160a01b038516845290915290205460ff166112c9576142d8816001600160a01b03166014614730565b6142e3836020614730565b6040516020016142f4929190615655565b60408051601f198184030181529082905262461bcd60e51b8252610b91916004016156d6565b600082815260d2602090815260408083206001600160a01b038516845290915290205460ff166112c957600082815260d2602090815260408083206001600160a01b03851684529091529020805460ff191660011790556143783390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611670836001600160a01b038416614911565b600082815260d2602090815260408083206001600160a01b038516845290915290205460ff16156112c957600082815260d2602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611670836001600160a01b038416614960565b6001600160a01b038116600090815260068301602052604090205460ff16156112c9576040517f9feb934700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260000182815481106144d5576144d5615184565b9060005260206000200154905092915050565b82846003015410156144fc57600284018190555b600061450c85600201548461426a565b9050600081866002015461452091906151c3565b9050801561458a5760028601829055600187015481111561456d576040517fa5ca437e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8087600101600001600082825461458491906151c3565b90915550505b50505050505050565b600061459d613845565b6001600160a01b03851660009081526003602052604090206001810154600282015492935090918311156146115760405180604001604052806145f8886001600160a01b031660009081526037602052604090206003015490565b8152602090810185905281516001850155015160028301555b6001600160a01b038681166000818152600260209081526040808320948a16808452948252808320938352603782528083209483526004909401905291822054909161465f89898885613115565b835490915081146146b1578083556040518181526001600160a01b0389811691908b16907faa7c29611027fd4be148712bb54960253b7a7d5998c17769bfc424c2f5f185ad9060200160405180910390a35b6146be8584888a866144e8565b845460018085019190915560038401879055850154841461472557886001600160a01b0316867f81faf50e2aaf52eaba2ab841071efb9f6f0850a3e7d008b1336e6001d3d4963c876001016000015460405161471c91815260200190565b60405180910390a35b505050505050505050565b6060600061473f83600261545d565b61474a9060026151b0565b67ffffffffffffffff8111156147625761476261516e565b6040519080825280601f01601f19166020018201604052801561478c576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106147c3576147c3615184565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061480e5761480e615184565b60200101906001600160f81b031916908160001a905350600061483284600261545d565b61483d9060016151b0565b90505b60018111156148c2577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061487e5761487e615184565b1a60f81b82828151811061489457614894615184565b60200101906001600160f81b031916908160001a90535060049490941c936148bb816156e9565b9050614840565b5083156116705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b91565b600081815260018301602052604081205461495857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bdb565b506000610bdb565b60008181526001830160205260408120548015614a495760006149846001836151c3565b8554909150600090614998906001906151c3565b90508181146149fd5760008660000182815481106149b8576149b8615184565b90600052602060002001549050808760000184815481106149db576149db615184565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614a0e57614a0e615700565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610bdb565b6000915050610bdb565b600060208284031215614a6557600080fd5b81356001600160e01b03198116811461167057600080fd5b60008083601f840112614a8f57600080fd5b50813567ffffffffffffffff811115614aa757600080fd5b6020830191508360208260051b8501011115614ac257600080fd5b9250929050565b60008060008060408587031215614adf57600080fd5b843567ffffffffffffffff80821115614af757600080fd5b614b0388838901614a7d565b90965094506020870135915080821115614b1c57600080fd5b50614b2987828801614a7d565b95989497509550505050565b60008151808452602080850194506020840160005b83811015614b6657815187529582019590820190600101614b4a565b509495945050505050565b6020815260006116706020830184614b35565b6001600160a01b0381168114610b9a57600080fd5b600080600060408486031215614bae57600080fd5b833567ffffffffffffffff811115614bc557600080fd5b614bd186828701614a7d565b9094509250506020840135614be581614b84565b809150509250925092565b60008083601f840112614c0257600080fd5b50813567ffffffffffffffff811115614c1a57600080fd5b602083019150836020828501011115614ac257600080fd5b60008060008060008060008060c0898b031215614c4e57600080fd5b8835614c5981614b84565b97506020890135614c6981614b84565b96506040890135614c7981614b84565b955060608901359450608089013567ffffffffffffffff80821115614c9d57600080fd5b614ca98c838d01614bf0565b909650945060a08b0135915080821115614cc257600080fd5b50614ccf8b828c01614bf0565b999c989b5096995094979396929594505050565b600060208284031215614cf557600080fd5b813561167081614b84565b600060208284031215614d1257600080fd5b5035919050565b60008060408385031215614d2c57600080fd5b8235614d3781614b84565b946020939093013593505050565b60008060408385031215614d5857600080fd5b823591506020830135614d6a81614b84565b809150509250929050565b60008060408385031215614d8857600080fd5b8235614d9381614b84565b91506020830135614d6a81614b84565b600080600060408486031215614db857600080fd5b8335614dc381614b84565b9250602084013567ffffffffffffffff811115614ddf57600080fd5b614deb86828701614a7d565b9497909650939450505050565b60008060208385031215614e0b57600080fd5b823567ffffffffffffffff811115614e2257600080fd5b614e2e85828601614a7d565b90969095509350505050565b60008060408385031215614e4d57600080fd5b50508035926020909101359150565b600080600060608486031215614e7157600080fd5b8335614e7c81614b84565b92506020840135614e8c81614b84565b929592945050506040919091013590565b8035601081106121ad57600080fd5b60008060408385031215614ebf57600080fd5b614d9383614e9d565b600080600060608486031215614edd57600080fd5b8335614ee881614b84565b95602085013595506040909401359392505050565b600080600060608486031215614f1257600080fd5b8335614f1d81614b84565b92506020840135614f2d81614b84565b91506040840135614be581614b84565b600080600080600060608688031215614f5557600080fd5b853567ffffffffffffffff80821115614f6d57600080fd5b614f7989838a01614a7d565b90975095506020880135915080821115614f9257600080fd5b50614f9f88828901614a7d565b96999598509660400135949350505050565b600060208284031215614fc357600080fd5b61167082614e9d565b60008060008060008060608789031215614fe557600080fd5b863567ffffffffffffffff80821115614ffd57600080fd5b6150098a838b01614a7d565b9098509650602089013591508082111561502257600080fd5b61502e8a838b01614a7d565b9096509450604089013591508082111561504757600080fd5b5061505489828a01614a7d565b979a9699509497509295939492505050565b60008060006040848603121561507b57600080fd5b833567ffffffffffffffff81111561509257600080fd5b61509e86828701614a7d565b909790965060209590950135949350505050565b600080600080600060a086880312156150ca57600080fd5b85356150d581614b84565b97602087013597506040870135966060810135965060800135945092505050565b634e487b7160e01b600052602160045260246000fd5b6010811061511c5761511c6150f6565b9052565b6001600160e01b0319841681526060810161513e602083018561510c565b6001600160a01b0383166040830152949350505050565b60006020828403121561516757600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610bdb57610bdb61519a565b81810381811115610bdb57610bdb61519a565b60208101610bdb828461510c565b8015158114610b9a57600080fd5b60006020828403121561520457600080fd5b8135611670816151e4565b60208082528181018390526000908460408401835b8681101561525257823561523781614b84565b6001600160a01b031682529183019190830190600101615224565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561529e5783516001600160a01b031683529284019291840191600101615279565b50909695505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156152d3576152d361516e565b604052919050565b600060208083850312156152ee57600080fd5b825167ffffffffffffffff8082111561530657600080fd5b818501915085601f83011261531a57600080fd5b81518181111561532c5761532c61516e565b8060051b915061533d8483016152aa565b818152918301840191848101908884111561535757600080fd5b938501935b83851015615381578451925061537183614b84565b828252938501939085019061535c565b98975050505050505050565b60006020828403121561539f57600080fd5b8151611670816151e4565b6000602082840312156153bc57600080fd5b815161167081614b84565b60005b838110156153e25781810151838201526020016153ca565b50506000910152565b600081518084526154038160208601602086016153c7565b601f01601f19169290920160200192915050565b60006001600160a01b038088168352808716602084015280861660408401525060a0606083015261544b60a08301856153eb565b828103608084015261538181856153eb565b8082028115828204841417610bdb57610bdb61519a565b60008261549157634e487b7160e01b600052601260045260246000fd5b500490565b600060e082840312156154a857600080fd5b60405160e0810181811067ffffffffffffffff821117156154cb576154cb61516e565b60405282516154d981614b84565b815260208301516154e981614b84565b602082015260408301516154fc81614b84565b6040820152606083015161550f81614b84565b806060830152506080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b6001600160e01b03198316815260408101600b831061555f5761555f6150f6565b8260208301529392505050565b60008151808452602080850194506020840160005b83811015614b665781516001600160a01b031687529582019590820190600101615581565b6040815260006155b9604083018661556c565b82810360208401528381527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8411156155f157600080fd5b8360051b808660208401370160200195945050505050565b602081526000611670602083018461556c565b60608152600061562f606083018661556c565b82810360208401526156418186614b35565b90508281036040840152610c608185614b35565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161568d8160178501602088016153c7565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516156ca8160288401602088016153c7565b01602801949350505050565b60208152600061167060208301846153eb565b6000816156f8576156f861519a565b506000190190565b634e487b7160e01b600052603160045260246000fdfea264697066735822122062e75b43e635b9432538b81bc9ca3e8c3cdeabfeb4c7813bbb2ea8e357754d6164736f6c63430008160033",
  "deployer": "0x31762cdd4Aa65CD6f5F09D7a05a56211720A1168",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "applyValidatorCandidate(address,address,address,uint256,bytes,bytes)": {
        "details": "Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.",
        "params": {
          "candidateAdmin": "the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance."
        }
      },
      "bulkUndelegate(address[],uint256[])": {
        "details": "Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`."
      },
      "claimRewards(address[])": {
        "details": "Claims the reward of method caller. Emits the `RewardClaimed` event."
      },
      "cooldownSecsToUndelegate()": {
        "details": "Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated."
      },
      "delegate(address)": {
        "details": "Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event."
      },
      "delegateRewards(address[],address)": {
        "details": "Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event."
      },
      "execChangeAdminAddress(address,address,address)": {
        "details": "Requirements: - Only Profile contract can call this method."
      },
      "execDeductStakingAmount(address,uint256)": {
        "details": "Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller must be validator contract. Emits the event `Unstaked`."
      },
      "execDeprecatePools(address[],uint256)": {
        "details": "Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin."
      },
      "execRecordRewards(address[],uint256[],uint256)": {
        "details": "Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller must be validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending."
      },
      "getCommissionRateRange()": {
        "details": "Returns the commission rate range that the candidate can set."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getManySelfStakings(address[])": {
        "details": "Returns the self-staking amounts of the pools."
      },
      "getManySelfStakingsById(address[])": {
        "details": "Returns the self-staking amounts of the pools."
      },
      "getManyStakingAmounts(address[],address[])": {
        "details": "Returns the staking amounts of the users."
      },
      "getManyStakingTotals(address[])": {
        "details": "Returns the total staking amounts of all users for the pools corresponding to `consensusAddrs`."
      },
      "getManyStakingTotalsById(address[])": {
        "details": "Returns the total staking amounts of all users for the pools `poolIds`."
      },
      "getPoolAddressOf(address)": {
        "details": "Returns the consensus address corresponding to the pool admin."
      },
      "getPoolDetail(address)": {
        "details": "Returns the staking pool details."
      },
      "getReward(address,address)": {
        "details": "Returns the reward amount that user claimable."
      },
      "getRewards(address,address[])": {
        "details": "Returns the claimable reward of the user `_user`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getStakingAmount(address,address)": {
        "details": "Returns the staking amount of an user."
      },
      "getStakingTotal(address)": {
        "details": "Returns the total staking amount of all users for a pool."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,uint256,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "initializeV2()": {
        "details": "Initializes the contract storage V2."
      },
      "initializeV3(address)": {
        "details": "Initializes the contract storage V3."
      },
      "isAdminOfActivePool(address)": {
        "details": "Returns whether the `admin` is currently active."
      },
      "migrateWasAdmin(address[],address[],bool[])": {
        "details": "Migrate REP-4"
      },
      "minValidatorStakingAmount()": {
        "details": "Returns the minimum threshold for being a validator candidate."
      },
      "redelegate(address,address,uint256)": {
        "details": "Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "requestEmergencyExit(address)": {
        "details": "Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin."
      },
      "requestRenounce(address)": {
        "details": "Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin."
      },
      "requestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setCommissionRateRange(uint256,uint256)": {
        "details": "Sets the commission rate range that a candidate can set. Requirements: - The method caller is admin. Emits the `CommissionRateRangeUpdated` event."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setCooldownSecsToUndelegate(uint256)": {
        "details": "Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`."
      },
      "setMinValidatorStakingAmount(uint256)": {
        "details": "Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event."
      },
      "setWaitingSecsToRevoke(uint256)": {
        "details": "Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`."
      },
      "stake(address)": {
        "details": "Self-delegates to the validator candidate `consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "undelegate(address,uint256)": {
        "details": "Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event."
      },
      "unstake(address,uint256)": {
        "details": "Unstakes from the validator candidate `consensusAddr` for `amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`."
      },
      "waitingSecsToRevoke()": {
        "details": "Returns the number of seconds that a candidate must wait for the renounce request gets affected."
      }
    },
    "events": {
      "CommissionRateRangeUpdated(uint256,uint256)": {
        "details": "Emitted when the commission rate range is updated."
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "CooldownSecsToUndelegateUpdated(uint256)": {
        "details": "Emitted when the minium number of seconds to undelegate is updated."
      },
      "Delegated(address,address,uint256)": {
        "details": "Emitted when the delegator staked for a validator candidate."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MigrateWasAdminFinished()": {
        "details": "Event emitted when the `wasAdmin` is finished to migrate."
      },
      "MinValidatorStakingAmountUpdated(uint256)": {
        "details": "Emitted when the minimum staking amount for being a validator is updated."
      },
      "PoolApproved(address,address)": {
        "details": "Emitted when the validator pool is approved."
      },
      "PoolSharesUpdated(uint256,address,uint256)": {
        "details": "Emitted when the pool shares are updated"
      },
      "PoolsDeprecated(address[])": {
        "details": "Emitted when the validator pool is deprecated."
      },
      "PoolsUpdateConflicted(uint256,address[])": {
        "details": "Emitted when the contract fails when updating the pools that already set"
      },
      "PoolsUpdateFailed(uint256,address[],uint256[])": {
        "details": "Emitted when the contract fails when updating the pools"
      },
      "PoolsUpdated(uint256,address[],uint256[],uint256[])": {
        "details": "Emitted when the pools are updated"
      },
      "RewardClaimed(address,address,uint256)": {
        "details": "Emitted when the user claimed their reward"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Staked(address,uint256)": {
        "details": "Emitted when the pool admin staked for themself."
      },
      "StakeholderChanged(address,address,address,uint256)": {
        "details": "Emitted when the holder of the staking amount in the `poolId` is changed."
      },
      "StakingAmountDeductFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the staking amount deducted failed, e.g. when the validator gets slashed."
      },
      "StakingAmountTransferFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the staking amount transfer failed."
      },
      "Undelegated(address,address,uint256)": {
        "details": "Emitted when the delegator unstaked from a validator candidate."
      },
      "Unstaked(address,uint256)": {
        "details": "Emitted when the pool admin unstaked the amount of RON from themself."
      },
      "UserRewardUpdated(address,address,uint256)": {
        "details": "Emitted when the fields to calculate pending reward for the user is updated."
      },
      "WaitingSecsToRevokeUpdated(uint256)": {
        "details": "Emitted when the number of seconds that a candidate must wait to be revoked."
      }
    },
    "errors": {
      "ErrAdminOfAnyActivePoolForbidden(address)": [
        {
          "details": "Error of admin of any active pool cannot delegate."
        }
      ],
      "ErrCannotInitTransferRON(address,string)": [
        {
          "details": "Error of cannot transfer RON to specified target."
        }
      ],
      "ErrCannotTransferRON()": [
        {
          "details": "Error of cannot transfer RON."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrDuplicated(bytes4)": [
        {
          "details": "Error thrown when a duplicated element is detected in an array.",
          "params": {
            "msgSig": "The function signature that invoke the error."
          }
        }
      ],
      "ErrInactivePool(address,address)": [
        {
          "details": "Error of querying inactive pool."
        }
      ],
      "ErrInsufficientBalance(bytes4,uint256,uint256)": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrInsufficientDelegatingAmount()": [
        {
          "details": "Error of undelegating insufficient amount."
        }
      ],
      "ErrInsufficientStakingAmount()": [
        {
          "details": "Error of insufficient staking amount for unstaking."
        }
      ],
      "ErrInvalidArguments(bytes4)": [
        {
          "details": "Error indicating that arguments are invalid."
        }
      ],
      "ErrInvalidArrays()": [
        {
          "details": "Error of length of input arrays are not of the same."
        }
      ],
      "ErrInvalidCommissionRate()": [
        {
          "details": "Error of setting commission rate exceeds max allowed."
        }
      ],
      "ErrInvalidPoolShare()": [
        {
          "details": "Error of invalid pool share."
        }
      ],
      "ErrOnlyPoolAdminAllowed()": [
        {
          "details": "Error of no one is allowed to call but the pool's admin."
        }
      ],
      "ErrPoolAdminForbidden()": [
        {
          "details": "Error of pool admin is not allowed to call."
        }
      ],
      "ErrRecipientRevert(bytes4)": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrStakingAmountLeft()": [
        {
          "details": "Error of invalid staking amount left after deducted."
        }
      ],
      "ErrThreeInteractionAddrsNotEqual()": [
        {
          "details": "Error of three interaction addresses must be of the same in applying for validator candidate."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUndelegateTooEarly()": [
        {
          "details": "Error of undelegating too early."
        }
      ],
      "ErrUndelegateZeroAmount()": [
        {
          "details": "Error of undelegating zero amount."
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrUnstakeTooEarly()": [
        {
          "details": "Error of unstaking too early."
        }
      ],
      "ErrUnstakeZeroAmount()": [
        {
          "details": "Error of unstaking zero amount."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ],
      "ErrZeroValue()": [
        {
          "details": "Error of receiving zero message value."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ErrAdminOfAnyActivePoolForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"}],\"name\":\"ErrCannotInitTransferRON\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCannotTransferRON\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrDuplicated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"}],\"name\":\"ErrInactivePool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientDelegatingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientStakingAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidArguments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidPoolShare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrOnlyPoolAdminAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrPoolAdminForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrStakingAmountLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrThreeInteractionAddrsNotEqual\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUndelegateTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUndelegateZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnstakeTooEarly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnstakeZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateRangeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSecs\",\"type\":\"uint256\"}],\"name\":\"CooldownSecsToUndelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MigrateWasAdminFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MinValidatorStakingAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"PoolApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PoolSharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"}],\"name\":\"PoolsDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"}],\"name\":\"PoolsUpdateConflicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdateFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"aRps\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"PoolsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeholderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountDeductFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingAmountTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debited\",\"type\":\"uint256\"}],\"name\":\"UserRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"WaitingSecsToRevokeUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADDITION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofOfPossession\",\"type\":\"bytes\"}],\"name\":\"applyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrList\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSecsToUndelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrList\",\"type\":\"address[]\"},{\"internalType\":\"TConsensus\",\"name\":\"consensusAddrDst\",\"type\":\"address\"}],\"name\":\"delegateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currAdminAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdminAddr\",\"type\":\"address\"}],\"name\":\"execChangeAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"execDeductStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualDeductingAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"execDeprecatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"execRecordRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionRateRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"getManySelfStakings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"selfStakings_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"}],\"name\":\"getManySelfStakingsById\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"selfStakings_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"}],\"name\":\"getManyStakingAmountsById\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"getManyStakingTotals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"}],\"name\":\"getManyStakingTotalsById\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"getPoolAddressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"getPoolDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolId\",\"type\":\"address\"}],\"name\":\"getPoolDetailById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"getStakingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__minValidatorStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxCommissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__cooldownSecsToUndelegate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__waitingSecsToRevoke\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__profileContract\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"initializeV4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdminOfActivePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolIds\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"flags\",\"type\":\"bool[]\"}],\"name\":\"migrateWasAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValidatorStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddrSrc\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"consensusAddrDst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"requestEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"requestRenounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"requestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRateRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cooldownSecs\",\"type\":\"uint256\"}],\"name\":\"setCooldownSecsToUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setMinValidatorStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setWaitingSecsToRevoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitingSecsToRevoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAdminOfAnyActivePoolForbidden(address)\":[{\"details\":\"Error of admin of any active pool cannot delegate.\"}],\"ErrCannotInitTransferRON(address,string)\":[{\"details\":\"Error of cannot transfer RON to specified target.\"}],\"ErrCannotTransferRON()\":[{\"details\":\"Error of cannot transfer RON.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrDuplicated(bytes4)\":[{\"details\":\"Error thrown when a duplicated element is detected in an array.\",\"params\":{\"msgSig\":\"The function signature that invoke the error.\"}}],\"ErrInactivePool(address,address)\":[{\"details\":\"Error of querying inactive pool.\"}],\"ErrInsufficientBalance(bytes4,uint256,uint256)\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrInsufficientDelegatingAmount()\":[{\"details\":\"Error of undelegating insufficient amount.\"}],\"ErrInsufficientStakingAmount()\":[{\"details\":\"Error of insufficient staking amount for unstaking.\"}],\"ErrInvalidArguments(bytes4)\":[{\"details\":\"Error indicating that arguments are invalid.\"}],\"ErrInvalidArrays()\":[{\"details\":\"Error of length of input arrays are not of the same.\"}],\"ErrInvalidCommissionRate()\":[{\"details\":\"Error of setting commission rate exceeds max allowed.\"}],\"ErrInvalidPoolShare()\":[{\"details\":\"Error of invalid pool share.\"}],\"ErrOnlyPoolAdminAllowed()\":[{\"details\":\"Error of no one is allowed to call but the pool's admin.\"}],\"ErrPoolAdminForbidden()\":[{\"details\":\"Error of pool admin is not allowed to call.\"}],\"ErrRecipientRevert(bytes4)\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrStakingAmountLeft()\":[{\"details\":\"Error of invalid staking amount left after deducted.\"}],\"ErrThreeInteractionAddrsNotEqual()\":[{\"details\":\"Error of three interaction addresses must be of the same in applying for validator candidate.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUndelegateTooEarly()\":[{\"details\":\"Error of undelegating too early.\"}],\"ErrUndelegateZeroAmount()\":[{\"details\":\"Error of undelegating zero amount.\"}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrUnstakeTooEarly()\":[{\"details\":\"Error of unstaking too early.\"}],\"ErrUnstakeZeroAmount()\":[{\"details\":\"Error of unstaking zero amount.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}],\"ErrZeroValue()\":[{\"details\":\"Error of receiving zero message value.\"}]},\"events\":{\"CommissionRateRangeUpdated(uint256,uint256)\":{\"details\":\"Emitted when the commission rate range is updated.\"},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"CooldownSecsToUndelegateUpdated(uint256)\":{\"details\":\"Emitted when the minium number of seconds to undelegate is updated.\"},\"Delegated(address,address,uint256)\":{\"details\":\"Emitted when the delegator staked for a validator candidate.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MigrateWasAdminFinished()\":{\"details\":\"Event emitted when the `wasAdmin` is finished to migrate.\"},\"MinValidatorStakingAmountUpdated(uint256)\":{\"details\":\"Emitted when the minimum staking amount for being a validator is updated.\"},\"PoolApproved(address,address)\":{\"details\":\"Emitted when the validator pool is approved.\"},\"PoolSharesUpdated(uint256,address,uint256)\":{\"details\":\"Emitted when the pool shares are updated\"},\"PoolsDeprecated(address[])\":{\"details\":\"Emitted when the validator pool is deprecated.\"},\"PoolsUpdateConflicted(uint256,address[])\":{\"details\":\"Emitted when the contract fails when updating the pools that already set\"},\"PoolsUpdateFailed(uint256,address[],uint256[])\":{\"details\":\"Emitted when the contract fails when updating the pools\"},\"PoolsUpdated(uint256,address[],uint256[],uint256[])\":{\"details\":\"Emitted when the pools are updated\"},\"RewardClaimed(address,address,uint256)\":{\"details\":\"Emitted when the user claimed their reward\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Staked(address,uint256)\":{\"details\":\"Emitted when the pool admin staked for themself.\"},\"StakeholderChanged(address,address,address,uint256)\":{\"details\":\"Emitted when the holder of the staking amount in the `poolId` is changed.\"},\"StakingAmountDeductFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\"},\"StakingAmountTransferFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the staking amount transfer failed.\"},\"Undelegated(address,address,uint256)\":{\"details\":\"Emitted when the delegator unstaked from a validator candidate.\"},\"Unstaked(address,uint256)\":{\"details\":\"Emitted when the pool admin unstaked the amount of RON from themself.\"},\"UserRewardUpdated(address,address,uint256)\":{\"details\":\"Emitted when the fields to calculate pending reward for the user is updated.\"},\"WaitingSecsToRevokeUpdated(uint256)\":{\"details\":\"Emitted when the number of seconds that a candidate must wait to be revoked.\"}},\"kind\":\"dev\",\"methods\":{\"applyValidatorCandidate(address,address,address,uint256,bytes,bytes)\":{\"details\":\"Proposes a candidate to become a validator. Requirements: - The method caller is able to receive RON. - The treasury is able to receive RON. - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`. Emits the event `PoolApproved`.\",\"params\":{\"candidateAdmin\":\"the candidate admin will be stored in the validator contract, used for calling function that affects to its candidate, e.g. scheduling maintenance.\"}},\"bulkUndelegate(address[],uint256[])\":{\"details\":\"Bulk unstakes from a list of candidates. Requirements: - The method caller is not the pool admin. Emits the events `Undelegated`.\"},\"claimRewards(address[])\":{\"details\":\"Claims the reward of method caller. Emits the `RewardClaimed` event.\"},\"cooldownSecsToUndelegate()\":{\"details\":\"Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\"},\"delegate(address)\":{\"details\":\"Stakes for a validator candidate `_consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is not the pool admin. Emits the `Delegated` event.\"},\"delegateRewards(address[],address)\":{\"details\":\"Claims the rewards and delegates them to the consensus address. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `RewardClaimed` event and the `Delegated` event.\"},\"execChangeAdminAddress(address,address,address)\":{\"details\":\"Requirements: - Only Profile contract can call this method.\"},\"execDeductStakingAmount(address,uint256)\":{\"details\":\"Deducts from staking amount of the validator `_consensusAddr` for `_amount`. Requirements: - The method caller must be validator contract. Emits the event `Unstaked`.\"},\"execDeprecatePools(address[],uint256)\":{\"details\":\"Deprecates the pool. - Deduct self-staking amount of the pool admin to zero. - Transfer the deducted amount to the pool admin. - Deactivate the pool admin address in the mapping of active pool admins Requirements: - The method caller is validator contract. Emits the event `PoolsDeprecated` and `Unstaked` events. Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\"},\"execRecordRewards(address[],uint256[],uint256)\":{\"details\":\"Records the amount of rewards `_rewards` for the pools `_consensusAddrs`. Requirements: - The method caller must be validator contract. Emits the event `PoolsUpdated` once the contract recorded the rewards successfully. Emits the event `PoolsUpdateFailed` once the input array lengths are not equal. Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period. Note: This method should be called once at the period ending.\"},\"getCommissionRateRange()\":{\"details\":\"Returns the commission rate range that the candidate can set.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getManySelfStakings(address[])\":{\"details\":\"Returns the self-staking amounts of the pools.\"},\"getManySelfStakingsById(address[])\":{\"details\":\"Returns the self-staking amounts of the pools.\"},\"getManyStakingAmounts(address[],address[])\":{\"details\":\"Returns the staking amounts of the users.\"},\"getManyStakingTotals(address[])\":{\"details\":\"Returns the total staking amounts of all users for the pools corresponding to `consensusAddrs`.\"},\"getManyStakingTotalsById(address[])\":{\"details\":\"Returns the total staking amounts of all users for the pools `poolIds`.\"},\"getPoolAddressOf(address)\":{\"details\":\"Returns the consensus address corresponding to the pool admin.\"},\"getPoolDetail(address)\":{\"details\":\"Returns the staking pool details.\"},\"getReward(address,address)\":{\"details\":\"Returns the reward amount that user claimable.\"},\"getRewards(address,address[])\":{\"details\":\"Returns the claimable reward of the user `_user`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getStakingAmount(address,address)\":{\"details\":\"Returns the staking amount of an user.\"},\"getStakingTotal(address)\":{\"details\":\"Returns the total staking amount of all users for a pool.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"initializeV2()\":{\"details\":\"Initializes the contract storage V2.\"},\"initializeV3(address)\":{\"details\":\"Initializes the contract storage V3.\"},\"isAdminOfActivePool(address)\":{\"details\":\"Returns whether the `admin` is currently active.\"},\"migrateWasAdmin(address[],address[],bool[])\":{\"details\":\"Migrate REP-4\"},\"minValidatorStakingAmount()\":{\"details\":\"Returns the minimum threshold for being a validator candidate.\"},\"redelegate(address,address,uint256)\":{\"details\":\"Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`. Requirements: - The method caller is not the pool admin. - The consensus address `_consensusAddrDst` is a validator candidate. Emits the `Undelegated` event and the `Delegated` event.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"requestEmergencyExit(address)\":{\"details\":\"Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin.\"},\"requestRenounce(address)\":{\"details\":\"Renounces being a validator candidate and takes back the delegating/staking amount. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin.\"},\"requestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}. - The `_rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdated`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCommissionRateRange(uint256,uint256)\":{\"details\":\"Sets the commission rate range that a candidate can set. Requirements: - The method caller is admin. Emits the `CommissionRateRangeUpdated` event.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setCooldownSecsToUndelegate(uint256)\":{\"details\":\"Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated. Requirements: - The method caller is admin. Emits the event `CooldownSecsToUndelegateUpdated`.\"},\"setMinValidatorStakingAmount(uint256)\":{\"details\":\"Sets the minimum threshold for being a validator candidate. Requirements: - The method caller is admin. Emits the `MinValidatorStakingAmountUpdated` event.\"},\"setWaitingSecsToRevoke(uint256)\":{\"details\":\"Sets the number of seconds that a candidate must wait to be revoked. Requirements: - The method caller is admin. Emits the event `WaitingSecsToRevokeUpdated`.\"},\"stake(address)\":{\"details\":\"Self-delegates to the validator candidate `consensusAddr`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. - The `msg.value` is larger than 0. Emits the event `Staked`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"undelegate(address,uint256)\":{\"details\":\"Unstakes from a validator candidate `_consensusAddr` for `_amount`. Requirements: - The method caller is not the pool admin. Emits the `Undelegated` event.\"},\"unstake(address,uint256)\":{\"details\":\"Unstakes from the validator candidate `consensusAddr` for `amount`. Requirements: - The consensus address is a validator candidate. - The method caller is the pool admin. Emits the event `Unstaked`.\"},\"waitingSecsToRevoke()\":{\"details\":\"Returns the number of seconds that a candidate must wait for the renounce request gets affected.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/staking/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance(bytes4 msgSig, uint256 currentBalance, uint256 sendAmount);\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert(bytes4 msgSig);\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable recipient, uint256 amount) internal {\\n    if (!_sendRON(recipient, amount)) revert ErrRecipientRevert(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Send `amount` RON to the address `recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    if (address(this).balance < amount) revert ErrInsufficientBalance(msg.sig, address(this).balance, amount);\\n    return _unsafeSendRON(recipient, amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `amount` RON to the address `recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    (success, ) = recipient.call{ value: amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRONLimitGas(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRONLimitGas(\\n    address payable recipient,\\n    uint256 amount,\\n    uint256 gas\\n  ) internal returns (bool success) {\\n    // When msg.value = 0, the forwarding gas will not be auto-added 2300.\\n    // We add an extra 2300 to make sure all calls will have the same amount of gas.\\n    if (amount == 0) {\\n      gas += 2300;\\n    }\\n\\n    (success, ) = recipient.call{ value: amount, gas: gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xab6e6a68ae405cdf9e8aee87ed4192dd98b54e686b76060ece602a8476cbd686\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/extensions/consumers/GlobalConfigConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract GlobalConfigConsumer {\\n  /// @dev The addition amount of gas sending along in external calls. Total gas stipend is added with default 2300 gas.\\n  uint256 public constant DEFAULT_ADDITION_GAS = 1200;\\n  /// @dev The length of a period in second.\\n  uint256 public constant PERIOD_DURATION = 1 days;\\n}\\n\",\"keccak256\":\"0x96d6b1ea4c8e126a8c2468683e7513d195f8e05456d85dd8f259ab049347b527\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Pool admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Last public key change timestamp.\\n    uint256 pubkeyLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the consensus of a non-governor profile is changed.\\n  event ConsensusAddressOfNonGovernorChanged(address indexed id);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change public key because cooldown is not ended.\\n  error ErrPubkeyChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n  error ErrLookUpIdFailed(TConsensus consensus);\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address, revert if not found.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function tryGetConsensus2Id(TConsensus consensus) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Add a new profile.\\n   *\\n   * @dev Requirements:\\n   * - The profile must not be existent before.\\n   * - Only contract admin can call this method.\\n   */\\n  function addNewProfile(CandidateProfile memory profile) external;\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeAdminAddress(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function requestChangeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setPubkeyChangeCooldown(uint256 cooldown) external;\\n}\\n\",\"keccak256\":\"0x58b7ec4bd5c891807906d5b6d9a23ffb98fed02a795f1d5507f6f1a39d253cb3\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    /**\\n     * @dev Address of the pool.\\n     * @custom non-volatile-storage Permanently set to the first consensus address of the candidate.\\n     */\\n    address pid;\\n\\n    /**\\n     * @dev The address of the pool admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with the admin in `Profile-CandidateProfile`.\\n     */\\n    address __shadowedPoolAdmin;\\n\\n    /// @dev Self-staking amount\\n    uint256 stakingAmount;\\n\\n    /// @dev Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n\\n    /// @dev Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n\\n    /// @dev Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n\\n    /// @dev Mapping that indicate an admin was either current or previous admin of this pool\\n    mapping(address => bool) wasAdmin;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(TConsensus consensusAddr, address poolId);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `admin` is currently active.\\n   */\\n  function isAdminOfActivePool(address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address admin) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool details.\\n   */\\n  function getPoolDetail(\\n    TConsensus consensusAddr\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  function getPoolDetailById(\\n    address poolId\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external;\\n}\\n\",\"keccak256\":\"0x074b913dc7edd77f6826aeaf0b57c51637b778865205b2d0f497ca0c272853bc\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the commission rate range is updated.\\n  event CommissionRateRangeUpdated(uint256 minRate, uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the holder of the staking amount in the `poolId` is changed.\\n  event StakeholderChanged(address indexed poolId, address oldAdmin , address newAdmin, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed poolId, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] poolIds);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed poolId,\\n    address indexed admin,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed poolId,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Error of cannot transfer RON to specified target.\\n  error ErrCannotInitTransferRON(address addr, string extraInfo);\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the commission rate range that the candidate can set.\\n   */\\n  function getCommissionRateRange() external view returns (uint256 minRange, uint256 maxRange);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the commission rate range that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `CommissionRateRangeUpdated` event.\\n   *\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata pools, uint256 period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `consensusAddr` for `amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x676f728608e5ef14ebf4fea88ca5ef225e4c0cc19871136fe71ab64479bf7a76\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed poolId, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(TConsensus consensusAddrSrc, TConsensus consensusAddrDst, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(\\n    address user,\\n    TConsensus[] calldata consensusAddrList\\n  ) external view returns (uint256[] memory _rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(TConsensus[] calldata consensusAddrList) external returns (uint256 amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(\\n    TConsensus[] calldata consensusAddrList,\\n    TConsensus consensusAddrDst\\n  ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xe8a650a7348d45b2614ece66083f140801e8375bb8b733addf02209073991ef3\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolId, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolId, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolId, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolIds, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolIds, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolIds);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(\\n    TConsensus[] calldata consensusAddrs,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  function getManyStakingAmountsById(\\n    address[] calldata poolIds,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools corresponding to `consensusAddrs`.\\n   */\\n  function getManyStakingTotals(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `poolIds`.\\n   */\\n  function getManyStakingTotalsById(\\n    address[] calldata poolIds\\n  ) external view returns (uint256[] memory stakingAmounts_);\\n}\\n\",\"keccak256\":\"0xa1b17b962f24571a7125c33420ead1fba5be4c03caabb47916d4ca597fa91482\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./IStakingCallback.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking, IStakingCallback {\\n  /// @dev Event emitted when the `wasAdmin` is finished to migrate.\\n  event MigrateWasAdminFinished();\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(address[] calldata poolIds, uint256[] calldata rewards, uint256 period) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address poolId, uint256 amount) external returns (uint256 actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xcb47179ecec12817f44b3f43e0477260d3453b6608cddf330554f13b63a6d8db\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddress(address poolId, address currAdminAddr, address newAdminAddr) external;\\n}\\n\",\"keccak256\":\"0x555b90214ae8cb66c72a40f343a4933ea87b1e82bb0933c81ae92401b20c5f43\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdminById(address id, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0xf68c390a0b117a99ddc8650cf21695d778faa9a479d5edfa42957a4048027031\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeAdminAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddress(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeConsensusAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddress(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-requestChangeTreasuryAddress`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddress(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xfbe83dc9a4df46f4eb34b6d68c73041de663f188671264c7fe5315b8a0813511\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed cid,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] cids,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xabf7541c6acfef6db495585f74bc9be88a65c20b09850197bc06ab452f07d172\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0xaa2df8b56a83730a3a1b3876708570d70843802737ff7c776a5725c71d7ea8f7\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0xf4f96a624e7c77bbce044c67e3f4b406e65871debc19e7bfab663c1fcfcbc7b0\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x27afa712094804b997f55e8f8d320760e07d7260ab33aeb8fb61c39849f09bf3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the consensus address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the id is block producer or not.\\n   */\\n  function isBlockProducerById(address id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xdf65d1580d3d3c7624c293e38b270fdd69285b58fe4e67b03ed71ac50bb1ef08\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/ronin/staking/BaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../interfaces/staking/IBaseStaking.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"./RewardCalculation.sol\\\";\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\nabstract contract BaseStaking is\\n  RONTransferHelper,\\n  ReentrancyGuard,\\n  RewardCalculation,\\n  HasContracts,\\n  IBaseStaking,\\n  HasValidatorDeprecated\\n{\\n  /// @dev Mapping from pool address (i.e. validator id) => staking pool detail\\n  mapping(address pid => PoolDetail) internal _poolDetail;\\n\\n  /// @dev The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n  uint256 internal _cooldownSecsToUndelegate;\\n  /// @dev The number of seconds that a candidate must wait to be revoked and take the self-staking amount back.\\n  uint256 internal _waitingSecsToRevoke;\\n\\n  /// @dev Mapping from \\\"admin address of an active pool\\\" => \\\"pool id\\\".\\n  mapping(address adminOfActivePool => address poolId) internal _adminOfActivePoolMapping;\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  modifier noEmptyValue() {\\n    _requireValue();\\n    _;\\n  }\\n\\n  modifier anyExceptPoolAdmin(PoolDetail storage _pool, address delegator) {\\n    _anyExceptPoolAdmin(_pool, delegator);\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin(PoolDetail storage _pool, address requester) {\\n    _requirePoolAdmin(_pool, requester);\\n    _;\\n  }\\n\\n  modifier poolOfConsensusIsActive(TConsensus consensusAddr) {\\n    _poolOfConsensusIsActive(consensusAddr);\\n    _;\\n  }\\n\\n  function _requireValue() private view {\\n    if (msg.value == 0) revert ErrZeroValue();\\n  }\\n\\n  function _requirePoolAdmin(PoolDetail storage _pool, address requester) private view {\\n    if (_pool.__shadowedPoolAdmin != requester) revert ErrOnlyPoolAdminAllowed();\\n  }\\n\\n  function _anyExceptPoolAdmin(PoolDetail storage _pool, address delegator) private view {\\n    if (_pool.wasAdmin[delegator]) revert ErrPoolAdminForbidden();\\n  }\\n\\n  function _poolOfConsensusIsActive(TConsensus consensusAddr) private view {\\n    if (!IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isValidatorCandidate(consensusAddr))\\n      revert ErrInactivePool(consensusAddr, __css2cid(consensusAddr));\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function isAdminOfActivePool(address admin) public view override returns (bool) {\\n    return _adminOfActivePoolMapping[admin] != address(0);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getPoolAddressOf(address admin) external view override returns (address) {\\n    return _adminOfActivePoolMapping[admin];\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getPoolDetail(\\n    TConsensus consensusAddr\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal) {\\n    address poolId = __css2cid(consensusAddr);\\n    return _getPoolDetailById(poolId);\\n  }\\n\\n  function getPoolDetailById(\\n    address poolId\\n  ) external view returns (address admin, uint256 stakingAmount, uint256 stakingTotal) {\\n    return _getPoolDetailById(poolId);\\n  }\\n\\n  function _getPoolDetailById(\\n    address poolId\\n  ) internal view returns (address admin, uint256 stakingAmount, uint256 stakingTotal) {\\n    PoolDetail storage _pool = _poolDetail[poolId];\\n    return (_pool.__shadowedPoolAdmin, _pool.stakingAmount, _pool.stakingTotal);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getManySelfStakings(\\n    TConsensus[] calldata consensusAddrs\\n  ) external view returns (uint256[] memory selfStakings_) {\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    return _getManySelfStakingsById(poolIds);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory selfStakings_) {\\n    return _getManySelfStakingsById(poolIds);\\n  }\\n\\n  /**\\n   * @dev Query many self staking amount by list `poolIds`.\\n   */\\n  function _getManySelfStakingsById(address[] memory poolIds) internal view returns (uint256[] memory selfStakings_) {\\n    selfStakings_ = new uint256[](poolIds.length);\\n    for (uint i = 0; i < poolIds.length; ) {\\n      selfStakings_[i] = _poolDetail[poolIds[i]].stakingAmount;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view override returns (uint256) {\\n    address poolId = __css2cid(consensusAddr);\\n    return _getStakingTotal(poolId);\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingTotals(\\n    TConsensus[] calldata consensusAddrs\\n  ) external view override returns (uint256[] memory stakingAmounts_) {\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    return _getManyStakingTotalsById(poolIds);\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingTotalsById(\\n    address[] calldata poolIds\\n  ) external view override returns (uint256[] memory stakingAmounts_) {\\n    return _getManyStakingTotalsById(poolIds);\\n  }\\n\\n  function _getManyStakingTotalsById(\\n    address[] memory poolIds\\n  ) internal view returns (uint256[] memory stakingAmounts_) {\\n    stakingAmounts_ = new uint256[](poolIds.length);\\n    for (uint i = 0; i < poolIds.length; ) {\\n      stakingAmounts_[i] = _getStakingTotal(poolIds[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function _getStakingTotal(address poolId) internal view override returns (uint256) {\\n    return _poolDetail[poolId].stakingTotal;\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view override returns (uint256) {\\n    address poolId = __css2cid(consensusAddr);\\n    return _getStakingAmount(poolId, user);\\n  }\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getManyStakingAmounts(\\n    TConsensus[] calldata consensusAddrs,\\n    address[] calldata userList\\n  ) external view override returns (uint256[] memory stakingAmounts) {\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    return _getManyStakingAmountsById(poolIds, userList);\\n  }\\n\\n  function getManyStakingAmountsById(\\n    address[] calldata poolIds,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory stakingAmounts) {\\n    return _getManyStakingAmountsById(poolIds, userList);\\n  }\\n\\n  function _getManyStakingAmountsById(\\n    address[] memory poolIds,\\n    address[] memory userList\\n  ) internal view returns (uint256[] memory stakingAmounts) {\\n    if (poolIds.length != userList.length) revert ErrInvalidArrays();\\n    stakingAmounts = new uint256[](poolIds.length);\\n    for (uint i = 0; i < stakingAmounts.length; ) {\\n      stakingAmounts[i] = _getStakingAmount(poolIds[i], userList[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function _getStakingAmount(address poolId, address user) internal view override returns (uint256) {\\n    return _poolDetail[poolId].delegatingAmount[user];\\n  }\\n\\n  function __css2cid(TConsensus consensusAddr) internal override view returns (address) {\\n    return IProfile(getContract(ContractType.PROFILE)).getConsensus2Id(consensusAddr);\\n  }\\n\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view returns (address[] memory) {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyConsensus2Id(consensusAddrs);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256) {\\n    return _cooldownSecsToUndelegate;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256) {\\n    return _waitingSecsToRevoke;\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external override onlyAdmin {\\n    _setCooldownSecsToUndelegate(cooldownSecs);\\n  }\\n\\n  /**\\n   * @inheritdoc IBaseStaking\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external override onlyAdmin {\\n    _setWaitingSecsToRevoke(secs);\\n  }\\n\\n  /**\\n   * @dev Sets the minium number of seconds to undelegate.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function _setCooldownSecsToUndelegate(uint256 cooldownSecs) internal {\\n    _cooldownSecsToUndelegate = cooldownSecs;\\n    emit CooldownSecsToUndelegateUpdated(cooldownSecs);\\n  }\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function _setWaitingSecsToRevoke(uint256 secs) internal {\\n    _waitingSecsToRevoke = secs;\\n    emit WaitingSecsToRevokeUpdated(secs);\\n  }\\n\\n  /**\\n   * @dev Changes the delegate amount.\\n   */\\n  function _changeDelegatingAmount(\\n    PoolDetail storage _pool,\\n    address delegator,\\n    uint256 newDelegatingAmount,\\n    uint256 newStakingTotal\\n  ) internal {\\n    _syncUserReward(_pool.pid, delegator, newDelegatingAmount);\\n    _pool.stakingTotal = newStakingTotal;\\n    _pool.delegatingAmount[delegator] = newDelegatingAmount;\\n  }\\n}\\n\",\"keccak256\":\"0x4deee6092f39e9d1c13209c7922caf8c1c636f6cff11bff8aae0b9cc98c0aede\",\"license\":\"MIT\"},\"contracts/ronin/staking/CandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../libraries/AddressArrayUtils.sol\\\";\\nimport \\\"../../interfaces/staking/ICandidateStaking.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract CandidateStaking is BaseStaking, ICandidateStaking, GlobalConfigConsumer, PercentageConsumer {\\n  /// @dev The minimum threshold for being a validator candidate.\\n  uint256 internal _minValidatorStakingAmount;\\n\\n  /// @dev The max commission rate that the validator can set (in range of [0;100_00] means [0-100%])\\n  uint256 internal _maxCommissionRate;\\n  /// @dev The min commission rate that the validator can set (in range of [0;100_00] means [0-100%])\\n  uint256 internal _minCommissionRate;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function minValidatorStakingAmount() public view override returns (uint256) {\\n    return _minValidatorStakingAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function getCommissionRateRange() external view override returns (uint256, uint256) {\\n    return (_minCommissionRate, _maxCommissionRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function setMinValidatorStakingAmount(uint256 threshold) external override onlyAdmin {\\n    _setMinValidatorStakingAmount(threshold);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external override onlyAdmin {\\n    _setCommissionRateRange(minRate, maxRate);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external payable override nonReentrant {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    if (commissionRate > _maxCommissionRate || commissionRate < _minCommissionRate) revert ErrInvalidCommissionRate();\\n\\n    uint256 amount = msg.value;\\n    address payable poolAdmin = payable(msg.sender);\\n    address poolId = TConsensus.unwrap(consensusAddr);\\n\\n    _applyValidatorCandidate({\\n      poolAdmin: poolAdmin,\\n      candidateAdmin: candidateAdmin,\\n      poolId: poolId,\\n      treasuryAddr: treasuryAddr,\\n      pubkey: pubkey,\\n      proofOfPossession: proofOfPossession,\\n      commissionRate: commissionRate,\\n      amount: amount\\n    });\\n\\n    PoolDetail storage _pool = _poolDetail[poolId];\\n    _pool.__shadowedPoolAdmin = poolAdmin;\\n    _pool.pid = poolId;\\n    _adminOfActivePoolMapping[poolAdmin] = poolId;\\n    _pool.wasAdmin[poolAdmin] = true;\\n\\n    _stake(_poolDetail[poolId], poolAdmin, amount);\\n    emit PoolApproved(poolId, poolAdmin);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  )\\n    external\\n    override\\n    poolOfConsensusIsActive(consensusAddr)\\n    onlyPoolAdmin(_poolDetail[__css2cid(consensusAddr)], msg.sender)\\n  {\\n    if (commissionRate > _maxCommissionRate || commissionRate < _minCommissionRate) revert ErrInvalidCommissionRate();\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execRequestUpdateCommissionRate(\\n      __css2cid(consensusAddr),\\n      effectiveDaysOnwards,\\n      commissionRate\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function execDeprecatePools(\\n    address[] calldata poolIds,\\n    uint256 newPeriod\\n  ) external override onlyContract(ContractType.VALIDATOR) {\\n    if (poolIds.length == 0) {\\n      return;\\n    }\\n\\n    for (uint i = 0; i < poolIds.length; ) {\\n      address poolId = poolIds[i];\\n      PoolDetail storage _pool = _poolDetail[poolId];\\n      // Deactivate the pool admin in the active mapping.\\n      delete _adminOfActivePoolMapping[_pool.__shadowedPoolAdmin];\\n\\n      // Deduct and transfer the self staking amount to the pool admin.\\n      uint256 deductingAmount = _pool.stakingAmount;\\n      if (deductingAmount > 0) {\\n        _deductStakingAmount(_pool, deductingAmount);\\n        if (!_unsafeSendRONLimitGas(payable(_pool.__shadowedPoolAdmin), deductingAmount, DEFAULT_ADDITION_GAS)) {\\n          emit StakingAmountTransferFailed(\\n            _pool.pid,\\n            _pool.__shadowedPoolAdmin,\\n            deductingAmount,\\n            address(this).balance\\n          );\\n        }\\n      }\\n\\n      // Settle the unclaimed reward and transfer to the pool admin.\\n      uint256 lastRewardAmount = _claimReward(poolId, _pool.__shadowedPoolAdmin, newPeriod);\\n      if (lastRewardAmount > 0) {\\n        _unsafeSendRONLimitGas(payable(_pool.__shadowedPoolAdmin), lastRewardAmount, DEFAULT_ADDITION_GAS);\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit PoolsDeprecated(poolIds);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function stake(\\n    TConsensus consensusAddr\\n  ) external payable override noEmptyValue poolOfConsensusIsActive(consensusAddr) {\\n    address poolId = __css2cid(consensusAddr);\\n    _stake(_poolDetail[poolId], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function unstake(\\n    TConsensus consensusAddr,\\n    uint256 amount\\n  ) external override nonReentrant poolOfConsensusIsActive(consensusAddr) {\\n    if (amount == 0) revert ErrUnstakeZeroAmount();\\n    address requester = msg.sender;\\n    address poolId = __css2cid(consensusAddr);\\n    PoolDetail storage _pool = _poolDetail[poolId];\\n    uint256 remainAmount = _pool.stakingAmount - amount;\\n    if (remainAmount < _minValidatorStakingAmount) revert ErrStakingAmountLeft();\\n\\n    _unstake(_pool, requester, amount);\\n    if (!_unsafeSendRONLimitGas(payable(requester), amount, DEFAULT_ADDITION_GAS)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestRenounce(\\n    TConsensus consensusAddr\\n  )\\n    external\\n    override\\n    poolOfConsensusIsActive(consensusAddr)\\n    onlyPoolAdmin(_poolDetail[__css2cid(consensusAddr)], msg.sender)\\n  {\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execRequestRenounceCandidate(\\n      __css2cid(consensusAddr),\\n      _waitingSecsToRevoke\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateStaking\\n   */\\n  function requestEmergencyExit(\\n    TConsensus consensusAddr\\n  )\\n    external\\n    override\\n    poolOfConsensusIsActive(consensusAddr)\\n    onlyPoolAdmin(_poolDetail[__css2cid(consensusAddr)], msg.sender)\\n  {\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execRequestEmergencyExit(\\n      __css2cid(consensusAddr),\\n      _waitingSecsToRevoke\\n    );\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-applyValidatorCandidate`\\n   */\\n  function _applyValidatorCandidate(\\n    address payable poolAdmin,\\n    address candidateAdmin,\\n    address poolId,\\n    address payable treasuryAddr,\\n    bytes memory pubkey,\\n    bytes memory proofOfPossession,\\n    uint256 commissionRate,\\n    uint256 amount\\n  ) internal {\\n    if (!_unsafeSendRONLimitGas(poolAdmin, 0, DEFAULT_ADDITION_GAS)) {\\n      revert ErrCannotInitTransferRON(poolAdmin, \\\"pool admin\\\");\\n    }\\n    if (!_unsafeSendRONLimitGas(treasuryAddr, 0, DEFAULT_ADDITION_GAS)) {\\n      revert ErrCannotInitTransferRON(treasuryAddr, \\\"treasury\\\");\\n    }\\n    if (amount < _minValidatorStakingAmount) revert ErrInsufficientStakingAmount();\\n    if (poolAdmin != candidateAdmin || candidateAdmin != treasuryAddr) revert ErrThreeInteractionAddrsNotEqual();\\n\\n    {\\n      address[] memory diffAddrs = new address[](3);\\n      diffAddrs[0] = poolAdmin;\\n      diffAddrs[1] = poolId;\\n      if (AddressArrayUtils.hasDuplicate(diffAddrs)) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n    }\\n\\n    IRoninValidatorSet(getContract(ContractType.VALIDATOR)).execApplyValidatorCandidate({\\n      candidateAdmin: candidateAdmin,\\n      cid: poolId,\\n      treasuryAddr: treasuryAddr,\\n      commissionRate: commissionRate\\n    });\\n\\n    IProfile profileContract = IProfile(getContract(ContractType.PROFILE));\\n    profileContract.execApplyValidatorCandidate(candidateAdmin, poolId, treasuryAddr, pubkey, proofOfPossession);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-stake`\\n   */\\n  function _stake(\\n    PoolDetail storage _pool,\\n    address requester,\\n    uint256 amount\\n  ) internal onlyPoolAdmin(_pool, requester) {\\n    _pool.stakingAmount += amount;\\n    _changeDelegatingAmount(_pool, requester, _pool.stakingAmount, _pool.stakingTotal + amount);\\n    _pool.lastDelegatingTimestamp[requester] = block.timestamp;\\n    emit Staked(_pool.pid, amount);\\n  }\\n\\n  /**\\n   * @dev See `ICandidateStaking-unstake`\\n   */\\n  function _unstake(\\n    PoolDetail storage _pool,\\n    address requester,\\n    uint256 amount\\n  ) internal onlyPoolAdmin(_pool, requester) {\\n    if (amount > _pool.stakingAmount) revert ErrInsufficientStakingAmount();\\n    if (_pool.lastDelegatingTimestamp[requester] + _cooldownSecsToUndelegate > block.timestamp) {\\n      revert ErrUnstakeTooEarly();\\n    }\\n\\n    _pool.stakingAmount -= amount;\\n    _changeDelegatingAmount(_pool, requester, _pool.stakingAmount, _pool.stakingTotal - amount);\\n    emit Unstaked(_pool.pid, amount);\\n  }\\n\\n  /**\\n   * @dev Clear the staking balance of `requester` and move the `newStakeholder` in the `pool.delegate` mapping.\\n   */\\n  function _changeStakeholder(\\n    PoolDetail storage _pool,\\n    address requester,\\n    address newStakeholder\\n  ) internal onlyPoolAdmin(_pool, requester) {\\n    uint256 stakingAmount = _pool.stakingAmount;\\n\\n    _changeDelegatingAmount(_pool, requester, 0, _pool.stakingTotal - stakingAmount);\\n    _changeDelegatingAmount(_pool, newStakeholder, stakingAmount, _pool.stakingTotal + stakingAmount);\\n\\n    emit StakeholderChanged(_pool.pid, requester, newStakeholder, stakingAmount);\\n  }\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   * @return The actual deducted amount\\n   */\\n  function _deductStakingAmount(PoolDetail storage _pool, uint256 amount) internal virtual returns (uint256);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function _setMinValidatorStakingAmount(uint256 threshold) internal {\\n    _minValidatorStakingAmount = threshold;\\n    emit MinValidatorStakingAmountUpdated(threshold);\\n  }\\n\\n  /**\\n   * @dev Sets the max commission rate that a candidate can set.\\n   *\\n   * Emits the `MaxCommissionRateUpdated` event.\\n   *\\n   */\\n  function _setCommissionRateRange(uint256 minRate, uint256 maxRate) internal {\\n    if (maxRate > _MAX_PERCENTAGE || minRate > maxRate) revert ErrInvalidCommissionRate();\\n    _maxCommissionRate = maxRate;\\n    _minCommissionRate = minRate;\\n    emit CommissionRateRangeUpdated(minRate, maxRate);\\n  }\\n}\\n\",\"keccak256\":\"0x03a4b7c352b71db2903c20c4c43f4f4b44794c525763d10cb0b541f6cf62b9ba\",\"license\":\"MIT\"},\"contracts/ronin/staking/DelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IDelegatorStaking.sol\\\";\\nimport \\\"./BaseStaking.sol\\\";\\n\\nabstract contract DelegatorStaking is BaseStaking, IDelegatorStaking {\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegate(TConsensus consensusAddr) external payable noEmptyValue poolOfConsensusIsActive(consensusAddr) {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    _delegate(_poolDetail[__css2cid(consensusAddr)], msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external nonReentrant {\\n    address payable delegator = payable(msg.sender);\\n    _undelegate(consensusAddr, _poolDetail[__css2cid(consensusAddr)], delegator, amount);\\n    if (!_sendRON(delegator, amount)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external nonReentrant {\\n    if (consensusAddrs.length == 0 || consensusAddrs.length != amounts.length) revert ErrInvalidArrays();\\n\\n    address payable delegator = payable(msg.sender);\\n    uint256 total;\\n\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    for (uint i = 0; i < poolIds.length; ) {\\n      total += amounts[i];\\n      _undelegate(consensusAddrs[i], _poolDetail[poolIds[i]], delegator, amounts[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    if (!_sendRON(delegator, total)) revert ErrCannotTransferRON();\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function redelegate(\\n    TConsensus consensusAddrSrc,\\n    TConsensus consensusAddrDst,\\n    uint256 amount\\n  ) external nonReentrant poolOfConsensusIsActive(consensusAddrDst) {\\n    address delegator = msg.sender;\\n    _undelegate(consensusAddrSrc, _poolDetail[__css2cid(consensusAddrSrc)], delegator, amount);\\n    _delegate(_poolDetail[__css2cid(consensusAddrDst)], delegator, amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function claimRewards(\\n    TConsensus[] calldata consensusAddrList\\n  ) external override nonReentrant returns (uint256 amount) {\\n    amount = _claimRewards(msg.sender, __css2cidBatch(consensusAddrList));\\n    _transferRON(payable(msg.sender), amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function delegateRewards(\\n    TConsensus[] calldata consensusAddrList,\\n    TConsensus consensusAddrDst\\n  ) external override nonReentrant poolOfConsensusIsActive(consensusAddrDst) returns (uint256 amount) {\\n    if (isAdminOfActivePool(msg.sender)) revert ErrAdminOfAnyActivePoolForbidden(msg.sender);\\n    address[] memory poolIds = __css2cidBatch(consensusAddrList);\\n    address poolIdDst = __css2cid(consensusAddrDst);\\n    return _delegateRewards(msg.sender, poolIds, poolIdDst);\\n  }\\n\\n  /**\\n   * @inheritdoc IDelegatorStaking\\n   */\\n  function getRewards(\\n    address user,\\n    TConsensus[] calldata consensusAddrs\\n  ) external view returns (uint256[] memory rewards_) {\\n    uint256 period = IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n    rewards_ = new uint256[](consensusAddrs.length);\\n\\n    address[] memory poolIds = __css2cidBatch(consensusAddrs);\\n    for (uint256 i = 0; i < consensusAddrs.length; ) {\\n      address poolId = poolIds[i];\\n      rewards_[i] = _getReward(poolId, user, period, _getStakingAmount(poolId, user));\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   * Note: This function does not verify the `msg.value` with the amount.\\n   *\\n   */\\n  function _delegate(\\n    PoolDetail storage _pool,\\n    address delegator,\\n    uint256 amount\\n  ) internal anyExceptPoolAdmin(_pool, delegator) {\\n    _changeDelegatingAmount(_pool, delegator, _pool.delegatingAmount[delegator] + amount, _pool.stakingTotal + amount);\\n    _pool.lastDelegatingTimestamp[delegator] = block.timestamp;\\n    emit Delegated(delegator, _pool.pid, amount);\\n  }\\n\\n  /**\\n   * @dev Undelegates from a validator address.\\n   *\\n   * Requirements:\\n   * - The delegator is not the pool admin.\\n   * - The amount is larger than 0.\\n   * - The delegating amount is larger than or equal to the undelegating amount.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   * Note: Consider transferring back the amount of RON after calling this function.\\n   *\\n   */\\n  function _undelegate(\\n    TConsensus consensusAddr,\\n    PoolDetail storage _pool,\\n    address delegator,\\n    uint256 amount\\n  ) private anyExceptPoolAdmin(_pool, delegator) {\\n    if (amount == 0) revert ErrUndelegateZeroAmount();\\n    if (_pool.delegatingAmount[delegator] < amount) revert ErrInsufficientDelegatingAmount();\\n\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    if (\\n      validatorContract.isValidatorCandidate(consensusAddr) &&\\n      validatorContract.getCandidateInfo(consensusAddr).revokingTimestamp == 0 && // if candidate is not on renunciation\\n      _pool.lastDelegatingTimestamp[delegator] + _cooldownSecsToUndelegate >= block.timestamp // delegator is still in cooldown\\n    ) revert ErrUndelegateTooEarly();\\n\\n    _changeDelegatingAmount(_pool, delegator, _pool.delegatingAmount[delegator] - amount, _pool.stakingTotal - amount);\\n    emit Undelegated(delegator, _pool.pid, amount);\\n  }\\n\\n  /**\\n   * @dev Claims rewards from the pools `_poolAddrList`.\\n   * Note: This function does not transfer reward to user.\\n   */\\n  function _claimRewards(address user, address[] memory poolIds) internal returns (uint256 amount) {\\n    uint256 period = _currentPeriod();\\n    for (uint256 i = 0; i < poolIds.length; ) {\\n      amount += _claimReward(poolIds[i], user, period);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   */\\n  function _delegateRewards(\\n    address user,\\n    address[] memory poolIds,\\n    address poolIdDst\\n  ) internal returns (uint256 amount) {\\n    amount = _claimRewards(user, poolIds);\\n    _delegate(_poolDetail[poolIdDst], user, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xa0281f4fea9f20747dfffdaca61853e663206b8ac83b67576e8cd405d4a117a4\",\"license\":\"MIT\"},\"contracts/ronin/staking/RewardCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/staking/IRewardPool.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\n/**\\n * @title RewardCalculation contract\\n * @dev This contract mainly contains the methods to calculate reward for staking contract.\\n */\\nabstract contract RewardCalculation is IRewardPool {\\n  /// @dev Mapping from pool address => period number => accumulated rewards per share (one unit staking)\\n  mapping(address poolId => mapping(uint256 periodNumber => PeriodWrapper)) private _accumulatedRps;\\n  /// @dev Mapping from the pool address => user address => the reward info of the user\\n  mapping(address poolId => mapping(address user => UserRewardFields)) private _userReward;\\n  /// @dev Mapping from the pool address => reward pool fields\\n  mapping(address poolId => PoolFields) private _stakingPool;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc IRewardPool\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256) {\\n    address poolId = __css2cid(consensusAddr);\\n    return _getReward(poolId, user, _currentPeriod(), _getStakingAmount(poolId, user));\\n  }\\n\\n  /**\\n   * @dev See {IRewardPool-getStakingAmount}\\n   */\\n  function _getStakingAmount(address poolId, address user) internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev See {IRewardPool-getStakingTotal}\\n   */\\n  function _getStakingTotal(address poolId) internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function _getReward(\\n    address poolId,\\n    address user,\\n    uint256 latestPeriod,\\n    uint256 latestStakingAmount\\n  ) internal view returns (uint256) {\\n    UserRewardFields storage _reward = _userReward[poolId][user];\\n\\n    if (_reward.lastPeriod == latestPeriod) {\\n      return _reward.debited;\\n    }\\n\\n    uint256 aRps;\\n    uint256 lastPeriodReward;\\n    PoolFields storage _pool = _stakingPool[poolId];\\n    PeriodWrapper storage _wrappedArps = _accumulatedRps[poolId][_reward.lastPeriod];\\n\\n    if (_wrappedArps.lastPeriod > 0) {\\n      // Calculates the last period reward if the aRps at the period is set\\n      aRps = _wrappedArps.inner;\\n      lastPeriodReward = _reward.lowestAmount * (aRps - _reward.aRps);\\n    } else {\\n      // Fallbacks to the previous aRps in case the aRps is not set\\n      aRps = _reward.aRps;\\n    }\\n\\n    uint256 newPeriodsReward = latestStakingAmount * (_pool.aRps - aRps);\\n    return _reward.debited + (lastPeriodReward + newPeriodsReward) / 1e18;\\n  }\\n\\n  /**\\n   * @dev Syncs the user reward.\\n   *\\n   * Emits the event `UserRewardUpdated` once the debit amount is updated.\\n   * Emits the event `PoolSharesUpdated` once the pool share is updated.\\n   *\\n   * Note: The method should be called whenever the user's staking amount changes.\\n   *\\n   */\\n  function _syncUserReward(address poolId, address user, uint256 newStakingAmount) internal {\\n    uint256 period = _currentPeriod();\\n    PoolFields storage _pool = _stakingPool[poolId];\\n    uint256 lastShares = _pool.shares.inner;\\n\\n    // Updates the pool shares if it is outdated\\n    if (_pool.shares.lastPeriod < period) {\\n      _pool.shares = PeriodWrapper(_getStakingTotal(poolId), period);\\n    }\\n\\n    UserRewardFields storage _reward = _userReward[poolId][user];\\n    uint256 currentStakingAmount = _getStakingAmount(poolId, user);\\n    uint256 debited = _getReward(poolId, user, period, currentStakingAmount);\\n\\n    if (_reward.debited != debited) {\\n      _reward.debited = debited;\\n      emit UserRewardUpdated(poolId, user, debited);\\n    }\\n\\n    _syncMinStakingAmount(_pool, _reward, period, newStakingAmount, currentStakingAmount);\\n    _reward.aRps = _pool.aRps;\\n    _reward.lastPeriod = period;\\n\\n    if (_pool.shares.inner != lastShares) {\\n      emit PoolSharesUpdated(period, poolId, _pool.shares.inner);\\n    }\\n  }\\n\\n  /**\\n   * @dev Syncs the minimum staking amount of an user in the current period.\\n   */\\n  function _syncMinStakingAmount(\\n    PoolFields storage _pool,\\n    UserRewardFields storage _reward,\\n    uint256 latestPeriod,\\n    uint256 newStakingAmount,\\n    uint256 currentStakingAmount\\n  ) internal {\\n    if (_reward.lastPeriod < latestPeriod) {\\n      _reward.lowestAmount = currentStakingAmount;\\n    }\\n\\n    uint256 lowestAmount = Math.min(_reward.lowestAmount, newStakingAmount);\\n    uint256 diffAmount = _reward.lowestAmount - lowestAmount;\\n    if (diffAmount > 0) {\\n      _reward.lowestAmount = lowestAmount;\\n      if (_pool.shares.inner < diffAmount) revert ErrInvalidPoolShare();\\n      _pool.shares.inner -= diffAmount;\\n    }\\n  }\\n\\n  /**\\n   * @dev Claims the settled reward for a specific user.\\n   *\\n   * @param lastPeriod Must be in two possible value: `_currentPeriod` in normal calculation, or\\n   * `_currentPeriod + 1` in case of calculating the reward for revoked validators.\\n   *\\n   * Emits the `RewardClaimed` event and the `UserRewardUpdated` event.\\n   *\\n   * Note: This method should be called before transferring rewards for the user.\\n   *\\n   */\\n  function _claimReward(address poolId, address user, uint256 lastPeriod) internal returns (uint256 amount) {\\n    uint256 currentStakingAmount = _getStakingAmount(poolId, user);\\n    amount = _getReward(poolId, user, lastPeriod, currentStakingAmount);\\n    emit RewardClaimed(poolId, user, amount);\\n\\n    UserRewardFields storage _reward = _userReward[poolId][user];\\n    _reward.debited = 0;\\n    _syncMinStakingAmount(_stakingPool[poolId], _reward, lastPeriod, currentStakingAmount, currentStakingAmount);\\n    _reward.lastPeriod = lastPeriod;\\n    _reward.aRps = _stakingPool[poolId].aRps;\\n    emit UserRewardUpdated(poolId, user, 0);\\n  }\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `poolIds`.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolUpdateConflicted` when the pool is already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function _recordRewards(address[] memory poolIds, uint256[] calldata rewards, uint256 period) internal {\\n    if (poolIds.length != rewards.length) {\\n      emit PoolsUpdateFailed(period, poolIds, rewards);\\n      return;\\n    }\\n\\n    uint256 rps;\\n    uint256 count;\\n    address poolId;\\n    uint256 stakingTotal;\\n    uint256[] memory aRps = new uint256[](poolIds.length);\\n    uint256[] memory shares = new uint256[](poolIds.length);\\n    address[] memory conflicted = new address[](poolIds.length);\\n\\n    for (uint i = 0; i < poolIds.length; i++) {\\n      poolId = poolIds[i];\\n      PoolFields storage _pool = _stakingPool[poolId];\\n      stakingTotal = _getStakingTotal(poolId);\\n\\n      if (_accumulatedRps[poolId][period].lastPeriod == period) {\\n        unchecked {\\n          conflicted[count++] = poolId;\\n        }\\n        continue;\\n      }\\n\\n      // Updates the pool shares if it is outdated\\n      if (_pool.shares.lastPeriod < period) {\\n        _pool.shares = PeriodWrapper(stakingTotal, period);\\n      }\\n\\n      // The rps is 0 if no one stakes for the pool\\n      rps = _pool.shares.inner == 0 ? 0 : (rewards[i] * 1e18) / _pool.shares.inner;\\n      aRps[i - count] = _pool.aRps += rps;\\n      _accumulatedRps[poolId][period] = PeriodWrapper(_pool.aRps, period);\\n      _pool.shares.inner = stakingTotal;\\n      shares[i - count] = _pool.shares.inner;\\n      poolIds[i - count] = poolId;\\n    }\\n\\n    if (count > 0) {\\n      assembly {\\n        mstore(conflicted, count)\\n        mstore(poolIds, sub(mload(poolIds), count))\\n      }\\n      emit PoolsUpdateConflicted(period, conflicted);\\n    }\\n\\n    if (poolIds.length > 0) {\\n      emit PoolsUpdated(period, poolIds, aRps, shares);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current period.\\n   */\\n  function _currentPeriod() internal view virtual returns (uint256);\\n\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x2ca1031b4b42cef7704cd5d790b104bb2ac7adf2426e567890bf32830c5edd3d\",\"license\":\"MIT\"},\"contracts/ronin/staking/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\nimport \\\"./StakingCallback.sol\\\";\\n\\ncontract Staking is IStaking, StakingCallback, Initializable, AccessControlEnumerable {\\n  bytes32 public constant MIGRATOR_ROLE = keccak256(\\\"MIGRATOR_ROLE\\\");\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  receive() external payable onlyContract(ContractType.VALIDATOR) {}\\n\\n  fallback() external payable onlyContract(ContractType.VALIDATOR) {}\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    uint256 __minValidatorStakingAmount,\\n    uint256 __maxCommissionRate,\\n    uint256 __cooldownSecsToUndelegate,\\n    uint256 __waitingSecsToRevoke\\n  ) external initializer {\\n    _setContract(ContractType.VALIDATOR, __validatorContract);\\n    _setMinValidatorStakingAmount(__minValidatorStakingAmount);\\n    _setCommissionRateRange(0, __maxCommissionRate);\\n    _setCooldownSecsToUndelegate(__cooldownSecsToUndelegate);\\n    _setWaitingSecsToRevoke(__waitingSecsToRevoke);\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage V2.\\n   */\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ______deprecatedValidator);\\n    delete ______deprecatedValidator;\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage V3.\\n   */\\n  function initializeV3(address __profileContract) external reinitializer(3) {\\n    _setContract(ContractType.PROFILE, __profileContract);\\n  }\\n\\n  function initializeV4(address admin, address migrator) external reinitializer(4) {\\n    _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    _grantRole(MIGRATOR_ROLE, migrator);\\n  }\\n\\n  /**\\n   * @dev Migrate REP-4\\n   */\\n  function migrateWasAdmin(\\n    address[] calldata poolIds,\\n    address[] calldata admins,\\n    bool[] calldata flags\\n  ) external onlyRole(MIGRATOR_ROLE) {\\n    if (poolIds.length != admins.length || poolIds.length != flags.length) {\\n      revert ErrInvalidArguments(msg.sig);\\n    }\\n\\n    for (uint i; i < poolIds.length; ++i) {\\n      _poolDetail[poolIds[i]].wasAdmin[admins[i]] = flags[i];\\n    }\\n\\n    emit MigrateWasAdminFinished();\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function execRecordRewards(\\n    address[] calldata poolIds,\\n    uint256[] calldata rewards,\\n    uint256 period\\n  ) external payable override onlyContract(ContractType.VALIDATOR) {\\n    _recordRewards(poolIds, rewards, period);\\n  }\\n\\n  /**\\n   * @inheritdoc IStaking\\n   */\\n  function execDeductStakingAmount(\\n    address poolId,\\n    uint256 amount\\n  ) external override onlyContract(ContractType.VALIDATOR) returns (uint256 actualDeductingAmount_) {\\n    actualDeductingAmount_ = _deductStakingAmount(_poolDetail[poolId], amount);\\n    address payable validatorContractAddr = payable(msg.sender);\\n    if (!_unsafeSendRON(validatorContractAddr, actualDeductingAmount_)) {\\n      emit StakingAmountDeductFailed(poolId, validatorContractAddr, actualDeductingAmount_, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc RewardCalculation\\n   */\\n  function _currentPeriod() internal view virtual override returns (uint256) {\\n    return IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod();\\n  }\\n\\n  /**\\n   * @inheritdoc CandidateStaking\\n   */\\n  function _deductStakingAmount(\\n    PoolDetail storage _pool,\\n    uint256 amount\\n  ) internal override returns (uint256 actualDeductingAmount_) {\\n    actualDeductingAmount_ = Math.min(_pool.stakingAmount, amount);\\n\\n    _pool.stakingAmount -= actualDeductingAmount_;\\n    _changeDelegatingAmount(\\n      _pool,\\n      _pool.__shadowedPoolAdmin,\\n      _pool.stakingAmount,\\n      Math.subNonNegative(_pool.stakingTotal, actualDeductingAmount_)\\n    );\\n    emit Unstaked(_pool.pid, actualDeductingAmount_);\\n  }\\n}\\n\",\"keccak256\":\"0xd739db311e7b8af1a24e4674c6074423f457a1528ea3d55c25c812c36dc1e64a\",\"license\":\"MIT\"},\"contracts/ronin/staking/StakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"../../interfaces/staking/IStakingCallback.sol\\\";\\nimport \\\"./CandidateStaking.sol\\\";\\nimport \\\"./DelegatorStaking.sol\\\";\\n\\nabstract contract StakingCallback is CandidateStaking, DelegatorStaking, IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddress(\\n    address poolId,\\n    address currAdminAddr,\\n    address newAdminAddr\\n  ) external override onlyContract(ContractType.PROFILE) {\\n    PoolDetail storage _pool = _poolDetail[poolId];\\n\\n    _pool.wasAdmin[newAdminAddr] = true;\\n    _changeStakeholder({ _pool: _pool, requester: currAdminAddr, newStakeholder: newAdminAddr });\\n\\n    _adminOfActivePoolMapping[_pool.__shadowedPoolAdmin] = address(0);\\n    _pool.__shadowedPoolAdmin = newAdminAddr;\\n\\n    _adminOfActivePoolMapping[newAdminAddr] = poolId;\\n  }\\n}\\n\",\"keccak256\":\"0xb86a651ec89dd260c469c7313088509584f5a9fa9fc2814e106c76b8f3ebd99d\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 24,
  "numDeployments": 18,
  "storageLayout": {
    "storage": [
      {
        "astId": 150437,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 34099,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_accumulatedRps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)8916_storage))"
      },
      {
        "astId": 34107,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_userReward",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)9774_storage))"
      },
      {
        "astId": 34113,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_stakingPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PoolFields)9780_storage)"
      },
      {
        "astId": 34118,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 40329,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 31844,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_poolDetail",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_struct(PoolDetail)9327_storage)"
      },
      {
        "astId": 31847,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_cooldownSecsToUndelegate",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 31850,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_waitingSecsToRevoke",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 31855,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_adminOfActivePoolMapping",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 31860,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 32602,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_minValidatorStakingAmount",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 32605,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_maxCommissionRate",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 32608,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_minCommissionRate",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 32613,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "111",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 33497,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "______gap",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 150174,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initialized",
        "offset": 0,
        "slot": "209",
        "type": "t_uint8"
      },
      {
        "astId": 150177,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_initializing",
        "offset": 1,
        "slot": "209",
        "type": "t_bool"
      },
      {
        "astId": 148825,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_roles",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)148820_storage)"
      },
      {
        "astId": 149139,
        "contract": "contracts/ronin/staking/Staking.sol:Staking",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)152827_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_uint256)48_storage": {
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536",
        "base": "t_uint256"
      },
      "t_array(t_uint256)49_storage": {
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568",
        "base": "t_uint256"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserRewardFields)9774_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IRewardPool.UserRewardFields))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserRewardFields)9774_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodWrapper)8916_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PeriodWrapper)8916_storage)"
      },
      "t_mapping(t_address,t_struct(PoolDetail)9327_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBaseStaking.PoolDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolDetail)9327_storage"
      },
      "t_mapping(t_address,t_struct(PoolFields)9780_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.PoolFields)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolFields)9780_storage"
      },
      "t_mapping(t_address,t_struct(UserRewardFields)9774_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardPool.UserRewardFields)",
        "numberOfBytes": "32",
        "value": "t_struct(UserRewardFields)9774_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)152827_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)152827_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)148820_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)148820_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PeriodWrapper)8916_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PeriodWrapperConsumer.PeriodWrapper)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodWrapper)8916_storage"
      },
      "t_struct(AddressSet)152827_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 152826,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)152526_storage"
          }
        ]
      },
      "t_struct(PeriodWrapper)8916_storage": {
        "encoding": "inplace",
        "label": "struct PeriodWrapperConsumer.PeriodWrapper",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 8913,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "inner",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8915,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ]
      },
      "t_struct(PoolDetail)9327_storage": {
        "encoding": "inplace",
        "label": "struct IBaseStaking.PoolDetail",
        "numberOfBytes": "224",
        "members": [
          {
            "astId": 9302,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "pid",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9305,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "__shadowedPoolAdmin",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9308,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9311,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "stakingTotal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9316,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "delegatingAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9321,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastDelegatingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9326,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "wasAdmin",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          }
        ]
      },
      "t_struct(PoolFields)9780_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.PoolFields",
        "numberOfBytes": "96",
        "members": [
          {
            "astId": 9776,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9779,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PeriodWrapper)8916_storage"
          }
        ]
      },
      "t_struct(RoleData)148820_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 148817,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 148819,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)152526_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 152521,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 152525,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_struct(UserRewardFields)9774_storage": {
        "encoding": "inplace",
        "label": "struct IRewardPool.UserRewardFields",
        "numberOfBytes": "128",
        "members": [
          {
            "astId": 9767,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "debited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9769,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "aRps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9771,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lowestAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9773,
            "contract": "contracts/ronin/staking/Staking.sol:Staking",
            "label": "lastPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1708326505,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}