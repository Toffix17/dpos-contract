{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_roninChainId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_roninTrustedOrganizationContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_validatorContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_expiryDuration",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "DOMAIN_SEPARATOR",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "castProposalBySignatures",
      "inputs": [
        {
          "name": "_proposal",
          "type": "tuple",
          "internalType": "struct Proposal.ProposalDetail",
          "components": [
            {
              "name": "nonce",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "chainId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "expiryTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "targets",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "values",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "calldatas",
              "type": "bytes[]",
              "internalType": "bytes[]"
            },
            {
              "name": "gasAmounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "_supports",
          "type": "uint8[]",
          "internalType": "enum Ballot.VoteType[]"
        },
        {
          "name": "_signatures",
          "type": "tuple[]",
          "internalType": "struct SignatureConsumer.Signature[]",
          "components": [
            {
              "name": "v",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "r",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "s",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "castProposalVoteForCurrentNetwork",
      "inputs": [
        {
          "name": "_proposal",
          "type": "tuple",
          "internalType": "struct Proposal.ProposalDetail",
          "components": [
            {
              "name": "nonce",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "chainId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "expiryTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "targets",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "values",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "calldatas",
              "type": "bytes[]",
              "internalType": "bytes[]"
            },
            {
              "name": "gasAmounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "_support",
          "type": "uint8",
          "internalType": "enum Ballot.VoteType"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "changeProxyAdmin",
      "inputs": [
        {
          "name": "_proxy",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_newAdmin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "createEmergencyExitPoll",
      "inputs": [
        {
          "name": "validatorId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipientAfterUnlockedFund",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "requestedAt",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiredAt",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "deleteExpired",
      "inputs": [
        {
          "name": "_chainId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_round",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "emergencyPollVoted",
      "inputs": [
        {
          "name": "_voteHash",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_voter",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getProposalExpiryDuration",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getProposalSignatures",
      "inputs": [
        {
          "name": "_chainId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_round",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "_voters",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "_supports",
          "type": "uint8[]",
          "internalType": "enum Ballot.VoteType[]"
        },
        {
          "name": "_signatures",
          "type": "tuple[]",
          "internalType": "struct SignatureConsumer.Signature[]",
          "components": [
            {
              "name": "v",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "r",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "s",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getProxyAdmin",
      "inputs": [
        {
          "name": "_proxy",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getProxyImplementation",
      "inputs": [
        {
          "name": "_proxy",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proposalVoted",
      "inputs": [
        {
          "name": "_chainId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_round",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_voter",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "propose",
      "inputs": [
        {
          "name": "_chainId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_expiryTimestamp",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_targets",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "_values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "_calldatas",
          "type": "bytes[]",
          "internalType": "bytes[]"
        },
        {
          "name": "_gasAmounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "proposeProposalForCurrentNetwork",
      "inputs": [
        {
          "name": "_expiryTimestamp",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_targets",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "_values",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "_calldatas",
          "type": "bytes[]",
          "internalType": "bytes[]"
        },
        {
          "name": "_gasAmounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "_support",
          "type": "uint8",
          "internalType": "enum Ballot.VoteType"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "proposeProposalStructAndCastVotes",
      "inputs": [
        {
          "name": "_proposal",
          "type": "tuple",
          "internalType": "struct Proposal.ProposalDetail",
          "components": [
            {
              "name": "nonce",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "chainId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "expiryTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "targets",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "values",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "calldatas",
              "type": "bytes[]",
              "internalType": "bytes[]"
            },
            {
              "name": "gasAmounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "_supports",
          "type": "uint8[]",
          "internalType": "enum Ballot.VoteType[]"
        },
        {
          "name": "_signatures",
          "type": "tuple[]",
          "internalType": "struct SignatureConsumer.Signature[]",
          "components": [
            {
              "name": "v",
              "type": "uint8",
              "internalType": "uint8"
            },
            {
              "name": "r",
              "type": "bytes32",
              "internalType": "bytes32"
            },
            {
              "name": "s",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "roninChainId",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "round",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setProposalExpiryDuration",
      "inputs": [
        {
          "name": "_expiryDuration",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "vote",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "status",
          "type": "uint8",
          "internalType": "enum VoteStatusConsumer.VoteStatus"
        },
        {
          "name": "hash",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "againstVoteWeight",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "forVoteWeight",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiryTimestamp",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "voteEmergencyExit",
      "inputs": [
        {
          "name": "voteHash",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "validatorId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipientAfterUnlockedFund",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "requestedAt",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expiredAt",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitPollApproved",
      "inputs": [
        {
          "name": "voteHash",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitPollCreated",
      "inputs": [
        {
          "name": "voteHash",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        },
        {
          "name": "validatorId",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "recipientAfterUnlockedFund",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        },
        {
          "name": "requestedAt",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "expiredAt",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitPollExpired",
      "inputs": [
        {
          "name": "voteHash",
          "type": "bytes32",
          "indexed": false,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitPollVoted",
      "inputs": [
        {
          "name": "voteHash",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "voter",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProposalApproved",
      "inputs": [
        {
          "name": "proposalHash",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProposalCreated",
      "inputs": [
        {
          "name": "chainId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "round",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "proposalHash",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "proposal",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct Proposal.ProposalDetail",
          "components": [
            {
              "name": "nonce",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "chainId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "expiryTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "targets",
              "type": "address[]",
              "internalType": "address[]"
            },
            {
              "name": "values",
              "type": "uint256[]",
              "internalType": "uint256[]"
            },
            {
              "name": "calldatas",
              "type": "bytes[]",
              "internalType": "bytes[]"
            },
            {
              "name": "gasAmounts",
              "type": "uint256[]",
              "internalType": "uint256[]"
            }
          ]
        },
        {
          "name": "creator",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProposalExecuted",
      "inputs": [
        {
          "name": "proposalHash",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "successCalls",
          "type": "bool[]",
          "indexed": false,
          "internalType": "bool[]"
        },
        {
          "name": "returnDatas",
          "type": "bytes[]",
          "indexed": false,
          "internalType": "bytes[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProposalExpired",
      "inputs": [
        {
          "name": "proposalHash",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProposalExpiryDurationChanged",
      "inputs": [
        {
          "name": "duration",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProposalRejected",
      "inputs": [
        {
          "name": "proposalHash",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProposalVoted",
      "inputs": [
        {
          "name": "proposalHash",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "voter",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "support",
          "type": "uint8",
          "indexed": false,
          "internalType": "enum Ballot.VoteType"
        },
        {
          "name": "weight",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyVoted",
      "inputs": [
        {
          "name": "voter",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrCurrentProposalIsNotCompleted",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInsufficientGas",
      "inputs": [
        {
          "name": "proposalHash",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidChainId",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "actual",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "expected",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidExpiryTimestamp",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidOrder",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidProposal",
      "inputs": [
        {
          "name": "actual",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "expected",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidProposalNonce",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidSignatures",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidVoteHash",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrLengthMismatch",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrOnlySelfCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrQueryForEmptyVote",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrQueryForExpiredVote",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrQueryForNonExistentVote",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnsupportedVoteType",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrVoteIsFinalized",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    }
  ],
  "address": "0x70fd02049333337a534a9383149c9a99ddf65495",
  "args": "0x00000000000000000000000000000000000000000000000000000000000007e400000000000000000000000098d0230884448b3e2f09a177433d60fb1e19c090000000000000000000000000617c5d73662282ea7ffd231e020eca6d2b0d552f0000000000000000000000000000000000000000000000000000000000127500",
  "ast": {
    "absolutePath": "contracts/ronin/RoninGovernanceAdmin.sol",
    "id": 20155,
    "exportedSymbols": {
      "Ballot": [
        10914
      ],
      "ChainTypeConsumer": [
        8705
      ],
      "CommonGovernanceProposal": [
        5259
      ],
      "ContractType": [
        38020
      ],
      "CoreGovernance": [
        4447
      ],
      "ECDSA": [
        151343
      ],
      "EmergencyExitBallot": [
        10937
      ],
      "EnumFlags": [
        11041
      ],
      "ErrAddressIsNotCreatedEOA": [
        37815
      ],
      "ErrAlreadyVoted": [
        37938
      ],
      "ErrBridgeOperatorAlreadyExisted": [
        37820
      ],
      "ErrBridgeOperatorUpdateFailed": [
        37808
      ],
      "ErrCallPrecompiled": [
        37904
      ],
      "ErrCallerMustBeCoinbase": [
        38001
      ],
      "ErrEmptyArray": [
        37887
      ],
      "ErrInvalidArguments": [
        37846
      ],
      "ErrInvalidChainId": [
        37923
      ],
      "ErrInvalidOrder": [
        37914
      ],
      "ErrInvalidProposalNonce": [
        37933
      ],
      "ErrInvalidReceipt": [
        37971
      ],
      "ErrInvalidReceiptKind": [
        37968
      ],
      "ErrInvalidRequest": [
        37959
      ],
      "ErrInvalidReturnData": [
        37836
      ],
      "ErrInvalidSignatures": [
        37943
      ],
      "ErrInvalidThreshold": [
        37856
      ],
      "ErrInvalidTokenStandard": [
        37962
      ],
      "ErrInvalidVoteHash": [
        37986
      ],
      "ErrInvalidVoteWeight": [
        37953
      ],
      "ErrLengthMismatch": [
        37892
      ],
      "ErrNativeTransferFailed": [
        37909
      ],
      "ErrNonpayableAddress": [
        37976
      ],
      "ErrOncePerBlock": [
        37998
      ],
      "ErrOnlySelfCall": [
        37861
      ],
      "ErrPeriodAlreadyProcessed": [
        37983
      ],
      "ErrProxyCallFailed": [
        37899
      ],
      "ErrQueryForEmptyVote": [
        37989
      ],
      "ErrQueryForExpiredVote": [
        37992
      ],
      "ErrQueryForNonExistentVote": [
        37995
      ],
      "ErrQueryForOutdatedBridgeOperatorSet": [
        37956
      ],
      "ErrRelayFailed": [
        37948
      ],
      "ErrSyncTooFarPeriod": [
        37803
      ],
      "ErrUnauthorized": [
        37869
      ],
      "ErrUnauthorizedCall": [
        37874
      ],
      "ErrUnexpectedInternalCall": [
        37884
      ],
      "ErrUnsupportedInterface": [
        37827
      ],
      "ErrUnsupportedToken": [
        37965
      ],
      "ErrUnsupportedVoteType": [
        37928
      ],
      "ErrZeroAddress": [
        37851
      ],
      "ErrZeroCodeContract": [
        37841
      ],
      "ErrorHandler": [
        11063
      ],
      "GlobalProposal": [
        11264
      ],
      "GovernanceAdmin": [
        531
      ],
      "GovernanceProposal": [
        5753
      ],
      "HasBridgeDeprecated": [
        38035
      ],
      "HasContracts": [
        3544
      ],
      "HasGovernanceAdminDeprecated": [
        38055
      ],
      "HasProxyAdmin": [
        3589
      ],
      "HasValidatorDeprecated": [
        38039
      ],
      "ICandidateManager": [
        9988
      ],
      "ICandidateManagerCallback": [
        10069
      ],
      "ICoinbaseExecution": [
        10237
      ],
      "ICommonInfo": [
        10456
      ],
      "IEmergencyExit": [
        10330
      ],
      "IHasContracts": [
        8699
      ],
      "IJailingInfo": [
        10548
      ],
      "IQuorum": [
        7440
      ],
      "IRoninGovernanceAdmin": [
        7713
      ],
      "IRoninTrustedOrganization": [
        7933
      ],
      "IRoninValidatorSet": [
        10351
      ],
      "ISlashingExecution": [
        10401
      ],
      "ITimingInfo": [
        10607
      ],
      "IValidatorInfoV2": [
        10703
      ],
      "IdentityGuard": [
        38269
      ],
      "IsolatedGovernance": [
        11477
      ],
      "Proposal": [
        11914
      ],
      "RoleAccess": [
        38283
      ],
      "RoninGovernanceAdmin": [
        20154
      ],
      "SignatureConsumer": [
        8733
      ],
      "Strings": [
        150955
      ],
      "TConsensus": [
        37739
      ],
      "TConsensusEq": [
        37791
      ],
      "TPoolId": [
        37737
      ],
      "TPoolIdEq": [
        37769
      ],
      "VoteStatusConsumer": [
        8742
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:9112:105",
    "nodes": [
      {
        "id": 19490,
        "nodeType": "PragmaDirective",
        "src": "32:23:105",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 19491,
        "nodeType": "ImportDirective",
        "src": "57:88:105",
        "nodes": [],
        "absolutePath": "contracts/extensions/sequential-governance/governance-proposal/GovernanceProposal.sol",
        "file": "../extensions/sequential-governance/governance-proposal/GovernanceProposal.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 5754,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19492,
        "nodeType": "ImportDirective",
        "src": "146:52:105",
        "nodes": [],
        "absolutePath": "contracts/extensions/collections/HasContracts.sol",
        "file": "../extensions/collections/HasContracts.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 3545,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19493,
        "nodeType": "ImportDirective",
        "src": "199:43:105",
        "nodes": [],
        "absolutePath": "contracts/extensions/GovernanceAdmin.sol",
        "file": "../extensions/GovernanceAdmin.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 532,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19494,
        "nodeType": "ImportDirective",
        "src": "243:46:105",
        "nodes": [],
        "absolutePath": "contracts/libraries/EmergencyExitBallot.sol",
        "file": "../libraries/EmergencyExitBallot.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 10938,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19496,
        "nodeType": "ImportDirective",
        "src": "290:61:105",
        "nodes": [],
        "absolutePath": "contracts/libraries/ErrorHandler.sol",
        "file": "../libraries/ErrorHandler.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 11064,
        "symbolAliases": [
          {
            "foreign": {
              "id": 19495,
              "name": "ErrorHandler",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 11063,
              "src": "299:12:105",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 19498,
        "nodeType": "ImportDirective",
        "src": "352:73:105",
        "nodes": [],
        "absolutePath": "contracts/libraries/IsolatedGovernance.sol",
        "file": "../libraries/IsolatedGovernance.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 11478,
        "symbolAliases": [
          {
            "foreign": {
              "id": 19497,
              "name": "IsolatedGovernance",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 11477,
              "src": "361:18:105",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 19500,
        "nodeType": "ImportDirective",
        "src": "426:70:105",
        "nodes": [],
        "absolutePath": "contracts/utils/DeprecatedSlots.sol",
        "file": "../utils/DeprecatedSlots.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 38060,
        "symbolAliases": [
          {
            "foreign": {
              "id": 19499,
              "name": "HasValidatorDeprecated",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 38039,
              "src": "435:22:105",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 19501,
        "nodeType": "ImportDirective",
        "src": "497:53:105",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IRoninTrustedOrganization.sol",
        "file": "../interfaces/IRoninTrustedOrganization.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 7934,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19502,
        "nodeType": "ImportDirective",
        "src": "551:56:105",
        "nodes": [],
        "absolutePath": "contracts/interfaces/validator/IRoninValidatorSet.sol",
        "file": "../interfaces/validator/IRoninValidatorSet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 10352,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 19503,
        "nodeType": "ImportDirective",
        "src": "608:49:105",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IRoninGovernanceAdmin.sol",
        "file": "../interfaces/IRoninGovernanceAdmin.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 20155,
        "sourceUnit": 7714,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 20154,
        "nodeType": "ContractDefinition",
        "src": "659:8484:105",
        "nodes": [
          {
            "id": 19516,
            "nodeType": "UsingForDirective",
            "src": "803:28:105",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 19514,
              "name": "ErrorHandler",
              "nameLocations": [
                "809:12:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 11063,
              "src": "809:12:105"
            },
            "typeName": {
              "id": 19515,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "826:4:105",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            }
          },
          {
            "id": 19520,
            "nodeType": "UsingForDirective",
            "src": "834:43:105",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 19517,
              "name": "Proposal",
              "nameLocations": [
                "840:8:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 11914,
              "src": "840:8:105"
            },
            "typeName": {
              "id": 19519,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 19518,
                "name": "Proposal.ProposalDetail",
                "nameLocations": [
                  "853:8:105",
                  "862:14:105"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 11652,
                "src": "853:23:105"
              },
              "referencedDeclaration": 11652,
              "src": "853:23:105",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_ProposalDetail_$11652_storage_ptr",
                "typeString": "struct Proposal.ProposalDetail"
              }
            }
          },
          {
            "id": 19524,
            "nodeType": "UsingForDirective",
            "src": "880:53:105",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 19521,
              "name": "IsolatedGovernance",
              "nameLocations": [
                "886:18:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 11477,
              "src": "886:18:105"
            },
            "typeName": {
              "id": 19523,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 19522,
                "name": "IsolatedGovernance.Vote",
                "nameLocations": [
                  "909:18:105",
                  "928:4:105"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 11289,
                "src": "909:23:105"
              },
              "referencedDeclaration": 11289,
              "src": "909:23:105",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                "typeString": "struct IsolatedGovernance.Vote"
              }
            }
          },
          {
            "id": 19530,
            "nodeType": "VariableDeclaration",
            "src": "992:71:105",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19525,
              "nodeType": "StructuredDocumentation",
              "src": "937:52:105",
              "text": "@dev Mapping from request hash => emergency poll"
            },
            "mutability": "mutable",
            "name": "_emergencyExitPoll",
            "nameLocation": "1045:18:105",
            "scope": 20154,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Vote_$11289_storage_$",
              "typeString": "mapping(bytes32 => struct IsolatedGovernance.Vote)"
            },
            "typeName": {
              "id": 19529,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 19526,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "1000:7:105",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "992:43:105",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Vote_$11289_storage_$",
                "typeString": "mapping(bytes32 => struct IsolatedGovernance.Vote)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 19528,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 19527,
                  "name": "IsolatedGovernance.Vote",
                  "nameLocations": [
                    "1011:18:105",
                    "1030:4:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 11289,
                  "src": "1011:23:105"
                },
                "referencedDeclaration": 11289,
                "src": "1011:23:105",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                  "typeString": "struct IsolatedGovernance.Vote"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19537,
            "nodeType": "ModifierDefinition",
            "src": "1068:61:105",
            "nodes": [],
            "body": {
              "id": 19536,
              "nodeType": "Block",
              "src": "1092:37:105",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 19532,
                      "name": "_requireGorvernor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19580,
                      "src": "1098:17:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$__$",
                        "typeString": "function () view"
                      }
                    },
                    "id": 19533,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1098:19:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19534,
                  "nodeType": "ExpressionStatement",
                  "src": "1098:19:105"
                },
                {
                  "id": 19535,
                  "nodeType": "PlaceholderStatement",
                  "src": "1123:1:105"
                }
              ]
            },
            "name": "onlyGovernor",
            "nameLocation": "1077:12:105",
            "parameters": {
              "id": 19531,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1089:2:105"
            },
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 19562,
            "nodeType": "FunctionDefinition",
            "src": "1133:316:105",
            "nodes": [],
            "body": {
              "id": 19561,
              "nodeType": "Block",
              "src": "1382:67:105",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 19556,
                          "name": "ContractType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 38020,
                          "src": "1401:12:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_ContractType_$38020_$",
                            "typeString": "type(enum ContractType)"
                          }
                        },
                        "id": 19557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "1414:9:105",
                        "memberName": "VALIDATOR",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 38012,
                        "src": "1401:22:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38020",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 19558,
                        "name": "_validatorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19543,
                        "src": "1425:18:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38020",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19555,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1388:12:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38020_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 19559,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1388:56:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19560,
                  "nodeType": "ExpressionStatement",
                  "src": "1388:56:105"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 19548,
                    "name": "_expiryDuration",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19545,
                    "src": "1299:15:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 19549,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 19547,
                  "name": "CoreGovernance",
                  "nameLocations": [
                    "1284:14:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 4447,
                  "src": "1284:14:105"
                },
                "nodeType": "ModifierInvocation",
                "src": "1284:31:105"
              },
              {
                "arguments": [
                  {
                    "id": 19551,
                    "name": "_roninChainId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19539,
                    "src": "1332:13:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  {
                    "id": 19552,
                    "name": "_roninTrustedOrganizationContract",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19541,
                    "src": "1347:33:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 19553,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 19550,
                  "name": "GovernanceAdmin",
                  "nameLocations": [
                    "1316:15:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 531,
                  "src": "1316:15:105"
                },
                "nodeType": "ModifierInvocation",
                "src": "1316:65:105"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 19546,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19539,
                  "mutability": "mutable",
                  "name": "_roninChainId",
                  "nameLocation": "1158:13:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19562,
                  "src": "1150:21:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19538,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1150:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19541,
                  "mutability": "mutable",
                  "name": "_roninTrustedOrganizationContract",
                  "nameLocation": "1185:33:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19562,
                  "src": "1177:41:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19540,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1177:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19543,
                  "mutability": "mutable",
                  "name": "_validatorContract",
                  "nameLocation": "1232:18:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19562,
                  "src": "1224:26:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19542,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1224:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19545,
                  "mutability": "mutable",
                  "name": "_expiryDuration",
                  "nameLocation": "1264:15:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19562,
                  "src": "1256:23:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19544,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1256:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1144:139:105"
            },
            "returnParameters": {
              "id": 19554,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1382:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 19580,
            "nodeType": "FunctionDefinition",
            "src": "1453:138:105",
            "nodes": [],
            "body": {
              "id": 19579,
              "nodeType": "Block",
              "src": "1495:96:105",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19570,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 19566,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1516:3:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 19567,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1520:6:105",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1516:10:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 19565,
                        "name": "_getWeight",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          20047
                        ],
                        "referencedDeclaration": 20047,
                        "src": "1505:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address) view returns (uint256)"
                        }
                      },
                      "id": 19568,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1505:22:105",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 19569,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1531:1:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1505:27:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19578,
                  "nodeType": "IfStatement",
                  "src": "1501:85:105",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 19572,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1557:3:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 19573,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1561:3:105",
                          "memberName": "sig",
                          "nodeType": "MemberAccess",
                          "src": "1557:7:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        {
                          "expression": {
                            "id": 19574,
                            "name": "RoleAccess",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38283,
                            "src": "1566:10:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RoleAccess_$38283_$",
                              "typeString": "type(enum RoleAccess)"
                            }
                          },
                          "id": 19575,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "1577:8:105",
                          "memberName": "GOVERNOR",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 38275,
                          "src": "1566:19:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RoleAccess_$38283",
                            "typeString": "enum RoleAccess"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          {
                            "typeIdentifier": "t_enum$_RoleAccess_$38283",
                            "typeString": "enum RoleAccess"
                          }
                        ],
                        "id": 19571,
                        "name": "ErrUnauthorized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37869,
                        "src": "1541:15:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_bytes4_$_t_enum$_RoleAccess_$38283_$returns$__$",
                          "typeString": "function (bytes4,enum RoleAccess) pure"
                        }
                      },
                      "id": 19576,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1541:45:105",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19577,
                    "nodeType": "RevertStatement",
                    "src": "1534:52:105"
                  }
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_requireGorvernor",
            "nameLocation": "1462:17:105",
            "parameters": {
              "id": 19563,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1479:2:105"
            },
            "returnParameters": {
              "id": 19564,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1495:0:105"
            },
            "scope": 20154,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "private"
          },
          {
            "id": 19604,
            "nodeType": "FunctionDefinition",
            "src": "1638:206:105",
            "nodes": [],
            "body": {
              "id": 19603,
              "nodeType": "Block",
              "src": "1774:70:105",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19595,
                        "name": "addr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19586,
                        "src": "1796:4:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19594,
                      "name": "_requireHasCode",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38136,
                      "src": "1780:15:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$__$",
                        "typeString": "function (address) view"
                      }
                    },
                    "id": 19596,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1780:21:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19597,
                  "nodeType": "ExpressionStatement",
                  "src": "1780:21:105"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19599,
                        "name": "contractType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19584,
                        "src": "1820:12:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_ContractType_$38020",
                          "typeString": "enum ContractType"
                        }
                      },
                      {
                        "id": 19600,
                        "name": "addr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19586,
                        "src": "1834:4:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_ContractType_$38020",
                          "typeString": "enum ContractType"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19598,
                      "name": "_setContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3509,
                      "src": "1807:12:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_enum$_ContractType_$38020_$_t_address_$returns$__$",
                        "typeString": "function (enum ContractType,address)"
                      }
                    },
                    "id": 19601,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1807:32:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19602,
                  "nodeType": "ExpressionStatement",
                  "src": "1807:32:105"
                }
              ]
            },
            "baseFunctions": [
              295,
              3453
            ],
            "documentation": {
              "id": 19581,
              "nodeType": "StructuredDocumentation",
              "src": "1595:40:105",
              "text": " @inheritdoc IHasContracts"
            },
            "functionSelector": "865e6fd3",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 19592,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19591,
                  "name": "onlySelfCall",
                  "nameLocations": [
                    "1761:12:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 38089,
                  "src": "1761:12:105"
                },
                "nodeType": "ModifierInvocation",
                "src": "1761:12:105"
              }
            ],
            "name": "setContract",
            "nameLocation": "1647:11:105",
            "overrides": {
              "id": 19590,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 19588,
                  "name": "HasContracts",
                  "nameLocations": [
                    "1730:12:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3544,
                  "src": "1730:12:105"
                },
                {
                  "id": 19589,
                  "name": "GovernanceAdmin",
                  "nameLocations": [
                    "1744:15:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 531,
                  "src": "1744:15:105"
                }
              ],
              "src": "1721:39:105"
            },
            "parameters": {
              "id": 19587,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19584,
                  "mutability": "mutable",
                  "name": "contractType",
                  "nameLocation": "1677:12:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19604,
                  "src": "1664:25:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_ContractType_$38020",
                    "typeString": "enum ContractType"
                  },
                  "typeName": {
                    "id": 19583,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19582,
                      "name": "ContractType",
                      "nameLocations": [
                        "1664:12:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 38020,
                      "src": "1664:12:105"
                    },
                    "referencedDeclaration": 38020,
                    "src": "1664:12:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ContractType_$38020",
                      "typeString": "enum ContractType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19586,
                  "mutability": "mutable",
                  "name": "addr",
                  "nameLocation": "1703:4:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19604,
                  "src": "1695:12:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19585,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1695:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1658:53:105"
            },
            "returnParameters": {
              "id": 19593,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1774:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19622,
            "nodeType": "FunctionDefinition",
            "src": "1933:153:105",
            "nodes": [],
            "body": {
              "id": 19621,
              "nodeType": "Block",
              "src": "2025:61:105",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19618,
                        "name": "_voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19609,
                        "src": "2074:6:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "baseExpression": {
                          "id": 19614,
                          "name": "_emergencyExitPoll",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19530,
                          "src": "2038:18:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Vote_$11289_storage_$",
                            "typeString": "mapping(bytes32 => struct IsolatedGovernance.Vote storage ref)"
                          }
                        },
                        "id": 19616,
                        "indexExpression": {
                          "id": 19615,
                          "name": "_voteHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19607,
                          "src": "2057:9:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2038:29:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage",
                          "typeString": "struct IsolatedGovernance.Vote storage ref"
                        }
                      },
                      "id": 19617,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2068:5:105",
                      "memberName": "voted",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11476,
                      "src": "2038:35:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_Vote_$11289_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Vote_$11289_storage_ptr_$",
                        "typeString": "function (struct IsolatedGovernance.Vote storage pointer,address) view returns (bool)"
                      }
                    },
                    "id": 19619,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2038:43:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 19613,
                  "id": 19620,
                  "nodeType": "Return",
                  "src": "2031:50:105"
                }
              ]
            },
            "documentation": {
              "id": 19605,
              "nodeType": "StructuredDocumentation",
              "src": "1848:82:105",
              "text": " @dev Returns whether the voter casted vote for emergency exit poll."
            },
            "functionSelector": "dcc3eb19",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "emergencyPollVoted",
            "nameLocation": "1942:18:105",
            "parameters": {
              "id": 19610,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19607,
                  "mutability": "mutable",
                  "name": "_voteHash",
                  "nameLocation": "1969:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19622,
                  "src": "1961:17:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19606,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1961:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19609,
                  "mutability": "mutable",
                  "name": "_voter",
                  "nameLocation": "1988:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19622,
                  "src": "1980:14:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19608,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1980:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1960:35:105"
            },
            "returnParameters": {
              "id": 19613,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19612,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 19622,
                  "src": "2019:4:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 19611,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2019:4:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2018:6:105"
            },
            "scope": 20154,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19656,
            "nodeType": "FunctionDefinition",
            "src": "2218:340:105",
            "nodes": [],
            "body": {
              "id": 19655,
              "nodeType": "Block",
              "src": "2447:111:105",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19645,
                        "name": "_chainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19625,
                        "src": "2470:8:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19646,
                        "name": "_expiryTimestamp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19627,
                        "src": "2480:16:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19647,
                        "name": "_targets",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19630,
                        "src": "2498:8:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        }
                      },
                      {
                        "id": 19648,
                        "name": "_values",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19633,
                        "src": "2508:7:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "id": 19649,
                        "name": "_calldatas",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19636,
                        "src": "2517:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "bytes calldata[] calldata"
                        }
                      },
                      {
                        "id": 19650,
                        "name": "_gasAmounts",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19639,
                        "src": "2529:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "expression": {
                          "id": 19651,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2542:3:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 19652,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2546:6:105",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2542:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "bytes calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19644,
                      "name": "_proposeProposal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3916,
                      "src": "2453:16:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_address_$returns$_t_struct$_ProposalDetail_$11652_memory_ptr_$",
                        "typeString": "function (uint256,uint256,address[] memory,uint256[] memory,bytes memory[] memory,uint256[] memory,address) returns (struct Proposal.ProposalDetail memory)"
                      }
                    },
                    "id": 19653,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2453:100:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProposalDetail_$11652_memory_ptr",
                      "typeString": "struct Proposal.ProposalDetail memory"
                    }
                  },
                  "id": 19654,
                  "nodeType": "ExpressionStatement",
                  "src": "2453:100:105"
                }
              ]
            },
            "documentation": {
              "id": 19623,
              "nodeType": "StructuredDocumentation",
              "src": "2090:125:105",
              "text": " @dev See `CoreGovernance-_proposeProposal`.\n Requirements:\n - The method caller is governor."
            },
            "functionSelector": "a1819f9a",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 19642,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19641,
                  "name": "onlyGovernor",
                  "nameLocations": [
                    "2434:12:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 19537,
                  "src": "2434:12:105"
                },
                "nodeType": "ModifierInvocation",
                "src": "2434:12:105"
              }
            ],
            "name": "propose",
            "nameLocation": "2227:7:105",
            "parameters": {
              "id": 19640,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19625,
                  "mutability": "mutable",
                  "name": "_chainId",
                  "nameLocation": "2248:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19656,
                  "src": "2240:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19624,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2240:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19627,
                  "mutability": "mutable",
                  "name": "_expiryTimestamp",
                  "nameLocation": "2270:16:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19656,
                  "src": "2262:24:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19626,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2262:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19630,
                  "mutability": "mutable",
                  "name": "_targets",
                  "nameLocation": "2311:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19656,
                  "src": "2292:27:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19628,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "2292:7:105",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 19629,
                    "nodeType": "ArrayTypeName",
                    "src": "2292:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19633,
                  "mutability": "mutable",
                  "name": "_values",
                  "nameLocation": "2344:7:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19656,
                  "src": "2325:26:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19631,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2325:7:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 19632,
                    "nodeType": "ArrayTypeName",
                    "src": "2325:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19636,
                  "mutability": "mutable",
                  "name": "_calldatas",
                  "nameLocation": "2374:10:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19656,
                  "src": "2357:27:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19634,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "2357:5:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 19635,
                    "nodeType": "ArrayTypeName",
                    "src": "2357:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19639,
                  "mutability": "mutable",
                  "name": "_gasAmounts",
                  "nameLocation": "2409:11:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19656,
                  "src": "2390:30:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19637,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2390:7:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 19638,
                    "nodeType": "ArrayTypeName",
                    "src": "2390:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2234:190:105"
            },
            "returnParameters": {
              "id": 19643,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2447:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19683,
            "nodeType": "FunctionDefinition",
            "src": "2760:307:105",
            "nodes": [],
            "body": {
              "id": 19682,
              "nodeType": "Block",
              "src": "2957:110:105",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19674,
                        "name": "_proposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19660,
                        "src": "2998:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProposalDetail_$11652_calldata_ptr",
                          "typeString": "struct Proposal.ProposalDetail calldata"
                        }
                      },
                      {
                        "id": 19675,
                        "name": "_supports",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19664,
                        "src": "3009:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_enum$_VoteType_$10898_$dyn_calldata_ptr",
                          "typeString": "enum Ballot.VoteType[] calldata"
                        }
                      },
                      {
                        "id": 19676,
                        "name": "_signatures",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19668,
                        "src": "3020:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Signature_$8732_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct SignatureConsumer.Signature calldata[] calldata"
                        }
                      },
                      {
                        "id": 19677,
                        "name": "DOMAIN_SEPARATOR",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 254,
                        "src": "3033:16:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "expression": {
                          "id": 19678,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3051:3:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 19679,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3055:6:105",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3051:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_ProposalDetail_$11652_calldata_ptr",
                          "typeString": "struct Proposal.ProposalDetail calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_enum$_VoteType_$10898_$dyn_calldata_ptr",
                          "typeString": "enum Ballot.VoteType[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_Signature_$8732_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct SignatureConsumer.Signature calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19673,
                      "name": "_proposeProposalStructAndCastVotes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5545,
                      "src": "2963:34:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ProposalDetail_$11652_calldata_ptr_$_t_array$_t_enum$_VoteType_$10898_$dyn_calldata_ptr_$_t_array$_t_struct$_Signature_$8732_calldata_ptr_$dyn_calldata_ptr_$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (struct Proposal.ProposalDetail calldata,enum Ballot.VoteType[] calldata,struct SignatureConsumer.Signature calldata[] calldata,bytes32,address)"
                      }
                    },
                    "id": 19680,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2963:99:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19681,
                  "nodeType": "ExpressionStatement",
                  "src": "2963:99:105"
                }
              ]
            },
            "documentation": {
              "id": 19657,
              "nodeType": "StructuredDocumentation",
              "src": "2562:195:105",
              "text": " @dev See `GovernanceProposal-_proposeProposalStructAndCastVotes`.\n Requirements:\n - The method caller is governor.\n - The proposal is for the current network."
            },
            "functionSelector": "004054b8",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 19671,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19670,
                  "name": "onlyGovernor",
                  "nameLocations": [
                    "2944:12:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 19537,
                  "src": "2944:12:105"
                },
                "nodeType": "ModifierInvocation",
                "src": "2944:12:105"
              }
            ],
            "name": "proposeProposalStructAndCastVotes",
            "nameLocation": "2769:33:105",
            "parameters": {
              "id": 19669,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19660,
                  "mutability": "mutable",
                  "name": "_proposal",
                  "nameLocation": "2841:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19683,
                  "src": "2808:42:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ProposalDetail_$11652_calldata_ptr",
                    "typeString": "struct Proposal.ProposalDetail"
                  },
                  "typeName": {
                    "id": 19659,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19658,
                      "name": "Proposal.ProposalDetail",
                      "nameLocations": [
                        "2808:8:105",
                        "2817:14:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 11652,
                      "src": "2808:23:105"
                    },
                    "referencedDeclaration": 11652,
                    "src": "2808:23:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProposalDetail_$11652_storage_ptr",
                      "typeString": "struct Proposal.ProposalDetail"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19664,
                  "mutability": "mutable",
                  "name": "_supports",
                  "nameLocation": "2883:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19683,
                  "src": "2856:36:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_enum$_VoteType_$10898_$dyn_calldata_ptr",
                    "typeString": "enum Ballot.VoteType[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19662,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 19661,
                        "name": "Ballot.VoteType",
                        "nameLocations": [
                          "2856:6:105",
                          "2863:8:105"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 10898,
                        "src": "2856:15:105"
                      },
                      "referencedDeclaration": 10898,
                      "src": "2856:15:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VoteType_$10898",
                        "typeString": "enum Ballot.VoteType"
                      }
                    },
                    "id": 19663,
                    "nodeType": "ArrayTypeName",
                    "src": "2856:17:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_enum$_VoteType_$10898_$dyn_storage_ptr",
                      "typeString": "enum Ballot.VoteType[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19668,
                  "mutability": "mutable",
                  "name": "_signatures",
                  "nameLocation": "2919:11:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19683,
                  "src": "2898:32:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Signature_$8732_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct SignatureConsumer.Signature[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19666,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 19665,
                        "name": "Signature",
                        "nameLocations": [
                          "2898:9:105"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 8732,
                        "src": "2898:9:105"
                      },
                      "referencedDeclaration": 8732,
                      "src": "2898:9:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Signature_$8732_storage_ptr",
                        "typeString": "struct SignatureConsumer.Signature"
                      }
                    },
                    "id": 19667,
                    "nodeType": "ArrayTypeName",
                    "src": "2898:11:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Signature_$8732_storage_$dyn_storage_ptr",
                      "typeString": "struct SignatureConsumer.Signature[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2802:132:105"
            },
            "returnParameters": {
              "id": 19672,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2957:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19734,
            "nodeType": "FunctionDefinition",
            "src": "3271:567:105",
            "nodes": [],
            "body": {
              "id": 19733,
              "nodeType": "Block",
              "src": "3533:305:105",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    19707
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19707,
                      "mutability": "mutable",
                      "name": "_voter",
                      "nameLocation": "3547:6:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19733,
                      "src": "3539:14:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 19706,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3539:7:105",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19710,
                  "initialValue": {
                    "expression": {
                      "id": 19708,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "3556:3:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 19709,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "3560:6:105",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "3556:10:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3539:27:105"
                },
                {
                  "assignments": [
                    19715
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19715,
                      "mutability": "mutable",
                      "name": "_proposal",
                      "nameLocation": "3603:9:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19733,
                      "src": "3572:40:105",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProposalDetail_$11652_memory_ptr",
                        "typeString": "struct Proposal.ProposalDetail"
                      },
                      "typeName": {
                        "id": 19714,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 19713,
                          "name": "Proposal.ProposalDetail",
                          "nameLocations": [
                            "3572:8:105",
                            "3581:14:105"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 11652,
                          "src": "3572:23:105"
                        },
                        "referencedDeclaration": 11652,
                        "src": "3572:23:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProposalDetail_$11652_storage_ptr",
                          "typeString": "struct Proposal.ProposalDetail"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19726,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 19717,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "3639:5:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 19718,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3645:7:105",
                        "memberName": "chainid",
                        "nodeType": "MemberAccess",
                        "src": "3639:13:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19719,
                        "name": "_expiryTimestamp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19686,
                        "src": "3660:16:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19720,
                        "name": "_targets",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19689,
                        "src": "3684:8:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        }
                      },
                      {
                        "id": 19721,
                        "name": "_values",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19692,
                        "src": "3700:7:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "id": 19722,
                        "name": "_calldatas",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19695,
                        "src": "3715:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "bytes calldata[] calldata"
                        }
                      },
                      {
                        "id": 19723,
                        "name": "_gasAmounts",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19698,
                        "src": "3733:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        }
                      },
                      {
                        "id": 19724,
                        "name": "_voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19707,
                        "src": "3752:6:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "bytes calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[] calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19716,
                      "name": "_proposeProposal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3916,
                      "src": "3615:16:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_address_$returns$_t_struct$_ProposalDetail_$11652_memory_ptr_$",
                        "typeString": "function (uint256,uint256,address[] memory,uint256[] memory,bytes memory[] memory,uint256[] memory,address) returns (struct Proposal.ProposalDetail memory)"
                      }
                    },
                    "id": 19725,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3615:149:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProposalDetail_$11652_memory_ptr",
                      "typeString": "struct Proposal.ProposalDetail memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3572:192:105"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19728,
                        "name": "_voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19707,
                        "src": "3805:6:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19729,
                        "name": "_proposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19715,
                        "src": "3813:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProposalDetail_$11652_memory_ptr",
                          "typeString": "struct Proposal.ProposalDetail memory"
                        }
                      },
                      {
                        "id": 19730,
                        "name": "_support",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19701,
                        "src": "3824:8:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_VoteType_$10898",
                          "typeString": "enum Ballot.VoteType"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_struct$_ProposalDetail_$11652_memory_ptr",
                          "typeString": "struct Proposal.ProposalDetail memory"
                        },
                        {
                          "typeIdentifier": "t_enum$_VoteType_$10898",
                          "typeString": "enum Ballot.VoteType"
                        }
                      ],
                      "id": 19727,
                      "name": "_castProposalVoteForCurrentNetwork",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5708,
                      "src": "3770:34:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_ProposalDetail_$11652_memory_ptr_$_t_enum$_VoteType_$10898_$returns$__$",
                        "typeString": "function (address,struct Proposal.ProposalDetail memory,enum Ballot.VoteType)"
                      }
                    },
                    "id": 19731,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3770:63:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19732,
                  "nodeType": "ExpressionStatement",
                  "src": "3770:63:105"
                }
              ]
            },
            "documentation": {
              "id": 19684,
              "nodeType": "StructuredDocumentation",
              "src": "3071:197:105",
              "text": " @dev Proposes and casts vote for a proposal on the current network.\n Requirements:\n - The method caller is governor.\n - The proposal is for the current network."
            },
            "functionSelector": "663ac011",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 19704,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19703,
                  "name": "onlyGovernor",
                  "nameLocations": [
                    "3520:12:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 19537,
                  "src": "3520:12:105"
                },
                "nodeType": "ModifierInvocation",
                "src": "3520:12:105"
              }
            ],
            "name": "proposeProposalForCurrentNetwork",
            "nameLocation": "3280:32:105",
            "parameters": {
              "id": 19702,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19686,
                  "mutability": "mutable",
                  "name": "_expiryTimestamp",
                  "nameLocation": "3326:16:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19734,
                  "src": "3318:24:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19685,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3318:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19689,
                  "mutability": "mutable",
                  "name": "_targets",
                  "nameLocation": "3367:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19734,
                  "src": "3348:27:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19687,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3348:7:105",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 19688,
                    "nodeType": "ArrayTypeName",
                    "src": "3348:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19692,
                  "mutability": "mutable",
                  "name": "_values",
                  "nameLocation": "3400:7:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19734,
                  "src": "3381:26:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19690,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3381:7:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 19691,
                    "nodeType": "ArrayTypeName",
                    "src": "3381:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19695,
                  "mutability": "mutable",
                  "name": "_calldatas",
                  "nameLocation": "3430:10:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19734,
                  "src": "3413:27:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19693,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "3413:5:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 19694,
                    "nodeType": "ArrayTypeName",
                    "src": "3413:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19698,
                  "mutability": "mutable",
                  "name": "_gasAmounts",
                  "nameLocation": "3465:11:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19734,
                  "src": "3446:30:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19696,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3446:7:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 19697,
                    "nodeType": "ArrayTypeName",
                    "src": "3446:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19701,
                  "mutability": "mutable",
                  "name": "_support",
                  "nameLocation": "3498:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19734,
                  "src": "3482:24:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_VoteType_$10898",
                    "typeString": "enum Ballot.VoteType"
                  },
                  "typeName": {
                    "id": 19700,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19699,
                      "name": "Ballot.VoteType",
                      "nameLocations": [
                        "3482:6:105",
                        "3489:8:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10898,
                      "src": "3482:15:105"
                    },
                    "referencedDeclaration": 10898,
                    "src": "3482:15:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_VoteType_$10898",
                      "typeString": "enum Ballot.VoteType"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3312:198:105"
            },
            "returnParameters": {
              "id": 19705,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3533:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19754,
            "nodeType": "FunctionDefinition",
            "src": "3981:225:105",
            "nodes": [],
            "body": {
              "id": 19753,
              "nodeType": "Block",
              "src": "4128:78:105",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 19747,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4169:3:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 19748,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4173:6:105",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4169:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19749,
                        "name": "_proposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19738,
                        "src": "4181:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProposalDetail_$11652_calldata_ptr",
                          "typeString": "struct Proposal.ProposalDetail calldata"
                        }
                      },
                      {
                        "id": 19750,
                        "name": "_support",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19741,
                        "src": "4192:8:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_VoteType_$10898",
                          "typeString": "enum Ballot.VoteType"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_struct$_ProposalDetail_$11652_calldata_ptr",
                          "typeString": "struct Proposal.ProposalDetail calldata"
                        },
                        {
                          "typeIdentifier": "t_enum$_VoteType_$10898",
                          "typeString": "enum Ballot.VoteType"
                        }
                      ],
                      "id": 19746,
                      "name": "_castProposalVoteForCurrentNetwork",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5708,
                      "src": "4134:34:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_ProposalDetail_$11652_memory_ptr_$_t_enum$_VoteType_$10898_$returns$__$",
                        "typeString": "function (address,struct Proposal.ProposalDetail memory,enum Ballot.VoteType)"
                      }
                    },
                    "id": 19751,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4134:67:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19752,
                  "nodeType": "ExpressionStatement",
                  "src": "4134:67:105"
                }
              ]
            },
            "documentation": {
              "id": 19735,
              "nodeType": "StructuredDocumentation",
              "src": "3842:136:105",
              "text": " @dev Casts vote for a proposal on the current network.\n Requirements:\n - The method caller is governor."
            },
            "functionSelector": "a8a0e32c",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 19744,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19743,
                  "name": "onlyGovernor",
                  "nameLocations": [
                    "4115:12:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 19537,
                  "src": "4115:12:105"
                },
                "nodeType": "ModifierInvocation",
                "src": "4115:12:105"
              }
            ],
            "name": "castProposalVoteForCurrentNetwork",
            "nameLocation": "3990:33:105",
            "parameters": {
              "id": 19742,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19738,
                  "mutability": "mutable",
                  "name": "_proposal",
                  "nameLocation": "4062:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19754,
                  "src": "4029:42:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ProposalDetail_$11652_calldata_ptr",
                    "typeString": "struct Proposal.ProposalDetail"
                  },
                  "typeName": {
                    "id": 19737,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19736,
                      "name": "Proposal.ProposalDetail",
                      "nameLocations": [
                        "4029:8:105",
                        "4038:14:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 11652,
                      "src": "4029:23:105"
                    },
                    "referencedDeclaration": 11652,
                    "src": "4029:23:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProposalDetail_$11652_storage_ptr",
                      "typeString": "struct Proposal.ProposalDetail"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19741,
                  "mutability": "mutable",
                  "name": "_support",
                  "nameLocation": "4093:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19754,
                  "src": "4077:24:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_VoteType_$10898",
                    "typeString": "enum Ballot.VoteType"
                  },
                  "typeName": {
                    "id": 19740,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19739,
                      "name": "Ballot.VoteType",
                      "nameLocations": [
                        "4077:6:105",
                        "4084:8:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10898,
                      "src": "4077:15:105"
                    },
                    "referencedDeclaration": 10898,
                    "src": "4077:15:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_VoteType_$10898",
                      "typeString": "enum Ballot.VoteType"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4023:82:105"
            },
            "returnParameters": {
              "id": 19745,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4128:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19777,
            "nodeType": "FunctionDefinition",
            "src": "4284:264:105",
            "nodes": [],
            "body": {
              "id": 19776,
              "nodeType": "Block",
              "src": "4459:89:105",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19770,
                        "name": "_proposal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19758,
                        "src": "4491:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProposalDetail_$11652_calldata_ptr",
                          "typeString": "struct Proposal.ProposalDetail calldata"
                        }
                      },
                      {
                        "id": 19771,
                        "name": "_supports",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19762,
                        "src": "4502:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_enum$_VoteType_$10898_$dyn_calldata_ptr",
                          "typeString": "enum Ballot.VoteType[] calldata"
                        }
                      },
                      {
                        "id": 19772,
                        "name": "_signatures",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19766,
                        "src": "4513:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Signature_$8732_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct SignatureConsumer.Signature calldata[] calldata"
                        }
                      },
                      {
                        "id": 19773,
                        "name": "DOMAIN_SEPARATOR",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 254,
                        "src": "4526:16:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_ProposalDetail_$11652_calldata_ptr",
                          "typeString": "struct Proposal.ProposalDetail calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_enum$_VoteType_$10898_$dyn_calldata_ptr",
                          "typeString": "enum Ballot.VoteType[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_Signature_$8732_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct SignatureConsumer.Signature calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 19769,
                      "name": "_castProposalBySignatures",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5621,
                      "src": "4465:25:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ProposalDetail_$11652_calldata_ptr_$_t_array$_t_enum$_VoteType_$10898_$dyn_calldata_ptr_$_t_array$_t_struct$_Signature_$8732_calldata_ptr_$dyn_calldata_ptr_$_t_bytes32_$returns$__$",
                        "typeString": "function (struct Proposal.ProposalDetail calldata,enum Ballot.VoteType[] calldata,struct SignatureConsumer.Signature calldata[] calldata,bytes32)"
                      }
                    },
                    "id": 19774,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4465:78:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19775,
                  "nodeType": "ExpressionStatement",
                  "src": "4465:78:105"
                }
              ]
            },
            "documentation": {
              "id": 19755,
              "nodeType": "StructuredDocumentation",
              "src": "4210:71:105",
              "text": " @dev See `GovernanceProposal-_castProposalBySignatures`."
            },
            "functionSelector": "0b881830",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "castProposalBySignatures",
            "nameLocation": "4293:24:105",
            "parameters": {
              "id": 19767,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19758,
                  "mutability": "mutable",
                  "name": "_proposal",
                  "nameLocation": "4356:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19777,
                  "src": "4323:42:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ProposalDetail_$11652_calldata_ptr",
                    "typeString": "struct Proposal.ProposalDetail"
                  },
                  "typeName": {
                    "id": 19757,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19756,
                      "name": "Proposal.ProposalDetail",
                      "nameLocations": [
                        "4323:8:105",
                        "4332:14:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 11652,
                      "src": "4323:23:105"
                    },
                    "referencedDeclaration": 11652,
                    "src": "4323:23:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProposalDetail_$11652_storage_ptr",
                      "typeString": "struct Proposal.ProposalDetail"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19762,
                  "mutability": "mutable",
                  "name": "_supports",
                  "nameLocation": "4398:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19777,
                  "src": "4371:36:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_enum$_VoteType_$10898_$dyn_calldata_ptr",
                    "typeString": "enum Ballot.VoteType[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19760,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 19759,
                        "name": "Ballot.VoteType",
                        "nameLocations": [
                          "4371:6:105",
                          "4378:8:105"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 10898,
                        "src": "4371:15:105"
                      },
                      "referencedDeclaration": 10898,
                      "src": "4371:15:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VoteType_$10898",
                        "typeString": "enum Ballot.VoteType"
                      }
                    },
                    "id": 19761,
                    "nodeType": "ArrayTypeName",
                    "src": "4371:17:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_enum$_VoteType_$10898_$dyn_storage_ptr",
                      "typeString": "enum Ballot.VoteType[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19766,
                  "mutability": "mutable",
                  "name": "_signatures",
                  "nameLocation": "4434:11:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19777,
                  "src": "4413:32:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Signature_$8732_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct SignatureConsumer.Signature[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 19764,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 19763,
                        "name": "Signature",
                        "nameLocations": [
                          "4413:9:105"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 8732,
                        "src": "4413:9:105"
                      },
                      "referencedDeclaration": 8732,
                      "src": "4413:9:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Signature_$8732_storage_ptr",
                        "typeString": "struct SignatureConsumer.Signature"
                      }
                    },
                    "id": 19765,
                    "nodeType": "ArrayTypeName",
                    "src": "4413:11:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Signature_$8732_storage_$dyn_storage_ptr",
                      "typeString": "struct SignatureConsumer.Signature[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4317:132:105"
            },
            "returnParameters": {
              "id": 19768,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4459:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19807,
            "nodeType": "FunctionDefinition",
            "src": "4731:226:105",
            "nodes": [],
            "body": {
              "id": 19806,
              "nodeType": "Block",
              "src": "4797:160:105",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    19787
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19787,
                      "mutability": "mutable",
                      "name": "_vote",
                      "nameLocation": "4824:5:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19806,
                      "src": "4803:26:105",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ProposalVote_$3658_storage_ptr",
                        "typeString": "struct CoreGovernance.ProposalVote"
                      },
                      "typeName": {
                        "id": 19786,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 19785,
                          "name": "ProposalVote",
                          "nameLocations": [
                            "4803:12:105"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 3658,
                          "src": "4803:12:105"
                        },
                        "referencedDeclaration": 3658,
                        "src": "4803:12:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProposalVote_$3658_storage_ptr",
                          "typeString": "struct CoreGovernance.ProposalVote"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19793,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 19788,
                        "name": "vote",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3728,
                        "src": "4832:4:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_ProposalVote_$3658_storage_$_$",
                          "typeString": "mapping(uint256 => mapping(uint256 => struct CoreGovernance.ProposalVote storage ref))"
                        }
                      },
                      "id": 19790,
                      "indexExpression": {
                        "id": 19789,
                        "name": "_chainId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19780,
                        "src": "4837:8:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4832:14:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ProposalVote_$3658_storage_$",
                        "typeString": "mapping(uint256 => struct CoreGovernance.ProposalVote storage ref)"
                      }
                    },
                    "id": 19792,
                    "indexExpression": {
                      "id": 19791,
                      "name": "_round",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19782,
                      "src": "4847:6:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4832:22:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ProposalVote_$3658_storage",
                      "typeString": "struct CoreGovernance.ProposalVote storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4803:51:105"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 19797,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 19794,
                        "name": "_vote",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19787,
                        "src": "4864:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProposalVote_$3658_storage_ptr",
                          "typeString": "struct CoreGovernance.ProposalVote storage pointer"
                        }
                      },
                      "id": 19795,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4870:4:105",
                      "memberName": "hash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3636,
                      "src": "4864:10:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 19796,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4878:1:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "4864:15:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19801,
                  "nodeType": "IfStatement",
                  "src": "4860:50:105",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19798,
                        "name": "ErrQueryForEmptyVote",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37989,
                        "src": "4888:20:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19799,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4888:22:105",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19800,
                    "nodeType": "RevertStatement",
                    "src": "4881:29:105"
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19803,
                        "name": "_vote",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19787,
                        "src": "4946:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProposalVote_$3658_storage_ptr",
                          "typeString": "struct CoreGovernance.ProposalVote storage pointer"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_ProposalVote_$3658_storage_ptr",
                          "typeString": "struct CoreGovernance.ProposalVote storage pointer"
                        }
                      ],
                      "id": 19802,
                      "name": "_tryDeleteExpiredVotingRound",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4344,
                      "src": "4917:28:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ProposalVote_$3658_storage_ptr_$returns$_t_bool_$",
                        "typeString": "function (struct CoreGovernance.ProposalVote storage pointer) returns (bool)"
                      }
                    },
                    "id": 19804,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4917:35:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19805,
                  "nodeType": "ExpressionStatement",
                  "src": "4917:35:105"
                }
              ]
            },
            "documentation": {
              "id": 19778,
              "nodeType": "StructuredDocumentation",
              "src": "4552:176:105",
              "text": " @dev Deletes the expired proposal by its chainId and nonce, without creating a new proposal.\n Requirements:\n - The proposal is already created."
            },
            "functionSelector": "9a7d3382",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteExpired",
            "nameLocation": "4740:13:105",
            "parameters": {
              "id": 19783,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19780,
                  "mutability": "mutable",
                  "name": "_chainId",
                  "nameLocation": "4762:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19807,
                  "src": "4754:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19779,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4754:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19782,
                  "mutability": "mutable",
                  "name": "_round",
                  "nameLocation": "4780:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19807,
                  "src": "4772:14:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19781,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4772:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4753:34:105"
            },
            "returnParameters": {
              "id": 19784,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4797:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19864,
            "nodeType": "FunctionDefinition",
            "src": "5012:568:105",
            "nodes": [],
            "body": {
              "id": 19863,
              "nodeType": "Block",
              "src": "5208:372:105",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    19824
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19824,
                      "mutability": "mutable",
                      "name": "ballotHash",
                      "nameLocation": "5222:10:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19863,
                      "src": "5214:18:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 19823,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5214:7:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19832,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 19827,
                        "name": "validatorId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19810,
                        "src": "5260:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19828,
                        "name": "recipientAfterUnlockedFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19812,
                        "src": "5273:26:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19829,
                        "name": "requestedAt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19814,
                        "src": "5301:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19830,
                        "name": "expiredAt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19816,
                        "src": "5314:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 19825,
                        "name": "EmergencyExitBallot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10937,
                        "src": "5235:19:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_EmergencyExitBallot_$10937_$",
                          "typeString": "type(library EmergencyExitBallot)"
                        }
                      },
                      "id": 19826,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5255:4:105",
                      "memberName": "hash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10936,
                      "src": "5235:24:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (address,address,uint256,uint256) pure returns (bytes32)"
                      }
                    },
                    "id": 19831,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5235:89:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5214:110:105"
                },
                {
                  "assignments": [
                    19837
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19837,
                      "mutability": "mutable",
                      "name": "_v",
                      "nameLocation": "5362:2:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19863,
                      "src": "5330:34:105",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                        "typeString": "struct IsolatedGovernance.Vote"
                      },
                      "typeName": {
                        "id": 19836,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 19835,
                          "name": "IsolatedGovernance.Vote",
                          "nameLocations": [
                            "5330:18:105",
                            "5349:4:105"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 11289,
                          "src": "5330:23:105"
                        },
                        "referencedDeclaration": 11289,
                        "src": "5330:23:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                          "typeString": "struct IsolatedGovernance.Vote"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19841,
                  "initialValue": {
                    "baseExpression": {
                      "id": 19838,
                      "name": "_emergencyExitPoll",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19530,
                      "src": "5367:18:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Vote_$11289_storage_$",
                        "typeString": "mapping(bytes32 => struct IsolatedGovernance.Vote storage ref)"
                      }
                    },
                    "id": 19840,
                    "indexExpression": {
                      "id": 19839,
                      "name": "ballotHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19824,
                      "src": "5386:10:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5367:30:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Vote_$11289_storage",
                      "typeString": "struct IsolatedGovernance.Vote storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5330:67:105"
                },
                {
                  "expression": {
                    "id": 19847,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19842,
                        "name": "_v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19837,
                        "src": "5403:2:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                          "typeString": "struct IsolatedGovernance.Vote storage pointer"
                        }
                      },
                      "id": 19844,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "5406:9:105",
                      "memberName": "createdAt",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11284,
                      "src": "5403:12:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 19845,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "5418:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 19846,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5424:9:105",
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "5418:15:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5403:30:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19848,
                  "nodeType": "ExpressionStatement",
                  "src": "5403:30:105"
                },
                {
                  "expression": {
                    "id": 19853,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19849,
                        "name": "_v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19837,
                        "src": "5439:2:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                          "typeString": "struct IsolatedGovernance.Vote storage pointer"
                        }
                      },
                      "id": 19851,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberLocation": "5442:9:105",
                      "memberName": "expiredAt",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11281,
                      "src": "5439:12:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 19852,
                      "name": "expiredAt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19816,
                      "src": "5454:9:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5439:24:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 19854,
                  "nodeType": "ExpressionStatement",
                  "src": "5439:24:105"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 19856,
                        "name": "ballotHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19824,
                        "src": "5499:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 19857,
                        "name": "validatorId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19810,
                        "src": "5511:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19858,
                        "name": "recipientAfterUnlockedFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19812,
                        "src": "5524:26:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19859,
                        "name": "requestedAt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19814,
                        "src": "5552:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19860,
                        "name": "expiredAt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19816,
                        "src": "5565:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 19855,
                      "name": "EmergencyExitPollCreated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7683,
                      "src": "5474:24:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (bytes32,address,address,uint256,uint256)"
                      }
                    },
                    "id": 19861,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5474:101:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19862,
                  "nodeType": "EmitStatement",
                  "src": "5469:106:105"
                }
              ]
            },
            "baseFunctions": [
              7712
            ],
            "documentation": {
              "id": 19808,
              "nodeType": "StructuredDocumentation",
              "src": "4961:48:105",
              "text": " @inheritdoc IRoninGovernanceAdmin"
            },
            "functionSelector": "a2fae570",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 19819,
                      "name": "ContractType",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38020,
                      "src": "5184:12:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_ContractType_$38020_$",
                        "typeString": "type(enum ContractType)"
                      }
                    },
                    "id": 19820,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "5197:9:105",
                    "memberName": "VALIDATOR",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 38012,
                    "src": "5184:22:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ContractType_$38020",
                      "typeString": "enum ContractType"
                    }
                  }
                ],
                "id": 19821,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19818,
                  "name": "onlyContract",
                  "nameLocations": [
                    "5171:12:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3432,
                  "src": "5171:12:105"
                },
                "nodeType": "ModifierInvocation",
                "src": "5171:36:105"
              }
            ],
            "name": "createEmergencyExitPoll",
            "nameLocation": "5021:23:105",
            "parameters": {
              "id": 19817,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19810,
                  "mutability": "mutable",
                  "name": "validatorId",
                  "nameLocation": "5058:11:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19864,
                  "src": "5050:19:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19809,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5050:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19812,
                  "mutability": "mutable",
                  "name": "recipientAfterUnlockedFund",
                  "nameLocation": "5083:26:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19864,
                  "src": "5075:34:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19811,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5075:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19814,
                  "mutability": "mutable",
                  "name": "requestedAt",
                  "nameLocation": "5123:11:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19864,
                  "src": "5115:19:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19813,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5115:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19816,
                  "mutability": "mutable",
                  "name": "expiredAt",
                  "nameLocation": "5148:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19864,
                  "src": "5140:17:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19815,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5140:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5044:117:105"
            },
            "returnParameters": {
              "id": 19822,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5208:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 19996,
            "nodeType": "FunctionDefinition",
            "src": "5823:1151:105",
            "nodes": [],
            "body": {
              "id": 19995,
              "nodeType": "Block",
              "src": "6011:963:105",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    19881
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19881,
                      "mutability": "mutable",
                      "name": "_voter",
                      "nameLocation": "6025:6:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19995,
                      "src": "6017:14:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 19880,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6017:7:105",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19884,
                  "initialValue": {
                    "expression": {
                      "id": 19882,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "6034:3:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 19883,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "6038:6:105",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "6034:10:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6017:27:105"
                },
                {
                  "assignments": [
                    19886
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19886,
                      "mutability": "mutable",
                      "name": "_hash",
                      "nameLocation": "6058:5:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19995,
                      "src": "6050:13:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 19885,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "6050:7:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19894,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 19889,
                        "name": "validatorId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19869,
                        "src": "6091:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19890,
                        "name": "recipientAfterUnlockedFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19871,
                        "src": "6104:26:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19891,
                        "name": "requestedAt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19873,
                        "src": "6132:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19892,
                        "name": "expiredAt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19875,
                        "src": "6145:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 19887,
                        "name": "EmergencyExitBallot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10937,
                        "src": "6066:19:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_EmergencyExitBallot_$10937_$",
                          "typeString": "type(library EmergencyExitBallot)"
                        }
                      },
                      "id": 19888,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6086:4:105",
                      "memberName": "hash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10936,
                      "src": "6066:24:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (address,address,uint256,uint256) pure returns (bytes32)"
                      }
                    },
                    "id": 19893,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6066:89:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6050:105:105"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 19897,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 19895,
                      "name": "voteHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19867,
                      "src": "6165:8:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 19896,
                      "name": "_hash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19886,
                      "src": "6177:5:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "6165:17:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19901,
                  "nodeType": "IfStatement",
                  "src": "6161:50:105",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19898,
                        "name": "ErrInvalidVoteHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37986,
                        "src": "6191:18:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19899,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6191:20:105",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19900,
                    "nodeType": "RevertStatement",
                    "src": "6184:27:105"
                  }
                },
                {
                  "assignments": [
                    19906
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19906,
                      "mutability": "mutable",
                      "name": "_v",
                      "nameLocation": "6250:2:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19995,
                      "src": "6218:34:105",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                        "typeString": "struct IsolatedGovernance.Vote"
                      },
                      "typeName": {
                        "id": 19905,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 19904,
                          "name": "IsolatedGovernance.Vote",
                          "nameLocations": [
                            "6218:18:105",
                            "6237:4:105"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 11289,
                          "src": "6218:23:105"
                        },
                        "referencedDeclaration": 11289,
                        "src": "6218:23:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                          "typeString": "struct IsolatedGovernance.Vote"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19910,
                  "initialValue": {
                    "baseExpression": {
                      "id": 19907,
                      "name": "_emergencyExitPoll",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19530,
                      "src": "6255:18:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Vote_$11289_storage_$",
                        "typeString": "mapping(bytes32 => struct IsolatedGovernance.Vote storage ref)"
                      }
                    },
                    "id": 19909,
                    "indexExpression": {
                      "id": 19908,
                      "name": "_hash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19886,
                      "src": "6274:5:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6255:25:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Vote_$11289_storage",
                      "typeString": "struct IsolatedGovernance.Vote storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6218:62:105"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 19914,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 19911,
                        "name": "_v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19906,
                        "src": "6290:2:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                          "typeString": "struct IsolatedGovernance.Vote storage pointer"
                        }
                      },
                      "id": 19912,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6293:9:105",
                      "memberName": "createdAt",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11284,
                      "src": "6290:12:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 19913,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6306:1:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "6290:17:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19918,
                  "nodeType": "IfStatement",
                  "src": "6286:58:105",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19915,
                        "name": "ErrQueryForNonExistentVote",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37995,
                        "src": "6316:26:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19916,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6316:28:105",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19917,
                    "nodeType": "RevertStatement",
                    "src": "6309:35:105"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_VoteStatus_$8741",
                      "typeString": "enum VoteStatusConsumer.VoteStatus"
                    },
                    "id": 19923,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 19919,
                        "name": "_v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19906,
                        "src": "6354:2:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                          "typeString": "struct IsolatedGovernance.Vote storage pointer"
                        }
                      },
                      "id": 19920,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6357:6:105",
                      "memberName": "status",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11271,
                      "src": "6354:9:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VoteStatus_$8741",
                        "typeString": "enum VoteStatusConsumer.VoteStatus"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 19921,
                        "name": "VoteStatus",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8741,
                        "src": "6367:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_VoteStatus_$8741_$",
                          "typeString": "type(enum VoteStatusConsumer.VoteStatus)"
                        }
                      },
                      "id": 19922,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "6378:7:105",
                      "memberName": "Expired",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8740,
                      "src": "6367:18:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VoteStatus_$8741",
                        "typeString": "enum VoteStatusConsumer.VoteStatus"
                      }
                    },
                    "src": "6354:31:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 19927,
                  "nodeType": "IfStatement",
                  "src": "6350:68:105",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 19924,
                        "name": "ErrQueryForExpiredVote",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37992,
                        "src": "6394:22:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 19925,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6394:24:105",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 19926,
                    "nodeType": "RevertStatement",
                    "src": "6387:31:105"
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 19931,
                        "name": "_voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19881,
                        "src": "6437:6:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 19932,
                        "name": "_hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19886,
                        "src": "6445:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 19928,
                        "name": "_v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19906,
                        "src": "6425:2:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                          "typeString": "struct IsolatedGovernance.Vote storage pointer"
                        }
                      },
                      "id": 19930,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6428:8:105",
                      "memberName": "castVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11346,
                      "src": "6425:11:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Vote_$11289_storage_ptr_$_t_address_$_t_bytes32_$returns$__$attached_to$_t_struct$_Vote_$11289_storage_ptr_$",
                        "typeString": "function (struct IsolatedGovernance.Vote storage pointer,address,bytes32)"
                      }
                    },
                    "id": 19933,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6425:26:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19934,
                  "nodeType": "ExpressionStatement",
                  "src": "6425:26:105"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 19936,
                        "name": "_hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19886,
                        "src": "6485:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 19937,
                        "name": "_voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19881,
                        "src": "6492:6:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 19935,
                      "name": "EmergencyExitPollVoted",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7700,
                      "src": "6462:22:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 19938,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6462:37:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19939,
                  "nodeType": "EmitStatement",
                  "src": "6457:42:105"
                },
                {
                  "assignments": [
                    19944
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19944,
                      "mutability": "mutable",
                      "name": "_voters",
                      "nameLocation": "6523:7:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19995,
                      "src": "6506:24:105",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 19942,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6506:7:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 19943,
                        "nodeType": "ArrayTypeName",
                        "src": "6506:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19949,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 19947,
                        "name": "_hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19886,
                        "src": "6549:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 19945,
                        "name": "_v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19906,
                        "src": "6533:2:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                          "typeString": "struct IsolatedGovernance.Vote storage pointer"
                        }
                      },
                      "id": 19946,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6536:12:105",
                      "memberName": "filterByHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11454,
                      "src": "6533:15:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_Vote_$11289_storage_ptr_$_t_bytes32_$returns$_t_array$_t_address_$dyn_memory_ptr_$attached_to$_t_struct$_Vote_$11289_storage_ptr_$",
                        "typeString": "function (struct IsolatedGovernance.Vote storage pointer,bytes32) view returns (address[] memory)"
                      }
                    },
                    "id": 19948,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6533:22:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                      "typeString": "address[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6506:49:105"
                },
                {
                  "assignments": [
                    19952
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 19952,
                      "mutability": "mutable",
                      "name": "_stt",
                      "nameLocation": "6572:4:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 19995,
                      "src": "6561:15:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VoteStatus_$8741",
                        "typeString": "enum VoteStatusConsumer.VoteStatus"
                      },
                      "typeName": {
                        "id": 19951,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 19950,
                          "name": "VoteStatus",
                          "nameLocations": [
                            "6561:10:105"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 8741,
                          "src": "6561:10:105"
                        },
                        "referencedDeclaration": 8741,
                        "src": "6561:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_VoteStatus_$8741",
                          "typeString": "enum VoteStatusConsumer.VoteStatus"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 19962,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 19955,
                          "name": "_getMinimumVoteWeight",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            482
                          ],
                          "referencedDeclaration": 482,
                          "src": "6597:21:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 19956,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6597:23:105",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 19958,
                            "name": "_voters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19944,
                            "src": "6641:7:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          ],
                          "id": 19957,
                          "name": "_sumGovernorWeight",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20098,
                          "src": "6622:18:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_array$_t_address_$dyn_memory_ptr_$returns$_t_uint256_$",
                            "typeString": "function (address[] memory) view returns (uint256)"
                          }
                        },
                        "id": 19959,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6622:27:105",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 19960,
                        "name": "_hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19886,
                        "src": "6651:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 19953,
                        "name": "_v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19906,
                        "src": "6579:2:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                          "typeString": "struct IsolatedGovernance.Vote storage pointer"
                        }
                      },
                      "id": 19954,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "6582:14:105",
                      "memberName": "syncVoteStatus",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11392,
                      "src": "6579:17:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Vote_$11289_storage_ptr_$_t_uint256_$_t_uint256_$_t_bytes32_$returns$_t_enum$_VoteStatus_$8741_$attached_to$_t_struct$_Vote_$11289_storage_ptr_$",
                        "typeString": "function (struct IsolatedGovernance.Vote storage pointer,uint256,uint256,bytes32) returns (enum VoteStatusConsumer.VoteStatus)"
                      }
                    },
                    "id": 19961,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6579:78:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_VoteStatus_$8741",
                      "typeString": "enum VoteStatusConsumer.VoteStatus"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6561:96:105"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_VoteStatus_$8741",
                      "typeString": "enum VoteStatusConsumer.VoteStatus"
                    },
                    "id": 19966,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 19963,
                      "name": "_stt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19952,
                      "src": "6667:4:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VoteStatus_$8741",
                        "typeString": "enum VoteStatusConsumer.VoteStatus"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 19964,
                        "name": "VoteStatus",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8741,
                        "src": "6675:10:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_VoteStatus_$8741_$",
                          "typeString": "type(enum VoteStatusConsumer.VoteStatus)"
                        }
                      },
                      "id": 19965,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "6686:8:105",
                      "memberName": "Approved",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8737,
                      "src": "6675:19:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VoteStatus_$8741",
                        "typeString": "enum VoteStatusConsumer.VoteStatus"
                      }
                    },
                    "src": "6667:27:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_VoteStatus_$8741",
                        "typeString": "enum VoteStatusConsumer.VoteStatus"
                      },
                      "id": 19987,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 19984,
                        "name": "_stt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19952,
                        "src": "6891:4:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_VoteStatus_$8741",
                          "typeString": "enum VoteStatusConsumer.VoteStatus"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 19985,
                          "name": "VoteStatus",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8741,
                          "src": "6899:10:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_VoteStatus_$8741_$",
                            "typeString": "type(enum VoteStatusConsumer.VoteStatus)"
                          }
                        },
                        "id": 19986,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "6910:7:105",
                        "memberName": "Expired",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8740,
                        "src": "6899:18:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_VoteStatus_$8741",
                          "typeString": "enum VoteStatusConsumer.VoteStatus"
                        }
                      },
                      "src": "6891:26:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 19993,
                    "nodeType": "IfStatement",
                    "src": "6887:83:105",
                    "trueBody": {
                      "id": 19992,
                      "nodeType": "Block",
                      "src": "6919:51:105",
                      "statements": [
                        {
                          "eventCall": {
                            "arguments": [
                              {
                                "id": 19989,
                                "name": "_hash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19886,
                                "src": "6957:5:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "id": 19988,
                              "name": "EmergencyExitPollExpired",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7693,
                              "src": "6932:24:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$returns$__$",
                                "typeString": "function (bytes32)"
                              }
                            },
                            "id": 19990,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6932:31:105",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 19991,
                          "nodeType": "EmitStatement",
                          "src": "6927:36:105"
                        }
                      ]
                    }
                  },
                  "id": 19994,
                  "nodeType": "IfStatement",
                  "src": "6663:307:105",
                  "trueBody": {
                    "id": 19983,
                    "nodeType": "Block",
                    "src": "6696:185:105",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 19968,
                              "name": "validatorId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19869,
                              "src": "6750:11:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 19969,
                              "name": "recipientAfterUnlockedFund",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19871,
                              "src": "6763:26:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 19967,
                            "name": "_execReleaseLockedFundForEmergencyExitRequest",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 20141,
                            "src": "6704:45:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 19970,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6704:86:105",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 19971,
                        "nodeType": "ExpressionStatement",
                        "src": "6704:86:105"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 19973,
                              "name": "_hash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19886,
                              "src": "6829:5:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 19972,
                            "name": "EmergencyExitPollApproved",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7688,
                            "src": "6803:25:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32)"
                            }
                          },
                          "id": 19974,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6803:32:105",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 19975,
                        "nodeType": "EmitStatement",
                        "src": "6798:37:105"
                      },
                      {
                        "expression": {
                          "id": 19981,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 19976,
                              "name": "_v",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19906,
                              "src": "6843:2:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Vote_$11289_storage_ptr",
                                "typeString": "struct IsolatedGovernance.Vote storage pointer"
                              }
                            },
                            "id": 19978,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "6846:6:105",
                            "memberName": "status",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 11271,
                            "src": "6843:9:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_VoteStatus_$8741",
                              "typeString": "enum VoteStatusConsumer.VoteStatus"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 19979,
                              "name": "VoteStatus",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8741,
                              "src": "6855:10:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_VoteStatus_$8741_$",
                                "typeString": "type(enum VoteStatusConsumer.VoteStatus)"
                              }
                            },
                            "id": 19980,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "6866:8:105",
                            "memberName": "Executed",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8738,
                            "src": "6855:19:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_VoteStatus_$8741",
                              "typeString": "enum VoteStatusConsumer.VoteStatus"
                            }
                          },
                          "src": "6843:31:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_VoteStatus_$8741",
                            "typeString": "enum VoteStatusConsumer.VoteStatus"
                          }
                        },
                        "id": 19982,
                        "nodeType": "ExpressionStatement",
                        "src": "6843:31:105"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 19865,
              "nodeType": "StructuredDocumentation",
              "src": "5584:236:105",
              "text": " @dev Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester.\n Requirements:\n - The voter is governor.\n - The voting is existent.\n - The voting is not expired yet."
            },
            "functionSelector": "9e0dc0b3",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 19878,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 19877,
                  "name": "onlyGovernor",
                  "nameLocations": [
                    "5998:12:105"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 19537,
                  "src": "5998:12:105"
                },
                "nodeType": "ModifierInvocation",
                "src": "5998:12:105"
              }
            ],
            "name": "voteEmergencyExit",
            "nameLocation": "5832:17:105",
            "parameters": {
              "id": 19876,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19867,
                  "mutability": "mutable",
                  "name": "voteHash",
                  "nameLocation": "5863:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19996,
                  "src": "5855:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 19866,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5855:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19869,
                  "mutability": "mutable",
                  "name": "validatorId",
                  "nameLocation": "5885:11:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19996,
                  "src": "5877:19:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19868,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5877:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19871,
                  "mutability": "mutable",
                  "name": "recipientAfterUnlockedFund",
                  "nameLocation": "5910:26:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19996,
                  "src": "5902:34:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19870,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5902:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19873,
                  "mutability": "mutable",
                  "name": "requestedAt",
                  "nameLocation": "5950:11:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19996,
                  "src": "5942:19:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19872,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5942:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19875,
                  "mutability": "mutable",
                  "name": "expiredAt",
                  "nameLocation": "5975:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 19996,
                  "src": "5967:17:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 19874,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5967:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5849:139:105"
            },
            "returnParameters": {
              "id": 19879,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6011:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 20047,
            "nodeType": "FunctionDefinition",
            "src": "7029:571:105",
            "nodes": [],
            "body": {
              "id": 20046,
              "nodeType": "Block",
              "src": "7117:483:105",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    20006
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 20006,
                      "mutability": "mutable",
                      "name": "_selector",
                      "nameLocation": "7130:9:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 20046,
                      "src": "7123:16:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "typeName": {
                        "id": 20005,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "7123:6:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 20010,
                  "initialValue": {
                    "expression": {
                      "expression": {
                        "id": 20007,
                        "name": "IRoninTrustedOrganization",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7933,
                        "src": "7142:25:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IRoninTrustedOrganization_$7933_$",
                          "typeString": "type(contract IRoninTrustedOrganization)"
                        }
                      },
                      "id": 20008,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "7168:17:105",
                      "memberName": "getGovernorWeight",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7849,
                      "src": "7142:43:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_declaration_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function IRoninTrustedOrganization.getGovernorWeight(address) view returns (uint256)"
                      }
                    },
                    "id": 20009,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "7186:8:105",
                    "memberName": "selector",
                    "nodeType": "MemberAccess",
                    "src": "7142:52:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7123:71:105"
                },
                {
                  "assignments": [
                    20012,
                    20014
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 20012,
                      "mutability": "mutable",
                      "name": "_success",
                      "nameLocation": "7206:8:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 20046,
                      "src": "7201:13:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 20011,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7201:4:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 20014,
                      "mutability": "mutable",
                      "name": "_returndata",
                      "nameLocation": "7229:11:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 20046,
                      "src": "7216:24:105",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 20013,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "7216:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 20030,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30783462623532373461",
                            "id": 20022,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7419:10:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1270163274_by_1",
                              "typeString": "int_const 1270163274"
                            },
                            "value": "0x4bb5274a"
                          },
                          {
                            "arguments": [
                              {
                                "id": 20025,
                                "name": "_selector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 20006,
                                "src": "7462:9:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              {
                                "id": 20026,
                                "name": "_governor",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19999,
                                "src": "7473:9:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 20023,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "7439:3:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 20024,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "7443:18:105",
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "7439:22:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 20027,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7439:44:105",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1270163274_by_1",
                              "typeString": "int_const 1270163274"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 20020,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "7315:3:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 20021,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "7319:18:105",
                          "memberName": "encodeWithSelector",
                          "nodeType": "MemberAccess",
                          "src": "7315:22:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes4) pure returns (bytes memory)"
                          }
                        },
                        "id": 20028,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7315:176:105",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 20016,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38020,
                              "src": "7256:12:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$38020_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 20017,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "7269:26:105",
                            "memberName": "RONIN_TRUSTED_ORGANIZATION",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38014,
                            "src": "7256:39:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$38020",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$38020",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 20015,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "7244:11:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38020_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 20018,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7244:52:105",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 20019,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7297:10:105",
                      "memberName": "staticcall",
                      "nodeType": "MemberAccess",
                      "src": "7244:63:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                      }
                    },
                    "id": 20029,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7244:253:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7200:297:105"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 20034,
                        "name": "_selector",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20006,
                        "src": "7525:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "id": 20035,
                        "name": "_returndata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20014,
                        "src": "7536:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 20031,
                        "name": "_success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20012,
                        "src": "7503:8:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 20033,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7512:12:105",
                      "memberName": "handleRevert",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11062,
                      "src": "7503:21:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes4_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_bool_$",
                        "typeString": "function (bool,bytes4,bytes memory) pure"
                      }
                    },
                    "id": 20036,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7503:45:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 20037,
                  "nodeType": "ExpressionStatement",
                  "src": "7503:45:105"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 20040,
                        "name": "_returndata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20014,
                        "src": "7572:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 20042,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7586:7:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 20041,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "7586:7:105",
                              "typeDescriptions": {}
                            }
                          }
                        ],
                        "id": 20043,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "7585:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint256_$",
                          "typeString": "type(uint256)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_type$_t_uint256_$",
                          "typeString": "type(uint256)"
                        }
                      ],
                      "expression": {
                        "id": 20038,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "7561:3:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 20039,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "7565:6:105",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "7561:10:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 20044,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7561:34:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 20004,
                  "id": 20045,
                  "nodeType": "Return",
                  "src": "7554:41:105"
                }
              ]
            },
            "baseFunctions": [
              5258
            ],
            "documentation": {
              "id": 19997,
              "nodeType": "StructuredDocumentation",
              "src": "6978:48:105",
              "text": " @dev Returns weight of a govenor."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getWeight",
            "nameLocation": "7038:10:105",
            "overrides": {
              "id": 20001,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7090:8:105"
            },
            "parameters": {
              "id": 20000,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19999,
                  "mutability": "mutable",
                  "name": "_governor",
                  "nameLocation": "7057:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 20047,
                  "src": "7049:17:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19998,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7049:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7048:19:105"
            },
            "returnParameters": {
              "id": 20004,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20003,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 20047,
                  "src": "7108:7:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 20002,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7108:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7107:9:105"
            },
            "scope": 20154,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 20098,
            "nodeType": "FunctionDefinition",
            "src": "7683:580:105",
            "nodes": [],
            "body": {
              "id": 20097,
              "nodeType": "Block",
              "src": "7779:484:105",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    20057
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 20057,
                      "mutability": "mutable",
                      "name": "_selector",
                      "nameLocation": "7792:9:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 20097,
                      "src": "7785:16:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "typeName": {
                        "id": 20056,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "7785:6:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 20061,
                  "initialValue": {
                    "expression": {
                      "expression": {
                        "id": 20058,
                        "name": "IRoninTrustedOrganization",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7933,
                        "src": "7804:25:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IRoninTrustedOrganization_$7933_$",
                          "typeString": "type(contract IRoninTrustedOrganization)"
                        }
                      },
                      "id": 20059,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "7830:17:105",
                      "memberName": "sumGovernorWeight",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7899,
                      "src": "7804:43:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_declaration_view$_t_array$_t_address_$dyn_calldata_ptr_$returns$_t_uint256_$",
                        "typeString": "function IRoninTrustedOrganization.sumGovernorWeight(address[] calldata) view returns (uint256)"
                      }
                    },
                    "id": 20060,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "7848:8:105",
                    "memberName": "selector",
                    "nodeType": "MemberAccess",
                    "src": "7804:52:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7785:71:105"
                },
                {
                  "assignments": [
                    20063,
                    20065
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 20063,
                      "mutability": "mutable",
                      "name": "_success",
                      "nameLocation": "7868:8:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 20097,
                      "src": "7863:13:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 20062,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7863:4:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 20065,
                      "mutability": "mutable",
                      "name": "_returndata",
                      "nameLocation": "7891:11:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 20097,
                      "src": "7878:24:105",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 20064,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "7878:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 20081,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30783462623532373461",
                            "id": 20073,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8081:10:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1270163274_by_1",
                              "typeString": "int_const 1270163274"
                            },
                            "value": "0x4bb5274a"
                          },
                          {
                            "arguments": [
                              {
                                "id": 20076,
                                "name": "_selector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 20057,
                                "src": "8124:9:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              {
                                "id": 20077,
                                "name": "governors",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 20051,
                                "src": "8135:9:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                  "typeString": "address[] memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                },
                                {
                                  "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                  "typeString": "address[] memory"
                                }
                              ],
                              "expression": {
                                "id": 20074,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "8101:3:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 20075,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "8105:18:105",
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "8101:22:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 20078,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8101:44:105",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1270163274_by_1",
                              "typeString": "int_const 1270163274"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 20071,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "7977:3:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 20072,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "7981:18:105",
                          "memberName": "encodeWithSelector",
                          "nodeType": "MemberAccess",
                          "src": "7977:22:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes4) pure returns (bytes memory)"
                          }
                        },
                        "id": 20079,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7977:176:105",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 20067,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38020,
                              "src": "7918:12:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$38020_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 20068,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "7931:26:105",
                            "memberName": "RONIN_TRUSTED_ORGANIZATION",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38014,
                            "src": "7918:39:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$38020",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$38020",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 20066,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "7906:11:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38020_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 20069,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7906:52:105",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 20070,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7959:10:105",
                      "memberName": "staticcall",
                      "nodeType": "MemberAccess",
                      "src": "7906:63:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                      }
                    },
                    "id": 20080,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7906:253:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7862:297:105"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 20085,
                        "name": "_selector",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20057,
                        "src": "8188:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "id": 20086,
                        "name": "_returndata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20065,
                        "src": "8199:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 20082,
                        "name": "_success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20063,
                        "src": "8166:8:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 20084,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8175:12:105",
                      "memberName": "handleRevert",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11062,
                      "src": "8166:21:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes4_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_bool_$",
                        "typeString": "function (bool,bytes4,bytes memory) pure"
                      }
                    },
                    "id": 20087,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8166:45:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 20088,
                  "nodeType": "ExpressionStatement",
                  "src": "8166:45:105"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 20091,
                        "name": "_returndata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20065,
                        "src": "8235:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 20093,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8249:7:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 20092,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8249:7:105",
                              "typeDescriptions": {}
                            }
                          }
                        ],
                        "id": 20094,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "8248:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint256_$",
                          "typeString": "type(uint256)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_type$_t_uint256_$",
                          "typeString": "type(uint256)"
                        }
                      ],
                      "expression": {
                        "id": 20089,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "8224:3:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 20090,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "8228:6:105",
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "8224:10:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 20095,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8224:34:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 20055,
                  "id": 20096,
                  "nodeType": "Return",
                  "src": "8217:41:105"
                }
              ]
            },
            "documentation": {
              "id": 20048,
              "nodeType": "StructuredDocumentation",
              "src": "7604:76:105",
              "text": " @dev Returns the total weight of a list address of governors."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_sumGovernorWeight",
            "nameLocation": "7692:18:105",
            "parameters": {
              "id": 20052,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20051,
                  "mutability": "mutable",
                  "name": "governors",
                  "nameLocation": "7728:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 20098,
                  "src": "7711:26:105",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 20049,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "7711:7:105",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 20050,
                    "nodeType": "ArrayTypeName",
                    "src": "7711:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7710:28:105"
            },
            "returnParameters": {
              "id": 20055,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20054,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 20098,
                  "src": "7770:7:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 20053,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7770:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7769:9:105"
            },
            "scope": 20154,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 20141,
            "nodeType": "FunctionDefinition",
            "src": "8373:600:105",
            "nodes": [],
            "body": {
              "id": 20140,
              "nodeType": "Block",
              "src": "8514:459:105",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    20107
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 20107,
                      "mutability": "mutable",
                      "name": "_selector",
                      "nameLocation": "8527:9:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 20140,
                      "src": "8520:16:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "typeName": {
                        "id": 20106,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "8520:6:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 20111,
                  "initialValue": {
                    "expression": {
                      "expression": {
                        "id": 20108,
                        "name": "IEmergencyExit",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10330,
                        "src": "8539:14:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IEmergencyExit_$10330_$",
                          "typeString": "type(contract IEmergencyExit)"
                        }
                      },
                      "id": 20109,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "8554:44:105",
                      "memberName": "execReleaseLockedFundForEmergencyExitRequest",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10321,
                      "src": "8539:59:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_payable_$returns$__$",
                        "typeString": "function IEmergencyExit.execReleaseLockedFundForEmergencyExitRequest(address,address payable)"
                      }
                    },
                    "id": 20110,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "8599:8:105",
                    "memberName": "selector",
                    "nodeType": "MemberAccess",
                    "src": "8539:68:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8520:87:105"
                },
                {
                  "assignments": [
                    20113,
                    20115
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 20113,
                      "mutability": "mutable",
                      "name": "_success",
                      "nameLocation": "8619:8:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 20140,
                      "src": "8614:13:105",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 20112,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "8614:4:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 20115,
                      "mutability": "mutable",
                      "name": "_returndata",
                      "nameLocation": "8642:11:105",
                      "nodeType": "VariableDeclaration",
                      "scope": 20140,
                      "src": "8629:24:105",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 20114,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "8629:5:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 20132,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30783462623532373461",
                            "id": 20123,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8809:10:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1270163274_by_1",
                              "typeString": "int_const 1270163274"
                            },
                            "value": "0x4bb5274a"
                          },
                          {
                            "arguments": [
                              {
                                "id": 20126,
                                "name": "_selector",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 20107,
                                "src": "8852:9:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              {
                                "id": 20127,
                                "name": "validatorId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 20101,
                                "src": "8863:11:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 20128,
                                "name": "recipientAfterUnlockedFund",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 20103,
                                "src": "8876:26:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 20124,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "8829:3:105",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 20125,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "8833:18:105",
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "8829:22:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 20129,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8829:74:105",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1270163274_by_1",
                              "typeString": "int_const 1270163274"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 20121,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "8705:3:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 20122,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "8709:18:105",
                          "memberName": "encodeWithSelector",
                          "nodeType": "MemberAccess",
                          "src": "8705:22:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes4) pure returns (bytes memory)"
                          }
                        },
                        "id": 20130,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8705:206:105",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 20117,
                              "name": "ContractType",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38020,
                              "src": "8669:12:105",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_ContractType_$38020_$",
                                "typeString": "type(enum ContractType)"
                              }
                            },
                            "id": 20118,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "8682:9:105",
                            "memberName": "VALIDATOR",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38012,
                            "src": "8669:22:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_ContractType_$38020",
                              "typeString": "enum ContractType"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_enum$_ContractType_$38020",
                              "typeString": "enum ContractType"
                            }
                          ],
                          "id": 20116,
                          "name": "getContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3484,
                          "src": "8657:11:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_enum$_ContractType_$38020_$returns$_t_address_$",
                            "typeString": "function (enum ContractType) view returns (address)"
                          }
                        },
                        "id": 20119,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8657:35:105",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 20120,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8693:4:105",
                      "memberName": "call",
                      "nodeType": "MemberAccess",
                      "src": "8657:40:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 20131,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8657:260:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8613:304:105"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 20136,
                        "name": "_selector",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20107,
                        "src": "8945:9:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "id": 20137,
                        "name": "_returndata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20115,
                        "src": "8956:11:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 20133,
                        "name": "_success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20113,
                        "src": "8923:8:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 20135,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "8932:12:105",
                      "memberName": "handleRevert",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11062,
                      "src": "8923:21:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes4_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_bool_$",
                        "typeString": "function (bool,bytes4,bytes memory) pure"
                      }
                    },
                    "id": 20138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8923:45:105",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 20139,
                  "nodeType": "ExpressionStatement",
                  "src": "8923:45:105"
                }
              ]
            },
            "documentation": {
              "id": 20099,
              "nodeType": "StructuredDocumentation",
              "src": "8267:103:105",
              "text": " @dev Trigger function from validator contract to unlock fund for emergency exit request."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_execReleaseLockedFundForEmergencyExitRequest",
            "nameLocation": "8382:45:105",
            "parameters": {
              "id": 20104,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20101,
                  "mutability": "mutable",
                  "name": "validatorId",
                  "nameLocation": "8441:11:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 20141,
                  "src": "8433:19:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20100,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8433:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 20103,
                  "mutability": "mutable",
                  "name": "recipientAfterUnlockedFund",
                  "nameLocation": "8466:26:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 20141,
                  "src": "8458:34:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20102,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8458:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8427:69:105"
            },
            "returnParameters": {
              "id": 20105,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8514:0:105"
            },
            "scope": 20154,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 20153,
            "nodeType": "FunctionDefinition",
            "src": "9035:106:105",
            "nodes": [],
            "body": {
              "id": 20152,
              "nodeType": "Block",
              "src": "9103:38:105",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 20149,
                      "name": "ChainType",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8704,
                      "src": "9116:9:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_ChainType_$8704_$",
                        "typeString": "type(enum ChainTypeConsumer.ChainType)"
                      }
                    },
                    "id": 20150,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberLocation": "9126:10:105",
                    "memberName": "RoninChain",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 8702,
                    "src": "9116:20:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ChainType_$8704",
                      "typeString": "enum ChainTypeConsumer.ChainType"
                    }
                  },
                  "functionReturnParameters": 20148,
                  "id": 20151,
                  "nodeType": "Return",
                  "src": "9109:27:105"
                }
              ]
            },
            "baseFunctions": [
              4446
            ],
            "documentation": {
              "id": 20142,
              "nodeType": "StructuredDocumentation",
              "src": "8977:55:105",
              "text": " @dev See `CoreGovernance-_getChainType`."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getChainType",
            "nameLocation": "9044:13:105",
            "overrides": {
              "id": 20144,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "9074:8:105"
            },
            "parameters": {
              "id": 20143,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9057:2:105"
            },
            "returnParameters": {
              "id": 20148,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20147,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 20153,
                  "src": "9092:9:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_ChainType_$8704",
                    "typeString": "enum ChainTypeConsumer.ChainType"
                  },
                  "typeName": {
                    "id": 20146,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 20145,
                      "name": "ChainType",
                      "nameLocations": [
                        "9092:9:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 8704,
                      "src": "9092:9:105"
                    },
                    "referencedDeclaration": 8704,
                    "src": "9092:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ChainType_$8704",
                      "typeString": "enum ChainTypeConsumer.ChainType"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9091:11:105"
            },
            "scope": 20154,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 19504,
              "name": "HasContracts",
              "nameLocations": [
                "694:12:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3544,
              "src": "694:12:105"
            },
            "id": 19505,
            "nodeType": "InheritanceSpecifier",
            "src": "694:12:105"
          },
          {
            "baseName": {
              "id": 19506,
              "name": "IRoninGovernanceAdmin",
              "nameLocations": [
                "710:21:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7713,
              "src": "710:21:105"
            },
            "id": 19507,
            "nodeType": "InheritanceSpecifier",
            "src": "710:21:105"
          },
          {
            "baseName": {
              "id": 19508,
              "name": "GovernanceAdmin",
              "nameLocations": [
                "735:15:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 531,
              "src": "735:15:105"
            },
            "id": 19509,
            "nodeType": "InheritanceSpecifier",
            "src": "735:15:105"
          },
          {
            "baseName": {
              "id": 19510,
              "name": "GovernanceProposal",
              "nameLocations": [
                "754:18:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5753,
              "src": "754:18:105"
            },
            "id": 19511,
            "nodeType": "InheritanceSpecifier",
            "src": "754:18:105"
          },
          {
            "baseName": {
              "id": 19512,
              "name": "HasValidatorDeprecated",
              "nameLocations": [
                "776:22:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 38039,
              "src": "776:22:105"
            },
            "id": 19513,
            "nodeType": "InheritanceSpecifier",
            "src": "776:22:105"
          }
        ],
        "canonicalName": "RoninGovernanceAdmin",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          20154,
          38039,
          5753,
          5259,
          531,
          38035,
          38055,
          7713,
          3544,
          38269,
          8699,
          3589,
          4447,
          8705,
          8742,
          8733
        ],
        "name": "RoninGovernanceAdmin",
        "nameLocation": "668:20:105",
        "scope": 20155,
        "usedErrors": [
          3628,
          3631,
          4876,
          8672,
          11630,
          11633,
          37841,
          37861,
          37869,
          37884,
          37892,
          37914,
          37923,
          37928,
          37933,
          37938,
          37943,
          37986,
          37989,
          37992,
          37995
        ],
        "usedEvents": [
          3672,
          3684,
          3689,
          3694,
          3699,
          3710,
          3715,
          7683,
          7688,
          7693,
          7700,
          8680
        ]
      }
    ],
    "license": "MIT"
  },
  "blockNumber": 32568882,
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200401e3803806200401e83398101604081905262000034916200021c565b838382620000428162000122565b506005829055604080518181526020810184815260169282019283527f524f4e494e5f474f5645524e414e43455f41444d494e000000000000000000006060830190815260808084207f599a80fcaa47b95e2323ab4d34d34e0cc9feda4b843edafcc30c7bdf60ea15bf85527f7e7935007966eb860f4a2ee3dcc9fd53fb3205ce2aa86b0126d4893d4d4c14b99093527f2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de909452522060065562000108600a8262000155565b5062000118905060088362000155565b505050506200027b565b600281905560405181907fe5cd1c123a8cf63fa1b7229678db61fe8ae99dbbd27889370b6667c8cae97da190600090a250565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f8111156200018e576200018e62000265565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b03928316179055811682600f811115620001d257620001d262000265565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b80516001600160a01b03811681146200021757600080fd5b919050565b600080600080608085870312156200023357600080fd5b845193506200024560208601620001ff565b92506200025560408601620001ff565b6060959095015193969295505050565b634e487b7160e01b600052602160045260246000fd5b613d93806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106101815760003560e01c8063865e6fd3116100d8578063a8a0e32c1161008c578063dcc3eb1911610066578063dcc3eb1914610371578063de981f1b14610384578063f3b7dead1461039757600080fd5b8063a8a0e32c146102fb578063b384abef1461030e578063bc96180b1461036957600080fd5b80639e0dc0b3116100bd5780639e0dc0b3146102c2578063a1819f9a146102d5578063a2fae570146102e857600080fd5b8063865e6fd31461029c5780639a7d3382146102af57600080fd5b80632c5e65201161013a5780633644e515116101145780633644e5151461026d578063663ac011146102765780637eff275e1461028957600080fd5b80632c5e6520146102175780632e96a6fb1461023a57806334d5f37b1461024d57600080fd5b806317ce2dd41161016b57806317ce2dd4146101ae5780631c905e39146101ca578063204e1c7a146101ec57600080fd5b80624054b8146101865780630b8818301461019b575b600080fd5b610199610194366004612ff5565b6103aa565b005b6101996101a9366004612ff5565b6103ca565b6101b760055481565b6040519081526020015b60405180910390f35b6101dd6101d83660046130b7565b6103da565b6040516101c193929190613148565b6101ff6101fa366004613210565b6103f6565b6040516001600160a01b0390911681526020016101c1565b61022a61022536600461322d565b6104c9565b60405190151581526020016101c1565b610199610248366004613266565b6104e0565b6101b761025b366004613266565b60006020819052908152604090205481565b6101b760065481565b61019961028436600461328e565b6104f4565b61019961029736600461336c565b6105e0565b6101996102aa3660046133b4565b6106b0565b6101996102bd3660046130b7565b6106cf565b6101996102d03660046133d0565b610734565b6101996102e3366004613422565b610991565b6101996102f63660046134fc565b610a57565b610199610309366004613542565b610b25565b61035861031c3660046130b7565b600160208181526000938452604080852090915291835291208054918101546002820154600383015460069093015460ff909416939192909185565b6040516101c1959493929190613590565b6101b7610b40565b61022a61037f3660046135c5565b610b50565b6101ff6103923660046135ea565b610b82565b6101ff6103a5366004613210565b610c1f565b6103b2610c82565b6103c3858585858560065433610cd7565b5050505050565b6103c38585858585600654610dff565b60608060606103e98585610f1b565b9250925092509250925092565b60408051600481526024810182526020810180516001600160e01b03167f5c60da1b00000000000000000000000000000000000000000000000000000000908117909152915160009291839182916001600160a01b038716916104599190613629565b600060405180830381855afa9150503d8060008114610494576040519150601f19603f3d011682016040523d82523d6000602084013e610499565b606091505b5090925090506104ac8215158483611307565b808060200190518101906104c09190613645565b95945050505050565b60006104d6848484611347565b90505b9392505050565b6104e861137d565b6104f1816113c4565b50565b6104fc610c82565b600033905060006105c5468d8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061058a92508d91508e90506137c7565b8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506113f7915050565b90506105d2828285611545565b505050505050505050505050565b6105e861137d565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03167f8f283970000000000000000000000000000000000000000000000000000000009081179091529251600092839287169161065b9190613629565b6000604051808303816000865af19150503d8060008114610698576040519150601f19603f3d011682016040523d82523d6000602084013e61069d565b606091505b5090925090506103c38215158483611307565b6106b861137d565b6106c181611667565b6106cb82826116b6565b5050565b6000828152600160208181526040808420858552909152822090810154909103610725576040517fe276132e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61072e81611767565b50505050565b61073c610c82565b33600061078c86868686604080517f697acba4deaf1a718d8c2d93e42860488cb7812696f28ca10eed17bac41e7027815260208101959095528401929092526060830152608082015260a0902090565b90508087146107c7576040517f23b029f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526008602052604081206004810154909103610813576040517f2baffa2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004815460ff16600481111561082b5761082b61311e565b03610862576040517fc324f30d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086d81848461197c565b6040516001600160a01b0384169083907f903555bcf22239155f645431a67d9da9b85888c59ce9bf913c25a035ead6e99790600090a360006108af8284611a3f565b905060006108d06108be611b2e565b6108c784611c51565b85919087611d81565b905060018160048111156108e6576108e661311e565b03610938576108f58989611dcd565b6040518481527fd3500576a0d4923326fbb893cf2169273e0df93f3cb6b94b83f2ca2e0ecb681b9060200160405180910390a1825460ff19166002178355610985565b600481600481111561094c5761094c61311e565b03610985576040518481527feecb3148acc573548e89cb64eb5f2023a61171f1c413ed8bf0fe506c19aeebe49060200160405180910390a15b50505050505050505050565b610999610c82565b610a4a8a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c918291850190849080828437600092019190915250610a0f92508a91508b90506137c7565b8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506113f7915050565b5050505050505050505050565b6008610a6281611eac565b604080517f697acba4deaf1a718d8c2d93e42860488cb7812696f28ca10eed17bac41e7027815260208082018890528183018790526060808301879052608080840187905260a0938490206000818152600885528690204260048201556003810189905586518281526001600160a01b03808e1696820196909652948b1685880152928401899052908301879052935190927f18ea835340bb2973a31996158138f109e9c5b9cfdb2424e999e6b1a9ce565de8928290030190a150505050505050565b610b2d610c82565b6106cb33610b3a846138c6565b83611545565b6000610b4b60025490565b905090565b60008281526008602090815260408083206001600160a01b038516845260020190915281205415155b90505b92915050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083600f811115610bb957610bb961311e565b60ff1681526020810191909152604001600020546001600160a01b0316905080610c1a57816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610c1191906139ab565b60405180910390fd5b919050565b60408051600481526024810182526020810180516001600160e01b03167ff851a44000000000000000000000000000000000000000000000000000000000908117909152915160009291839182916001600160a01b038716916104599190613629565b610c8b33611f11565b600003610cd5576000356001600160e01b03191660036040517f3e523c00000000000000000000000000000000000000000000000000000000008152600401610c119291906139b9565b565b610ce9610ce3886138c6565b82611f6f565b506000610cfd610cf8896138c6565b612075565b9050610df5610d0b896138c6565b88888888610dad89610d52896000604080517fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2815260208101939093528201526060902090565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b610df08a610d528a6001604080517fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2815260208101939093528201526060902090565b6121b5565b5050505050505050565b6000610e0d610cf8886138c6565b6020808901356000908152600180835260408083208c35845290935291902001549091508114610e7c576020808801356000908152600180835260408083208b3584529093529082902001549051632bee7fdb60e21b8152610c11918391600401918252602082015260400190565b610f12610e88886138c6565b87878787610ecf88610d52896000604080517fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2815260208101939093528201526060902090565b610df089610d528a6001604080517fd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2815260208101939093528201526060902090565b50505050505050565b60008281526001602090815260408083208484529091528120600481015460058201546060938493849390929091610f5382846139fd565b90508067ffffffffffffffff811115610f6e57610f6e613662565b604051908082528060200260200182016040528015610f97578160200160208202803683370190505b5095508067ffffffffffffffff811115610fb357610fb3613662565b604051908082528060200260200182016040528015610ffe57816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610fd15790505b5094508067ffffffffffffffff81111561101a5761101a613662565b604051908082528060200260200182016040528015611043578160200160208202803683370190505b50965060005b8381101561119857600087828151811061106557611065613a10565b6020026020010190600181111561107e5761107e61311e565b908160018111156110915761109161311e565b90525060008a81526001602090815260408083208c8452909152812060048701805460079092019291849081106110ca576110ca613a10565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff1681526001820154938101939093526002015490820152865187908390811061112857611128613a10565b602002602001018190525084600401818154811061114857611148613a10565b9060005260206000200160009054906101000a90046001600160a01b031688828151811061117857611178613a10565b6001600160a01b0390921660209283029190910190910152600101611049565b5060005b828110156112fb576001876111b186846139fd565b815181106111c1576111c1613a10565b602002602001019060018111156111da576111da61311e565b908160018111156111ed576111ed61311e565b90525060008a81526001602090815260408083208c84529091528120600587018054600790920192918490811061122657611226613a10565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff16815260018201549381019390935260020154908201528661127b86846139fd565b8151811061128b5761128b613a10565b60200260200101819052508460050181815481106112ab576112ab613a10565b6000918252602090912001546001600160a01b0316886112cb86846139fd565b815181106112db576112db613a10565b6001600160a01b039092166020928302919091019091015260010161119c565b50505050509250925092565b6001600160e01b0319600035168361072e5781518015611328578060208401fd5b50604051638e3eda2b81528160208201528360408201526044601c8201fd5b600083815260016020908152604080832085845282528083206001600160a01b038516845260080190915281205460ff166104d6565b333014610cd5576040517f7337e1900000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610c11565b600281905560405181907fe5cd1c123a8cf63fa1b7229678db61fe8ae99dbbd27889370b6667c8cae97da190600090a250565b6114376040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b876000036114725760405163092048d160e11b8152600080356001600160e01b03191660048301526024820152466044820152606401610c11565b600061147d89612465565b90506040518060e001604052808281526020018a81526020018981526020018881526020018781526020018681526020018581525091506114c96002548361252e90919063ffffffff16565b60006114d483612075565b60008b81526001602081815260408084208785529091529091209081018290556006018a9055905080828b7fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd98688604051611530929190613add565b60405180910390a45050979650505050505050565b4682602001511461158a57602082015160405163092048d160e11b81526000356001600160e01b03191660048201526024810191909152466044820152606401610c11565b600061159583612075565b602080850151600090815260018083526040808320885184529093529190200154909150811461160457602080840151600090815260018083526040808320875184529093529082902001549051632bee7fdb60e21b8152610c11918391600401918252602082015260400190565b600061160e611b2e565b905060008161161b6125e8565b6116259190613bc6565b6116309060016139fd565b6040805160608101825260008082526020820181905291810191909152909150610df5868685858b866116628e611f11565b612617565b806001600160a01b03163b6000036104f1576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610c11565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084600f8111156116ec576116ec61311e565b60ff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055811682600f81111561173a5761173a61311e565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b600080825460ff1660048111156117805761178061311e565b148015611791575042826006015411155b90508015610c1a5760018201546040517f58f98006a7f2f253f8ae8f8b7cec9008ca05359633561cd7c22f3005682d4a5590600090a260005b600483015481101561187d578260080160008460040183815481106117f1576117f1613a10565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19169055600484018054600786019291908490811061183a5761183a613a10565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff191681556001818101839055600290910191909155016117ca565b5060005b6005830154811015611934578260080160008460050183815481106118a8576118a8613a10565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff1916905560058401805460078601929190849081106118f1576118f1613a10565b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff19168155600181810183905560029091019190915501611881565b50815460ff191682556000600183018190556002830181905560038301819055611962906004840190612f5f565b611970600583016000612f5f565b60006006830155919050565b60008360030154118015611994575042836003015411155b156119a557825460ff191660041783555b6001600160a01b0382166000908152600284016020526040902054156119e95760405163025fd59560e41b81526001600160a01b0383166004820152602401610c11565b6001600160a01b0390911660008181526002840160209081526040822093909355600590930180546001810182559084529190922001805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b600582015460609060009067ffffffffffffffff811115611a6257611a62613662565b604051908082528060200260200182016040528015611a8b578160200160208202803683370190505b50915060005b8251811015611b25576000856005018281548110611ab157611ab1613a10565b60009182526020808320909101546001600160a01b031680835260028901909152604090912054909150859003611b1c5780848480600101955081518110611afb57611afb613a10565b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101611a91565b50815292915050565b60007f7de5dedd000000000000000000000000000000000000000000000000000000008180611b5d600a610b82565b6040805160048152602480820183526020820180516001600160e01b03166001600160e01b0319891617905291516001600160a01b039390931692634bb5274a92611ba9929101613bd9565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611be29190613629565b600060405180830381855afa9150503d8060008114611c1d576040519150601f19603f3d011682016040523d82523d6000602084013e611c22565b606091505b509092509050611c358215158483611307565b80806020019051810190611c499190613bec565b935050505090565b60007f903bb3c5000000000000000000000000000000000000000000000000000000008180611c80600a610b82565b6001600160a01b0316634bb5274a8487604051602401611ca09190613c05565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ce19190602401613bd9565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611d1a9190613629565b600060405180830381855afa9150503d8060008114611d55576040519150601f19603f3d011682016040523d82523d6000602084013e611d5a565b606091505b509092509050611d6d8215158483611307565b808060200190518101906104c09190613bec565b6000838310158015611da857506000855460ff166004811115611da657611da661311e565b145b15611dc057845460ff19166001908117865585018290555b5050915460ff1692915050565b7fc3c8b5d600000000000000000000000000000000000000000000000000000000600080611dfb6008610b82565b6001600160a01b0316634bb5274a848787604051602401611e329291906001600160a01b0392831681529116602082015260400190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611e739190602401613bd9565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161065b9190613629565b611eb581610b82565b6001600160a01b0316336001600160a01b0316146104f1576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610c1193929190613c18565b60007fd78392f8000000000000000000000000000000000000000000000000000000008180611f40600a610b82565b6001600160a01b0316634bb5274a8487604051602401611ca091906001600160a01b0391909116815260200190565b6020820151600090808203611fb15760405163092048d160e11b8152600080356001600160e01b03191660048301526024820152466044820152606401610c11565b600254611fbf90859061252e565b6000611fca85612075565b9050611fd582612465565b600083815260016020818152604080842085855290915291829020918801519082018490556006909101559250845183146120315760405163d4cec26960e01b81526001600160e01b0319600035166004820152602401610c11565b8083837fa57d40f1496988cf60ab7c9d5ba4ff83647f67d3898d441a3aaf21b651678fd98888604051612065929190613add565b60405180910390a4505092915050565b6080810151606082015160a0830151516000929190839067ffffffffffffffff8111156120a4576120a4613662565b6040519080825280602002602001820160405280156120cd578160200160208202803683370190505b5060c086015190915060005b825181101561212c578660a0015181815181106120f8576120f8613a10565b60200260200101518051906020012083828151811061211957612119613a10565b60209081029190910101526001016120d9565b50604080517fd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a8152875160208083019190915280890151828401529790910151606082015283518702938701939093206080840152835186029386019390932060a0830152805185029085012060c082015281518402919093012060e083015250610100902090565b84158015906121c357508483145b6121ee576040516306b5667560e21b81526001600160e01b0319600035166004820152602401610c11565b60006121f8611b2e565b90506000816122056125e8565b61220f9190613bc6565b61221a9060016139fd565b9050600080366000805b89811015612410578a8a8281811061223e5761223e613a10565b606002919091019350600090508d8d8381811061225d5761225d613a10565b90506020020160208101906122729190613c4d565b60018111156122835761228361311e565b036122af576122a8896122996020860186613c79565b85602001358660400135612994565b935061233f565b60018d8d838181106122c3576122c3613a10565b90506020020160208101906122d89190613c4d565b60018111156122e9576122e961311e565b036122ff576122a8886122996020860186613c79565b6040517f0c24831e0000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610c11565b836001600160a01b0316856001600160a01b031610612398576040517f5d3dcd310000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610c11565b83945060006123a685611f11565b9050801561240757600192506123f58f8f8f858181106123c8576123c8613a10565b90506020020160208101906123dd9190613c4d565b8a8a896123ef368b90038b018b613c94565b87612617565b15612407575050505050505050610f12565b50600101612224565b5080612456576040517f726b3acb0000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610c11565b50505050505050505050505050565b600081815260208190526040812054908190036124945750600090815260208190526040902060019081905590565b60008281526001602090815260408083208484529091528120906124b782611767565b905080612527576000825460ff1660048111156124d6576124d661311e565b0361250d576040517f757a436300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084815260208190526040902080546001019081905592505b5050919050565b600082606001515111801561254c5750816080015151826060015151145b801561256157508160a0015151826060015151145b801561257657508160c0015151826060015151145b6125a1576040516306b5667560e21b81526001600160e01b0319600035166004820152602401610c11565b6125ab81426139fd565b826040015111156106cb576040517fad89be9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f96c82e57000000000000000000000000000000000000000000000000000000008180611b5d600a610b82565b6020808801518851600082815260018452604080822083835290945292832061263f81611767565b156126505760019350505050612989565b6020808c0151600090815290819052604090205482146126915760405163d4cec26960e01b81526001600160e01b0319600035166004820152602401610c11565b6000815460ff1660048111156126a9576126a961311e565b146126e0576040517f8b7a57fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038716600090815260088201602052604090205460ff16156127275760405163025fd59560e41b81526001600160a01b0388166004820152602401610c11565b6001600160a01b03871660009081526008820160209081526040909120805460ff191660011790558601511515806127625750604086015115155b806127705750855160ff1615155b156127b7576001600160a01b03871660009081526007820160209081526040918290208851815460ff191660ff909116178155908801516001820155908701516002909101555b866001600160a01b031681600101547f1203f9e81c814a35f5f4cc24087b2a24c6fb7986a9f1406b68a9484882c93a238c886040516127f7929190613cf5565b60405180910390a3600080808c60018111156128155761281561311e565b036128775760048301805460018101825560009182526020822001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038c1617905560038401805489929061286a9084906139fd565b92505081905591506128e9565b60018c600181111561288b5761288b61311e565b036122ff5760058301805460018101825560009182526020822001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038c161790556002840180548992906128e09084906139fd565b92505081905590505b8a821061293d57825460ff19166001908117845580840154604051919750907f5c819725ea53655a3b898f3df59b66489761935454e9212ca1e5ebd759953d0b90600090a2612938838e6129bc565b612983565b89811061298357825460ff19166003178355600180840154604051919750907f55295d4ce992922fa2e5ffbf3a3dcdb367de0a15e125ace083456017fd22060f90600090a25b50505050505b979650505050505050565b60008060006129a587878787612a29565b915091506129b281612b16565b5095945050505050565b6129c581612ccc565b156106cb57815460ff191660021782556000806129e183612ce6565b9150915083600101547fe134987599ae266ec90edeff1b26125b287dbb57b10822649432d1bb26537fba8383604051612a1b929190613d03565b60405180910390a250505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a605750600090506003612b0d565b8460ff16601b14158015612a7857508460ff16601c14155b15612a895750600090506004612b0d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612add573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b0657600060019250925050612b0d565b9150600090505b94509492505050565b6000816004811115612b2a57612b2a61311e565b03612b325750565b6001816004811115612b4657612b4661311e565b03612b935760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c11565b6002816004811115612ba757612ba761311e565b03612bf45760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c11565b6003816004811115612c0857612c0861311e565b03612c605760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c11565b6004816004811115612c7457612c7461311e565b036104f15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c11565b6000816020015160001480610b7c57505060200151461490565b606080612cf283612ccc565b612d3057602083015160405163092048d160e11b81526000356001600160e01b03191660048201526024810191909152466044820152606401610c11565b82606001515167ffffffffffffffff811115612d4e57612d4e613662565b604051908082528060200260200182016040528015612d77578160200160208202803683370190505b50915082606001515167ffffffffffffffff811115612d9857612d98613662565b604051908082528060200260200182016040528015612dcb57816020015b6060815260200190600190039081612db65790505b50905060005b836060015151811015612f59578360c001518181518110612df457612df4613a10565b60200260200101515a11612e4057612e0b84612075565b6040517f1ebb12ac000000000000000000000000000000000000000000000000000000008152600401610c1191815260200190565b83606001518181518110612e5657612e56613a10565b60200260200101516001600160a01b031684608001518281518110612e7d57612e7d613a10565b60200260200101518560c001518381518110612e9b57612e9b613a10565b6020026020010151908660a001518481518110612eba57612eba613a10565b6020026020010151604051612ecf9190613629565b600060405180830381858888f193505050503d8060008114612f0d576040519150601f19603f3d011682016040523d82523d6000602084013e612f12565b606091505b50848381518110612f2557612f25613a10565b60200260200101848481518110612f3e57612f3e613a10565b60209081029190910101919091529015159052600101612dd1565b50915091565b50805460008255906000526020600020908101906104f191905b80821115612f8d5760008155600101612f79565b5090565b600060e08284031215612fa357600080fd5b50919050565b60008083601f840112612fbb57600080fd5b50813567ffffffffffffffff811115612fd357600080fd5b6020830191508360208260051b8501011115612fee57600080fd5b9250929050565b60008060008060006060868803121561300d57600080fd5b853567ffffffffffffffff8082111561302557600080fd5b61303189838a01612f91565b9650602088013591508082111561304757600080fd5b61305389838a01612fa9565b9096509450604088013591508082111561306c57600080fd5b818801915088601f83011261308057600080fd5b81358181111561308f57600080fd5b8960206060830285010111156130a457600080fd5b9699959850939650602001949392505050565b600080604083850312156130ca57600080fd5b50508035926020909101359150565b60008151808452602080850194506020840160005b838110156131135781516001600160a01b0316875295820195908201906001016130ee565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b600281106131445761314461311e565b9052565b6000606080835261315c60608401876130d9565b83810360208581019190915286518083528782019282019060005b8181101561319a5761318a838651613134565b9383019391830191600101613177565b50506040925085810360408701528087518083528383019150838901925060005b818110156131eb578351805160ff16845285810151868501528601518684015292840192918601916001016131bb565b50909a9950505050505050505050565b6001600160a01b03811681146104f157600080fd5b60006020828403121561322257600080fd5b81356104d9816131fb565b60008060006060848603121561324257600080fd5b8335925060208401359150604084013561325b816131fb565b809150509250925092565b60006020828403121561327857600080fd5b5035919050565b803560028110610c1a57600080fd5b60008060008060008060008060008060c08b8d0312156132ad57600080fd5b8a35995060208b013567ffffffffffffffff808211156132cc57600080fd5b6132d88e838f01612fa9565b909b50995060408d01359150808211156132f157600080fd5b6132fd8e838f01612fa9565b909950975060608d013591508082111561331657600080fd5b6133228e838f01612fa9565b909750955060808d013591508082111561333b57600080fd5b506133488d828e01612fa9565b909450925061335b905060a08c0161327f565b90509295989b9194979a5092959850565b6000806040838503121561337f57600080fd5b823561338a816131fb565b9150602083013561339a816131fb565b809150509250929050565b803560108110610c1a57600080fd5b600080604083850312156133c757600080fd5b61338a836133a5565b600080600080600060a086880312156133e857600080fd5b8535945060208601356133fa816131fb565b9350604086013561340a816131fb565b94979396509394606081013594506080013592915050565b60008060008060008060008060008060c08b8d03121561344157600080fd5b8a35995060208b0135985060408b013567ffffffffffffffff8082111561346757600080fd5b6134738e838f01612fa9565b909a50985060608d013591508082111561348c57600080fd5b6134988e838f01612fa9565b909850965060808d01359150808211156134b157600080fd5b6134bd8e838f01612fa9565b909650945060a08d01359150808211156134d657600080fd5b506134e38d828e01612fa9565b915080935050809150509295989b9194979a5092959850565b6000806000806080858703121561351257600080fd5b843561351d816131fb565b9350602085013561352d816131fb565b93969395505050506040820135916060013590565b6000806040838503121561355557600080fd5b823567ffffffffffffffff81111561356c57600080fd5b61357885828601612f91565b9250506135876020840161327f565b90509250929050565b60a08101600587106135a4576135a461311e565b95815260208101949094526040840192909252606083015260809091015290565b600080604083850312156135d857600080fd5b82359150602083013561339a816131fb565b6000602082840312156135fc57600080fd5b610b79826133a5565b60005b83811015613620578181015183820152602001613608565b50506000910152565b6000825161363b818460208701613605565b9190910192915050565b60006020828403121561365757600080fd5b81516104d9816131fb565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561369b5761369b613662565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156136ca576136ca613662565b604052919050565b600067ffffffffffffffff8211156136ec576136ec613662565b5060051b60200190565b6000613709613704846136d2565b6136a1565b8381529050602080820190600585901b84018681111561372857600080fd5b845b818110156137bc57803567ffffffffffffffff8082111561374b5760008081fd5b8188019150601f8a818401126137615760008081fd5b82358281111561377357613773613662565b613784818301601f191688016136a1565b92508083528b8782860101111561379d57600091508182fd5b808785018885013760009083018701525085525092820192820161372a565b505050509392505050565b6000610b793684846136f6565b600082601f8301126137e557600080fd5b813560206137f5613704836136d2565b8083825260208201915060208460051b87010193508684111561381757600080fd5b602086015b8481101561383c57803561382f816131fb565b835291830191830161381c565b509695505050505050565b600082601f83011261385857600080fd5b81356020613868613704836136d2565b8083825260208201915060208460051b87010193508684111561388a57600080fd5b602086015b8481101561383c578035835291830191830161388f565b600082601f8301126138b757600080fd5b610b79838335602085016136f6565b600060e082360312156138d857600080fd5b6138e0613678565b823581526020830135602082015260408301356040820152606083013567ffffffffffffffff8082111561391357600080fd5b61391f368387016137d4565b6060840152608085013591508082111561393857600080fd5b61394436838701613847565b608084015260a085013591508082111561395d57600080fd5b613969368387016138a6565b60a084015260c085013591508082111561398257600080fd5b5061398f36828601613847565b60c08301525092915050565b601081106131445761314461311e565b60208101610b7c828461399b565b6001600160e01b03198316815260408101600b83106139da576139da61311e565b8260208301529392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b7c57610b7c6139e7565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b8381101561311357815187529582019590820190600101613a3b565b60008151808452613a6f816020860160208601613605565b601f01601f19169290920160200192915050565b60008282518085526020808601955060208260051b8401016020860160005b84811015613ad057601f19868403018952613abe838351613a57565b98840198925090830190600101613aa2565b5090979650505050505050565b604081526000610120820184516040840152602080860151606085015260408601516080850152606086015160e060a086015282815180855261014087019150602083019450600092505b80831015613b515784516001600160a01b03168252938301936001929092019190830190613b28565b5060808801519350603f199250828682030160c0870152613b728185613a26565b9350505060a0860151818584030160e0860152613b8f8382613a83565b92505060c08601518185840301610100860152613bac8382613a26565b93505050506104d960208301846001600160a01b03169052565b81810381811115610b7c57610b7c6139e7565b602081526000610b796020830184613a57565b600060208284031215613bfe57600080fd5b5051919050565b602081526000610b7960208301846130d9565b6001600160e01b03198416815260608101613c36602083018561399b565b6001600160a01b0383166040830152949350505050565b600060208284031215613c5f57600080fd5b610b798261327f565b803560ff81168114610c1a57600080fd5b600060208284031215613c8b57600080fd5b610b7982613c68565b600060608284031215613ca657600080fd5b6040516060810181811067ffffffffffffffff82111715613cc957613cc9613662565b604052613cd583613c68565b815260208301356020820152604083013560408201528091505092915050565b604081016139da8285613134565b604080825283519082018190526000906020906060840190828701845b82811015613d3e578151151584529284019290840190600101613d20565b5050508381036020850152613d538186613a83565b969550505050505056fea264697066735822122001602ce53e77e1c88a89961c2fe722dcde4c25e16165d412688461a3d17d71dc64736f6c63430008160033",
  "chainId": 2020,
  "contractAbsolutePath": "RoninGovernanceAdmin.sol",
  "deployedBytecode": "",
  "deployer": "0x4d58Ea7231c394d5804e8B06B1365915f906E27F",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "castProposalBySignatures((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_castProposalBySignatures`."
      },
      "castProposalVoteForCurrentNetwork((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8)": {
        "details": "Casts vote for a proposal on the current network. Requirements: - The method caller is governor."
      },
      "changeProxyAdmin(address,address)": {
        "details": "Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`."
      },
      "createEmergencyExitPoll(address,address,uint256,uint256)": {
        "details": "Create a vote to agree that an emergency exit is valid and should return the locked funds back.a Requirements: - The method caller is validator contract."
      },
      "deleteExpired(uint256,uint256)": {
        "details": "Deletes the expired proposal by its chainId and nonce, without creating a new proposal. Requirements: - The proposal is already created."
      },
      "emergencyPollVoted(bytes32,address)": {
        "details": "Returns whether the voter casted vote for emergency exit poll."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getProposalExpiryDuration()": {
        "details": "Returns the proposal expiry duration."
      },
      "getProposalSignatures(uint256,uint256)": {
        "details": "See {CommonGovernanceProposal-_getProposalSignatures}"
      },
      "getProxyAdmin(address)": {
        "details": "Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "getProxyImplementation(address)": {
        "details": "Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`."
      },
      "proposalVoted(uint256,uint256,address)": {
        "details": "See {CommonGovernanceProposal-_proposalVoted}"
      },
      "propose(uint256,uint256,address[],uint256[],bytes[],uint256[])": {
        "details": "See `CoreGovernance-_proposeProposal`. Requirements: - The method caller is governor."
      },
      "proposeProposalForCurrentNetwork(uint256,address[],uint256[],bytes[],uint256[],uint8)": {
        "details": "Proposes and casts vote for a proposal on the current network. Requirements: - The method caller is governor. - The proposal is for the current network."
      },
      "proposeProposalStructAndCastVotes((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])": {
        "details": "See `GovernanceProposal-_proposeProposalStructAndCastVotes`. Requirements: - The method caller is governor. - The proposal is for the current network."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setProposalExpiryDuration(uint256)": {
        "details": "Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin."
      },
      "voteEmergencyExit(bytes32,address,address,uint256,uint256)": {
        "details": "Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester. Requirements: - The voter is governor. - The voting is existent. - The voting is not expired yet."
      }
    },
    "events": {
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "EmergencyExitPollApproved(bytes32)": {
        "details": "Emitted when an emergency exit poll is approved."
      },
      "EmergencyExitPollCreated(bytes32,address,address,uint256,uint256)": {
        "details": "Emitted when an emergency exit poll is created."
      },
      "EmergencyExitPollExpired(bytes32)": {
        "details": "Emitted when an emergency exit poll is expired."
      },
      "EmergencyExitPollVoted(bytes32,address)": {
        "details": "Emitted when an emergency exit poll is voted."
      },
      "ProposalApproved(bytes32)": {
        "details": "Emitted when the proposal is approved"
      },
      "ProposalCreated(uint256,uint256,bytes32,(uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),address)": {
        "details": "Emitted when a proposal is created"
      },
      "ProposalExecuted(bytes32,bool[],bytes[])": {
        "details": "Emitted when the proposal is executed"
      },
      "ProposalExpired(bytes32)": {
        "details": "Emitted when the vote is expired"
      },
      "ProposalExpiryDurationChanged(uint256)": {
        "details": "Emitted when the proposal expiry duration is changed."
      },
      "ProposalRejected(bytes32)": {
        "details": "Emitted when the vote is reject"
      },
      "ProposalVoted(bytes32,address,uint8,uint256)": {
        "details": "Emitted when the proposal is voted"
      }
    },
    "errors": {
      "ErrAlreadyVoted(address)": [
        {
          "details": "Error indicating that a voter has already voted.",
          "params": {
            "voter": "The address of the voter who has already voted."
          }
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrCurrentProposalIsNotCompleted()": [
        {
          "details": "Error thrown when the current proposal is not completed."
        }
      ],
      "ErrInsufficientGas(bytes32)": [
        {
          "details": "Error thrown when there is insufficient gas to execute a function."
        }
      ],
      "ErrInvalidChainId(bytes4,uint256,uint256)": [
        {
          "details": "Error indicating that the chain ID is invalid.",
          "params": {
            "actual": "Current chain ID that executing function.",
            "expected": "Expected chain ID required for the tx to success.",
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid chain ID."
          }
        }
      ],
      "ErrInvalidExpiryTimestamp()": [
        {
          "details": "Error thrown when an invalid expiry timestamp is provided."
        }
      ],
      "ErrInvalidOrder(bytes4)": [
        {
          "details": "Error indicating that an order is invalid.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid order."
          }
        }
      ],
      "ErrInvalidProposal(bytes32,bytes32)": [
        {
          "details": "Error thrown when an invalid proposal is encountered.",
          "params": {
            "actual": "The actual value of the proposal.",
            "expected": "The expected value of the proposal."
          }
        }
      ],
      "ErrInvalidProposalNonce(bytes4)": [
        {
          "details": "Error indicating that the proposal nonce is invalid.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an invalid proposal nonce."
          }
        }
      ],
      "ErrInvalidSignatures(bytes4)": [
        {
          "details": "Error indicating that a signature is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that encountered an invalid signature."
          }
        }
      ],
      "ErrInvalidVoteHash()": [
        {
          "details": "Error thrown when an invalid vote hash is provided."
        }
      ],
      "ErrLengthMismatch(bytes4)": [
        {
          "details": "Error indicating a mismatch in the length of input parameters or arrays for a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that has a length mismatch."
          }
        }
      ],
      "ErrOnlySelfCall(bytes4)": [
        {
          "details": "Error indicating that a function can only be called by the contract itself.",
          "params": {
            "msgSig": "The function signature (bytes4) that can only be called by the contract itself."
          }
        }
      ],
      "ErrQueryForEmptyVote()": [
        {
          "details": "Error thrown when querying for an empty vote."
        }
      ],
      "ErrQueryForExpiredVote()": [
        {
          "details": "Error thrown when querying for an expired vote."
        }
      ],
      "ErrQueryForNonExistentVote()": [
        {
          "details": "Error thrown when querying for a non-existent vote."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrUnsupportedVoteType(bytes4)": [
        {
          "details": "Error indicating that a vote type is not supported.",
          "params": {
            "msgSig": "The function signature (bytes4) of the operation that encountered an unsupported vote type."
          }
        }
      ],
      "ErrVoteIsFinalized()": [
        {
          "details": "Error thrown when attempting to interact with a finalized vote."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roninChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"ErrAlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCurrentProposalIsNotCompleted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ErrInsufficientGas\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ErrInvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidExpiryTimestamp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"ErrInvalidProposal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidProposalNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidVoteHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrOnlySelfCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForEmptyVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForExpiredVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrQueryForNonExistentVote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrUnsupportedVoteType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrVoteIsFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"voteHash\",\"type\":\"bytes32\"}],\"name\":\"EmergencyExitPollApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"voteHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validatorId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAfterUnlockedFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitPollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"voteHash\",\"type\":\"bytes32\"}],\"name\":\"EmergencyExitPollExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"voteHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"EmergencyExitPollVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"successCalls\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ProposalExpiryDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Ballot.VoteType\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"castProposalBySignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType\",\"name\":\"_support\",\"type\":\"uint8\"}],\"name\":\"castProposalVoteForCurrentNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAfterUnlockedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"createEmergencyExitPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"deleteExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_voteHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"emergencyPollVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getProposalSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"proposalVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_gasAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Ballot.VoteType\",\"name\":\"_support\",\"type\":\"uint8\"}],\"name\":\"proposeProposalForCurrentNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Proposal.ProposalDetail\",\"name\":\"_proposal\",\"type\":\"tuple\"},{\"internalType\":\"enum Ballot.VoteType[]\",\"name\":\"_supports\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureConsumer.Signature[]\",\"name\":\"_signatures\",\"type\":\"tuple[]\"}],\"name\":\"proposeProposalStructAndCastVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roninChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryDuration\",\"type\":\"uint256\"}],\"name\":\"setProposalExpiryDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"enum VoteStatusConsumer.VoteStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"againstVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVoteWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"voteHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"validatorId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAfterUnlockedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"}],\"name\":\"voteEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyVoted(address)\":[{\"details\":\"Error indicating that a voter has already voted.\",\"params\":{\"voter\":\"The address of the voter who has already voted.\"}}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrCurrentProposalIsNotCompleted()\":[{\"details\":\"Error thrown when the current proposal is not completed.\"}],\"ErrInsufficientGas(bytes32)\":[{\"details\":\"Error thrown when there is insufficient gas to execute a function.\"}],\"ErrInvalidChainId(bytes4,uint256,uint256)\":[{\"details\":\"Error indicating that the chain ID is invalid.\",\"params\":{\"actual\":\"Current chain ID that executing function.\",\"expected\":\"Expected chain ID required for the tx to success.\",\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid chain ID.\"}}],\"ErrInvalidExpiryTimestamp()\":[{\"details\":\"Error thrown when an invalid expiry timestamp is provided.\"}],\"ErrInvalidOrder(bytes4)\":[{\"details\":\"Error indicating that an order is invalid.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid order.\"}}],\"ErrInvalidProposal(bytes32,bytes32)\":[{\"details\":\"Error thrown when an invalid proposal is encountered.\",\"params\":{\"actual\":\"The actual value of the proposal.\",\"expected\":\"The expected value of the proposal.\"}}],\"ErrInvalidProposalNonce(bytes4)\":[{\"details\":\"Error indicating that the proposal nonce is invalid.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\"}}],\"ErrInvalidSignatures(bytes4)\":[{\"details\":\"Error indicating that a signature is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that encountered an invalid signature.\"}}],\"ErrInvalidVoteHash()\":[{\"details\":\"Error thrown when an invalid vote hash is provided.\"}],\"ErrLengthMismatch(bytes4)\":[{\"details\":\"Error indicating a mismatch in the length of input parameters or arrays for a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that has a length mismatch.\"}}],\"ErrOnlySelfCall(bytes4)\":[{\"details\":\"Error indicating that a function can only be called by the contract itself.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that can only be called by the contract itself.\"}}],\"ErrQueryForEmptyVote()\":[{\"details\":\"Error thrown when querying for an empty vote.\"}],\"ErrQueryForExpiredVote()\":[{\"details\":\"Error thrown when querying for an expired vote.\"}],\"ErrQueryForNonExistentVote()\":[{\"details\":\"Error thrown when querying for a non-existent vote.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrUnsupportedVoteType(bytes4)\":[{\"details\":\"Error indicating that a vote type is not supported.\",\"params\":{\"msgSig\":\"The function signature (bytes4) of the operation that encountered an unsupported vote type.\"}}],\"ErrVoteIsFinalized()\":[{\"details\":\"Error thrown when attempting to interact with a finalized vote.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"EmergencyExitPollApproved(bytes32)\":{\"details\":\"Emitted when an emergency exit poll is approved.\"},\"EmergencyExitPollCreated(bytes32,address,address,uint256,uint256)\":{\"details\":\"Emitted when an emergency exit poll is created.\"},\"EmergencyExitPollExpired(bytes32)\":{\"details\":\"Emitted when an emergency exit poll is expired.\"},\"EmergencyExitPollVoted(bytes32,address)\":{\"details\":\"Emitted when an emergency exit poll is voted.\"},\"ProposalApproved(bytes32)\":{\"details\":\"Emitted when the proposal is approved\"},\"ProposalCreated(uint256,uint256,bytes32,(uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),address)\":{\"details\":\"Emitted when a proposal is created\"},\"ProposalExecuted(bytes32,bool[],bytes[])\":{\"details\":\"Emitted when the proposal is executed\"},\"ProposalExpired(bytes32)\":{\"details\":\"Emitted when the vote is expired\"},\"ProposalExpiryDurationChanged(uint256)\":{\"details\":\"Emitted when the proposal expiry duration is changed.\"},\"ProposalRejected(bytes32)\":{\"details\":\"Emitted when the vote is reject\"},\"ProposalVoted(bytes32,address,uint8,uint256)\":{\"details\":\"Emitted when the proposal is voted\"}},\"kind\":\"dev\",\"methods\":{\"castProposalBySignatures((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_castProposalBySignatures`.\"},\"castProposalVoteForCurrentNetwork((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8)\":{\"details\":\"Casts vote for a proposal on the current network. Requirements: - The method caller is governor.\"},\"changeProxyAdmin(address,address)\":{\"details\":\"Changes the admin of `_proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `_proxy`.\"},\"createEmergencyExitPoll(address,address,uint256,uint256)\":{\"details\":\"Create a vote to agree that an emergency exit is valid and should return the locked funds back.a Requirements: - The method caller is validator contract.\"},\"deleteExpired(uint256,uint256)\":{\"details\":\"Deletes the expired proposal by its chainId and nonce, without creating a new proposal. Requirements: - The proposal is already created.\"},\"emergencyPollVoted(bytes32,address)\":{\"details\":\"Returns whether the voter casted vote for emergency exit poll.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getProposalExpiryDuration()\":{\"details\":\"Returns the proposal expiry duration.\"},\"getProposalSignatures(uint256,uint256)\":{\"details\":\"See {CommonGovernanceProposal-_getProposalSignatures}\"},\"getProxyAdmin(address)\":{\"details\":\"Returns the current admin of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"getProxyImplementation(address)\":{\"details\":\"Returns the current implementation of `_proxy`. Requirements: - This contract must be the admin of `_proxy`.\"},\"proposalVoted(uint256,uint256,address)\":{\"details\":\"See {CommonGovernanceProposal-_proposalVoted}\"},\"propose(uint256,uint256,address[],uint256[],bytes[],uint256[])\":{\"details\":\"See `CoreGovernance-_proposeProposal`. Requirements: - The method caller is governor.\"},\"proposeProposalForCurrentNetwork(uint256,address[],uint256[],bytes[],uint256[],uint8)\":{\"details\":\"Proposes and casts vote for a proposal on the current network. Requirements: - The method caller is governor. - The proposal is for the current network.\"},\"proposeProposalStructAndCastVotes((uint256,uint256,uint256,address[],uint256[],bytes[],uint256[]),uint8[],(uint8,bytes32,bytes32)[])\":{\"details\":\"See `GovernanceProposal-_proposeProposalStructAndCastVotes`. Requirements: - The method caller is governor. - The proposal is for the current network.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setProposalExpiryDuration(uint256)\":{\"details\":\"Sets the expiry duration for a new proposal. Requirements: - Only allowing self-call to this method, since this contract does not have admin.\"},\"voteEmergencyExit(bytes32,address,address,uint256,uint256)\":{\"details\":\"Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester. Requirements: - The voter is governor. - The voting is existent. - The voting is not expired yet.\"}},\"stateVariables\":{\"_emergencyExitPoll\":{\"details\":\"Mapping from request hash => emergency poll\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"round(uint256)\":{\"notice\":\"chain id = 0 for global proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/RoninGovernanceAdmin.sol\":\"RoninGovernanceAdmin\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/script/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/solady/src/\"]},\"sources\":{\"contracts/extensions/GovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/sequential-governance/CoreGovernance.sol\\\";\\nimport \\\"../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport { ErrorHandler } from \\\"../libraries/ErrorHandler.sol\\\";\\nimport { IdentityGuard } from \\\"../utils/IdentityGuard.sol\\\";\\nimport { HasGovernanceAdminDeprecated, HasBridgeDeprecated } from \\\"../utils/DeprecatedSlots.sol\\\";\\n\\nabstract contract GovernanceAdmin is\\n  CoreGovernance,\\n  IdentityGuard,\\n  HasContracts,\\n  HasGovernanceAdminDeprecated,\\n  HasBridgeDeprecated\\n{\\n  using ErrorHandler for bool;\\n\\n  uint256 public roninChainId;\\n  /// @dev Domain separator\\n  bytes32 public DOMAIN_SEPARATOR;\\n\\n  constructor(uint256 _roninChainId, address _roninTrustedOrganizationContract) {\\n    roninChainId = _roninChainId;\\n\\n    /*\\n     * DOMAIN_SEPARATOR = keccak256(\\n     *  abi.encode(\\n     *    keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\"),\\n     *    keccak256(\\\"GovernanceAdmin\\\"), // name hash\\n     *    keccak256(\\\"2\\\"), // version hash\\n     *    keccak256(abi.encode(\\\"RONIN_GOVERNANCE_ADMIN\\\", _roninChainId)) // salt\\n     *  )\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n\\n      // See abi.encode implementation: https://github.com/axieinfinity/ronin/blob/569ebd5a782da5601c6aba22799dc9b4afd39da9/accounts/abi/argument.go#L227-L267\\n      mstore(ptr, 0x40) // offset bytes\\n      mstore(add(ptr, 0x20), _roninChainId)\\n      mstore(add(ptr, 0x40), 0x16) // \\\"RONIN_GOVERNANCE_ADMIN\\\".length\\n      mstore(add(ptr, 0x60), 0x524f4e494e5f474f5645524e414e43455f41444d494e00000000000000000000) // bytes(\\\"RONIN_GOVERNANCE_ADMIN\\\")\\n      let salt := keccak256(ptr, 0x80) // keccak256(abi.encode(\\\"RONIN_GOVERNANCE_ADMIN\\\", _roninChainId))\\n\\n      mstore(ptr, 0x599a80fcaa47b95e2323ab4d34d34e0cc9feda4b843edafcc30c7bdf60ea15bf) // keccak256(\\\"EIP712Domain(string name,string version,bytes32 salt)\\\")\\n      mstore(add(ptr, 0x20), 0x7e7935007966eb860f4a2ee3dcc9fd53fb3205ce2aa86b0126d4893d4d4c14b9) // keccak256(\\\"GovernanceAdmin\\\")\\n      mstore(add(ptr, 0x40), 0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de) // keccak256(\\\"3\\\")\\n      mstore(add(ptr, 0x60), salt)\\n      sstore(DOMAIN_SEPARATOR.slot, keccak256(ptr, 0x80))\\n    }\\n\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, _roninTrustedOrganizationContract);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual override onlySelfCall {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   *\\n   * Requirements:\\n   * - Only allowing self-call to this method, since this contract does not have admin.\\n   *\\n   */\\n  function setProposalExpiryDuration(uint256 _expiryDuration) external onlySelfCall {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyImplementation(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    bytes4 _selector = 0x5c60da1b;\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(abi.encodeWithSelector(_selector));\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the proposal expiry duration.\\n   */\\n  function getProposalExpiryDuration() external view returns (uint256) {\\n    return super._getProposalExpiryDuration();\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `_proxy`.\\n   *\\n   * Requirements:\\n   * - This contract must be the admin of `_proxy`.\\n   *\\n   */\\n  function getProxyAdmin(address _proxy) external view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    bytes4 _selector = 0xf851a440;\\n    (bool _success, bytes memory _returndata) = _proxy.staticcall(abi.encodeWithSelector(_selector));\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `_proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - This contract must be the current admin of `_proxy`.\\n   *\\n   */\\n  function changeProxyAdmin(address _proxy, address _newAdmin) external onlySelfCall {\\n    // bytes4(keccak256(\\\"changeAdmin(address)\\\"))\\n    bytes4 _selector = 0x8f283970;\\n    (bool _success, bytes memory _returndata) = _proxy.call(abi.encodeWithSelector(_selector, _newAdmin));\\n    _success.handleRevert(_selector, _returndata);\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getMinimumVoteWeight`.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual override returns (uint256) {\\n    bytes4 _selector = IQuorum.minimumVoteWeight.selector;\\n    (bool _success, bytes memory _returndata) = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION).staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector)\\n      )\\n    );\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Override `CoreGovernance-_getTotalWeights`.\\n   */\\n  function _getTotalWeight() internal view virtual override returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.totalWeight.selector;\\n    (bool _success, bytes memory _returndata) = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION).staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector)\\n      )\\n    );\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x4cbbe628695418c1bf7370ef719c6215d4ea823de08d5671a15c31dbb0ce952b\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6609392ea7d3174439b5715100bee82528fe6e4aff28927d48c27db8475e88c5\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address contract_) {\\n    contract_ = _getContractMap()[uint8(contractType)];\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9e1dceb68827adfb8c8184662f29ab5fe14e292a632878150e3b0b6c61bc1dce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/CoreGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/Proposal.sol\\\";\\nimport \\\"../../libraries/GlobalProposal.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\nimport \\\"../../libraries/Ballot.sol\\\";\\nimport \\\"../../interfaces/consumers/ChainTypeConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/SignatureConsumer.sol\\\";\\nimport \\\"../../interfaces/consumers/VoteStatusConsumer.sol\\\";\\n\\nabstract contract CoreGovernance is SignatureConsumer, VoteStatusConsumer, ChainTypeConsumer {\\n  using Proposal for Proposal.ProposalDetail;\\n\\n  /**\\n   * @dev Error thrown when attempting to interact with a finalized vote.\\n   */\\n  error ErrVoteIsFinalized();\\n\\n  /**\\n   * @dev Error thrown when the current proposal is not completed.\\n   */\\n  error ErrCurrentProposalIsNotCompleted();\\n\\n  struct ProposalVote {\\n    VoteStatus status;\\n    bytes32 hash;\\n    uint256 againstVoteWeight; // Total weight of against votes\\n    uint256 forVoteWeight; // Total weight of for votes\\n    address[] forVoteds; // Array of addresses voting for\\n    address[] againstVoteds; // Array of addresses voting against\\n    uint256 expiryTimestamp;\\n    mapping(address => Signature) sig;\\n    mapping(address => bool) voted;\\n  }\\n\\n  /// @dev Emitted when a proposal is created\\n  event ProposalCreated(\\n    uint256 indexed chainId,\\n    uint256 indexed round,\\n    bytes32 indexed proposalHash,\\n    Proposal.ProposalDetail proposal,\\n    address creator\\n  );\\n  /// @dev Emitted when the proposal is voted\\n  event ProposalVoted(bytes32 indexed proposalHash, address indexed voter, Ballot.VoteType support, uint256 weight);\\n  /// @dev Emitted when the proposal is approved\\n  event ProposalApproved(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is reject\\n  event ProposalRejected(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the vote is expired\\n  event ProposalExpired(bytes32 indexed proposalHash);\\n  /// @dev Emitted when the proposal is executed\\n  event ProposalExecuted(bytes32 indexed proposalHash, bool[] successCalls, bytes[] returnDatas);\\n  /// @dev Emitted when the proposal expiry duration is changed.\\n  event ProposalExpiryDurationChanged(uint256 indexed duration);\\n\\n  /// @dev Mapping from chain id => vote round\\n  /// @notice chain id = 0 for global proposal\\n  mapping(uint256 => uint256) public round;\\n  /// @dev Mapping from chain id => vote round => proposal vote\\n  mapping(uint256 => mapping(uint256 => ProposalVote)) public vote;\\n\\n  uint256 internal _proposalExpiryDuration;\\n\\n  constructor(uint256 _expiryDuration) {\\n    _setProposalExpiryDuration(_expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Creates new voting round by calculating the `_round` number of chain `_chainId`.\\n   * Increases the `_round` number if the previous one is not expired. Delete the previous proposal\\n   * if it is expired and not increase the `_round`.\\n   */\\n  function _createVotingRound(uint256 _chainId) internal returns (uint256 _round) {\\n    _round = round[_chainId];\\n    // Skip checking for the first ever round\\n    if (_round == 0) {\\n      _round = round[_chainId] = 1;\\n    } else {\\n      ProposalVote storage _latestProposalVote = vote[_chainId][_round];\\n      bool _isExpired = _tryDeleteExpiredVotingRound(_latestProposalVote);\\n      // Skip increasing round number if the latest round is expired, allow the vote to be overridden\\n      if (!_isExpired) {\\n        if (_latestProposalVote.status == VoteStatus.Pending) revert ErrCurrentProposalIsNotCompleted();\\n        unchecked {\\n          _round = ++round[_chainId];\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Saves new round voting for the proposal `_proposalHash` of chain `_chainId`.\\n   */\\n  function _saveVotingRound(ProposalVote storage _vote, bytes32 _proposalHash, uint256 _expiryTimestamp) internal {\\n    _vote.hash = _proposalHash;\\n    _vote.expiryTimestamp = _expiryTimestamp;\\n  }\\n\\n  /**\\n   * @dev Proposes for a new proposal.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposal(\\n    uint256 chainId,\\n    uint256 expiryTimestamp,\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    uint256[] memory gasAmounts,\\n    address creator\\n  ) internal virtual returns (Proposal.ProposalDetail memory proposal) {\\n    if (chainId == 0) revert ErrInvalidChainId(msg.sig, 0, block.chainid);\\n    uint256 round_ = _createVotingRound(chainId);\\n\\n    proposal = Proposal.ProposalDetail(round_, chainId, expiryTimestamp, targets, values, calldatas, gasAmounts);\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    _saveVotingRound(vote[chainId][round_], proposalHash, expiryTimestamp);\\n    emit ProposalCreated(chainId, round_, proposalHash, proposal, creator);\\n  }\\n\\n  /**\\n   * @dev Proposes proposal struct.\\n   *\\n   * Requirements:\\n   * - The chain id is not equal to 0.\\n   * - The proposal nonce is equal to the new round.\\n   *\\n   * Emits the `ProposalCreated` event.\\n   *\\n   */\\n  function _proposeProposalStruct(\\n    Proposal.ProposalDetail memory proposal,\\n    address creator\\n  ) internal virtual returns (uint256 round_) {\\n    uint256 chainId = proposal.chainId;\\n    if (chainId == 0) revert ErrInvalidChainId(msg.sig, 0, block.chainid);\\n    proposal.validate(_proposalExpiryDuration);\\n\\n    bytes32 proposalHash = proposal.hash();\\n    round_ = _createVotingRound(chainId);\\n    _saveVotingRound(vote[chainId][round_], proposalHash, proposal.expiryTimestamp);\\n    if (round_ != proposal.nonce) revert ErrInvalidProposalNonce(msg.sig);\\n    emit ProposalCreated(chainId, round_, proposalHash, proposal, creator);\\n  }\\n\\n  /**\\n   * @dev Casts vote for the proposal with data and returns whether the voting is done.\\n   *\\n   * Requirements:\\n   * - The proposal nonce is equal to the round.\\n   * - The vote is not finalized.\\n   * - The voter has not voted for the round.\\n   *\\n   * Emits the `ProposalVoted` event. Emits the `ProposalApproved`, `ProposalExecuted` or `ProposalRejected` once the\\n   * proposal is approved, executed or rejected.\\n   *\\n   */\\n  function _castVote(\\n    Proposal.ProposalDetail memory proposal,\\n    Ballot.VoteType support,\\n    uint256 minimumForVoteWeight,\\n    uint256 minimumAgainstVoteWeight,\\n    address voter,\\n    Signature memory signature,\\n    uint256 voterWeight\\n  ) internal virtual returns (bool done) {\\n    uint256 chainId = proposal.chainId;\\n    uint256 round_ = proposal.nonce;\\n    ProposalVote storage _vote = vote[chainId][round_];\\n\\n    if (_tryDeleteExpiredVotingRound(_vote)) {\\n      return true;\\n    }\\n\\n    if (round[proposal.chainId] != round_) revert ErrInvalidProposalNonce(msg.sig);\\n    if (_vote.status != VoteStatus.Pending) revert ErrVoteIsFinalized();\\n    if (_voted(_vote, voter)) revert ErrAlreadyVoted(voter);\\n\\n    _vote.voted[voter] = true;\\n    // Stores the signature if it is not empty\\n    if (signature.r > 0 || signature.s > 0 || signature.v > 0) {\\n      _vote.sig[voter] = signature;\\n    }\\n    emit ProposalVoted(_vote.hash, voter, support, voterWeight);\\n\\n    uint256 _forVoteWeight;\\n    uint256 _againstVoteWeight;\\n    if (support == Ballot.VoteType.For) {\\n      _vote.forVoteds.push(voter);\\n      _forVoteWeight = _vote.forVoteWeight += voterWeight;\\n    } else if (support == Ballot.VoteType.Against) {\\n      _vote.againstVoteds.push(voter);\\n      _againstVoteWeight = _vote.againstVoteWeight += voterWeight;\\n    } else revert ErrUnsupportedVoteType(msg.sig);\\n\\n    if (_forVoteWeight >= minimumForVoteWeight) {\\n      done = true;\\n      _vote.status = VoteStatus.Approved;\\n      emit ProposalApproved(_vote.hash);\\n      _tryExecute(_vote, proposal);\\n    } else if (_againstVoteWeight >= minimumAgainstVoteWeight) {\\n      done = true;\\n      _vote.status = VoteStatus.Rejected;\\n      emit ProposalRejected(_vote.hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev When the contract is on Ronin chain, checks whether the proposal is expired and delete it if is expired.\\n   *\\n   * Emits the event `ProposalExpired` if the vote is expired.\\n   *\\n   * Note: This function assumes the vote `_proposalVote` is already created, consider verifying the vote's existence\\n   * before or it will emit an unexpected event of `ProposalExpired`.\\n   */\\n  function _tryDeleteExpiredVotingRound(ProposalVote storage proposalVote) internal returns (bool isExpired) {\\n    isExpired =\\n      _getChainType() == ChainType.RoninChain &&\\n      proposalVote.status == VoteStatus.Pending &&\\n      proposalVote.expiryTimestamp <= block.timestamp;\\n\\n    if (isExpired) {\\n      emit ProposalExpired(proposalVote.hash);\\n\\n      for (uint256 _i; _i < proposalVote.forVoteds.length; ) {\\n        delete proposalVote.voted[proposalVote.forVoteds[_i]];\\n        delete proposalVote.sig[proposalVote.forVoteds[_i]];\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n      for (uint256 _i; _i < proposalVote.againstVoteds.length; ) {\\n        delete proposalVote.voted[proposalVote.againstVoteds[_i]];\\n        delete proposalVote.sig[proposalVote.againstVoteds[_i]];\\n\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n      delete proposalVote.status;\\n      delete proposalVote.hash;\\n      delete proposalVote.againstVoteWeight;\\n      delete proposalVote.forVoteWeight;\\n      delete proposalVote.forVoteds;\\n      delete proposalVote.againstVoteds;\\n      delete proposalVote.expiryTimestamp;\\n    }\\n  }\\n\\n  /**\\n   * @dev Executes the proposal and update the vote status once the proposal is executable.\\n   */\\n  function _tryExecute(ProposalVote storage vote_, Proposal.ProposalDetail memory proposal) internal {\\n    if (proposal.executable()) {\\n      vote_.status = VoteStatus.Executed;\\n      (bool[] memory _successCalls, bytes[] memory _returnDatas) = proposal.execute();\\n      emit ProposalExecuted(vote_.hash, _successCalls, _returnDatas);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the expiry duration for a new proposal.\\n   */\\n  function _setProposalExpiryDuration(uint256 expiryDuration) internal {\\n    _proposalExpiryDuration = expiryDuration;\\n    emit ProposalExpiryDurationChanged(expiryDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the expiry duration for a new proposal.\\n   */\\n  function _getProposalExpiryDuration() internal view returns (uint256) {\\n    return _proposalExpiryDuration;\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function _voted(ProposalVote storage vote_, address voter) internal view returns (bool) {\\n    return vote_.voted[voter];\\n  }\\n\\n  /**\\n   * @dev Returns total weight from validators.\\n   */\\n  function _getTotalWeight() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns minimum vote to pass a proposal.\\n   */\\n  function _getMinimumVoteWeight() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns current context is running on whether Ronin chain or on mainchain.\\n   */\\n  function _getChainType() internal view virtual returns (ChainType);\\n}\\n\",\"keccak256\":\"0xc6056209e8f6a0d9edced67388a4037c6fafffb68a3c7b2fe5759c487bb1d81c\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/governance-proposal/CommonGovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../CoreGovernance.sol\\\";\\n\\nabstract contract CommonGovernanceProposal is CoreGovernance {\\n  using Proposal for Proposal.ProposalDetail;\\n\\n  /**\\n   * @dev Error thrown when an invalid proposal is encountered.\\n   * @param actual The actual value of the proposal.\\n   * @param expected The expected value of the proposal.\\n   */\\n  error ErrInvalidProposal(bytes32 actual, bytes32 expected);\\n\\n  /**\\n   * @dev Casts votes by signatures.\\n   *\\n   * Note: This method does not verify the proposal hash with the vote hash. Please consider checking it before.\\n   *\\n   */\\n  function _castVotesBySignatures(\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _forDigest,\\n    bytes32 _againstDigest\\n  ) internal {\\n    if (!(_supports.length != 0 && _supports.length == _signatures.length)) revert ErrLengthMismatch(msg.sig);\\n\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeight() - _minimumForVoteWeight + 1;\\n\\n    address _lastSigner;\\n    address _signer;\\n    Signature calldata _sig;\\n    bool _hasValidVotes;\\n    for (uint256 _i; _i < _signatures.length; ) {\\n      _sig = _signatures[_i];\\n\\n      if (_supports[_i] == Ballot.VoteType.For) {\\n        _signer = ECDSA.recover(_forDigest, _sig.v, _sig.r, _sig.s);\\n      } else if (_supports[_i] == Ballot.VoteType.Against) {\\n        _signer = ECDSA.recover(_againstDigest, _sig.v, _sig.r, _sig.s);\\n      } else revert ErrUnsupportedVoteType(msg.sig);\\n\\n      if (_lastSigner >= _signer) revert ErrInvalidOrder(msg.sig);\\n      _lastSigner = _signer;\\n\\n      uint256 _weight = _getWeight(_signer);\\n      if (_weight > 0) {\\n        _hasValidVotes = true;\\n        if (\\n          _castVote(_proposal, _supports[_i], _minimumForVoteWeight, _minimumAgainstVoteWeight, _signer, _sig, _weight)\\n        ) {\\n          return;\\n        }\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    if (!_hasValidVotes) revert ErrInvalidSignatures(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Returns the voted signatures for the proposals.\\n   *\\n   * Note: The signatures can be empty in case the proposal is voted on the current network.\\n   *\\n   */\\n  function _getProposalSignatures(\\n    uint256 _chainId,\\n    uint256 _round\\n  )\\n    internal\\n    view\\n    returns (address[] memory _voters, Ballot.VoteType[] memory _supports, Signature[] memory _signatures)\\n  {\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n\\n    uint256 _forLength = _vote.forVoteds.length;\\n    uint256 _againstLength = _vote.againstVoteds.length;\\n    uint256 _voterLength = _forLength + _againstLength;\\n\\n    _supports = new Ballot.VoteType[](_voterLength);\\n    _signatures = new Signature[](_voterLength);\\n    _voters = new address[](_voterLength);\\n    for (uint256 _i; _i < _forLength; ) {\\n      _supports[_i] = Ballot.VoteType.For;\\n      _signatures[_i] = vote[_chainId][_round].sig[_vote.forVoteds[_i]];\\n      _voters[_i] = _vote.forVoteds[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    for (uint256 _i; _i < _againstLength; ) {\\n      _supports[_i + _forLength] = Ballot.VoteType.Against;\\n      _signatures[_i + _forLength] = vote[_chainId][_round].sig[_vote.againstVoteds[_i]];\\n      _voters[_i + _forLength] = _vote.againstVoteds[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter `_voter` casted vote for the proposal.\\n   */\\n  function _proposalVoted(uint256 _chainId, uint256 _round, address _voter) internal view returns (bool) {\\n    return _voted(vote[_chainId][_round], _voter);\\n  }\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function _getWeight(address _governor) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x75d59a854f4b878cce49701f9f3dc7c5e5bbddebe72df40396959bf31995f321\",\"license\":\"MIT\"},\"contracts/extensions/sequential-governance/governance-proposal/GovernanceProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../CoreGovernance.sol\\\";\\nimport \\\"./CommonGovernanceProposal.sol\\\";\\n\\nabstract contract GovernanceProposal is CoreGovernance, CommonGovernanceProposal {\\n  using Proposal for Proposal.ProposalDetail;\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator,\\n    address _creator\\n  ) internal {\\n    _proposeProposalStruct(_proposal, _creator);\\n    bytes32 _proposalHash = _proposal.hash();\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev Proposes a proposal struct and casts votes by signature.\\n   */\\n  function _castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures,\\n    bytes32 _domainSeparator\\n  ) internal {\\n    bytes32 _proposalHash = _proposal.hash();\\n\\n    if (vote[_proposal.chainId][_proposal.nonce].hash != _proposalHash) {\\n      revert ErrInvalidProposal(_proposalHash, vote[_proposal.chainId][_proposal.nonce].hash);\\n    }\\n\\n    _castVotesBySignatures(\\n      _proposal,\\n      _supports,\\n      _signatures,\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.For)),\\n      ECDSA.toTypedDataHash(_domainSeparator, Ballot.hash(_proposalHash, Ballot.VoteType.Against))\\n    );\\n  }\\n\\n  /**\\n   * @dev See `castProposalVoteForCurrentNetwork`.\\n   */\\n  function _castProposalVoteForCurrentNetwork(\\n    address _voter,\\n    Proposal.ProposalDetail memory _proposal,\\n    Ballot.VoteType _support\\n  ) internal {\\n    if (_proposal.chainId != block.chainid) revert ErrInvalidChainId(msg.sig, _proposal.chainId, block.chainid);\\n\\n    bytes32 proposalHash = _proposal.hash();\\n    if (vote[_proposal.chainId][_proposal.nonce].hash != proposalHash)\\n      revert ErrInvalidProposal(proposalHash, vote[_proposal.chainId][_proposal.nonce].hash);\\n\\n    uint256 _minimumForVoteWeight = _getMinimumVoteWeight();\\n    uint256 _minimumAgainstVoteWeight = _getTotalWeight() - _minimumForVoteWeight + 1;\\n    Signature memory _emptySignature;\\n    _castVote(\\n      _proposal,\\n      _support,\\n      _minimumForVoteWeight,\\n      _minimumAgainstVoteWeight,\\n      _voter,\\n      _emptySignature,\\n      _getWeight(_voter)\\n    );\\n  }\\n\\n  /**\\n   * @dev See {CommonGovernanceProposal-_getProposalSignatures}\\n   */\\n  function getProposalSignatures(\\n    uint256 _chainId,\\n    uint256 _round\\n  )\\n    external\\n    view\\n    returns (address[] memory _voters, Ballot.VoteType[] memory _supports, Signature[] memory _signatures)\\n  {\\n    return _getProposalSignatures(_chainId, _round);\\n  }\\n\\n  /**\\n   * @dev See {CommonGovernanceProposal-_proposalVoted}\\n   */\\n  function proposalVoted(uint256 _chainId, uint256 _round, address _voter) external view returns (bool) {\\n    return _proposalVoted(_chainId, _round, _voter);\\n  }\\n}\\n\",\"keccak256\":\"0xcd9652e50c946963dcbc80e63cf88eb927aefdb2cde63f59f385bf664871039f\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\ninterface IRoninGovernanceAdmin {\\n  /// @dev Emitted when an emergency exit poll is created.\\n  event EmergencyExitPollCreated(\\n    bytes32 voteHash,\\n    address validatorId,\\n    address recipientAfterUnlockedFund,\\n    uint256 requestedAt,\\n    uint256 expiredAt\\n  );\\n  /// @dev Emitted when an emergency exit poll is approved.\\n  event EmergencyExitPollApproved(bytes32 voteHash);\\n  /// @dev Emitted when an emergency exit poll is expired.\\n  event EmergencyExitPollExpired(bytes32 voteHash);\\n  /// @dev Emitted when an emergency exit poll is voted.\\n  event EmergencyExitPollVoted(bytes32 indexed voteHash, address indexed voter);\\n\\n  /**\\n   * @dev Create a vote to agree that an emergency exit is valid and should return the locked funds back.a\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   */\\n  function createEmergencyExitPoll(\\n    address validatorId,\\n    address recipientAfterUnlockedFund,\\n    uint256 requestedAt,\\n    uint256 expiredAt\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1dc70b2e42a8c5f537daacf328b1244a0a21b65be13d535ff239c60707b03923\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeConsensusAddr`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0xd9dc4bcb05f8208ba64cc249e99c650aa0507342c3596c4b5f5522545c01e689\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x99d8213d857e30d367155abd15dc42730afdfbbac3a22dfb3b95ffea2083a92e\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/ChainTypeConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainTypeConsumer {\\n  enum ChainType {\\n    RoninChain,\\n    Mainchain\\n  }\\n}\\n\",\"keccak256\":\"0xe0d20e00c8d237f8e0fb881abf1ff1ef114173bcb428f06f689c581666a22db7\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/SignatureConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface SignatureConsumer {\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xd370e350722067097dec1a5c31bda6e47e83417fa5c3288293bb910028cd136b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/VoteStatusConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VoteStatusConsumer {\\n  enum VoteStatus {\\n    Pending,\\n    Approved,\\n    Executed,\\n    Rejected,\\n    Expired\\n  }\\n}\\n\",\"keccak256\":\"0xa5045232c0c053fcf31fb3fe71942344444159c48d5f1b2063dbb06b6a1c9752\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfoById(address cid) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdminById(address id, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x636a1aacb7a2c3c951f8f0bea30464bfb54717bd84a3c3fcdf62d0683b12df6f\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeAdminAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddr(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeConsensusAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddr(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeTreasuryAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddr(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0x81996cc6c49278a26d23940444861205474bc38a82effcf4e42dbe804e32af0e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(\\n    address indexed cid,\\n    uint256 rewardAmount,\\n    BlockRewardDeprecatedType deprecatedType\\n  );\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipientAddr,\\n    uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount,\\n    address[] cids,\\n    uint256[] amounts,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xabf7541c6acfef6db495585f74bc9be88a65c20b09850197bc06ab452f07d172\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount\\n  );\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid,\\n    address indexed recipient,\\n    uint256 unlockedAmount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0xaa2df8b56a83730a3a1b3876708570d70843802737ff7c776a5725c71d7ea8f7\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{}\\n\",\"keccak256\":\"0xf4f96a624e7c77bbce044c67e3f4b406e65871debc19e7bfab663c1fcfcbc7b0\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(\\n    TConsensus addr\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x27afa712094804b997f55e8f8d320760e07d7260ab33aeb8fb61c39849f09bf3\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n  event MaxValidatorNumberUpdated(uint256);\\n  /// @dev Emitted when the number of reserved slots for prioritized validators is updated.\\n  event MaxPrioritizedValidatorNumberUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the consensus address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the id is block producer or not.\\n   */\\n  function isBlockProducerById(address id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n\\n  /**\\n   * @dev Updates the max validator number\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxValidatorNumber(uint256 _maxValidatorNumber) external;\\n\\n  /**\\n   * @dev Updates the number of reserved slots for prioritized validators\\n   *\\n   * Requirements:\\n   * - The method caller is admin\\n   *\\n   * Emits the event `MaxPrioritizedValidatorNumberUpdated`\\n   *\\n   */\\n  function setMaxPrioritizedValidatorNumber(uint256 _maxPrioritizedValidatorNumber) external;\\n}\\n\",\"keccak256\":\"0xdf65d1580d3d3c7624c293e38b270fdd69285b58fe4e67b03ed71ac50bb1ef08\",\"license\":\"MIT\"},\"contracts/libraries/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressArrayUtils {\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    if (A.length == 0) {\\n      return false;\\n    }\\n    unchecked {\\n      for (uint256 i = 0; i < A.length - 1; i++) {\\n        for (uint256 j = i + 1; j < A.length; j++) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory _this, address[] memory _other) internal pure returns (bool yes_) {\\n    // Hashing two arrays and compare their hash\\n    assembly {\\n      let _thisHash := keccak256(add(_this, 32), mul(mload(_this), 32))\\n      let _otherHash := keccak256(add(_other, 32), mul(mload(_other), 32))\\n      yes_ := eq(_thisHash, _otherHash)\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array from a and b.\\n   */\\n  function extend(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    uint256 lengthA = a.length;\\n    uint256 lengthB = b.length;\\n    unchecked {\\n      c = new address[](lengthA + lengthB);\\n    }\\n    uint256 i;\\n    for (; i < lengthA; ) {\\n      c[i] = a[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    for (uint256 j; j < lengthB; ) {\\n      c[i] = b[j];\\n      unchecked {\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf760162653a85d6e1b24df4d33c74076f778470112f421a02050fb981242001\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary Ballot {\\n  using ECDSA for bytes32;\\n\\n  enum VoteType {\\n    For,\\n    Against\\n  }\\n\\n  // keccak256(\\\"Ballot(bytes32 proposalHash,uint8 support)\\\");\\n  bytes32 private constant BALLOT_TYPEHASH = 0xd900570327c4c0df8dd6bdd522b7da7e39145dd049d2fd4602276adcd511e3c2;\\n\\n  function hash(bytes32 _proposalHash, VoteType _support) internal pure returns (bytes32 digest) {\\n    // return keccak256(abi.encode(BALLOT_TYPEHASH, _proposalHash, _support));\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, BALLOT_TYPEHASH)\\n      mstore(add(ptr, 0x20), _proposalHash)\\n      mstore(add(ptr, 0x40), _support)\\n      digest := keccak256(ptr, 0x60)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaa1e66bcd86baa6f18c7c5e9b67496535f229cbd2e2ecb4c66bcbfed2b1365de\",\"license\":\"MIT\"},\"contracts/libraries/EmergencyExitBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary EmergencyExitBallot {\\n  // NOTE: The \\\"address consensusAddress\\\" is not changed in order to preserve the type hash. Since the EmergencyExitBallot\\n  // is not a library and is hashed by param feeds, not change the type hash still assure the contract to works correctly.\\n\\n  // keccak256(\\\"EmergencyExitBallot(address consensusAddress,address recipientAfterUnlockedFund,uint256 requestedAt,uint256 expiredAt)\\\");\\n  bytes32 private constant EMERGENCY_EXIT_BALLOT_TYPEHASH =\\n    0x697acba4deaf1a718d8c2d93e42860488cb7812696f28ca10eed17bac41e7027;\\n\\n  /**\\n   * @dev Returns hash of the ballot.\\n   */\\n  function hash(\\n    address validatorId,\\n    address recipientAfterUnlockedFund,\\n    uint256 requestedAt,\\n    uint256 expiredAt\\n  ) internal pure returns (bytes32 digest) {\\n    /*\\n     * return\\n     *   keccak256(\\n     *     abi.encode(\\n     *       EMERGENCY_EXIT_BALLOT_TYPEHASH,\\n     *       validatorId,\\n     *       recipientAfterUnlockedFund,\\n     *       requestedAt,\\n     *       expiredAt\\n     *     )\\n     *   );\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, EMERGENCY_EXIT_BALLOT_TYPEHASH)\\n      mstore(add(ptr, 0x20), validatorId)\\n      mstore(add(ptr, 0x40), recipientAfterUnlockedFund)\\n      mstore(add(ptr, 0x60), requestedAt)\\n      mstore(add(ptr, 0x80), expiredAt)\\n      digest := keccak256(ptr, 0xa0)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xeb775ad4d137194520cea3ce05ee7fcfaacf5c06e93e3519e17bdacb3f7841dd\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xa712f0d1a323ee39f23eb3ee3278b4ec25fe2e536b1ccc629578c66f277c088d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ErrorHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ErrProxyCallFailed } from \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary ErrorHandler {\\n  /// @notice handle low level call revert if call failed,\\n  /// If extcall return empty bytes, reverts with custom error.\\n  /// @param status Status of external call\\n  /// @param callSig function signature of the calldata\\n  /// @param returnOrRevertData bytes result from external call\\n  function handleRevert(bool status, bytes4 callSig, bytes memory returnOrRevertData) internal pure {\\n    // Get the function signature of current context\\n    bytes4 msgSig = msg.sig;\\n    assembly {\\n      if iszero(status) {\\n        // Load the length of bytes array\\n        let revertLength := mload(returnOrRevertData)\\n        // Check if length != 0 => revert following reason from external call\\n        if iszero(iszero(revertLength)) {\\n          // Start of revert data bytes. The 0x20 offset is always the same.\\n          revert(add(returnOrRevertData, 0x20), revertLength)\\n        }\\n\\n        // Load free memory pointer\\n        let ptr := mload(0x40)\\n        // Store 4 bytes the function selector of ErrProxyCallFailed(msg.sig, callSig)\\n        // Equivalent to revert ErrProxyCallFailed(bytes4,bytes4)\\n        mstore(ptr, 0x8e3eda2b)\\n        // Store 4 bytes of msgSig parameter in the next slot\\n        mstore(add(ptr, 0x20), msgSig)\\n        // Store 4 bytes of callSig parameter in the next slot\\n        mstore(add(ptr, 0x40), callSig)\\n        // Revert 68 bytes of error starting from 0x1c\\n        revert(add(ptr, 0x1c), 0x44)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xab13dea63389bea2acb67c429ab9d55f154d03c982bf0b6f5e7be90dd227c084\",\"license\":\"MIT\"},\"contracts/libraries/GlobalProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proposal.sol\\\";\\n\\nlibrary GlobalProposal {\\n  /**\\n   * @dev Error thrown when attempting to interact with an unsupported target.\\n   */\\n  error ErrUnsupportedTarget(bytes32 proposalHash, uint256 targetNumber);\\n\\n  enum TargetOption {\\n    /* 0 */ BridgeManager,\\n    /* 1 */ GatewayContract,\\n    /* 2 */ BridgeReward,\\n    /* 3 */ BridgeSlash,\\n    /* 4 */ BridgeTracking\\n  }\\n\\n  struct GlobalProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    uint256 expiryTimestamp;\\n    TargetOption[] targetOptions;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"GlobalProposalDetail(uint256 nonce,uint256 expiryTimestamp,uint8[] targetOptions,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0x1463f426c05aff2c1a7a0957a71c9898bc8b47142540538e79ee25ee91141350;\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(GlobalProposalDetail memory self) internal pure returns (bytes32 digest_) {\\n    uint256[] memory values = self.values;\\n    TargetOption[] memory targets = self.targetOptions;\\n    bytes32[] memory calldataHashList = new bytes32[](self.calldatas.length);\\n    uint256[] memory gasAmounts = self.gasAmounts;\\n\\n    for (uint256 i; i < calldataHashList.length; ) {\\n      calldataHashList[i] = keccak256(self.calldatas[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    /*\\n     * return\\n     *   keccak256(\\n     *     abi.encode(\\n     *       TYPE_HASH,\\n     *       _proposal.nonce,\\n     *       _proposal.expiryTimestamp,\\n     *       _targetsHash,\\n     *       _valuesHash,\\n     *       _calldatasHash,\\n     *       _gasAmountsHash\\n     *     )\\n     *   );\\n     */\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(self)) // _proposal.nonce\\n      mstore(add(ptr, 0x40), mload(add(self, 0x20))) // _proposal.expiryTimestamp\\n\\n      let arrayHashed\\n      arrayHashed := keccak256(add(targets, 32), mul(mload(targets), 32)) // targetsHash\\n      mstore(add(ptr, 0x60), arrayHashed)\\n      arrayHashed := keccak256(add(values, 32), mul(mload(values), 32)) // _valuesHash\\n      mstore(add(ptr, 0x80), arrayHashed)\\n      arrayHashed := keccak256(add(calldataHashList, 32), mul(mload(calldataHashList), 32)) // _calldatasHash\\n      mstore(add(ptr, 0xa0), arrayHashed)\\n      arrayHashed := keccak256(add(gasAmounts, 32), mul(mload(gasAmounts), 32)) // _gasAmountsHash\\n      mstore(add(ptr, 0xc0), arrayHashed)\\n      digest_ := keccak256(ptr, 0xe0)\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts into the normal proposal.\\n   */\\n  function intoProposalDetail(\\n    GlobalProposalDetail memory self,\\n    address[] memory targets\\n  ) internal pure returns (Proposal.ProposalDetail memory detail_) {\\n    detail_.nonce = self.nonce;\\n    detail_.expiryTimestamp = self.expiryTimestamp;\\n    detail_.chainId = 0;\\n    detail_.targets = new address[](self.targetOptions.length);\\n    detail_.values = self.values;\\n    detail_.calldatas = self.calldatas;\\n    detail_.gasAmounts = self.gasAmounts;\\n\\n    for (uint256 i; i < self.targetOptions.length; ) {\\n      detail_.targets[i] = targets[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2716e1baf467abab71d89efa01ce0dc9164531ab4221d2758233a81b6d906474\",\"license\":\"MIT\"},\"contracts/libraries/IsolatedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/consumers/VoteStatusConsumer.sol\\\";\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary IsolatedGovernance {\\n  struct Vote {\\n    VoteStatusConsumer.VoteStatus status;\\n    bytes32 finalHash;\\n    /// @dev Mapping from voter => receipt hash\\n    mapping(address => bytes32) voteHashOf;\\n    /// @dev The timestamp that voting is expired (no expiration=0)\\n    uint256 expiredAt;\\n    /// @dev The timestamp that voting is created\\n    uint256 createdAt;\\n    /// @dev The list of voters\\n    address[] voters;\\n  }\\n\\n  /**\\n   * @dev Casts vote for the receipt with the receipt hash `_hash`.\\n   *\\n   * Requirements:\\n   * - The voter has not voted for the round.\\n   *\\n   */\\n  function castVote(Vote storage _v, address _voter, bytes32 _hash) internal {\\n    if (_v.expiredAt > 0 && _v.expiredAt <= block.timestamp) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Expired;\\n    }\\n\\n    if (voted(_v, _voter)) revert ErrAlreadyVoted(_voter);\\n\\n    _v.voteHashOf[_voter] = _hash;\\n    _v.voters.push(_voter);\\n  }\\n\\n  /**\\n   * @dev Updates vote with the requirement of minimum vote weight.\\n   */\\n  function syncVoteStatus(\\n    Vote storage _v,\\n    uint256 _minimumVoteWeight,\\n    uint256 _votedWeightForHash,\\n    bytes32 _hash\\n  ) internal returns (VoteStatusConsumer.VoteStatus _status) {\\n    if (_votedWeightForHash >= _minimumVoteWeight && _v.status == VoteStatusConsumer.VoteStatus.Pending) {\\n      _v.status = VoteStatusConsumer.VoteStatus.Approved;\\n      _v.finalHash = _hash;\\n    }\\n\\n    return _v.status;\\n  }\\n\\n  /**\\n   * @dev Returns the list of vote's addresses that voted for the hash `_hash`.\\n   */\\n  function filterByHash(Vote storage _v, bytes32 _hash) internal view returns (address[] memory _voters) {\\n    uint256 _count;\\n    _voters = new address[](_v.voters.length);\\n\\n    unchecked {\\n      for (uint _i; _i < _voters.length; ++_i) {\\n        address _voter = _v.voters[_i];\\n        if (_v.voteHashOf[_voter] == _hash) {\\n          _voters[_count++] = _voter;\\n        }\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_voters, _count)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted for the proposal.\\n   */\\n  function voted(Vote storage _v, address _voter) internal view returns (bool) {\\n    return _v.voteHashOf[_voter] != bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0xa6a1e04b914580c099ac87f65ec24c35445eee34809e3decf1c57b6c52942d36\",\"license\":\"MIT\"},\"contracts/libraries/Proposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ErrInvalidChainId, ErrLengthMismatch } from \\\"../utils/CommonErrors.sol\\\";\\n\\nlibrary Proposal {\\n  /**\\n   * @dev Error thrown when there is insufficient gas to execute a function.\\n   */\\n  error ErrInsufficientGas(bytes32 proposalHash);\\n\\n  /**\\n   * @dev Error thrown when an invalid expiry timestamp is provided.\\n   */\\n  error ErrInvalidExpiryTimestamp();\\n\\n  struct ProposalDetail {\\n    // Nonce to make sure proposals are executed in order\\n    uint256 nonce;\\n    // Value 0: all chain should run this proposal\\n    // Other values: only specifc chain has to execute\\n    uint256 chainId;\\n    uint256 expiryTimestamp;\\n    address[] targets;\\n    uint256[] values;\\n    bytes[] calldatas;\\n    uint256[] gasAmounts;\\n  }\\n\\n  // keccak256(\\\"ProposalDetail(uint256 nonce,uint256 chainId,uint256 expiryTimestamp,address[] targets,uint256[] values,bytes[] calldatas,uint256[] gasAmounts)\\\");\\n  bytes32 public constant TYPE_HASH = 0xd051578048e6ff0bbc9fca3b65a42088dbde10f36ca841de566711087ad9b08a;\\n\\n  /**\\n   * @dev Validates the proposal.\\n   */\\n  function validate(ProposalDetail memory _proposal, uint256 _maxExpiryDuration) internal view {\\n    if (\\n      !(_proposal.targets.length > 0 &&\\n        _proposal.targets.length == _proposal.values.length &&\\n        _proposal.targets.length == _proposal.calldatas.length &&\\n        _proposal.targets.length == _proposal.gasAmounts.length)\\n    ) {\\n      revert ErrLengthMismatch(msg.sig);\\n    }\\n\\n    if (_proposal.expiryTimestamp > block.timestamp + _maxExpiryDuration) {\\n      revert ErrInvalidExpiryTimestamp();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns struct hash of the proposal.\\n   */\\n  function hash(ProposalDetail memory _proposal) internal pure returns (bytes32 digest_) {\\n    uint256[] memory _values = _proposal.values;\\n    address[] memory _targets = _proposal.targets;\\n    bytes32[] memory _calldataHashList = new bytes32[](_proposal.calldatas.length);\\n    uint256[] memory _gasAmounts = _proposal.gasAmounts;\\n\\n    for (uint256 _i; _i < _calldataHashList.length; ) {\\n      _calldataHashList[_i] = keccak256(_proposal.calldatas[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    // return\\n    //   keccak256(\\n    //     abi.encode(\\n    //       TYPE_HASH,\\n    //       _proposal.nonce,\\n    //       _proposal.chainId,\\n    //       _targetsHash,\\n    //       _valuesHash,\\n    //       _calldatasHash,\\n    //       _gasAmountsHash\\n    //     )\\n    //   );\\n    // /\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, TYPE_HASH)\\n      mstore(add(ptr, 0x20), mload(_proposal)) // _proposal.nonce\\n      mstore(add(ptr, 0x40), mload(add(_proposal, 0x20))) // _proposal.chainId\\n      mstore(add(ptr, 0x60), mload(add(_proposal, 0x40))) // expiry timestamp\\n\\n      let arrayHashed\\n      arrayHashed := keccak256(add(_targets, 32), mul(mload(_targets), 32)) // targetsHash\\n      mstore(add(ptr, 0x80), arrayHashed)\\n      arrayHashed := keccak256(add(_values, 32), mul(mload(_values), 32)) // _valuesHash\\n      mstore(add(ptr, 0xa0), arrayHashed)\\n      arrayHashed := keccak256(add(_calldataHashList, 32), mul(mload(_calldataHashList), 32)) // _calldatasHash\\n      mstore(add(ptr, 0xc0), arrayHashed)\\n      arrayHashed := keccak256(add(_gasAmounts, 32), mul(mload(_gasAmounts), 32)) // _gasAmountsHash\\n      mstore(add(ptr, 0xe0), arrayHashed)\\n      digest_ := keccak256(ptr, 0x100)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether the proposal is executable for the current chain.\\n   *\\n   * @notice Does not check whether the call result is successful or not. Please use `execute` instead.\\n   *\\n   */\\n  function executable(ProposalDetail memory _proposal) internal view returns (bool _result) {\\n    return _proposal.chainId == 0 || _proposal.chainId == block.chainid;\\n  }\\n\\n  /**\\n   * @dev Executes the proposal.\\n   */\\n  function execute(\\n    ProposalDetail memory _proposal\\n  ) internal returns (bool[] memory _successCalls, bytes[] memory _returnDatas) {\\n    if (!executable(_proposal)) revert ErrInvalidChainId(msg.sig, _proposal.chainId, block.chainid);\\n\\n    _successCalls = new bool[](_proposal.targets.length);\\n    _returnDatas = new bytes[](_proposal.targets.length);\\n    for (uint256 _i = 0; _i < _proposal.targets.length; ) {\\n      if (gasleft() <= _proposal.gasAmounts[_i]) revert ErrInsufficientGas(hash(_proposal));\\n\\n      (_successCalls[_i], _returnDatas[_i]) = _proposal.targets[_i].call{\\n        value: _proposal.values[_i],\\n        gas: _proposal.gasAmounts[_i]\\n      }(_proposal.calldatas[_i]);\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbc29aa4e69db7eef0034fdb795181124f86bcf2bc07b5e4a202100dbdce7f7a1\",\"license\":\"MIT\"},\"contracts/ronin/RoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/sequential-governance/governance-proposal/GovernanceProposal.sol\\\";\\nimport \\\"../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../extensions/GovernanceAdmin.sol\\\";\\nimport \\\"../libraries/EmergencyExitBallot.sol\\\";\\nimport { ErrorHandler } from \\\"../libraries/ErrorHandler.sol\\\";\\nimport { IsolatedGovernance } from \\\"../libraries/IsolatedGovernance.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../utils/DeprecatedSlots.sol\\\";\\nimport \\\"../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../interfaces/IRoninGovernanceAdmin.sol\\\";\\n\\ncontract RoninGovernanceAdmin is\\n  HasContracts,\\n  IRoninGovernanceAdmin,\\n  GovernanceAdmin,\\n  GovernanceProposal,\\n  HasValidatorDeprecated\\n{\\n  using ErrorHandler for bool;\\n  using Proposal for Proposal.ProposalDetail;\\n  using IsolatedGovernance for IsolatedGovernance.Vote;\\n\\n  /// @dev Mapping from request hash => emergency poll\\n  mapping(bytes32 => IsolatedGovernance.Vote) internal _emergencyExitPoll;\\n\\n  modifier onlyGovernor() {\\n    _requireGorvernor();\\n    _;\\n  }\\n\\n  constructor(\\n    uint256 _roninChainId,\\n    address _roninTrustedOrganizationContract,\\n    address _validatorContract,\\n    uint256 _expiryDuration\\n  ) CoreGovernance(_expiryDuration) GovernanceAdmin(_roninChainId, _roninTrustedOrganizationContract) {\\n    _setContract(ContractType.VALIDATOR, _validatorContract);\\n  }\\n\\n  function _requireGorvernor() private view {\\n    if (_getWeight(msg.sender) == 0) revert ErrUnauthorized(msg.sig, RoleAccess.GOVERNOR);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(\\n    ContractType contractType,\\n    address addr\\n  ) external override(HasContracts, GovernanceAdmin) onlySelfCall {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Returns whether the voter casted vote for emergency exit poll.\\n   */\\n  function emergencyPollVoted(bytes32 _voteHash, address _voter) external view returns (bool) {\\n    return _emergencyExitPoll[_voteHash].voted(_voter);\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_proposeProposal`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function propose(\\n    uint256 _chainId,\\n    uint256 _expiryTimestamp,\\n    address[] calldata _targets,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts\\n  ) external onlyGovernor {\\n    _proposeProposal(_chainId, _expiryTimestamp, _targets, _values, _calldatas, _gasAmounts, msg.sender);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_proposeProposalStructAndCastVotes`.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   * - The proposal is for the current network.\\n   *\\n   */\\n  function proposeProposalStructAndCastVotes(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external onlyGovernor {\\n    _proposeProposalStructAndCastVotes(_proposal, _supports, _signatures, DOMAIN_SEPARATOR, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Proposes and casts vote for a proposal on the current network.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   * - The proposal is for the current network.\\n   *\\n   */\\n  function proposeProposalForCurrentNetwork(\\n    uint256 _expiryTimestamp,\\n    address[] calldata _targets,\\n    uint256[] calldata _values,\\n    bytes[] calldata _calldatas,\\n    uint256[] calldata _gasAmounts,\\n    Ballot.VoteType _support\\n  ) external onlyGovernor {\\n    address _voter = msg.sender;\\n    Proposal.ProposalDetail memory _proposal = _proposeProposal(\\n      block.chainid,\\n      _expiryTimestamp,\\n      _targets,\\n      _values,\\n      _calldatas,\\n      _gasAmounts,\\n      _voter\\n    );\\n    _castProposalVoteForCurrentNetwork(_voter, _proposal, _support);\\n  }\\n\\n  /**\\n   * @dev Casts vote for a proposal on the current network.\\n   *\\n   * Requirements:\\n   * - The method caller is governor.\\n   *\\n   */\\n  function castProposalVoteForCurrentNetwork(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType _support\\n  ) external onlyGovernor {\\n    _castProposalVoteForCurrentNetwork(msg.sender, _proposal, _support);\\n  }\\n\\n  /**\\n   * @dev See `GovernanceProposal-_castProposalBySignatures`.\\n   */\\n  function castProposalBySignatures(\\n    Proposal.ProposalDetail calldata _proposal,\\n    Ballot.VoteType[] calldata _supports,\\n    Signature[] calldata _signatures\\n  ) external {\\n    _castProposalBySignatures(_proposal, _supports, _signatures, DOMAIN_SEPARATOR);\\n  }\\n\\n  /**\\n   * @dev Deletes the expired proposal by its chainId and nonce, without creating a new proposal.\\n   *\\n   * Requirements:\\n   * - The proposal is already created.\\n   *\\n   */\\n  function deleteExpired(uint256 _chainId, uint256 _round) external {\\n    ProposalVote storage _vote = vote[_chainId][_round];\\n    if (_vote.hash == 0) revert ErrQueryForEmptyVote();\\n\\n    _tryDeleteExpiredVotingRound(_vote);\\n  }\\n\\n  /**\\n   * @inheritdoc IRoninGovernanceAdmin\\n   */\\n  function createEmergencyExitPoll(\\n    address validatorId,\\n    address recipientAfterUnlockedFund,\\n    uint256 requestedAt,\\n    uint256 expiredAt\\n  ) external onlyContract(ContractType.VALIDATOR) {\\n    bytes32 ballotHash = EmergencyExitBallot.hash(validatorId, recipientAfterUnlockedFund, requestedAt, expiredAt);\\n    IsolatedGovernance.Vote storage _v = _emergencyExitPoll[ballotHash];\\n    _v.createdAt = block.timestamp;\\n    _v.expiredAt = expiredAt;\\n    emit EmergencyExitPollCreated(ballotHash, validatorId, recipientAfterUnlockedFund, requestedAt, expiredAt);\\n  }\\n\\n  /**\\n   * @dev Votes for an emergency exit. Executes to unlock fund for the emergency exit's requester.\\n   *\\n   * Requirements:\\n   * - The voter is governor.\\n   * - The voting is existent.\\n   * - The voting is not expired yet.\\n   *\\n   */\\n  function voteEmergencyExit(\\n    bytes32 voteHash,\\n    address validatorId,\\n    address recipientAfterUnlockedFund,\\n    uint256 requestedAt,\\n    uint256 expiredAt\\n  ) external onlyGovernor {\\n    address _voter = msg.sender;\\n    bytes32 _hash = EmergencyExitBallot.hash(validatorId, recipientAfterUnlockedFund, requestedAt, expiredAt);\\n    if (voteHash != _hash) revert ErrInvalidVoteHash();\\n\\n    IsolatedGovernance.Vote storage _v = _emergencyExitPoll[_hash];\\n    if (_v.createdAt == 0) revert ErrQueryForNonExistentVote();\\n    if (_v.status == VoteStatus.Expired) revert ErrQueryForExpiredVote();\\n\\n    _v.castVote(_voter, _hash);\\n    emit EmergencyExitPollVoted(_hash, _voter);\\n\\n    address[] memory _voters = _v.filterByHash(_hash);\\n    VoteStatus _stt = _v.syncVoteStatus(_getMinimumVoteWeight(), _sumGovernorWeight(_voters), _hash);\\n    if (_stt == VoteStatus.Approved) {\\n      _execReleaseLockedFundForEmergencyExitRequest(validatorId, recipientAfterUnlockedFund);\\n      emit EmergencyExitPollApproved(_hash);\\n      _v.status = VoteStatus.Executed;\\n    } else if (_stt == VoteStatus.Expired) {\\n      emit EmergencyExitPollExpired(_hash);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns weight of a govenor.\\n   */\\n  function _getWeight(address _governor) internal view virtual override returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.getGovernorWeight.selector;\\n    (bool _success, bytes memory _returndata) = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION).staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, _governor)\\n      )\\n    );\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Returns the total weight of a list address of governors.\\n   */\\n  function _sumGovernorWeight(address[] memory governors) internal view virtual returns (uint256) {\\n    bytes4 _selector = IRoninTrustedOrganization.sumGovernorWeight.selector;\\n    (bool _success, bytes memory _returndata) = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION).staticcall(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, governors)\\n      )\\n    );\\n\\n    _success.handleRevert(_selector, _returndata);\\n    return abi.decode(_returndata, (uint256));\\n  }\\n\\n  /**\\n   * @dev Trigger function from validator contract to unlock fund for emergency exit request.\\n   */\\n  function _execReleaseLockedFundForEmergencyExitRequest(\\n    address validatorId,\\n    address recipientAfterUnlockedFund\\n  ) internal virtual {\\n    bytes4 _selector = IEmergencyExit.execReleaseLockedFundForEmergencyExitRequest.selector;\\n    (bool _success, bytes memory _returndata) = getContract(ContractType.VALIDATOR).call(\\n      abi.encodeWithSelector(\\n        // TransparentUpgradeableProxyV2.functionDelegateCall.selector,\\n        0x4bb5274a,\\n        abi.encodeWithSelector(_selector, validatorId, recipientAfterUnlockedFund)\\n      )\\n    );\\n    _success.handleRevert(_selector, _returndata);\\n  }\\n\\n  /**\\n   * @dev See `CoreGovernance-_getChainType`.\\n   */\\n  function _getChainType() internal pure override returns (ChainType) {\\n    return ChainType.RoninChain;\\n  }\\n}\\n\",\"keccak256\":\"0xc889988ab7688bce749793b79ec7051a60855ba4563d37c24535a26361aec471\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x3017524670c86eaf3930447e482b6f372ae091bb5f8eb89570924599fa626ed7\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */ UNKNOWN,\\n  /*  1 */ PAUSE_ENFORCER,\\n  /*  2 */ BRIDGE,\\n  /*  3 */ BRIDGE_TRACKING,\\n  /*  4 */ GOVERNANCE_ADMIN,\\n  /*  5 */ MAINTENANCE,\\n  /*  6 */ SLASH_INDICATOR,\\n  /*  7 */ STAKING_VESTING,\\n  /*  8 */ VALIDATOR,\\n  /*  9 */ STAKING,\\n  /* 10 */ RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */ BRIDGE_MANAGER,\\n  /* 12 */ BRIDGE_SLASH,\\n  /* 13 */ BRIDGE_REWARD,\\n  /* 14 */ FAST_FINALITY_TRACKING,\\n  /* 15 */ PROFILE\\n}\\n\",\"keccak256\":\"0x7f547a44265f4c4b03d8971f7fc5eaa2e6064ea8cd509c1b761108f9800dab68\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AddressArrayUtils } from \\\"../libraries/AddressArrayUtils.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport { ErrAddressIsNotCreatedEOA, ErrZeroAddress, ErrOnlySelfCall, ErrZeroCodeContract, ErrUnsupportedInterface } from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using AddressArrayUtils for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert AddressArrayUtils.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x2d0dfcef3636945bc1785c1fa5a05f5203c79cbb81b2eee92a3ac6a2378c2ce5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */ UNKNOWN,\\n  /* 1 */ ADMIN,\\n  /* 2 */ COINBASE,\\n  /* 3 */ GOVERNOR,\\n  /* 4 */ CANDIDATE_ADMIN,\\n  /* 5 */ WITHDRAWAL_MIGRATOR,\\n  /* 6 */ __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */ BLOCK_PRODUCER,\\n  /* 8 */ VALIDATOR_CANDIDATE,\\n  /* 9 */ CONSENSUS,\\n  /* 10 */ TREASURY\\n}\\n\",\"keccak256\":\"0x7da4631824b53be17e246102ad59458f91f2395710561ac9bface18d35fb2502\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 165,
  "numDeployments": 2,
  "storageLayout": {
    "storage": [
      {
        "astId": 3720,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "round",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3728,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "vote",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)3658_storage))"
      },
      {
        "astId": 3730,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_proposalExpiryDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 38054,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "______deprecatedGovernanceAdmin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 38034,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "______deprecatedBridge",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 251,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "roninChainId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 254,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 38038,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 19530,
        "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
        "label": "_emergencyExitPoll",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Vote)11289_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32",
        "base": "t_address"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(VoteStatus)8741": {
        "encoding": "inplace",
        "label": "enum VoteStatusConsumer.VoteStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_struct(Signature)8732_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SignatureConsumer.Signature)",
        "numberOfBytes": "32",
        "value": "t_struct(Signature)8732_storage"
      },
      "t_mapping(t_bytes32,t_struct(Vote)11289_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IsolatedGovernance.Vote)",
        "numberOfBytes": "32",
        "value": "t_struct(Vote)11289_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProposalVote)3658_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct CoreGovernance.ProposalVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProposalVote)3658_storage)"
      },
      "t_mapping(t_uint256,t_struct(ProposalVote)3658_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoreGovernance.ProposalVote)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVote)3658_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ProposalVote)3658_storage": {
        "encoding": "inplace",
        "label": "struct CoreGovernance.ProposalVote",
        "numberOfBytes": "288",
        "members": [
          {
            "astId": 3634,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)8741"
          },
          {
            "astId": 3636,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3638,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoteWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3640,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoteWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3643,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "forVoteds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3646,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "againstVoteds",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3648,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "expiryTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3653,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "sig",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(Signature)8732_storage)"
          },
          {
            "astId": 3657,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voted",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          }
        ]
      },
      "t_struct(Signature)8732_storage": {
        "encoding": "inplace",
        "label": "struct SignatureConsumer.Signature",
        "numberOfBytes": "96",
        "members": [
          {
            "astId": 8727,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "v",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8729,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "r",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8731,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "s",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Vote)11289_storage": {
        "encoding": "inplace",
        "label": "struct IsolatedGovernance.Vote",
        "numberOfBytes": "192",
        "members": [
          {
            "astId": 11271,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(VoteStatus)8741"
          },
          {
            "astId": 11273,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "finalHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 11278,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voteHashOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 11281,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "expiredAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11284,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11288,
            "contract": "contracts/ronin/RoninGovernanceAdmin.sol:RoninGovernanceAdmin",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1709533477,
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "round(uint256)": {
        "notice": "chain id = 0 for global proposal"
      }
    }
  }
}